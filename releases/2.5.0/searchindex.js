Search.setIndex({"alltitles": {"1) Find layer groups": [[233, "find-layer-groups"]], "1. Creating a Keras model with subclass layers": [[197, "1.-Creating-a-Keras-model-with-subclass-layers"]], "1. Define Constants and Helper functions": [[208, "1.-Define-Constants-and-Helper-functions"]], "1. Example evaluation and training pipeline": [[200, "1.-Example-evaluation-and-training-pipeline"], [201, "1.-Example-evaluation-and-training-pipeline"], [209, "1.-Example-evaluation-and-training-pipeline"], [213, "1.-Example-evaluation-and-training-pipeline"]], "1. Example evaluation pipeline": [[188, "1.-Example-evaluation-pipeline"], [206, "1.-Example-evaluation-pipeline"]], "1. FP32 confidence checks": [[255, "fp32-confidence-checks"]], "1. Instantiate the example evaluation and training datasets": [[198, "1.-Instantiate-the-example-evaluation-and-training-datasets"], [199, "1.-Instantiate-the-example-evaluation-and-training-datasets"]], "1. Instantiate the example evaluation and training pipeline": [[195, "1.-Instantiate-the-example-evaluation-and-training-pipeline"]], "1. Instantiate the example evaluation method": [[192, "1.-Instantiate-the-example-evaluation-method"]], "1. Instantiate the example training and validation pipeline": [[189, "1.-Instantiate-the-example-training-and-validation-pipeline"], [190, "1.-Instantiate-the-example-training-and-validation-pipeline"], [191, "1.-Instantiate-the-example-training-and-validation-pipeline"], [193, "1.-Instantiate-the-example-training-and-validation-pipeline"], [194, "1.-Instantiate-the-example-training-and-validation-pipeline"], [202, "1.-Instantiate-the-example-training-and-validation-pipeline"], [203, "1.-Instantiate-the-example-training-and-validation-pipeline"], [204, "1.-Instantiate-the-example-training-and-validation-pipeline"], [205, "1.-Instantiate-the-example-training-and-validation-pipeline"], [207, "1.-Instantiate-the-example-training-and-validation-pipeline"], [210, "1.-Instantiate-the-example-training-and-validation-pipeline"], [211, "1.-Instantiate-the-example-training-and-validation-pipeline"], [212, "1.-Instantiate-the-example-training-and-validation-pipeline"]], "1. Run the notebook server": [[187, "run-the-notebook-server"]], "1. Sensitivity to weight and activation quantization": [[219, "sensitivity-to-weight-and-activation-quantization"]], "1. Versioning": [[248, "versioning"]], "1. defaults": [[251, "defaults"]], "1.13.0": [[254, "id33"]], "1.16.0": [[254, "id32"]], "1.16.1": [[254, "id31"]], "1.16.2": [[254, "id30"]], "1.17.0": [[254, "id29"]], "1.18.0": [[254, "id28"]], "1.19.1": [[254, "id27"]], "1.20.0": [[254, "id26"]], "1.21.0": [[254, "id25"]], "1.22.0": [[254, "id24"]], "1.22.1": [[254, "id23"]], "1.22.2": [[254, "id22"]], "1.23.0": [[254, "id21"]], "1.24.0": [[254, "id20"]], "1.25.0": [[254, "id19"]], "1.26.0": [[254, "id18"]], "1.27.0": [[254, "id17"]], "1.28.0": [[254, "id16"]], "1.29.0": [[254, "id15"]], "1.30.0": [[254, "id14"]], "1.31.0": [[254, "id13"]], "1.32.0": [[254, "id12"]], "1.33.0": [[254, "id11"]], "1.33.5": [[254, "id10"]], "1.34.0": [[254, "id9"]], "1.35.0": [[254, "id8"]], "1.35.1": [[254, "id7"]], "2) Perform sensitivity analysis (Phase 1)": [[233, "perform-sensitivity-analysis-phase-1"]], "2. Convert an FP32 PyTorch model to ONNX, simplify & then evaluate baseline FP32 accuracy": [[188, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [189, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [190, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [191, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"]], "2. Converting the Keras model with subclass layers to a Keras model with functional layers": [[197, "2.-Converting-the-Keras-model-with-subclass-layers-to-a-Keras-model-with-functional-layers"]], "2. Create the model in Keras": [[195, "2.-Create-the-model-in-Keras"]], "2. Define Constants and Datasets Prepare": [[195, "2.-Define-Constants-and-Datasets-Prepare"]], "2. Download the example notebooks and related code": [[187, "download-the-example-notebooks-and-related-code"]], "2. Load FP32 model": [[209, "2.-Load-FP32-model"]], "2. Load a pretrained FP32 model": [[194, "2.-Load-a-pretrained-FP32-model"], [200, "2.-Load-a-pretrained-FP32-model"], [208, "2.-Load-a-pretrained-FP32-model"]], "2. Load the FP32 model and evaluate the model to find the baseline FP32 accuracy": [[192, "2.-Load-the-FP32-model-and-evaluate-the-model-to-find-the-baseline-FP32-accuracy"]], "2. Load the model": [[213, "2.-Load-the-model"]], "2. Load the model and evaluate to get a baseline FP32 accuracy score": [[193, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [198, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [199, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [201, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [202, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [203, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [204, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [205, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [206, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [207, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [210, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [211, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [212, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"]], "2. Per-layer quantizer enablement": [[219, "per-layer-quantizer-enablement"]], "2. Version 0.6.1": [[248, "version-0-6-1"]], "2. Weights or activations quantization": [[255, "weights-or-activations-quantization"]], "2. params": [[251, "params"]], "2.0.0": [[254, "id6"]], "2.1. Encoding specification": [[248, "encoding-specification"]], "2.1.0": [[254, "id5"]], "2.2.0": [[254, "id4"]], "2.3.0": [[254, "id3"]], "2.4.0": [[254, "id2"]], "2.5.0": [[254, "id1"]], "3) Create a Pareto-front list (Phase 2)": [[233, "create-a-pareto-front-list-phase-2"]], "3. Apply QuantAnalyzer to the model": [[200, "3.-Apply-QuantAnalyzer-to-the-model"], [213, "3.-Apply-QuantAnalyzer-to-the-model"]], "3. Compress the model and fine-tune": [[203, "3.-Compress-the-model-and-fine-tune"], [204, "3.-Compress-the-model-and-fine-tune"], [205, "3.-Compress-the-model-and-fine-tune"]], "3. Create a quantization simulation model": [[188, "3.-Create-a-quantization-simulation-model"], [206, "3.-Create-a-quantization-simulation-model"]], "3. Create a quantization simulation model and Perform QAT": [[209, "3.-Create-a-quantization-simulation-model-and-Perform-QAT"]], "3. Create a quantization simulation model and determine quantized accuracy": [[189, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [190, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [191, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [193, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [198, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [199, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [201, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [202, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [207, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [210, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [211, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [212, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"]], "3. Determine the baseline FP32 accuracy": [[194, "3.-Determine-the-baseline-FP32-accuracy"]], "3. Fixing weight quantization": [[255, "fixing-weight-quantization"]], "3. Per-layer encodings min-max range": [[219, "per-layer-encodings-min-max-range"]], "3. Run AutoQuant": [[208, "3.-Run-AutoQuant"]], "3. Run the notebooks": [[187, "run-the-notebooks"]], "3. Showing similarities and differences between the original and converted models": [[197, "3.-Showing-similarities-and-differences-between-the-original-and-converted-models"]], "3. Train and evaluate the model": [[195, "3.-Train-and-evaluate-the-model"]], "3. Version 1.0.0": [[248, "version-1-0-0"]], "3. supergroups": [[251, "supergroups"]], "3.1. Encoding specification": [[248, "id1"]], "3.Create a quantization simulation model (with fake quantization ops inserted)": [[192, "3.Create-a-quantization-simulation-model-(with-fake-quantization-ops-inserted)"]], "4) Reduce Bit-width Convert Op Overhead (Phase 3)": [[233, "reduce-bit-width-convert-op-overhead-phase-3"]], "4. Apply Adaround": [[189, "4.-Apply-Adaround"], [193, "4.-Apply-Adaround"], [201, "4.-Apply-Adaround"], [207, "4.-Apply-Adaround"]], "4. Apply CLE": [[190, "4.-Apply-CLE"], [202, "4.-Apply-CLE"]], "4. Apply CLE and BC": [[210, "4.-Apply-CLE-and-BC"]], "4. Create a QuantizationSim Model": [[195, "4.-Create-a-QuantizationSim-Model"]], "4. Define constants and helper functions": [[194, "4.-Define-constants-and-helper-functions"]], "4. Discussing the limitations of the Keras Model Preparer": [[197, "4.-Discussing-the-limitations-of-the-Keras-Model-Preparer"]], "4. Fixing activation quantization": [[255, "fixing-activation-quantization"]], "4. Per-layer statistics histogram": [[219, "per-layer-statistics-histogram"]], "4. Perform BatchNorm Reestimation": [[209, "4.-Perform-BatchNorm-Reestimation"]], "4. Perform QAT": [[198, "4.-Perform-QAT"], [199, "4.-Perform-QAT"], [211, "4.-Perform-QAT"], [212, "4.-Perform-QAT"]], "4. Run AMP algorithm on the quantized model": [[188, "4.-Run-AMP-algorithm-on-the-quantized-model"], [192, "4.-Run-AMP-algorithm-on-the-quantized-model"], [206, "4.-Run-AMP-algorithm-on-the-quantized-model"]], "4. model_input": [[251, "model-input"]], "5. Apply AutoQuant": [[194, "5.-Apply-AutoQuant"]], "5. Export Model": [[195, "5.-Export-Model"], [209, "5.-Export-Model"]], "5. Per-layer mean-square-error loss": [[219, "per-layer-mean-square-error-loss"]], "5. Perform QAT": [[195, "5.-Perform-QAT"]], "5. Performing per-layer analysis": [[255, "performing-per-layer-analysis"]], "5. model_output": [[251, "model-output"]], "6. Visualizing sensitive layers": [[255, "visualizing-sensitive-layers"]], "7. Fixing individual quantizers": [[255, "fixing-individual-quantizers"]], "8. Quantize the model": [[255, "quantize-the-model"]], "AIMET API": [[0, null]], "AIMET Documentation": [[241, null]], "AIMET documentation versions": [[260, null]], "AIMET features": [[256, "aimet-features"], [258, null]], "AIMET installation in Docker": [[243, null]], "AIMET manual installation and setup": [[244, null]], "AIMET visualization": [[229, null]], "API": [[20, "api"], [172, "api"], [173, "api"], [176, "api"], [214, "api"], [215, "api"], [217, "api"], [218, "api"], [219, "api"], [220, "api"], [221, "api"], [222, "api"], [223, "api"], [224, "api"], [228, "api"], [230, "api"], [233, "api"], [235, "api"], [239, "api"], [246, "api"], [247, "api"], [250, "api"]], "API Call for Regular AMP": [[192, "API-Call-for-Regular-AMP"]], "API Reference": [[241, "api-reference"]], "API reference": [[175, "api-reference"], [178, "api-reference"]], "Accuracy improvement tools": [[258, "accuracy-improvement-tools"]], "AdaScale": [[215, null], [232, "adascale"]], "Adaptive Rounding (AdaRound)": [[189, null], [193, null], [207, null]], "Adaptive rounding": [[214, null], [232, "adaptive-rounding"]], "Affine quantizers": [[178, "affine-quantizers"]], "Alternative packages": [[242, "alternative-packages"]], "Analysis descriptions": [[219, "analysis-descriptions"]], "Analysis tools": [[216, null], [232, "analysis-tools"]], "Apply the profile": [[235, "apply-the-profile"]], "AutoQuant": [[194, null], [208, null]], "Automatic Mixed-Precision (AMP)": [[188, null], [192, null], [206, null]], "Automatic mixed precision": [[233, null], [234, "automatic-mixed-precision"]], "Automatic quantization": [[220, null], [232, "automatic-quantization"]], "Batch norm folding": [[222, null], [232, "batch-norm-folding"]], "Batch norm re-estimation": [[221, null], [232, "batch-norm-re-estimation"]], "Bias Correction": [[210, "Bias-Correction"]], "Browse the notebooks": [[187, "browse-the-notebooks"]], "Build a Docker image": [[243, "build-a-docker-image"]], "Building from source": [[242, "building-from-source"]], "CLE": [[210, "CLE"]], "Calibration": [[247, null]], "Calibration Callback": [[238, "calibration-callback"]], "Call AMP API": [[188, "Call-AMP-API"], [206, "Call-AMP-API"]], "Channel pruning": [[224, null]], "Channel pruning (CP)": [[227, "channel-pruning-cp"]], "Channel selection": [[224, "channel-selection"]], "Choose and install a package": [[242, "choose-and-install-a-package"]], "Choose to download or build an image": [[243, "choose-to-download-or-build-an-image"]], "Choose your AIMET variant": [[243, "choose-your-aimet-variant"]], "Code Examples": [[20, "code-examples"], [171, "code-examples"], [172, "code-examples"]], "Code example": [[224, "code-example"], [228, "code-example"], [230, "code-example"], [233, "code-example"]], "Compilation": [[257, "compilation"]], "Complementary techniques": [[214, "complementary-techniques"]], "Compressing using Spatial SVD": [[228, "compressing-using-spatial-svd"]], "Compression": [[227, null], [229, "compression"], [232, "compression"]], "Compression features Guidebook": [[225, null]], "Compression ratio selection": [[226, "compression-ratio-selection"], [227, "compression-ratio-selection"]], "Compression using Channel Pruning": [[224, "compression-using-channel-pruning"]], "Compression using Weight SVD": [[230, "compression-using-weight-svd"]], "Compute Encodings": [[188, "Compute-Encodings"], [192, "Compute-Encodings"], [206, "Compute-Encodings"]], "Computing encodings": [[175, "computing-encodings"]], "Configuration": [[175, "configuration"]], "Configuration file structure": [[251, "configuration-file-structure"]], "Context": [[214, "context"], [215, "context"], [217, "context"], [218, "context"], [219, "context"], [220, "context"], [221, "context"], [222, "context"], [223, "context"], [224, "context"], [228, "context"], [230, "context"], [233, "context"], [235, "context"], [237, "context"], [238, "context"], [239, "context"]], "Conversion": [[257, "conversion"]], "Create Quantization Sim Model": [[188, "Create-Quantization-Sim-Model"], [206, "Create-Quantization-Sim-Model"], [209, "Create-Quantization-Sim-Model"]], "Create QuantizationSimModel": [[238, "create-quantizationsimmodel"]], "Create the Quantization Sim Model": [[189, "Create-the-Quantization-Sim-Model"], [190, "Create-the-Quantization-Sim-Model"], [191, "Create-the-Quantization-Sim-Model"], [193, "Create-the-Quantization-Sim-Model"], [198, "Create-the-Quantization-Sim-Model"], [199, "Create-the-Quantization-Sim-Model"], [202, "Create-the-Quantization-Sim-Model"], [207, "Create-the-Quantization-Sim-Model"], [210, "Create-the-Quantization-Sim-Model"], [211, "Create-the-Quantization-Sim-Model"], [212, "Create-the-Quantization-Sim-Model"]], "Cross-Layer Equalization": [[190, null]], "Cross-Layer Equalization and Bias Correction": [[210, null]], "Cross-Layer Equalization with QuantSim": [[202, null]], "Cross-layer equalization": [[223, null], [232, "cross-layer-equalization"]], "Data type": [[248, "id5"]], "Dataset": [[188, "Dataset"], [189, "Dataset"], [190, "Dataset"], [191, "Dataset"], [192, "Dataset"], [193, "Dataset"], [194, "Dataset"], [195, "Dataset"], [198, "Dataset"], [199, "Dataset"], [200, "Dataset"], [201, "Dataset"], [202, "Dataset"], [203, "Dataset"], [204, "Dataset"], [205, "Dataset"], [206, "Dataset"], [207, "Dataset"], [208, "Dataset"], [209, "Dataset"], [210, "Dataset"], [211, "Dataset"], [212, "Dataset"], [213, "Dataset"]], "Debugging guidelines": [[256, "debugging-guidelines"]], "Debugging workflow": [[255, "debugging-workflow"]], "Define callback functions for AMP": [[188, "Define-callback-functions-for-AMP"], [206, "Define-callback-functions-for-AMP"]], "Deployment paths": [[258, "deployment-paths"]], "DequantizedTensor": [[158, null]], "Design": [[229, "design"]], "Determine quantization parameters (encodings)": [[249, "determine-quantization-parameters-encodings"]], "Docker install": [[242, "docker-install"]], "Download a prebuilt Docker image": [[243, "download-a-prebuilt-docker-image"]], "Encoding Format Specification": [[248, null]], "Encoding dictionary structure": [[248, "id3"]], "Encoding min/max ranges": [[200, "Encoding-min/max-ranges"], [213, "Encoding-min/max-ranges"]], "Encoding type": [[248, "id4"]], "Enum Definition": [[22, "enum-definition"]], "Environment setup": [[243, "environment-setup"]], "Example Notebooks": [[241, "example-notebooks"]], "Examples": [[187, null]], "Executing per-block quantization": [[246, "executing-per-block-quantization"]], "Execution": [[221, "execution"], [223, "execution"], [257, "execution"]], "Export API": [[258, "export-api"]], "Export tools": [[258, "export-tools"]], "Exported Encodings": [[249, "exported-encodings"]], "Exporting blockwise-quantized models": [[246, "exporting-blockwise-quantized-models"]], "FAQs": [[227, "faqs"]], "Fast AMP (AMP 2.0)": [[192, "Fast-AMP-(AMP-2.0)"]], "Feature Guide": [[241, "feature-guide"]], "FloatQuantizeDequantize": [[166, null]], "Fold Batch Norm layers": [[190, "Fold-Batch-Norm-layers"], [210, "Fold-Batch-Norm-layers"]], "Fold Batch Normalization layers": [[188, "Fold-Batch-Normalization-layers"], [189, "Fold-Batch-Normalization-layers"], [191, "Fold-Batch-Normalization-layers"], [193, "Fold-Batch-Normalization-layers"], [198, "Fold-Batch-Normalization-layers"], [199, "Fold-Batch-Normalization-layers"], [201, "Fold-Batch-Normalization-layers"], [202, "Fold-Batch-Normalization-layers"], [206, "Fold-Batch-Normalization-layers"], [207, "Fold-Batch-Normalization-layers"], [211, "Fold-Batch-Normalization-layers"], [212, "Fold-Batch-Normalization-layers"]], "Fold BatchNorm Layers": [[195, "Fold-BatchNorm-Layers"], [209, "Fold-BatchNorm-Layers"]], "For more information": [[189, "For-more-information"], [190, "For-more-information"], [191, "For-more-information"], [193, "For-more-information"], [194, "For-more-information"], [198, "For-more-information"], [199, "For-more-information"], [202, "For-more-information"], [203, "For-more-information"], [204, "For-more-information"], [205, "For-more-information"], [207, "For-more-information"], [208, "For-more-information"], [210, "For-more-information"], [211, "For-more-information"], [212, "For-more-information"]], "General guidelines": [[259, "general-guidelines"]], "Glossary": [[240, null], [241, "glossary"]], "Greedy compression ratio selection": [[226, null]], "Host install from scratch": [[242, "host-install-from-scratch"]], "How it works": [[226, "how-it-works"]], "How quantization simulation works": [[249, "how-quantization-simulation-works"]], "How to modify configuration file": [[251, "how-to-modify-configuration-file"]], "How to use aimet_torch 1.x": [[171, "how-to-use-aimet-torch-1-x"]], "How winnowing works": [[231, "how-winnowing-works"]], "Hyper parameters": [[214, "hyper-parameters"]], "Install AIMET packages": [[243, "install-aimet-packages"]], "Installation": [[241, "installation"], [242, null]], "Installing AIMET": [[243, "installing-aimet"], [244, "installing-aimet"], [245, "installing-aimet"]], "Interactive visualization": [[216, "interactive-visualization"], [217, null]], "Keras Model Preparer": [[197, null]], "Layer output generation": [[216, "layer-output-generation"], [218, null]], "Limitations": [[20, "limitations"], [172, "limitations"]], "LoRa Training": [[237, "lora-training"]], "Low power blockwise quantization": [[246, "low-power-blockwise-quantization"]], "MMP API options": [[235, "mmp-api-options"]], "Manual mixed precision": [[234, "manual-mixed-precision"], [235, null]], "Migration Process": [[171, "migration-process"]], "Migration guide": [[171, null]], "Min-Max (also called \u201cTF\u201d in AIMET)": [[249, "min-max-also-called-tf-in-aimet"]], "Mixed Precision Algorithm": [[233, "mixed-precision-algorithm"]], "Mixed precision": [[232, "mixed-precision"], [234, null], [258, "mixed-precision"]], "Model compression": [[227, "model-compression"]], "Model compression using channel pruning": [[203, null]], "Model compression using spatial SVD": [[204, null]], "Model compression using spatial SVD and channel pruning": [[205, null]], "Model guidelines": [[253, "model-guidelines"]], "Moving from QuantWrapper to Quantized Modules": [[171, "moving-from-quantwrapper-to-quantized-modules"]], "Moving from StaticGrid and LearnedGrid Quantizer to Affine and Float Quantizer": [[171, "moving-from-staticgrid-and-learnedgrid-quantizer-to-affine-and-float-quantizer"]], "Multi-GPU support": [[250, "multi-gpu-support"]], "NOTE": [[227, null]], "Next steps": [[189, "Next-steps"], [193, "Next-steps"], [198, "Next-steps"], [199, "Next-steps"], [202, "Next-steps"], [203, "Next-steps"], [204, "Next-steps"], [205, "Next-steps"], [207, "Next-steps"], [208, "Next-steps"], [210, "Next-steps"], [211, "Next-steps"], [212, "Next-steps"]], "Next: deploying the model": [[259, "next-deploying-the-model"]], "Old versions": [[242, "old-versions"]], "On-target inference": [[256, "on-target-inference"], [257, null]], "Optimization techniques": [[232, null]], "Optional techniques": [[227, "optional-techniques"]], "Overall flow": [[188, "Overall-flow"], [189, "Overall-flow"], [190, "Overall-flow"], [191, "Overall-flow"], [192, "Overall-flow"], [193, "Overall-flow"], [194, "Overall-flow"], [195, "Overall-flow"], [196, "Overall-flow"], [197, "Overall-flow"], [198, "Overall-flow"], [199, "Overall-flow"], [200, "Overall-flow"], [201, "Overall-flow"], [202, "Overall-flow"], [203, "Overall-flow"], [204, "Overall-flow"], [205, "Overall-flow"], [206, "Overall-flow"], [207, "Overall-flow"], [208, "Overall-flow"], [209, "Overall-flow"], [210, "Overall-flow"], [211, "Overall-flow"], [212, "Overall-flow"], [213, "Overall-flow"]], "Overview": [[226, "overview"], [227, "overview"], [229, "overview"], [231, "overview"], [249, "overview"], [251, "overview"]], "PDF of statistics": [[200, "PDF-of-statistics"], [213, "PDF-of-statistics"]], "PTQ": [[237, "ptq"]], "Parameters for AMP algorithm": [[188, "Parameters-for-AMP-algorithm"], [192, "Parameters-for-AMP-algorithm"], [206, "Parameters-for-AMP-algorithm"]], "Per-block quantization": [[178, "per-block-quantization"], [246, null]], "Per-channel quantization": [[178, "per-channel-quantization"]], "Per-layer MSE loss": [[200, "Per-layer-MSE-loss"], [213, "Per-layer-MSE-loss"]], "Per-layer analysis by enabling/disabling quantization wrappers": [[200, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"], [213, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"]], "Per-layer exploration": [[226, "per-layer-exploration"]], "Per-layer fine-tuning": [[227, "per-layer-fine-tuning"]], "Perform QAT": [[209, "Perform-QAT"]], "Post-training quantization": [[258, "post-training-quantization"]], "Prepare the evaluation callback function": [[195, "Prepare-the-evaluation-callback-function"]], "Prerequisites": [[214, "prerequisites"], [215, "prerequisites"], [219, "prerequisites"], [220, "prerequisites"], [221, "prerequisites"], [239, "prerequisites"], [242, "prerequisites"], [243, "prerequisites"], [244, "prerequisites"], [247, "prerequisites"], [250, "prerequisites"]], "Procedure": [[215, "procedure"], [220, "procedure"], [222, "procedure"], [224, "procedure"], [239, "procedure"], [259, "procedure"]], "PyPI": [[242, "pypi"]], "PyTorch model guidelines": [[253, null]], "QAT modes": [[250, "qat-modes"]], "QAT recommendations": [[250, "qat-recommendations"]], "QW-LoRa": [[236, "qw-lora"], [237, null]], "QWA-LoRa": [[236, "qwa-lora"], [238, null]], "Qualcomm\u00ae AI Engine Direct SDK": [[257, "qualcommreg-ai-engine-direct-sdk"]], "Qualcomm\u00ae AI hub": [[257, "qualcommreg-ai-hub"]], "Quant Analyzer": [[200, null], [213, null]], "QuantSim workflow": [[249, "quantsim-workflow"]], "Quantization": [[257, "quantization"]], "Quantization Simulation Guide": [[241, "quantization-simulation-guide"]], "Quantization analyzer": [[216, "quantization-analyzer"], [219, null]], "Quantization debugging guidelines": [[255, null]], "Quantization granularity": [[249, "quantization-granularity"]], "Quantization schemes": [[249, "quantization-schemes"]], "Quantization simulation": [[191, null], [258, "quantization-simulation"]], "Quantization simulation guide": [[249, null]], "Quantization user guide": [[256, null]], "Quantization workflow": [[256, "quantization-workflow"], [259, null]], "Quantization-Aware Training with BatchNorm Re-estimation": [[195, null], [209, null]], "Quantization-Aware Training with a Keras Transformer Model": [[196, null]], "Quantization-Aware training with range learning": [[199, null]], "Quantization-aware training": [[198, null], [211, null], [250, null], [258, "quantization-aware-training"]], "Quantization-aware training with range learning": [[212, null]], "QuantizationMixin": [[30, null]], "Quantize": [[161, null]], "Quantize and Update Base Model Weights": [[237, "quantize-and-update-base-model-weights"]], "QuantizeDequantize": [[162, null]], "Quantized LoRa": [[232, "quantized-lora"], [236, null]], "Quantized modules": [[175, "quantized-modules"]], "QuantizedAdaptiveAvgPool1d": [[31, null]], "QuantizedAdaptiveAvgPool2d": [[32, null]], "QuantizedAdaptiveAvgPool3d": [[33, null]], "QuantizedAdaptiveMaxPool1d": [[34, null]], "QuantizedAdaptiveMaxPool2d": [[35, null]], "QuantizedAdaptiveMaxPool3d": [[36, null]], "QuantizedAlphaDropout": [[37, null]], "QuantizedAvgPool1d": [[38, null]], "QuantizedAvgPool2d": [[39, null]], "QuantizedAvgPool3d": [[40, null]], "QuantizedBCELoss": [[41, null]], "QuantizedBCEWithLogitsLoss": [[42, null]], "QuantizedBatchNorm1d": [[43, null]], "QuantizedBatchNorm2d": [[44, null]], "QuantizedBatchNorm3d": [[45, null]], "QuantizedBilinear": [[46, null]], "QuantizedCELU": [[47, null]], "QuantizedCTCLoss": [[48, null]], "QuantizedChannelShuffle": [[49, null]], "QuantizedCircularPad1d": [[50, null]], "QuantizedCircularPad2d": [[51, null]], "QuantizedCircularPad3d": [[52, null]], "QuantizedConstantPad1d": [[53, null]], "QuantizedConstantPad2d": [[54, null]], "QuantizedConstantPad3d": [[55, null]], "QuantizedConv1d": [[56, null]], "QuantizedConv2d": [[57, null]], "QuantizedConv3d": [[58, null]], "QuantizedConvTranspose1d": [[59, null]], "QuantizedConvTranspose2d": [[60, null]], "QuantizedConvTranspose3d": [[61, null]], "QuantizedCosineEmbeddingLoss": [[62, null]], "QuantizedCosineSimilarity": [[63, null]], "QuantizedCrossEntropyLoss": [[64, null]], "QuantizedDropout": [[65, null]], "QuantizedDropout1d": [[66, null]], "QuantizedDropout2d": [[67, null]], "QuantizedDropout3d": [[68, null]], "QuantizedELU": [[69, null]], "QuantizedEmbedding": [[70, null]], "QuantizedEmbeddingBag": [[71, null]], "QuantizedFeatureAlphaDropout": [[72, null]], "QuantizedFlatten": [[73, null]], "QuantizedFold": [[74, null]], "QuantizedFractionalMaxPool2d": [[75, null]], "QuantizedFractionalMaxPool3d": [[76, null]], "QuantizedGELU": [[77, null]], "QuantizedGLU": [[78, null]], "QuantizedGRU": [[79, null]], "QuantizedGRUCell": [[80, null]], "QuantizedGaussianNLLLoss": [[81, null]], "QuantizedGroupNorm": [[82, null]], "QuantizedHardshrink": [[83, null]], "QuantizedHardsigmoid": [[84, null]], "QuantizedHardswish": [[85, null]], "QuantizedHardtanh": [[86, null]], "QuantizedHingeEmbeddingLoss": [[87, null]], "QuantizedHuberLoss": [[88, null]], "QuantizedInstanceNorm1d": [[89, null]], "QuantizedInstanceNorm2d": [[90, null]], "QuantizedInstanceNorm3d": [[91, null]], "QuantizedKLDivLoss": [[92, null]], "QuantizedL1Loss": [[93, null]], "QuantizedLPPool1d": [[94, null]], "QuantizedLPPool2d": [[95, null]], "QuantizedLSTM": [[96, null]], "QuantizedLSTMCell": [[97, null]], "QuantizedLayerNorm": [[98, null]], "QuantizedLeakyReLU": [[99, null]], "QuantizedLinear": [[100, null]], "QuantizedLocalResponseNorm": [[101, null]], "QuantizedLogSigmoid": [[102, null]], "QuantizedLogSoftmax": [[103, null]], "QuantizedMSELoss": [[104, null]], "QuantizedMarginRankingLoss": [[105, null]], "QuantizedMaxPool1d": [[106, null]], "QuantizedMaxPool2d": [[107, null]], "QuantizedMaxPool3d": [[108, null]], "QuantizedMaxUnpool1d": [[109, null]], "QuantizedMaxUnpool2d": [[110, null]], "QuantizedMaxUnpool3d": [[111, null]], "QuantizedMish": [[112, null]], "QuantizedMultiLabelMarginLoss": [[113, null]], "QuantizedMultiLabelSoftMarginLoss": [[114, null]], "QuantizedMultiMarginLoss": [[115, null]], "QuantizedNLLLoss": [[116, null]], "QuantizedNLLLoss2d": [[117, null]], "QuantizedPReLU": [[118, null]], "QuantizedPairwiseDistance": [[119, null]], "QuantizedPixelShuffle": [[120, null]], "QuantizedPixelUnshuffle": [[121, null]], "QuantizedPoissonNLLLoss": [[122, null]], "QuantizedRNN": [[123, null]], "QuantizedRNNCell": [[124, null]], "QuantizedRReLU": [[125, null]], "QuantizedReLU": [[126, null]], "QuantizedReLU6": [[127, null]], "QuantizedReflectionPad1d": [[128, null]], "QuantizedReflectionPad2d": [[129, null]], "QuantizedReflectionPad3d": [[130, null]], "QuantizedReplicationPad1d": [[131, null]], "QuantizedReplicationPad2d": [[132, null]], "QuantizedReplicationPad3d": [[133, null]], "QuantizedSELU": [[134, null]], "QuantizedSiLU": [[135, null]], "QuantizedSigmoid": [[136, null]], "QuantizedSmoothL1Loss": [[137, null]], "QuantizedSoftMarginLoss": [[138, null]], "QuantizedSoftmax": [[139, null]], "QuantizedSoftmax2d": [[140, null]], "QuantizedSoftmin": [[141, null]], "QuantizedSoftplus": [[142, null]], "QuantizedSoftshrink": [[143, null]], "QuantizedSoftsign": [[144, null]], "QuantizedTanh": [[145, null]], "QuantizedTanhshrink": [[146, null]], "QuantizedTensor": [[159, null]], "QuantizedTensorBase": [[160, null]], "QuantizedThreshold": [[147, null]], "QuantizedTripletMarginLoss": [[148, null]], "QuantizedTripletMarginWithDistanceLoss": [[149, null]], "QuantizedUnflatten": [[150, null]], "QuantizedUnfold": [[151, null]], "QuantizedUpsample": [[152, null]], "QuantizedUpsamplingBilinear2d": [[153, null]], "QuantizedUpsamplingNearest2d": [[154, null]], "QuantizedZeroPad1d": [[155, null]], "QuantizedZeroPad2d": [[156, null]], "QuantizedZeroPad3d": [[157, null]], "Quantizer Args structure": [[248, "id6"]], "Quantizers": [[178, "quantizers"]], "Quantsim and Adaround - Per Channel Quantization (PCQ)": [[201, null]], "Quick Start": [[241, "quick-start"]], "Quick Start (PyTorch)": [[245, null]], "Rank Rounding": [[227, "rank-rounding"]], "Re-estimate BatchNorm Statistics": [[209, "Re-estimate-BatchNorm-Statistics"]], "References": [[227, "references"]], "Regular AMP": [[192, "Regular-AMP"]], "Release Notes": [[241, "release-notes"]], "Release notes": [[254, null]], "Run QWA-LoRa": [[238, "run-qwa-lora"]], "Running a quick example": [[245, "running-a-quick-example"]], "Running the notebooks": [[187, "running-the-notebooks"]], "Runtime configuration": [[249, "runtime-configuration"], [251, null]], "Sequential MSE": [[232, "sequential-mse"], [239, null]], "Set model input precision": [[235, "set-model-input-precision"]], "Set model output precision": [[235, "set-model-output-precision"]], "Set precision based on layer type": [[235, "set-precision-based-on-layer-type"]], "Set precision of a leaf layer": [[235, "set-precision-of-a-leaf-layer"]], "Set precision of a non-leaf layer": [[235, "set-precision-of-a-non-leaf-layer"]], "Setup": [[214, "setup"], [215, "setup"], [221, "setup"], [223, "setup"], [224, "setup"], [228, "setup"], [230, "setup"], [235, "setup"], [237, "setup"], [238, "setup"], [239, "setup"]], "Signal-to-Quantization-Noise": [[249, "signal-to-quantization-noise"]], "Simulate quantization noise": [[249, "simulate-quantization-noise"]], "Spatial SVD": [[227, "spatial-svd"], [228, null]], "Start the docker container": [[243, "start-the-docker-container"]], "Starting a Bokeh server session": [[229, "starting-a-bokeh-server-session"]], "Step 1": [[214, "step-1"], [215, "step-1"], [220, "step-1"], [221, "step-1"], [222, "step-1"], [233, "step-1"], [239, "step-1"]], "Step 1 Importing libraries": [[219, "step-1-importing-libraries"]], "Step 1: Creating a QuantSim model": [[247, "step-1-creating-a-quantsim-model"]], "Step 1: Importing the API": [[218, "step-1-importing-the-api"]], "Step 1: Setup": [[250, "step-1-setup"]], "Step 1: Trying FP16 precision (no quantization)": [[259, "step-1-trying-fp16-precision-no-quantization"]], "Step 2": [[214, "step-2"], [215, "step-2"], [220, "step-2"], [221, "step-2"], [222, "step-2"], [233, "step-2"], [239, "step-2"]], "Step 2 Preparing calibration callback": [[219, "step-2-preparing-calibration-callback"]], "Step 2: Computing the initial quantization parameters": [[250, "step-2-computing-the-initial-quantization-parameters"]], "Step 2: Creating a calibration callback": [[247, "step-2-creating-a-calibration-callback"]], "Step 2: Loading a model": [[218, "step-2-loading-a-model"]], "Step 2: Verifying W16A16 quantization": [[259, "step-2-verifying-w16a16-quantization"]], "Step 3": [[214, "step-3"], [215, "step-3"], [220, "step-3"], [221, "step-3"], [222, "step-3"], [239, "step-3"]], "Step 3 Preparing evaluation callback": [[219, "step-3-preparing-evaluation-callback"]], "Step 3. Reducing precision": [[259, "step-3-reducing-precision"]], "Step 3: Calibrate the quantized model": [[250, "step-3-calibrate-the-quantized-model"]], "Step 3: Computing encodings": [[247, "step-3-computing-encodings"]], "Step 3: Obtaining inputs": [[218, "step-3-obtaining-inputs"]], "Step 4": [[214, "step-4"], [215, "step-4"], [220, "step-4"], [221, "step-4"], [239, "step-4"]], "Step 4 Preparing model": [[219, "step-4-preparing-model"]], "Step 4. Restoring accuracy": [[259, "step-4-restoring-accuracy"]], "Step 4: Evaluating the model": [[250, "step-4-evaluating-the-model"]], "Step 4: Evaluation": [[247, "step-4-evaluation"]], "Step 4: Generating layer outputs": [[218, "step-4-generating-layer-outputs"]], "Step 5": [[215, "step-5"], [220, "step-5"], [239, "step-5"]], "Step 5 Creating QuantAnalyzer": [[219, "step-5-creating-quantanalyzer"]], "Step 5: Exporting the model": [[247, "step-5-exporting-the-model"], [250, "step-5-exporting-the-model"]], "Step 6": [[220, "step-6"]], "Step 6 Running the analysis": [[219, "step-6-running-the-analysis"]], "Step 7": [[220, "step-7"]], "Summary": [[192, "Summary"], [195, "Summary"], [197, "Summary"], [201, "Summary"], [209, "Summary"]], "Supported precisions for on-target inference": [[258, "supported-precisions-for-on-target-inference"]], "Techniques": [[210, "Techniques"]], "TensorFlow model guidelines": [[252, null]], "Tested platform": [[245, "tested-platform"]], "Top level structure": [[248, "id2"]], "Training Callback": [[238, "training-callback"]], "Use Case": [[227, "use-case"]], "Use Cases": [[233, "use-cases"]], "User Guide": [[241, "user-guide"]], "User flow": [[176, "user-flow"]], "Verifying the installation": [[242, "verifying-the-installation"], [245, "verifying-the-installation"]], "Visualization Tools": [[168, "visualization-tools"]], "Visualizing compression ratios": [[229, "visualizing-compression-ratios"]], "Weight SVD": [[227, "weight-svd"], [230, null]], "Weight reconstruction": [[224, "weight-reconstruction"]], "What this notebook is not": [[188, "What-this-notebook-is-not"], [192, "What-this-notebook-is-not"], [200, "What-this-notebook-is-not"], [201, "What-this-notebook-is-not"], [206, "What-this-notebook-is-not"], [209, "What-this-notebook-is-not"], [213, "What-this-notebook-is-not"]], "Winnowing": [[224, "winnowing"], [231, null], [231, "id1"]], "Workflow": [[214, "workflow"], [214, "id2"], [215, "workflow"], [217, "workflow"], [218, "workflow"], [219, "workflow"], [220, "workflow"], [221, "workflow"], [222, "workflow"], [223, "workflow"], [224, "workflow"], [228, "workflow"], [230, "workflow"], [233, "workflow"], [235, "workflow"], [237, "workflow"], [238, "workflow"], [239, "workflow"], [247, "workflow"], [250, "workflow"]], "aimet_onnx": [[0, "aimet-onnx"]], "aimet_onnx API": [[5, null]], "aimet_onnx.adaround": [[1, null]], "aimet_onnx.batch_norm_fold": [[3, null]], "aimet_onnx.cross_layer_equalization": [[4, null]], "aimet_onnx.layer_output_utils": [[6, null]], "aimet_onnx.mixed_precision": [[2, null]], "aimet_onnx.quant_analyzer": [[8, null]], "aimet_onnx.quantsim": [[9, null]], "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights": [[7, null]], "aimet_onnx.seq_mse": [[10, null]], "aimet_tensorflow": [[0, "aimet-tensorflow"]], "aimet_tensorflow API": [[18, null]], "aimet_tensorflow.adaround": [[11, null]], "aimet_tensorflow.auto_quant_v2": [[13, null]], "aimet_tensorflow.batch_norm_fold": [[15, null]], "aimet_tensorflow.compress": [[17, null]], "aimet_tensorflow.cross_layer_equalization": [[16, null]], "aimet_tensorflow.keras.bn_reestimation": [[14, null]], "aimet_tensorflow.layer_output_utils": [[19, null]], "aimet_tensorflow.mixed_precision": [[12, null]], "aimet_tensorflow.model_preparer": [[20, null]], "aimet_tensorflow.quant_analyzer": [[21, null]], "aimet_tensorflow.quantsim": [[22, null]], "aimet_torch": [[0, "aimet-torch"], [167, "aimet-torch"]], "aimet_torch 1.x vs aimet_torch 2": [[171, "aimet-torch-1-x-vs-aimet-torch-2"]], "aimet_torch API": [[167, null]], "aimet_torch.adaround": [[23, null]], "aimet_torch.auto_quant": [[25, null]], "aimet_torch.batch_norm_fold": [[27, null]], "aimet_torch.bn_reestimation": [[26, null]], "aimet_torch.compress": [[29, null]], "aimet_torch.cross_layer_equalization": [[28, null]], "aimet_torch.experimental.adascale": [[24, null]], "aimet_torch.layer_output_utils": [[169, null]], "aimet_torch.mixed_precision": [[174, null]], "aimet_torch.model_preparer": [[172, null]], "aimet_torch.model_validator": [[173, null]], "aimet_torch.nn": [[175, null]], "aimet_torch.peft": [[176, null]], "aimet_torch.quant_analyzer": [[177, null]], "aimet_torch.quantization": [[178, null]], "aimet_torch.quantsim": [[179, null]], "aimet_torch.quantsim.config_utils": [[170, null]], "aimet_torch.seq_mse": [[180, null]], "aimet_torch.v1": [[167, "aimet-torch-v1"]], "aimet_torch.v1.adaround": [[181, null]], "aimet_torch.v1.auto_quant": [[183, null]], "aimet_torch.v1.mixed_precision": [[182, null]], "aimet_torch.v1.quant_analyzer": [[184, null]], "aimet_torch.v1.quantsim": [[185, null]], "aimet_torch.v1.seq_mse": [[186, null]], "aimet_torch.visualization_tools": [[168, null]], "dequantize": [[163, null]], "quantize": [[164, null]], "quantize_dequantize": [[165, null]]}, "docnames": ["apiref/index", "apiref/onnx/adaround", "apiref/onnx/amp", "apiref/onnx/bnf", "apiref/onnx/cle", "apiref/onnx/index", "apiref/onnx/layer_output_generation", "apiref/onnx/lpbq", "apiref/onnx/quant_analyzer", "apiref/onnx/quantsim", "apiref/onnx/seq_mse", "apiref/tensorflow/adaround", "apiref/tensorflow/amp", "apiref/tensorflow/autoquant", "apiref/tensorflow/bn", "apiref/tensorflow/bnf", "apiref/tensorflow/cle", "apiref/tensorflow/compress", "apiref/tensorflow/index", "apiref/tensorflow/layer_output_generation", "apiref/tensorflow/model_preparer", "apiref/tensorflow/quant_analyzer", "apiref/tensorflow/quantsim", "apiref/torch/adaround", "apiref/torch/adascale", "apiref/torch/autoquant", "apiref/torch/bn", "apiref/torch/bnf", "apiref/torch/cle", "apiref/torch/compress", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d", "apiref/torch/generated/aimet_torch.nn.QuantizedELU", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten", "apiref/torch/generated/aimet_torch.nn.QuantizedFold", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMish", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize", "apiref/torch/index", "apiref/torch/interactive_visualization", "apiref/torch/layer_output_generation", "apiref/torch/lpbq", "apiref/torch/migration_guide", "apiref/torch/model_preparer", "apiref/torch/model_validator", "apiref/torch/mp", "apiref/torch/nn", "apiref/torch/peft_lora", "apiref/torch/quant_analyzer", "apiref/torch/quantization", "apiref/torch/quantsim", "apiref/torch/seq_mse", "apiref/torch/v1/adaround", "apiref/torch/v1/amp", "apiref/torch/v1/autoquant", "apiref/torch/v1/quant_analyzer", "apiref/torch/v1/quantsim", "apiref/torch/v1/seq_mse", "examples/index", "examples/onnx/quantization/AMP", "examples/onnx/quantization/adaround", "examples/onnx/quantization/cle", "examples/onnx/quantization/quantsim", "examples/tensorflow/quantization/keras/KerasAMP", "examples/tensorflow/quantization/keras/adaround", "examples/tensorflow/quantization/keras/autoquant", "examples/tensorflow/quantization/keras/bn_reestimation", "examples/tensorflow/quantization/keras/keras_transformer_qat", "examples/tensorflow/quantization/keras/model_preparer", "examples/tensorflow/quantization/keras/qat", "examples/tensorflow/quantization/keras/qat_range_learning", "examples/tensorflow/quantization/keras/quant_analyzer", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq", "examples/tensorflow/quantization/keras/quantsim_cle", "examples/torch/compression/channel_pruning", "examples/torch/compression/spatial_svd", "examples/torch/compression/spatial_svd_channel_pruning", "examples/torch/quantization/AMP", "examples/torch/quantization/adaround", "examples/torch/quantization/autoquant", "examples/torch/quantization/bn_reestimation", "examples/torch/quantization/cle_bc", "examples/torch/quantization/qat", "examples/torch/quantization/qat_range_learning", "examples/torch/quantization/quant_analyzer", "featureguide/adaround", "featureguide/adascale", "featureguide/analysis tools/index", "featureguide/analysis tools/interactive_visualization", "featureguide/analysis tools/layer_output_generation", "featureguide/analysis tools/quant_analyzer", "featureguide/autoquant", "featureguide/bn", "featureguide/bnf", "featureguide/cle", "featureguide/compression/channel_pruning", "featureguide/compression/feature_guidebook", "featureguide/compression/greedy_compression_ratio_selection", "featureguide/compression/index", "featureguide/compression/spatial_svd", "featureguide/compression/visualization_compression", "featureguide/compression/weight_svd", "featureguide/compression/winnowing", "featureguide/index", "featureguide/mixed precision/amp", "featureguide/mixed precision/index", "featureguide/mixed precision/mmp", "featureguide/quantized LoRa/index", "featureguide/quantized LoRa/qw_lora", "featureguide/quantized LoRa/qwa_lora", "featureguide/seq_mse", "glossary", "index", "install/index", "install/install_docker", "install/install_host", "install/quick-start", "quantsim/blockwise", "quantsim/calibration", "quantsim/encoding_spec", "quantsim/index", "quantsim/qat", "quantsim/runtime_config", "quantsim/tensorflow/model_guidelines", "quantsim/torch/model_guidelines", "release_notes", "userguide/debugging_guidelines", "userguide/index", "userguide/on_target_inference", "userguide/quantization_tools", "userguide/quantization_workflow", "versions"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["apiref/index.rst", "apiref/onnx/adaround.rst", "apiref/onnx/amp.rst", "apiref/onnx/bnf.rst", "apiref/onnx/cle.rst", "apiref/onnx/index.rst", "apiref/onnx/layer_output_generation.rst", "apiref/onnx/lpbq.rst", "apiref/onnx/quant_analyzer.rst", "apiref/onnx/quantsim.rst", "apiref/onnx/seq_mse.rst", "apiref/tensorflow/adaround.rst", "apiref/tensorflow/amp.rst", "apiref/tensorflow/autoquant.rst", "apiref/tensorflow/bn.rst", "apiref/tensorflow/bnf.rst", "apiref/tensorflow/cle.rst", "apiref/tensorflow/compress.rst", "apiref/tensorflow/index.rst", "apiref/tensorflow/layer_output_generation.rst", "apiref/tensorflow/model_preparer.rst", "apiref/tensorflow/quant_analyzer.rst", "apiref/tensorflow/quantsim.rst", "apiref/torch/adaround.rst", "apiref/torch/adascale.rst", "apiref/torch/autoquant.rst", "apiref/torch/bn.rst", "apiref/torch/bnf.rst", "apiref/torch/cle.rst", "apiref/torch/compress.rst", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d.rst", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase.rst", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize.rst", "apiref/torch/index.rst", "apiref/torch/interactive_visualization.rst", "apiref/torch/layer_output_generation.rst", "apiref/torch/lpbq.rst", "apiref/torch/migration_guide.rst", "apiref/torch/model_preparer.rst", "apiref/torch/model_validator.rst", "apiref/torch/mp.rst", "apiref/torch/nn.rst", "apiref/torch/peft_lora.rst", "apiref/torch/quant_analyzer.rst", "apiref/torch/quantization.rst", "apiref/torch/quantsim.rst", "apiref/torch/seq_mse.rst", "apiref/torch/v1/adaround.rst", "apiref/torch/v1/amp.rst", "apiref/torch/v1/autoquant.rst", "apiref/torch/v1/quant_analyzer.rst", "apiref/torch/v1/quantsim.rst", "apiref/torch/v1/seq_mse.rst", "examples/index.rst", "examples/onnx/quantization/AMP.ipynb", "examples/onnx/quantization/adaround.ipynb", "examples/onnx/quantization/cle.ipynb", "examples/onnx/quantization/quantsim.ipynb", "examples/tensorflow/quantization/keras/KerasAMP.ipynb", "examples/tensorflow/quantization/keras/adaround.ipynb", "examples/tensorflow/quantization/keras/autoquant.ipynb", "examples/tensorflow/quantization/keras/bn_reestimation.ipynb", "examples/tensorflow/quantization/keras/keras_transformer_qat.ipynb", "examples/tensorflow/quantization/keras/model_preparer.ipynb", "examples/tensorflow/quantization/keras/qat.ipynb", "examples/tensorflow/quantization/keras/qat_range_learning.ipynb", "examples/tensorflow/quantization/keras/quant_analyzer.ipynb", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq.ipynb", "examples/tensorflow/quantization/keras/quantsim_cle.ipynb", "examples/torch/compression/channel_pruning.ipynb", "examples/torch/compression/spatial_svd.ipynb", "examples/torch/compression/spatial_svd_channel_pruning.ipynb", "examples/torch/quantization/AMP.ipynb", "examples/torch/quantization/adaround.ipynb", "examples/torch/quantization/autoquant.ipynb", "examples/torch/quantization/bn_reestimation.ipynb", "examples/torch/quantization/cle_bc.ipynb", "examples/torch/quantization/qat.ipynb", "examples/torch/quantization/qat_range_learning.ipynb", "examples/torch/quantization/quant_analyzer.ipynb", "featureguide/adaround.rst", "featureguide/adascale.rst", "featureguide/analysis tools/index.rst", "featureguide/analysis tools/interactive_visualization.rst", "featureguide/analysis tools/layer_output_generation.rst", "featureguide/analysis tools/quant_analyzer.rst", "featureguide/autoquant.rst", "featureguide/bn.rst", "featureguide/bnf.rst", "featureguide/cle.rst", "featureguide/compression/channel_pruning.rst", "featureguide/compression/feature_guidebook.rst", "featureguide/compression/greedy_compression_ratio_selection.rst", "featureguide/compression/index.rst", "featureguide/compression/spatial_svd.rst", "featureguide/compression/visualization_compression.rst", "featureguide/compression/weight_svd.rst", "featureguide/compression/winnowing.rst", "featureguide/index.rst", "featureguide/mixed precision/amp.rst", "featureguide/mixed precision/index.rst", "featureguide/mixed precision/mmp.rst", "featureguide/quantized LoRa/index.rst", "featureguide/quantized LoRa/qw_lora.rst", "featureguide/quantized LoRa/qwa_lora.rst", "featureguide/seq_mse.rst", "glossary.rst", "index.rst", "install/index.rst", "install/install_docker.rst", "install/install_host.rst", "install/quick-start.rst", "quantsim/blockwise.rst", "quantsim/calibration.rst", "quantsim/encoding_spec.rst", "quantsim/index.rst", "quantsim/qat.rst", "quantsim/runtime_config.rst", "quantsim/tensorflow/model_guidelines.rst", "quantsim/torch/model_guidelines.rst", "release_notes.rst", "userguide/debugging_guidelines.rst", "userguide/index.rst", "userguide/on_target_inference.rst", "userguide/quantization_tools.rst", "userguide/quantization_workflow.rst", "versions.rst"], "indexentries": {"accelerator": [[240, "term-Accelerator", true]], "accuracy": [[240, "term-Accuracy", true]], "activation": [[240, "term-Activation", true]], "activation quantization": [[240, "term-Activation-Quantization", true]], "adaptermetadata (class in aimet_torch.peft)": [[176, "aimet_torch.peft.AdapterMetaData", false]], "adaround": [[240, "term-AdaRound", true]], "adaroundparameters (class in aimet_onnx.adaround.adaround_weight)": [[1, "aimet_onnx.adaround.adaround_weight.AdaroundParameters", false], [214, "aimet_onnx.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_tensorflow.keras.adaround_weight)": [[11, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false], [214, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.adaround.adaround_weight)": [[23, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false], [214, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.v1.adaround.adaround_weight)": [[181, "aimet_torch.v1.adaround.adaround_weight.AdaroundParameters", false]], "add_check() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.add_check", false]], "ai model efficiency toolkit": [[240, "term-AI-Model-Efficiency-Toolkit", true]], "aimet": [[240, "term-AIMET", true]], "analyze() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false], [219, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.analyze", false]], "apply() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false], [235, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false]], "apply_adaround() (in module aimet_onnx.adaround.adaround_weight.adaround)": [[1, "aimet_onnx.adaround.adaround_weight.Adaround.apply_adaround", false], [214, "aimet_onnx.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_tensorflow.keras.adaround_weight.adaround)": [[11, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false], [214, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.adaround.adaround_weight.adaround)": [[23, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false], [214, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.v1.adaround.adaround_weight.adaround)": [[181, "aimet_torch.v1.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adascale() (in module aimet_torch.experimental.adascale)": [[24, "aimet_torch.experimental.adascale.apply_adascale", false], [215, "aimet_torch.experimental.adascale.apply_adascale", false]], "apply_seq_mse() (in module aimet_onnx.sequential_mse.seq_mse.sequentialmse)": [[10, "aimet_onnx.sequential_mse.seq_mse.SequentialMse.apply_seq_mse", false], [239, "aimet_onnx.sequential_mse.seq_mse.SequentialMse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.seq_mse)": [[180, "aimet_torch.seq_mse.apply_seq_mse", false], [239, "aimet_torch.seq_mse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.v1.seq_mse)": [[186, "aimet_torch.v1.seq_mse.apply_seq_mse", false]], "auto (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false], [228, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false]], "autoquant": [[240, "term-AutoQuant", true]], "autoquantwithautomixedprecision (class in aimet_tensorflow.keras.auto_quant_v2)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false]], "batch normalization": [[240, "term-Batch-Normalization", true]], "batch normalization folding (bn folding)": [[240, "term-Batch-Normalization-Folding-BN-Folding", true]], "bitwidth (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.bitwidth", false]], "bn": [[240, "term-BN", true]], "callbackfunc (class in aimet_common.defs)": [[2, "aimet_common.defs.CallbackFunc", false], [12, "aimet_common.defs.CallbackFunc", false], [174, "aimet_common.defs.CallbackFunc", false], [182, "aimet_common.defs.CallbackFunc", false], [233, "aimet_common.defs.CallbackFunc", false], [233, "id0", false], [233, "id1", false]], "callbackfunc (class in aimet_common.utils)": [[177, "aimet_common.utils.CallbackFunc", false], [184, "aimet_common.utils.CallbackFunc", false], [219, "aimet_common.utils.CallbackFunc", false]], "check_model_sensitivity_to_quantization() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "check_model_sensitivity_to_quantization() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "choose_fast_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false], [233, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false]], "choose_mixed_precision() (in module aimet_onnx.mixed_precision)": [[2, "aimet_onnx.mixed_precision.choose_mixed_precision", false], [233, "aimet_onnx.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false], [233, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.mixed_precision)": [[174, "aimet_torch.mixed_precision.choose_mixed_precision", false], [233, "aimet_torch.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.v1.mixed_precision)": [[182, "aimet_torch.v1.mixed_precision.choose_mixed_precision", false]], "clone() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.clone", false]], "cnn": [[240, "term-CNN", true]], "compress_model() (aimet_tensorflow.keras.compress.modelcompressor static method)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false], [228, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false]], "compression": [[240, "term-Compression", true]], "compute_encodings() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.compute_encodings", false]], "compute_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.compute_encodings", false]], "compute_encodings() (aimet_torch.quantizationsimmodel method)": [[179, "aimet_torch.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[185, "aimet_torch.v1.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (in module aimet_onnx)": [[9, "aimet_onnx.compute_encodings", false]], "convolutional layer": [[240, "term-Convolutional-Layer", true]], "convolutional neural network": [[240, "term-Convolutional-Neural-Network", true]], "dequantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.dequantize", false]], "dequantize() (in module aimet_torch.quantization.affine)": [[163, "aimet_torch.quantization.affine.dequantize", false]], "dequantizedtensor (class in aimet_torch.quantization)": [[158, "aimet_torch.quantization.DequantizedTensor", false]], "detach() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.detach", false]], "device": [[240, "term-Device", true]], "disable_lora_adapters() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.disable_lora_adapters", false]], "dlf": [[240, "term-DLF", true]], "dynamic layer fusion": [[240, "term-Dynamic-Layer-Fusion", true]], "edge device": [[240, "term-Edge-device", true]], "enable_adapter_and_load_weights() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.enable_adapter_and_load_weights", false]], "enable_per_layer_mse_loss() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false], [219, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false]], "encoding": [[240, "term-Encoding", true]], "equalize_model() (in module aimet_onnx.cross_layer_equalization)": [[4, "aimet_onnx.cross_layer_equalization.equalize_model", false], [223, "aimet_onnx.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_tensorflow.keras.cross_layer_equalization)": [[16, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false], [223, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_torch.cross_layer_equalization)": [[28, "aimet_torch.cross_layer_equalization.equalize_model", false], [223, "aimet_torch.cross_layer_equalization.equalize_model", false]], "evalcallbackfactory (class in aimet_onnx.amp.mixed_precision_algo)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false], [233, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false]], "evalcallbackfactory (class in aimet_torch.amp.mixed_precision_algo)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [182, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [233, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false]], "exponent_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.exponent_bits", false]], "export() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.export", false]], "export() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.export", false]], "export() (aimet_torch.quantizationsimmodel method)": [[179, "aimet_torch.QuantizationSimModel.export", false]], "export() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[185, "aimet_torch.v1.quantsim.QuantizationSimModel.export", false]], "export_adapter_weights() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.export_adapter_weights", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_mse_loss() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_mse_loss() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_stats_histogram() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "export_per_layer_stats_histogram() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "floatquantizedequantize (class in aimet_torch.quantization.float)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize", false]], "fold_all_batch_norms() (in module aimet_tensorflow.keras.batch_norm_fold)": [[15, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false], [222, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms() (in module aimet_torch.batch_norm_fold)": [[27, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false], [222, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms_to_scale() (in module aimet_tensorflow.keras.batch_norm_fold)": [[14, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false], [221, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false]], "fold_all_batch_norms_to_weight() (in module aimet_onnx.batch_norm_fold)": [[3, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false], [222, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false]], "forward() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.forward", false]], "forward() (aimet_torch.nn.quantizedlinear method)": [[100, "aimet_torch.nn.QuantizedLinear.forward", false]], "forward() (aimet_torch.quantization.affine.quantize method)": [[161, "aimet_torch.quantization.affine.Quantize.forward", false]], "forward() (aimet_torch.quantization.affine.quantizedequantize method)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize.forward", false]], "forward() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.forward", false]], "forward_fn() (aimet_torch.seq_mse.seqmseparams method)": [[180, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false], [239, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false]], "forward_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[186, "aimet_torch.v1.seq_mse.SeqMseParams.forward_fn", false]], "fp32": [[240, "term-FP32", true]], "freeze_base_model() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.freeze_base_model", false]], "freeze_base_model_activation_quantizers() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.freeze_base_model_activation_quantizers", false]], "freeze_base_model_param_quantizers() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.freeze_base_model_param_quantizers", false]], "from_encodings() (aimet_torch.quantization.float.floatquantizedequantize class method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.from_encodings", false]], "from_module() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.from_module", false]], "from_str() (aimet_common.defs.quantscheme class method)": [[9, "aimet_common.defs.QuantScheme.from_str", false], [22, "aimet_common.defs.QuantScheme.from_str", false], [179, "aimet_common.defs.QuantScheme.from_str", false], [185, "aimet_common.defs.QuantScheme.from_str", false]], "generate_layer_outputs() (aimet_onnx.layer_output_utils.layeroutpututil method)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [218, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_tensorflow.keras.layer_output_utils.layeroutpututil method)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [218, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_torch.layer_output_utils.layeroutpututil method)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [218, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "get_activation_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false]], "get_active_param_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false]], "get_active_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [233, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [233, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.get_default_kernel", false]], "get_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_encodings", false]], "get_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_extra_state", false]], "get_fp_lora_layer() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.get_fp_lora_layer", false]], "get_input_quantizer_modules() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [233, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false]], "get_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.get_kernel", false]], "get_loss_fn() (aimet_torch.seq_mse.seqmseparams method)": [[180, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false], [239, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false]], "get_loss_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[186, "aimet_torch.v1.seq_mse.SeqMseParams.get_loss_fn", false]], "get_param_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false]], "get_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false]], "get_quantized_lora_layer() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.get_quantized_lora_layer", false]], "greedyselectionparameters (class in aimet_common.defs)": [[17, "aimet_common.defs.GreedySelectionParameters", false], [228, "aimet_common.defs.GreedySelectionParameters", false]], "implements() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.implements", false]], "inference": [[240, "term-Inference", true]], "input_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.input_quantizers", false]], "int8": [[240, "term-INT8", true]], "is_bfloat16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_bfloat16", false]], "is_float16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_float16", false]], "kl divergence": [[240, "term-KL-Divergence", true]], "layer": [[240, "term-Layer", true]], "layer-wise quantization": [[240, "term-Layer-wise-quantization", true]], "layeroutpututil (class in aimet_onnx.layer_output_utils)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil", false], [218, "aimet_onnx.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_tensorflow.keras.layer_output_utils)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false], [218, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil", false], [218, "aimet_torch.layer_output_utils.LayerOutputUtil", false]], "load_checkpoint() (aimet_torch.v1.quantsim method)": [[185, "aimet_torch.v1.quantsim.load_checkpoint", false]], "load_state_dict() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.load_state_dict", false]], "lookup_quantizer() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup static method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false]], "lora mobilenet": [[240, "term-LoRA-MobileNet", true]], "mantissa_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.mantissa_bits", false]], "manual (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false], [228, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false]], "mixedprecisionconfigurator (class in aimet_torch.v2.mixed_precision)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false], [235, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false]], "model": [[240, "term-Model", true]], "modelcompressor (class in aimet_tensorflow.keras.compress)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor", false], [228, "aimet_tensorflow.keras.compress.ModelCompressor", false]], "modelvalidator (class in aimet_torch.model_validator.model_validator)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator", false]], "namingscheme (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.NamingScheme", false], [218, "aimet_torch.layer_output_utils.NamingScheme", false]], "neural network compression framework": [[240, "term-Neural-Network-Compression-Framework", true]], "new_empty() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.new_empty", false]], "nncf": [[240, "term-NNCF", true]], "node": [[240, "term-Node", true]], "normalization": [[240, "term-Normalization", true]], "onnx": [[240, "term-ONNX", true]], "onnx (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false], [218, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false]], "open neural network exchange": [[240, "term-Open-Neural-Network-Exchange", true]], "optimize() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false]], "output_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.output_quantizers", false]], "param_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.param_quantizers", false]], "peftquantutils (class in aimet_torch.peft)": [[176, "aimet_torch.peft.PeftQuantUtils", false]], "per-channel quantization": [[240, "term-Per-channel-Quantization", true]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "post-training quantization": [[240, "term-Post-Training-Quantization", true]], "prepare_model() (in module aimet_tensorflow.keras.model_preparer)": [[20, "aimet_tensorflow.keras.model_preparer.prepare_model", false]], "prepare_model() (in module aimet_torch.model_preparer)": [[172, "aimet_torch.model_preparer.prepare_model", false]], "pruning": [[240, "term-Pruning", true]], "ptq": [[240, "term-PTQ", true]], "pytorch": [[240, "term-PyTorch", true]], "pytorch (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false], [218, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false]], "qat": [[240, "term-QAT", true]], "qdo": [[240, "term-QDO", true]], "qualcomm innovation center": [[240, "term-Qualcomm-Innovation-Center", true]], "quantanalyzer (class in aimet_onnx.quant_analyzer)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer", false], [219, "aimet_onnx.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.quant_analyzer)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer", false], [219, "aimet_torch.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.v1.quant_analyzer)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer", false]], "quantization": [[240, "term-Quantization", true]], "quantization simulation": [[240, "term-Quantization-Simulation", true]], "quantization-aware training": [[240, "term-Quantization-Aware-Training", true]], "quantizationmixin (class in aimet_torch.nn)": [[30, "aimet_torch.nn.QuantizationMixin", false]], "quantizationsimmodel (class in aimet_onnx)": [[9, "aimet_onnx.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_tensorflow.keras.quantsim)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch)": [[179, "aimet_torch.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch.v1.quantsim)": [[185, "aimet_torch.v1.quantsim.QuantizationSimModel", false]], "quantize (class in aimet_torch.quantization.affine)": [[161, "aimet_torch.quantization.affine.Quantize", false]], "quantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantize", false]], "quantize() (in module aimet_torch.quantization.affine)": [[164, "aimet_torch.quantization.affine.quantize", false]], "quantize_dequantize() (in module aimet_torch.quantization.affine)": [[165, "aimet_torch.quantization.affine.quantize_dequantize", false]], "quantize_lora_scale_with_fixed_range() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.quantize_lora_scale_with_fixed_range", false]], "quantized_repr() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantized_repr", false]], "quantizedadaptiveavgpool1d (class in aimet_torch.nn)": [[31, "aimet_torch.nn.QuantizedAdaptiveAvgPool1d", false]], "quantizedadaptiveavgpool2d (class in aimet_torch.nn)": [[32, "aimet_torch.nn.QuantizedAdaptiveAvgPool2d", false]], "quantizedadaptiveavgpool3d (class in aimet_torch.nn)": [[33, "aimet_torch.nn.QuantizedAdaptiveAvgPool3d", false]], "quantizedadaptivemaxpool1d (class in aimet_torch.nn)": [[34, "aimet_torch.nn.QuantizedAdaptiveMaxPool1d", false]], "quantizedadaptivemaxpool2d (class in aimet_torch.nn)": [[35, "aimet_torch.nn.QuantizedAdaptiveMaxPool2d", false]], "quantizedadaptivemaxpool3d (class in aimet_torch.nn)": [[36, "aimet_torch.nn.QuantizedAdaptiveMaxPool3d", false]], "quantizedalphadropout (class in aimet_torch.nn)": [[37, "aimet_torch.nn.QuantizedAlphaDropout", false]], "quantizedavgpool1d (class in aimet_torch.nn)": [[38, "aimet_torch.nn.QuantizedAvgPool1d", false]], "quantizedavgpool2d (class in aimet_torch.nn)": [[39, "aimet_torch.nn.QuantizedAvgPool2d", false]], "quantizedavgpool3d (class in aimet_torch.nn)": [[40, "aimet_torch.nn.QuantizedAvgPool3d", false]], "quantizedbatchnorm1d (class in aimet_torch.nn)": [[43, "aimet_torch.nn.QuantizedBatchNorm1d", false]], "quantizedbatchnorm2d (class in aimet_torch.nn)": [[44, "aimet_torch.nn.QuantizedBatchNorm2d", false]], "quantizedbatchnorm3d (class in aimet_torch.nn)": [[45, "aimet_torch.nn.QuantizedBatchNorm3d", false]], "quantizedbceloss (class in aimet_torch.nn)": [[41, "aimet_torch.nn.QuantizedBCELoss", false]], "quantizedbcewithlogitsloss (class in aimet_torch.nn)": [[42, "aimet_torch.nn.QuantizedBCEWithLogitsLoss", false]], "quantizedbilinear (class in aimet_torch.nn)": [[46, "aimet_torch.nn.QuantizedBilinear", false]], "quantizedcelu (class in aimet_torch.nn)": [[47, "aimet_torch.nn.QuantizedCELU", false]], "quantizedchannelshuffle (class in aimet_torch.nn)": [[49, "aimet_torch.nn.QuantizedChannelShuffle", false]], "quantizedcircularpad1d (class in aimet_torch.nn)": [[50, "aimet_torch.nn.QuantizedCircularPad1d", false]], "quantizedcircularpad2d (class in aimet_torch.nn)": [[51, "aimet_torch.nn.QuantizedCircularPad2d", false]], "quantizedcircularpad3d (class in aimet_torch.nn)": [[52, "aimet_torch.nn.QuantizedCircularPad3d", false]], "quantizedconstantpad1d (class in aimet_torch.nn)": [[53, "aimet_torch.nn.QuantizedConstantPad1d", false]], "quantizedconstantpad2d (class in aimet_torch.nn)": [[54, "aimet_torch.nn.QuantizedConstantPad2d", false]], "quantizedconstantpad3d (class in aimet_torch.nn)": [[55, "aimet_torch.nn.QuantizedConstantPad3d", false]], "quantizedconv1d (class in aimet_torch.nn)": [[56, "aimet_torch.nn.QuantizedConv1d", false]], "quantizedconv2d (class in aimet_torch.nn)": [[57, "aimet_torch.nn.QuantizedConv2d", false]], "quantizedconv3d (class in aimet_torch.nn)": [[58, "aimet_torch.nn.QuantizedConv3d", false]], "quantizedconvtranspose1d (class in aimet_torch.nn)": [[59, "aimet_torch.nn.QuantizedConvTranspose1d", false]], "quantizedconvtranspose2d (class in aimet_torch.nn)": [[60, "aimet_torch.nn.QuantizedConvTranspose2d", false]], "quantizedconvtranspose3d (class in aimet_torch.nn)": [[61, "aimet_torch.nn.QuantizedConvTranspose3d", false]], "quantizedcosineembeddingloss (class in aimet_torch.nn)": [[62, "aimet_torch.nn.QuantizedCosineEmbeddingLoss", false]], "quantizedcosinesimilarity (class in aimet_torch.nn)": [[63, "aimet_torch.nn.QuantizedCosineSimilarity", false]], "quantizedcrossentropyloss (class in aimet_torch.nn)": [[64, "aimet_torch.nn.QuantizedCrossEntropyLoss", false]], "quantizedctcloss (class in aimet_torch.nn)": [[48, "aimet_torch.nn.QuantizedCTCLoss", false]], "quantizeddropout (class in aimet_torch.nn)": [[65, "aimet_torch.nn.QuantizedDropout", false]], "quantizeddropout1d (class in aimet_torch.nn)": [[66, "aimet_torch.nn.QuantizedDropout1d", false]], "quantizeddropout2d (class in aimet_torch.nn)": [[67, "aimet_torch.nn.QuantizedDropout2d", false]], "quantizeddropout3d (class in aimet_torch.nn)": [[68, "aimet_torch.nn.QuantizedDropout3d", false]], "quantizedelu (class in aimet_torch.nn)": [[69, "aimet_torch.nn.QuantizedELU", false]], "quantizedembedding (class in aimet_torch.nn)": [[70, "aimet_torch.nn.QuantizedEmbedding", false]], "quantizedembeddingbag (class in aimet_torch.nn)": [[71, "aimet_torch.nn.QuantizedEmbeddingBag", false]], "quantizedequantize (class in aimet_torch.quantization.affine)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize", false]], "quantizedfeaturealphadropout (class in aimet_torch.nn)": [[72, "aimet_torch.nn.QuantizedFeatureAlphaDropout", false]], "quantizedflatten (class in aimet_torch.nn)": [[73, "aimet_torch.nn.QuantizedFlatten", false]], "quantizedfold (class in aimet_torch.nn)": [[74, "aimet_torch.nn.QuantizedFold", false]], "quantizedfractionalmaxpool2d (class in aimet_torch.nn)": [[75, "aimet_torch.nn.QuantizedFractionalMaxPool2d", false]], "quantizedfractionalmaxpool3d (class in aimet_torch.nn)": [[76, "aimet_torch.nn.QuantizedFractionalMaxPool3d", false]], "quantizedgaussiannllloss (class in aimet_torch.nn)": [[81, "aimet_torch.nn.QuantizedGaussianNLLLoss", false]], "quantizedgelu (class in aimet_torch.nn)": [[77, "aimet_torch.nn.QuantizedGELU", false]], "quantizedglu (class in aimet_torch.nn)": [[78, "aimet_torch.nn.QuantizedGLU", false]], "quantizedgroupnorm (class in aimet_torch.nn)": [[82, "aimet_torch.nn.QuantizedGroupNorm", false]], "quantizedgru (class in aimet_torch.nn)": [[79, "aimet_torch.nn.QuantizedGRU", false]], "quantizedgrucell (class in aimet_torch.nn)": [[80, "aimet_torch.nn.QuantizedGRUCell", false]], "quantizedhardshrink (class in aimet_torch.nn)": [[83, "aimet_torch.nn.QuantizedHardshrink", false]], "quantizedhardsigmoid (class in aimet_torch.nn)": [[84, "aimet_torch.nn.QuantizedHardsigmoid", false]], "quantizedhardswish (class in aimet_torch.nn)": [[85, "aimet_torch.nn.QuantizedHardswish", false]], "quantizedhardtanh (class in aimet_torch.nn)": [[86, "aimet_torch.nn.QuantizedHardtanh", false]], "quantizedhingeembeddingloss (class in aimet_torch.nn)": [[87, "aimet_torch.nn.QuantizedHingeEmbeddingLoss", false]], "quantizedhuberloss (class in aimet_torch.nn)": [[88, "aimet_torch.nn.QuantizedHuberLoss", false]], "quantizedinstancenorm1d (class in aimet_torch.nn)": [[89, "aimet_torch.nn.QuantizedInstanceNorm1d", false]], "quantizedinstancenorm2d (class in aimet_torch.nn)": [[90, "aimet_torch.nn.QuantizedInstanceNorm2d", false]], "quantizedinstancenorm3d (class in aimet_torch.nn)": [[91, "aimet_torch.nn.QuantizedInstanceNorm3d", false]], "quantizedkldivloss (class in aimet_torch.nn)": [[92, "aimet_torch.nn.QuantizedKLDivLoss", false]], "quantizedl1loss (class in aimet_torch.nn)": [[93, "aimet_torch.nn.QuantizedL1Loss", false]], "quantizedlayernorm (class in aimet_torch.nn)": [[98, "aimet_torch.nn.QuantizedLayerNorm", false]], "quantizedleakyrelu (class in aimet_torch.nn)": [[99, "aimet_torch.nn.QuantizedLeakyReLU", false]], "quantizedlinear (class in aimet_torch.nn)": [[100, "aimet_torch.nn.QuantizedLinear", false]], "quantizedlocalresponsenorm (class in aimet_torch.nn)": [[101, "aimet_torch.nn.QuantizedLocalResponseNorm", false]], "quantizedlogsigmoid (class in aimet_torch.nn)": [[102, "aimet_torch.nn.QuantizedLogSigmoid", false]], "quantizedlogsoftmax (class in aimet_torch.nn)": [[103, "aimet_torch.nn.QuantizedLogSoftmax", false]], "quantizedlppool1d (class in aimet_torch.nn)": [[94, "aimet_torch.nn.QuantizedLPPool1d", false]], "quantizedlppool2d (class in aimet_torch.nn)": [[95, "aimet_torch.nn.QuantizedLPPool2d", false]], "quantizedlstm (class in aimet_torch.nn)": [[96, "aimet_torch.nn.QuantizedLSTM", false]], "quantizedlstmcell (class in aimet_torch.nn)": [[97, "aimet_torch.nn.QuantizedLSTMCell", false]], "quantizedmarginrankingloss (class in aimet_torch.nn)": [[105, "aimet_torch.nn.QuantizedMarginRankingLoss", false]], "quantizedmaxpool1d (class in aimet_torch.nn)": [[106, "aimet_torch.nn.QuantizedMaxPool1d", false]], "quantizedmaxpool2d (class in aimet_torch.nn)": [[107, "aimet_torch.nn.QuantizedMaxPool2d", false]], "quantizedmaxpool3d (class in aimet_torch.nn)": [[108, "aimet_torch.nn.QuantizedMaxPool3d", false]], "quantizedmaxunpool1d (class in aimet_torch.nn)": [[109, "aimet_torch.nn.QuantizedMaxUnpool1d", false]], "quantizedmaxunpool2d (class in aimet_torch.nn)": [[110, "aimet_torch.nn.QuantizedMaxUnpool2d", false]], "quantizedmaxunpool3d (class in aimet_torch.nn)": [[111, "aimet_torch.nn.QuantizedMaxUnpool3d", false]], "quantizedmish (class in aimet_torch.nn)": [[112, "aimet_torch.nn.QuantizedMish", false]], "quantizedmseloss (class in aimet_torch.nn)": [[104, "aimet_torch.nn.QuantizedMSELoss", false]], "quantizedmultilabelmarginloss (class in aimet_torch.nn)": [[113, "aimet_torch.nn.QuantizedMultiLabelMarginLoss", false]], "quantizedmultilabelsoftmarginloss (class in aimet_torch.nn)": [[114, "aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", false]], "quantizedmultimarginloss (class in aimet_torch.nn)": [[115, "aimet_torch.nn.QuantizedMultiMarginLoss", false]], "quantizednllloss (class in aimet_torch.nn)": [[116, "aimet_torch.nn.QuantizedNLLLoss", false]], "quantizednllloss2d (class in aimet_torch.nn)": [[117, "aimet_torch.nn.QuantizedNLLLoss2d", false]], "quantizedpairwisedistance (class in aimet_torch.nn)": [[119, "aimet_torch.nn.QuantizedPairwiseDistance", false]], "quantizedpixelshuffle (class in aimet_torch.nn)": [[120, "aimet_torch.nn.QuantizedPixelShuffle", false]], "quantizedpixelunshuffle (class in aimet_torch.nn)": [[121, "aimet_torch.nn.QuantizedPixelUnshuffle", false]], "quantizedpoissonnllloss (class in aimet_torch.nn)": [[122, "aimet_torch.nn.QuantizedPoissonNLLLoss", false]], "quantizedprelu (class in aimet_torch.nn)": [[118, "aimet_torch.nn.QuantizedPReLU", false]], "quantizedreflectionpad1d (class in aimet_torch.nn)": [[128, "aimet_torch.nn.QuantizedReflectionPad1d", false]], "quantizedreflectionpad2d (class in aimet_torch.nn)": [[129, "aimet_torch.nn.QuantizedReflectionPad2d", false]], "quantizedreflectionpad3d (class in aimet_torch.nn)": [[130, "aimet_torch.nn.QuantizedReflectionPad3d", false]], "quantizedrelu (class in aimet_torch.nn)": [[126, "aimet_torch.nn.QuantizedReLU", false]], "quantizedrelu6 (class in aimet_torch.nn)": [[127, "aimet_torch.nn.QuantizedReLU6", false]], "quantizedreplicationpad1d (class in aimet_torch.nn)": [[131, "aimet_torch.nn.QuantizedReplicationPad1d", false]], "quantizedreplicationpad2d (class in aimet_torch.nn)": [[132, "aimet_torch.nn.QuantizedReplicationPad2d", false]], "quantizedreplicationpad3d (class in aimet_torch.nn)": [[133, "aimet_torch.nn.QuantizedReplicationPad3d", false]], "quantizedrnn (class in aimet_torch.nn)": [[123, "aimet_torch.nn.QuantizedRNN", false]], "quantizedrnncell (class in aimet_torch.nn)": [[124, "aimet_torch.nn.QuantizedRNNCell", false]], "quantizedrrelu (class in aimet_torch.nn)": [[125, "aimet_torch.nn.QuantizedRReLU", false]], "quantizedselu (class in aimet_torch.nn)": [[134, "aimet_torch.nn.QuantizedSELU", false]], "quantizedsigmoid (class in aimet_torch.nn)": [[136, "aimet_torch.nn.QuantizedSigmoid", false]], "quantizedsilu (class in aimet_torch.nn)": [[135, "aimet_torch.nn.QuantizedSiLU", false]], "quantizedsmoothl1loss (class in aimet_torch.nn)": [[137, "aimet_torch.nn.QuantizedSmoothL1Loss", false]], "quantizedsoftmarginloss (class in aimet_torch.nn)": [[138, "aimet_torch.nn.QuantizedSoftMarginLoss", false]], "quantizedsoftmax (class in aimet_torch.nn)": [[139, "aimet_torch.nn.QuantizedSoftmax", false]], "quantizedsoftmax2d (class in aimet_torch.nn)": [[140, "aimet_torch.nn.QuantizedSoftmax2d", false]], "quantizedsoftmin (class in aimet_torch.nn)": [[141, "aimet_torch.nn.QuantizedSoftmin", false]], "quantizedsoftplus (class in aimet_torch.nn)": [[142, "aimet_torch.nn.QuantizedSoftplus", false]], "quantizedsoftshrink (class in aimet_torch.nn)": [[143, "aimet_torch.nn.QuantizedSoftshrink", false]], "quantizedsoftsign (class in aimet_torch.nn)": [[144, "aimet_torch.nn.QuantizedSoftsign", false]], "quantizedtanh (class in aimet_torch.nn)": [[145, "aimet_torch.nn.QuantizedTanh", false]], "quantizedtanhshrink (class in aimet_torch.nn)": [[146, "aimet_torch.nn.QuantizedTanhshrink", false]], "quantizedtensor (class in aimet_torch.quantization)": [[159, "aimet_torch.quantization.QuantizedTensor", false]], "quantizedtensorbase (class in aimet_torch.quantization)": [[160, "aimet_torch.quantization.QuantizedTensorBase", false]], "quantizedthreshold (class in aimet_torch.nn)": [[147, "aimet_torch.nn.QuantizedThreshold", false]], "quantizedtripletmarginloss (class in aimet_torch.nn)": [[148, "aimet_torch.nn.QuantizedTripletMarginLoss", false]], "quantizedtripletmarginwithdistanceloss (class in aimet_torch.nn)": [[149, "aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", false]], "quantizedunflatten (class in aimet_torch.nn)": [[150, "aimet_torch.nn.QuantizedUnflatten", false]], "quantizedunfold (class in aimet_torch.nn)": [[151, "aimet_torch.nn.QuantizedUnfold", false]], "quantizedupsample (class in aimet_torch.nn)": [[152, "aimet_torch.nn.QuantizedUpsample", false]], "quantizedupsamplingbilinear2d (class in aimet_torch.nn)": [[153, "aimet_torch.nn.QuantizedUpsamplingBilinear2d", false]], "quantizedupsamplingnearest2d (class in aimet_torch.nn)": [[154, "aimet_torch.nn.QuantizedUpsamplingNearest2d", false]], "quantizedzeropad1d (class in aimet_torch.nn)": [[155, "aimet_torch.nn.QuantizedZeroPad1d", false]], "quantizedzeropad2d (class in aimet_torch.nn)": [[156, "aimet_torch.nn.QuantizedZeroPad2d", false]], "quantizedzeropad3d (class in aimet_torch.nn)": [[157, "aimet_torch.nn.QuantizedZeroPad3d", false]], "quantizergroup (class in aimet_onnx.amp.quantizer_groups)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_tensorflow.keras.amp.quantizer_groups)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_torch.amp.quantizer_groups)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [233, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false]], "quantscheme (class in aimet_common.defs)": [[9, "aimet_common.defs.QuantScheme", false], [22, "aimet_common.defs.QuantScheme", false], [179, "aimet_common.defs.QuantScheme", false], [185, "aimet_common.defs.QuantScheme", false]], "quantsim": [[240, "term-QuantSim", true]], "quic": [[240, "term-QUIC", true]], "reestimate_bn_stats() (in module aimet_tensorflow.keras.bn_reestimation)": [[14, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false], [221, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false]], "reestimate_bn_stats() (in module aimet_torch.bn_reestimation)": [[26, "aimet_torch.bn_reestimation.reestimate_bn_stats", false], [221, "aimet_torch.bn_reestimation.reestimate_bn_stats", false]], "replace_lora_layers_with_quantizable_layers() (aimet_torch.peft method)": [[176, "aimet_torch.peft.replace_lora_layers_with_quantizable_layers", false]], "run_inference() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false]], "save_checkpoint() (aimet_torch.v1.quantsim method)": [[185, "aimet_torch.v1.quantsim.save_checkpoint", false]], "seqmseparams (class in aimet_onnx.sequential_mse.seq_mse)": [[10, "aimet_onnx.sequential_mse.seq_mse.SeqMseParams", false], [239, "aimet_onnx.sequential_mse.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.seq_mse)": [[180, "aimet_torch.seq_mse.SeqMseParams", false], [239, "aimet_torch.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.v1.seq_mse)": [[186, "aimet_torch.v1.seq_mse.SeqMseParams", false]], "set_activation_quantizers_to_float() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_activation_quantizers_to_float", false]], "set_adaround_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false]], "set_bitwidth_for_lora_adapters() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.set_bitwidth_for_lora_adapters", false]], "set_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_blockwise_quantization_for_weights", false]], "set_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.set_default_kernel", false]], "set_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.set_extra_state", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_onnx.quantsim)": [[7, "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_grouped_blockwise_quantization_for_weights", false]], "set_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.set_kernel", false]], "set_mixed_precision_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false]], "set_model_input_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false], [235, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false]], "set_model_output_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false], [235, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false]], "set_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false], [235, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false]], "set_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false], [220, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false]], "set_quantizers_to_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [233, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "spatialsvdparameters (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false], [228, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false]], "spatialsvdparameters.automodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false], [228, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false]], "spatialsvdparameters.manualmodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false], [228, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false]], "spatialsvdparameters.mode (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false], [228, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false]], "sqnr() (aimet_onnx.amp.mixed_precision_algo.evalcallbackfactory method)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [233, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "sqnr() (aimet_torch.amp.mixed_precision_algo.evalcallbackfactory method)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [182, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [233, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "target hardware accelerator": [[240, "term-Target-Hardware-Accelerator", true]], "target runtime": [[240, "term-Target-Runtime", true]], "tensorflow": [[240, "term-TensorFlow", true]], "to_list() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false], [233, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false], [233, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [233, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false]], "torchscript": [[240, "term-TorchScript", true]], "torchscript (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false], [218, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false]], "track_lora_meta_data() (aimet_torch.peft method)": [[176, "aimet_torch.peft.track_lora_meta_data", false]], "validate_model() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.validate_model", false]], "variant": [[240, "term-Variant", true]], "visualize_stats() (in module aimet_torch.v2.visualization_tools)": [[168, "aimet_torch.v2.visualization_tools.visualize_stats", false], [217, "aimet_torch.v2.visualization_tools.visualize_stats", false]], "weights": [[240, "term-Weights", true]], "wrap() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.wrap", false]]}, "objects": {"aimet_common.defs": [[233, 0, 1, "id1", "CallbackFunc"], [228, 0, 1, "", "GreedySelectionParameters"], [185, 0, 1, "", "QuantScheme"]], "aimet_common.defs.QuantScheme": [[185, 1, 1, "", "from_str"]], "aimet_common.utils": [[219, 0, 1, "", "CallbackFunc"]], "aimet_onnx": [[9, 0, 1, "", "QuantizationSimModel"], [9, 2, 1, "", "compute_encodings"]], "aimet_onnx.QuantizationSimModel": [[9, 1, 1, "", "compute_encodings"], [9, 1, 1, "", "export"]], "aimet_onnx.adaround.adaround_weight": [[214, 0, 1, "", "AdaroundParameters"]], "aimet_onnx.adaround.adaround_weight.Adaround": [[214, 2, 1, "", "apply_adaround"]], "aimet_onnx.amp.mixed_precision_algo": [[233, 0, 1, "", "EvalCallbackFactory"]], "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory": [[233, 1, 1, "", "sqnr"]], "aimet_onnx.amp.quantizer_groups": [[233, 0, 1, "", "QuantizerGroup"]], "aimet_onnx.amp.quantizer_groups.QuantizerGroup": [[233, 1, 1, "", "get_activation_quantizers"], [233, 1, 1, "", "get_active_quantizers"], [233, 1, 1, "", "get_candidate"], [233, 1, 1, "", "get_param_quantizers"], [233, 1, 1, "", "set_quantizers_to_candidate"], [233, 1, 1, "", "to_list"]], "aimet_onnx.batch_norm_fold": [[222, 2, 1, "", "fold_all_batch_norms_to_weight"]], "aimet_onnx.cross_layer_equalization": [[223, 2, 1, "", "equalize_model"]], "aimet_onnx.layer_output_utils": [[218, 0, 1, "", "LayerOutputUtil"]], "aimet_onnx.layer_output_utils.LayerOutputUtil": [[218, 1, 1, "", "generate_layer_outputs"]], "aimet_onnx.mixed_precision": [[233, 2, 1, "", "choose_mixed_precision"]], "aimet_onnx.quant_analyzer": [[219, 0, 1, "", "QuantAnalyzer"]], "aimet_onnx.quant_analyzer.QuantAnalyzer": [[219, 1, 1, "", "analyze"], [219, 1, 1, "", "enable_per_layer_mse_loss"]], "aimet_onnx.quantsim": [[7, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_onnx.sequential_mse.seq_mse": [[239, 0, 1, "", "SeqMseParams"]], "aimet_onnx.sequential_mse.seq_mse.SequentialMse": [[239, 2, 1, "", "apply_seq_mse"]], "aimet_tensorflow.keras.adaround_weight": [[214, 0, 1, "", "AdaroundParameters"]], "aimet_tensorflow.keras.adaround_weight.Adaround": [[214, 2, 1, "", "apply_adaround"]], "aimet_tensorflow.keras.amp.quantizer_groups": [[233, 0, 1, "", "QuantizerGroup"]], "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup": [[233, 1, 1, "", "get_active_param_quantizers"], [233, 1, 1, "", "get_active_quantizers"], [233, 1, 1, "", "get_candidate"], [233, 1, 1, "", "lookup_quantizer"], [233, 1, 1, "", "set_quantizers_to_candidate"], [233, 1, 1, "", "to_list"]], "aimet_tensorflow.keras.auto_quant_v2": [[220, 0, 1, "", "AutoQuantWithAutoMixedPrecision"]], "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision": [[220, 1, 1, "", "get_quant_scheme_candidates"], [220, 1, 1, "", "optimize"], [220, 1, 1, "", "run_inference"], [220, 1, 1, "", "set_adaround_params"], [220, 1, 1, "", "set_mixed_precision_params"], [220, 1, 1, "", "set_quant_scheme_candidates"]], "aimet_tensorflow.keras.batch_norm_fold": [[222, 2, 1, "", "fold_all_batch_norms"], [221, 2, 1, "", "fold_all_batch_norms_to_scale"]], "aimet_tensorflow.keras.bn_reestimation": [[221, 2, 1, "", "reestimate_bn_stats"]], "aimet_tensorflow.keras.compress": [[228, 0, 1, "", "ModelCompressor"]], "aimet_tensorflow.keras.compress.ModelCompressor": [[228, 1, 1, "", "compress_model"]], "aimet_tensorflow.keras.cross_layer_equalization": [[223, 2, 1, "", "equalize_model"]], "aimet_tensorflow.keras.defs": [[228, 0, 1, "", "SpatialSvdParameters"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters": [[228, 0, 1, "", "AutoModeParams"], [228, 0, 1, "", "ManualModeParams"], [228, 0, 1, "", "Mode"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode": [[228, 3, 1, "", "auto"], [228, 3, 1, "", "manual"]], "aimet_tensorflow.keras.layer_output_utils": [[218, 0, 1, "", "LayerOutputUtil"]], "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil": [[218, 1, 1, "", "generate_layer_outputs"]], "aimet_tensorflow.keras.mixed_precision": [[233, 2, 1, "", "choose_fast_mixed_precision"], [233, 2, 1, "", "choose_mixed_precision"]], "aimet_tensorflow.keras.model_preparer": [[20, 2, 1, "", "prepare_model"]], "aimet_tensorflow.keras.quantsim": [[22, 0, 1, "", "QuantizationSimModel"]], "aimet_tensorflow.keras.quantsim.QuantizationSimModel": [[22, 1, 1, "", "compute_encodings"], [22, 1, 1, "", "export"]], "aimet_torch": [[179, 0, 1, "", "QuantizationSimModel"]], "aimet_torch.QuantizationSimModel": [[179, 1, 1, "", "compute_encodings"], [179, 1, 1, "", "export"]], "aimet_torch.adaround.adaround_weight": [[214, 0, 1, "", "AdaroundParameters"]], "aimet_torch.adaround.adaround_weight.Adaround": [[214, 2, 1, "", "apply_adaround"]], "aimet_torch.amp.mixed_precision_algo": [[233, 0, 1, "", "EvalCallbackFactory"]], "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory": [[233, 1, 1, "", "sqnr"]], "aimet_torch.amp.quantizer_groups": [[233, 0, 1, "", "QuantizerGroup"]], "aimet_torch.amp.quantizer_groups.QuantizerGroup": [[233, 1, 1, "", "get_active_quantizers"], [233, 1, 1, "", "get_candidate"], [233, 1, 1, "", "get_input_quantizer_modules"], [233, 1, 1, "", "set_quantizers_to_candidate"], [233, 1, 1, "", "to_list"]], "aimet_torch.batch_norm_fold": [[222, 2, 1, "", "fold_all_batch_norms"]], "aimet_torch.bn_reestimation": [[221, 2, 1, "", "reestimate_bn_stats"]], "aimet_torch.cross_layer_equalization": [[223, 2, 1, "", "equalize_model"]], "aimet_torch.experimental.adascale": [[215, 2, 1, "", "apply_adascale"]], "aimet_torch.layer_output_utils": [[218, 0, 1, "", "LayerOutputUtil"], [218, 0, 1, "", "NamingScheme"]], "aimet_torch.layer_output_utils.LayerOutputUtil": [[218, 1, 1, "", "generate_layer_outputs"]], "aimet_torch.layer_output_utils.NamingScheme": [[218, 3, 1, "", "ONNX"], [218, 3, 1, "", "PYTORCH"], [218, 3, 1, "", "TORCHSCRIPT"]], "aimet_torch.mixed_precision": [[233, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.model_preparer": [[172, 2, 1, "", "prepare_model"]], "aimet_torch.model_validator.model_validator": [[173, 0, 1, "", "ModelValidator"]], "aimet_torch.model_validator.model_validator.ModelValidator": [[173, 1, 1, "", "add_check"], [173, 1, 1, "", "validate_model"]], "aimet_torch.nn": [[30, 0, 1, "", "QuantizationMixin"], [31, 0, 1, "", "QuantizedAdaptiveAvgPool1d"], [32, 0, 1, "", "QuantizedAdaptiveAvgPool2d"], [33, 0, 1, "", "QuantizedAdaptiveAvgPool3d"], [34, 0, 1, "", "QuantizedAdaptiveMaxPool1d"], [35, 0, 1, "", "QuantizedAdaptiveMaxPool2d"], [36, 0, 1, "", "QuantizedAdaptiveMaxPool3d"], [37, 0, 1, "", "QuantizedAlphaDropout"], [38, 0, 1, "", "QuantizedAvgPool1d"], [39, 0, 1, "", "QuantizedAvgPool2d"], [40, 0, 1, "", "QuantizedAvgPool3d"], [41, 0, 1, "", "QuantizedBCELoss"], [42, 0, 1, "", "QuantizedBCEWithLogitsLoss"], [43, 0, 1, "", "QuantizedBatchNorm1d"], [44, 0, 1, "", "QuantizedBatchNorm2d"], [45, 0, 1, "", "QuantizedBatchNorm3d"], [46, 0, 1, "", "QuantizedBilinear"], [47, 0, 1, "", "QuantizedCELU"], [48, 0, 1, "", "QuantizedCTCLoss"], [49, 0, 1, "", "QuantizedChannelShuffle"], [50, 0, 1, "", "QuantizedCircularPad1d"], [51, 0, 1, "", "QuantizedCircularPad2d"], [52, 0, 1, "", "QuantizedCircularPad3d"], [53, 0, 1, "", "QuantizedConstantPad1d"], [54, 0, 1, "", "QuantizedConstantPad2d"], [55, 0, 1, "", "QuantizedConstantPad3d"], [56, 0, 1, "", "QuantizedConv1d"], [57, 0, 1, "", "QuantizedConv2d"], [58, 0, 1, "", "QuantizedConv3d"], [59, 0, 1, "", "QuantizedConvTranspose1d"], [60, 0, 1, "", "QuantizedConvTranspose2d"], [61, 0, 1, "", "QuantizedConvTranspose3d"], [62, 0, 1, "", "QuantizedCosineEmbeddingLoss"], [63, 0, 1, "", "QuantizedCosineSimilarity"], [64, 0, 1, "", "QuantizedCrossEntropyLoss"], [65, 0, 1, "", "QuantizedDropout"], [66, 0, 1, "", "QuantizedDropout1d"], [67, 0, 1, "", "QuantizedDropout2d"], [68, 0, 1, "", "QuantizedDropout3d"], [69, 0, 1, "", "QuantizedELU"], [70, 0, 1, "", "QuantizedEmbedding"], [71, 0, 1, "", "QuantizedEmbeddingBag"], [72, 0, 1, "", "QuantizedFeatureAlphaDropout"], [73, 0, 1, "", "QuantizedFlatten"], [74, 0, 1, "", "QuantizedFold"], [75, 0, 1, "", "QuantizedFractionalMaxPool2d"], [76, 0, 1, "", "QuantizedFractionalMaxPool3d"], [77, 0, 1, "", "QuantizedGELU"], [78, 0, 1, "", "QuantizedGLU"], [79, 0, 1, "", "QuantizedGRU"], [80, 0, 1, "", "QuantizedGRUCell"], [81, 0, 1, "", "QuantizedGaussianNLLLoss"], [82, 0, 1, "", "QuantizedGroupNorm"], [83, 0, 1, "", "QuantizedHardshrink"], [84, 0, 1, "", "QuantizedHardsigmoid"], [85, 0, 1, "", "QuantizedHardswish"], [86, 0, 1, "", "QuantizedHardtanh"], [87, 0, 1, "", "QuantizedHingeEmbeddingLoss"], [88, 0, 1, "", "QuantizedHuberLoss"], [89, 0, 1, "", "QuantizedInstanceNorm1d"], [90, 0, 1, "", "QuantizedInstanceNorm2d"], [91, 0, 1, "", "QuantizedInstanceNorm3d"], [92, 0, 1, "", "QuantizedKLDivLoss"], [93, 0, 1, "", "QuantizedL1Loss"], [94, 0, 1, "", "QuantizedLPPool1d"], [95, 0, 1, "", "QuantizedLPPool2d"], [96, 0, 1, "", "QuantizedLSTM"], [97, 0, 1, "", "QuantizedLSTMCell"], [98, 0, 1, "", "QuantizedLayerNorm"], [99, 0, 1, "", "QuantizedLeakyReLU"], [100, 0, 1, "", "QuantizedLinear"], [101, 0, 1, "", "QuantizedLocalResponseNorm"], [102, 0, 1, "", "QuantizedLogSigmoid"], [103, 0, 1, "", "QuantizedLogSoftmax"], [104, 0, 1, "", "QuantizedMSELoss"], [105, 0, 1, "", "QuantizedMarginRankingLoss"], [106, 0, 1, "", "QuantizedMaxPool1d"], [107, 0, 1, "", "QuantizedMaxPool2d"], [108, 0, 1, "", "QuantizedMaxPool3d"], [109, 0, 1, "", "QuantizedMaxUnpool1d"], [110, 0, 1, "", "QuantizedMaxUnpool2d"], [111, 0, 1, "", "QuantizedMaxUnpool3d"], [112, 0, 1, "", "QuantizedMish"], [113, 0, 1, "", "QuantizedMultiLabelMarginLoss"], [114, 0, 1, "", "QuantizedMultiLabelSoftMarginLoss"], [115, 0, 1, "", "QuantizedMultiMarginLoss"], [116, 0, 1, "", "QuantizedNLLLoss"], [117, 0, 1, "", "QuantizedNLLLoss2d"], [118, 0, 1, "", "QuantizedPReLU"], [119, 0, 1, "", "QuantizedPairwiseDistance"], [120, 0, 1, "", "QuantizedPixelShuffle"], [121, 0, 1, "", "QuantizedPixelUnshuffle"], [122, 0, 1, "", "QuantizedPoissonNLLLoss"], [123, 0, 1, "", "QuantizedRNN"], [124, 0, 1, "", "QuantizedRNNCell"], [125, 0, 1, "", "QuantizedRReLU"], [126, 0, 1, "", "QuantizedReLU"], [127, 0, 1, "", "QuantizedReLU6"], [128, 0, 1, "", "QuantizedReflectionPad1d"], [129, 0, 1, "", "QuantizedReflectionPad2d"], [130, 0, 1, "", "QuantizedReflectionPad3d"], [131, 0, 1, "", "QuantizedReplicationPad1d"], [132, 0, 1, "", "QuantizedReplicationPad2d"], [133, 0, 1, "", "QuantizedReplicationPad3d"], [134, 0, 1, "", "QuantizedSELU"], [135, 0, 1, "", "QuantizedSiLU"], [136, 0, 1, "", "QuantizedSigmoid"], [137, 0, 1, "", "QuantizedSmoothL1Loss"], [138, 0, 1, "", "QuantizedSoftMarginLoss"], [139, 0, 1, "", "QuantizedSoftmax"], [140, 0, 1, "", "QuantizedSoftmax2d"], [141, 0, 1, "", "QuantizedSoftmin"], [142, 0, 1, "", "QuantizedSoftplus"], [143, 0, 1, "", "QuantizedSoftshrink"], [144, 0, 1, "", "QuantizedSoftsign"], [145, 0, 1, "", "QuantizedTanh"], [146, 0, 1, "", "QuantizedTanhshrink"], [147, 0, 1, "", "QuantizedThreshold"], [148, 0, 1, "", "QuantizedTripletMarginLoss"], [149, 0, 1, "", "QuantizedTripletMarginWithDistanceLoss"], [150, 0, 1, "", "QuantizedUnflatten"], [151, 0, 1, "", "QuantizedUnfold"], [152, 0, 1, "", "QuantizedUpsample"], [153, 0, 1, "", "QuantizedUpsamplingBilinear2d"], [154, 0, 1, "", "QuantizedUpsamplingNearest2d"], [155, 0, 1, "", "QuantizedZeroPad1d"], [156, 0, 1, "", "QuantizedZeroPad2d"], [157, 0, 1, "", "QuantizedZeroPad3d"]], "aimet_torch.nn.QuantizationMixin": [[30, 1, 1, "", "compute_encodings"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "from_module"], [30, 1, 1, "", "get_default_kernel"], [30, 1, 1, "", "get_kernel"], [30, 1, 1, "", "implements"], [30, 3, 1, "", "input_quantizers"], [30, 3, 1, "", "output_quantizers"], [30, 3, 1, "", "param_quantizers"], [30, 1, 1, "", "set_default_kernel"], [30, 1, 1, "", "set_kernel"], [30, 1, 1, "", "wrap"]], "aimet_torch.nn.QuantizedLinear": [[100, 1, 1, "", "forward"]], "aimet_torch.peft": [[176, 0, 1, "", "AdapterMetaData"], [176, 0, 1, "", "PeftQuantUtils"], [176, 1, 1, "", "replace_lora_layers_with_quantizable_layers"], [176, 1, 1, "", "track_lora_meta_data"]], "aimet_torch.peft.PeftQuantUtils": [[176, 1, 1, "", "disable_lora_adapters"], [176, 1, 1, "", "enable_adapter_and_load_weights"], [176, 1, 1, "", "export_adapter_weights"], [176, 1, 1, "", "freeze_base_model"], [176, 1, 1, "", "freeze_base_model_activation_quantizers"], [176, 1, 1, "", "freeze_base_model_param_quantizers"], [176, 1, 1, "", "get_fp_lora_layer"], [176, 1, 1, "", "get_quantized_lora_layer"], [176, 1, 1, "", "quantize_lora_scale_with_fixed_range"], [176, 1, 1, "", "set_bitwidth_for_lora_adapters"]], "aimet_torch.quant_analyzer": [[219, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.quant_analyzer.QuantAnalyzer": [[219, 1, 1, "", "analyze"], [219, 1, 1, "", "check_model_sensitivity_to_quantization"], [219, 1, 1, "", "export_per_layer_encoding_min_max_range"], [219, 1, 1, "", "export_per_layer_mse_loss"], [219, 1, 1, "", "export_per_layer_stats_histogram"], [219, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [219, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.quantization": [[158, 0, 1, "", "DequantizedTensor"], [159, 0, 1, "", "QuantizedTensor"], [160, 0, 1, "", "QuantizedTensorBase"]], "aimet_torch.quantization.DequantizedTensor": [[158, 1, 1, "", "dequantize"], [158, 1, 1, "", "quantize"], [158, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensor": [[159, 1, 1, "", "dequantize"], [159, 1, 1, "", "quantize"], [159, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensorBase": [[160, 1, 1, "", "clone"], [160, 1, 1, "", "dequantize"], [160, 1, 1, "", "detach"], [160, 1, 1, "", "new_empty"], [160, 1, 1, "", "quantize"], [160, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.affine": [[161, 0, 1, "", "Quantize"], [162, 0, 1, "", "QuantizeDequantize"], [163, 2, 1, "", "dequantize"], [164, 2, 1, "", "quantize"], [165, 2, 1, "", "quantize_dequantize"]], "aimet_torch.quantization.affine.Quantize": [[161, 1, 1, "", "forward"]], "aimet_torch.quantization.affine.QuantizeDequantize": [[162, 1, 1, "", "forward"]], "aimet_torch.quantization.float": [[166, 0, 1, "", "FloatQuantizeDequantize"]], "aimet_torch.quantization.float.FloatQuantizeDequantize": [[166, 4, 1, "", "bitwidth"], [166, 1, 1, "", "compute_encodings"], [166, 4, 1, "", "exponent_bits"], [166, 1, 1, "", "forward"], [166, 1, 1, "", "from_encodings"], [166, 1, 1, "", "get_encodings"], [166, 1, 1, "", "get_extra_state"], [166, 1, 1, "", "is_bfloat16"], [166, 1, 1, "", "is_float16"], [166, 1, 1, "", "load_state_dict"], [166, 4, 1, "", "mantissa_bits"], [166, 1, 1, "", "set_extra_state"]], "aimet_torch.seq_mse": [[239, 0, 1, "", "SeqMseParams"], [239, 2, 1, "", "apply_seq_mse"]], "aimet_torch.seq_mse.SeqMseParams": [[239, 1, 1, "", "forward_fn"], [239, 1, 1, "", "get_loss_fn"]], "aimet_torch.v1.adaround.adaround_weight": [[181, 0, 1, "", "AdaroundParameters"]], "aimet_torch.v1.adaround.adaround_weight.Adaround": [[181, 2, 1, "", "apply_adaround"]], "aimet_torch.v1.mixed_precision": [[182, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.v1.quant_analyzer": [[184, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.v1.quant_analyzer.QuantAnalyzer": [[184, 1, 1, "", "analyze"], [184, 1, 1, "", "check_model_sensitivity_to_quantization"], [184, 1, 1, "", "export_per_layer_encoding_min_max_range"], [184, 1, 1, "", "export_per_layer_mse_loss"], [184, 1, 1, "", "export_per_layer_stats_histogram"], [184, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [184, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.v1.quantsim": [[185, 0, 1, "", "QuantizationSimModel"], [185, 1, 1, "", "load_checkpoint"], [185, 1, 1, "", "save_checkpoint"]], "aimet_torch.v1.quantsim.QuantizationSimModel": [[185, 1, 1, "", "compute_encodings"], [185, 1, 1, "", "export"]], "aimet_torch.v1.seq_mse": [[186, 0, 1, "", "SeqMseParams"], [186, 2, 1, "", "apply_seq_mse"]], "aimet_torch.v1.seq_mse.SeqMseParams": [[186, 1, 1, "", "forward_fn"], [186, 1, 1, "", "get_loss_fn"]], "aimet_torch.v2.mixed_precision": [[235, 0, 1, "", "MixedPrecisionConfigurator"]], "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator": [[235, 1, 1, "", "apply"], [235, 1, 1, "", "set_model_input_precision"], [235, 1, 1, "", "set_model_output_precision"], [235, 1, 1, "", "set_precision"]], "aimet_torch.v2.quantsim.config_utils": [[170, 2, 1, "", "set_activation_quantizers_to_float"], [170, 2, 1, "", "set_blockwise_quantization_for_weights"], [170, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_torch.v2.visualization_tools": [[217, 2, 1, "", "visualize_stats"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute", "4": "py:property"}, "terms": {"": [1, 2, 7, 8, 12, 20, 21, 22, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 166, 170, 172, 174, 175, 177, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 239, 240, 244, 246, 247, 248, 249, 250, 252, 254, 255, 258, 259], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260], "00": [164, 165, 203, 204, 205, 222, 223], "000": [214, 249], "0000": [158, 165, 178], "0000e": [164, 165], "001": [188, 206, 221], "0014807": 242, "00183112e": 222, "00215936e": 222, "0030": 178, "00317": 215, "0032": 178, "0034": 178, "00347728e": 223, "0035": 178, "0036": [162, 178], "0037": 178, "0038": 178, "0039": [162, 178], "0059": 178, "0063": 178, "0064": 178, "0068": 178, "0069": 178, "0073": 178, "0074": 178, "0078": 178, "00_224": [214, 222, 223], "01": [1, 11, 23, 164, 165, 181, 192, 194, 208, 214, 220, 222, 223], "0115": 162, "0117": 178, "0142": 160, "01457286e": [222, 223], "0156": 178, "0158": 162, "0176": 162, "0195": 178, "02": [164, 165, 222, 223], "02078857e": [222, 223], "0234": 178, "0235": 220, "026354755942277083": 242, "02635476": 242, "0273": 178, "0278355": 242, "02887694e": 223, "0293162": 242, "0295": 162, "03": [222, 223], "0312": 178, "0352": 178, "03798249e": 222, "0386": 162, "0391": 178, "04": [222, 223, 242, 245], "04025269e": 222, "0406616e": 223, "0424": 162, "0428": 221, "0430": 178, "0449": 245, "0469": 178, "0471": 162, "04721": 202, "05": [164, 165, 176, 222, 223], "0500e": [164, 165], "0508": 178, "05270951": 242, "0541903": 242, "0549": 162, "05549544e": [222, 223], "0564": 162, "0639": 162, "0667": 165, "0680": 162, "0769": 245, "0784": 162, "07906426": 242, "08": [164, 165], "080545": 242, "0819": 162, "0820258": 242, "0859": 166, "0861": 245, "08742931e": [222, 223], "0882": 160, "0889": 166, "0891": 166, "09": 233, "09111059e": 222, "0947": 166, "09685047e": [222, 223], "0x7f127685a598": 173, "0x7f9dd9bd90d0": 173, "0x7ff5703eff28": 173, "0x7ff577373598": 173, "1": [1, 2, 10, 12, 13, 17, 20, 21, 23, 24, 25, 29, 30, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 223, 224, 226, 227, 228, 230, 231, 235, 236, 237, 238, 242, 243, 244, 245, 246, 249, 260], "10": [17, 20, 24, 29, 30, 158, 161, 162, 164, 172, 173, 175, 176, 178, 179, 185, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 209, 211, 212, 214, 215, 221, 224, 226, 227, 228, 230, 233, 242, 243, 244, 245, 246, 247, 250, 252, 254], "100": [2, 12, 14, 26, 171, 182, 195, 209, 221, 233, 240, 242, 245], "1000": [8, 21, 160, 177, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 224, 228, 230, 247], "10000": [11, 188, 189, 193, 201, 206, 207, 214], "1000e": [164, 165], "102": [178, 245], "1024": [196, 214, 233, 247], "103": [161, 178], "104": 245, "105": 245, "1050": 245, "10541902": 242, "10569119e": [222, 223], "106": 161, "1060": 162, "1068997": 242, "107": 178, "10708203e": [222, 223], "108": 178, "109": 161, "10k": [1, 23, 181, 214], "11": [159, 160, 164, 176, 178, 205, 242, 243, 244, 254], "110": [161, 178], "111": [161, 178], "11176670e": 223, "112": [214, 222, 223], "1128": 162, "1155": 245, "116": 245, "1176": 162, "118": 178, "119": [178, 245], "12": [164, 178, 242, 243, 244, 245, 246, 254], "12039044e": 223, "121": 245, "122": 161, "1232": 162, "127": [159, 160, 178, 179, 245, 247, 250], "128": [2, 13, 25, 159, 160, 170, 172, 174, 178, 179, 182, 183, 196, 198, 199, 214, 220, 222, 223, 233, 242, 245, 246, 247, 250], "129": 161, "13": [164, 178, 245, 260], "1307": 162, "131": 161, "13137": 215, "13177378": 242, "1333": 165, "1398": 227, "14": [164, 178, 245, 254, 260], "1406": 227, "141": 161, "143": 161, "144": 161, "145": 161, "1458": 245, "146": 161, "15": [164, 165, 178, 195, 196, 198, 199, 209, 211, 212, 221, 227, 250, 254], "150": 161, "1500e": [164, 165], "152": 161, "15259957e": 223, "153": 159, "155": 161, "15717569e": 222, "15812853": 242, "15e": [203, 205], "15k": [1, 23, 181, 214], "16": [2, 9, 12, 22, 30, 161, 166, 172, 174, 175, 176, 178, 179, 182, 185, 188, 192, 195, 206, 210, 214, 215, 220, 228, 233, 237, 238, 245, 246, 247, 250, 259, 260], "1619": 245, "162": 161, "16245179e": [222, 223], "1647": 162, "16839484e": 223, "16966406e": 223, "17": [161, 178, 223, 260], "1709": 162, "172": 161, "1727": 166, "1729": 166, "1741": 162, "178": 161, "17871511e": 223, "179": 161, "18": [178, 188, 189, 190, 191, 245, 260], "181": 161, "18136823e": 222, "18448329": 242, "186": 161, "18673885e": 222, "187": 161, "188": 161, "1889": 162, "19": [161, 178, 222, 223, 242, 260], "1906": 202, "19186290e": [222, 223], "192": 161, "1921e": [164, 165], "194": 161, "1943": 227, "1945": 160, "1955": 227, "1977": 162, "19778645e": 222, "1_all": 244, "1e": [20, 176, 196, 197, 221, 222, 223, 247, 250], "1k": [214, 220, 221, 233, 239, 247], "1m": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 216, 217, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 252, 253, 256, 257, 258, 260], "20": [1, 10, 11, 20, 23, 160, 180, 181, 186, 194, 195, 196, 197, 198, 199, 209, 211, 212, 214, 221, 222, 223, 228, 237, 238, 239, 250, 260], "200": [20, 171, 196, 197, 208], "2000": [1, 23, 159, 165, 181, 189, 193, 194, 201, 207, 208, 210, 214], "20000": [20, 196, 197], "2000e": [164, 165], "2012": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "2014": 227, "2016": 227, "2017": 227, "2019": [190, 202, 210], "203": 161, "20433941e": [222, 223], "2048": [214, 220, 221, 250], "205": 159, "2068": 245, "207": 161, "20k": 196, "21": [160, 222, 223, 260], "21066449e": 222, "21083805": 242, "2118": 162, "2123188": 242, "21250950e": 222, "2137995": 242, "216": 161, "218": 161, "2196": 162, "22": [178, 222, 223, 242, 245, 260], "2205": 160, "2212": 162, "2217": 245, "22219264e": [222, 223], "224": [179, 188, 189, 190, 191, 192, 195, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 228, 233, 235, 239, 245, 247, 250], "225": [208, 214, 220, 233, 247], "22583652e": 222, "226": 161, "2260": 160, "2265": 162, "229": [208, 214, 220, 233, 247], "23": [159, 160, 260], "23011987e": [222, 223], "2306": 215, "2308": 215, "2315": 245, "23156421e": [222, 223], "2353": 162, "2355": 162, "2363": [162, 245], "237": 161, "23719281": 242, "238": 161, "24": 260, "240": 178, "2401543": 242, "241": 178, "242": 178, "24257803e": 222, "243": 178, "2431": 245, "244": 178, "245": 178, "2458": 162, "2459": 245, "246": 178, "247": 178, "248": 178, "249": 178, "25": [178, 260], "250": 178, "2500e": [164, 165], "251": 178, "252": 178, "253": 178, "254": 178, "2546": 162, "255": [158, 161, 178, 179, 247, 250], "256": [8, 178, 192, 206, 214, 219, 220, 233, 247], "2568": 162, "2592": 173, "26": [159, 178, 245, 260], "26179108e": 222, "26354757": 242, "2650282": 242, "2667": 165, "27": [245, 260], "27415752e": 223, "2771": 162, "28": [159, 160, 201, 224, 228, 230, 245, 260], "28238320e": 223, "288": [214, 223], "28990233": 242, "29": [178, 260], "291383": 242, "2921": 160, "2930528e": 223, "29590677e": [222, 223], "2b": 225, "2d": [201, 224, 227, 231, 246], "3": [2, 12, 13, 25, 29, 158, 160, 164, 165, 169, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 186, 196, 223, 224, 225, 228, 230, 231, 235, 237, 242, 243, 244, 245, 246, 260], "30": [161, 178, 245, 260], "300": 206, "3000": [159, 196], "30122258e": [222, 223], "3038": 162, "30402938e": 223, "31": [1, 8, 11, 21, 23, 177, 179, 181, 184, 185, 214, 219, 245, 247, 250, 260], "31080866e": 222, "312": 159, "3137": 162, "31625706": 242, "32": [20, 161, 172, 173, 178, 179, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 219, 220, 221, 222, 223, 233, 239, 240, 245, 247, 248, 250, 252, 255, 260], "32141271e": 222, "3216": 162, "33": [161, 203, 204, 205, 245, 260], "3333": 165, "33731920e": [222, 223], "34": 260, "34215236e": 223, "34261182": 242, "3451": 162, "3467390e": 223, "34694423e": 223, "347054": 242, "3470540046691895": 242, "35": [179, 245, 247, 250, 260], "350m": [237, 238], "35139937e": 223, "36": 161, "3610": 245, "36896658": 242, "37": [160, 161, 178], "3734087606114667": 242, "37757687e": 223, "38": [159, 160, 227], "38100997e": [222, 223], "3861": 245, "39": 158, "39502389e": [222, 223], "3992": 162, "3d": 246, "4": [1, 2, 7, 8, 11, 13, 21, 23, 25, 159, 160, 164, 165, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 185, 191, 196, 200, 203, 204, 205, 208, 213, 222, 223, 224, 226, 228, 230, 231, 237, 238, 243, 244, 245, 246, 248, 260], "40": [159, 160], "4000": [158, 165], "406": [208, 214, 220, 233, 247], "41": 158, "41059163e": 223, "4157": 162, "41715762e": [222, 223], "42": [178, 245], "42083430e": 222, "4216761": 242, "4231569": 242, "4246376": 242, "42477691e": 222, "43": [178, 245], "4392": 162, "44408584e": [222, 223], "44632760e": 223, "4475": 162, "44803086": 242, "4495116": 242, "4499": 245, "44993666e": 223, "4549": 162, "455": [242, 245], "456": [208, 214, 220, 233, 247], "4585028e": 223, "46642041e": 223, "4667": 165, "4694": 162, "4706": 162, "47438562": 242, "4758663": 242, "4784": 162, "48": [178, 245], "48045555e": 223, "48399768e": [222, 223], "485": [208, 214, 220, 233, 247], "4863": 162, "49": [161, 178, 245], "49024737e": [222, 223], "4d": 246, "4f": [220, 221, 247, 250], "5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 214, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 253, 256, 257, 258, 259, 260], "50": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 225, 228, 233, 245], "500": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 208, 210, 211, 212, 213, 214, 219, 224, 233, 247, 249], "5000": [194, 208], "50000": [192, 228, 233, 247], "5000e": [164, 165], "5006": 229, "50074035": 242, "5022211": 242, "51": 158, "512": [237, 238], "51446089e": [222, 223], "51547194e": [222, 223], "5157": 245, "51876003e": 222, "52": [158, 245], "521": 158, "5220": 162, "5255": 162, "52709514": 242, "52912678e": [222, 223], "52974629e": 222, "5301": 245, "5307": 245, "5333": [162, 165], "53403008e": [222, 223], "53976866e": [222, 223], "54": 178, "54620111e": [222, 223], "55": [161, 178, 245], "55344987": 242, "5540": 162, "5549306": 242, "55578518e": 223, "56": 245, "56632766e": 222, "5695": 162, "57": [159, 160, 178], "57021021e": 223, "57980466": 242, "57984132e": [222, 223], "58": 245, "5856506e": 223, "5876": 221, "5897": 162, "59": [161, 178, 245], "5962": 245, "59643137e": 222, "5e": [204, 205, 209, 211, 212], "6": [20, 160, 164, 165, 172, 176, 178, 195, 196, 197, 198, 199, 205, 207, 210, 211, 212, 222, 223, 233, 243, 244, 246, 247, 250, 254], "60": 178, "6000": [158, 159, 160, 165], "6039": 162, "6054": 162, "6061594": 242, "60713138e": [222, 223], "6079": 162, "6091": 245, "61": 178, "61087702e": 222, "6177": 162, "6196": 162, "62": 178, "6213797e": 223, "6247": 162, "62498877e": [222, 223], "63": [161, 245], "63172388e": 222, "6325141": 242, "6327": 245, "6340": 245, "64": [7, 8, 20, 161, 170, 178, 179, 201, 214, 215, 219, 220, 233, 242, 245, 246, 247, 250, 252], "6431": 162, "64579314e": [222, 223], "65": [225, 245], "65535": 245, "6583": 250, "6588689": 242, "66": [161, 203, 204, 205, 225, 245], "6603496": 242, "6667": 165, "6695": 162, "67278278e": [222, 223], "67416465e": 223, "67510852e": [222, 223], "67677957e": [222, 223], "68": [158, 245], "68016": 250, "68522364": 242, "6867044": 242, "69": 245, "6910": 250, "69716495e": 223, "7": [160, 164, 165, 166, 176, 178, 179, 204, 205, 207, 209, 210, 211, 212, 222, 223, 231, 243, 244, 247, 250, 254], "70": 178, "7013": 247, "70130579e": 223, "70838": 250, "71": 160, "7115784": 242, "7164": 220, "71659231e": [222, 223], "7173": 247, "72": 245, "72468403e": 223, "73242160e": 222, "7333": 165, "73793316": 242, "74": 161, "74478185e": 222, "7466": 245, "75": [225, 245], "75162792e": 223, "75700430e": [222, 223], "76": 178, "76428795": 242, "77": [178, 245], "77213307e": 222, "7741": 162, "7765": 162, "7788": 245, "7793": 245, "78": 245, "7894": 162, "79": 245, "7932": 162, "8": [1, 2, 7, 8, 9, 12, 13, 21, 22, 23, 25, 30, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 224, 228, 230, 231, 233, 235, 239, 240, 242, 243, 244, 245, 246, 247, 250], "80": [161, 228, 245], "8000": [162, 165], "80053532e": 222, "8078": 162, "81": 245, "81699747": 242, "81760912e": 222, "8188": 245, "81884710e": 222, "8229": 162, "83": [161, 178, 245], "83640555e": 223, "8366": 245, "83861901e": [222, 223], "84": 178, "8405": 245, "8433522": 242, "8442": 245, "85": 245, "86": [161, 245], "8606": 245, "864": [214, 222, 223], "8667": 165, "86945379e": 222, "8706": 162, "8711877": 242, "87471542e": [222, 223], "87630311e": [222, 223], "87656835e": 222, "8796": 162, "88": 245, "88260233e": [222, 223], "8836": 162, "88373709e": 223, "89": [161, 245], "89074164e": 223, "89249423e": [222, 223], "89348674e": 222, "8984": 166, "8994": 166, "8998": 166, "8bit": 254, "9": [158, 164, 165, 172, 176, 178, 203, 204, 205, 206, 207, 210, 211, 212, 213, 221, 222, 223, 228, 233, 243, 244, 254], "90": [233, 245], "90229788e": [222, 223], "9054": 245, "91": [178, 245], "9150": 245, "9157": 162, "9176": 162, "92": 178, "9216": 172, "92511864e": [222, 223], "93": [178, 245], "93232973e": [222, 223], "9333": 165, "93787616e": 222, "94": [161, 178], "9487": 162, "94877124": 242, "9490": 162, "95": 178, "95088911e": [222, 223], "95260113e": 222, "9570": 178, "95997976e": [222, 223], "96": [178, 215, 245], "9609": 178, "96155685e": 222, "9648": 178, "9688": 178, "97": 158, "9700": 162, "9714": 245, "9727": 178, "97294299e": [222, 223], "9766": 178, "9805": 178, "9826": 245, "9844": 178, "9883": 178, "99": 245, "9904": 245, "9922": 178, "9961": [162, 178], "A": [1, 2, 3, 8, 9, 12, 13, 14, 15, 17, 21, 22, 23, 25, 27, 28, 29, 170, 174, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 233, 235, 237, 240, 246, 247, 248, 249, 250, 258], "And": [188, 201, 206, 258], "As": [30, 188, 190, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 219, 220, 225, 226, 233, 243, 246, 253], "At": [225, 229], "But": [172, 188, 195, 196, 200, 201, 206, 209, 213, 227, 235], "By": [9, 13, 17, 20, 29, 175, 176, 179, 195, 206, 207, 209, 210, 211, 212, 214, 220, 224, 227, 228, 230, 247, 249, 250], "For": [8, 20, 21, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 172, 173, 175, 176, 177, 178, 184, 187, 188, 192, 195, 196, 197, 200, 201, 206, 209, 213, 214, 218, 219, 220, 223, 224, 225, 226, 227, 233, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 258, 259], "If": [1, 2, 8, 9, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 233, 235, 237, 239, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 259], "In": [20, 30, 160, 171, 172, 173, 175, 179, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 225, 226, 227, 229, 231, 233, 234, 237, 238, 244, 245, 246, 247, 250, 251, 252, 253, 257, 258], "It": [1, 2, 6, 8, 9, 10, 20, 171, 172, 179, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 214, 216, 218, 219, 220, 224, 226, 231, 233, 239, 244, 247, 248, 250, 254], "Its": 231, "NOT": [13, 25, 183, 201, 220], "No": [173, 222, 258], "Not": [8, 21, 176, 177, 184, 187, 188, 195, 200, 201, 209, 213, 215, 219, 221, 226, 239, 246, 250], "ONE": 242, "OR": 171, "Of": [198, 199, 201, 203, 204, 205, 211, 212], "On": [188, 201, 206], "One": [21, 22, 189, 190, 191, 192, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 219, 247, 249, 250], "Or": [1, 22, 172, 185, 214, 218, 219, 227, 247, 250], "Such": 172, "That": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 231], "The": [1, 2, 4, 6, 7, 8, 9, 12, 14, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259], "Then": [8, 177, 184, 211, 212, 219, 227], "There": [169, 171, 173, 185, 188, 189, 192, 193, 195, 196, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 218, 219, 220, 250, 258, 259], "These": [1, 13, 22, 25, 171, 173, 175, 183, 185, 188, 190, 194, 196, 201, 206, 208, 210, 214, 219, 220, 224, 225, 233, 237, 238, 244, 247, 249, 250, 251, 255], "To": [2, 12, 20, 30, 171, 174, 175, 176, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 221, 222, 223, 226, 228, 229, 233, 235, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 255, 258, 259], "With": [158, 197, 200, 213, 242, 250], "_": [8, 9, 20, 21, 30, 161, 162, 165, 168, 175, 177, 178, 179, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 233, 237, 239, 241, 242, 246, 247, 248, 249, 250, 254, 257, 258, 259], "__________________________________________________________________________________________________": [214, 222, 223], "__getitem__": 208, "__init__": [13, 20, 25, 172, 173, 175, 183, 189, 197, 208, 214, 220, 233, 247, 252, 253, 254], "__iter__": [189, 214, 220, 233, 247], "__len__": [8, 189, 208, 219], "__next__": [189, 214, 220, 233, 247], "__quant_init__": [30, 175], "__torch_function__": 172, "__version__": 244, "_batch_index": 220, "_create_sampled_data_load": 208, "_current_iter": [214, 233, 247], "_data": [214, 220, 233, 247], "_dataset": 208, "_default_forward_fn": [13, 25, 183, 220], "_encodingmismatchinfo": 247, "_get_unlabled_data_load": 219, "_is_encoding_frozen": 171, "_iter": 189, "_max": 166, "_module_to_wrap": 171, "_not_specifi": [9, 179, 247, 250], "_quantizationsimmodelinterfac": [177, 182, 184, 185, 219], "_quantschemepair": [13, 25, 183, 220], "_remove_input_quant": 171, "_remove_output_quant": 171, "_remove_param_quant": 171, "_step": [164, 165], "_tie_quant": 254, "_torch_data_load": 189, "_unlabel": [214, 233, 247], "ab": [202, 215], "abil": [254, 259], "abl": [8, 20, 25, 158, 159, 160, 172, 173, 183, 189, 190, 191, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 219, 220], "about": [158, 189, 190, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 223, 241, 245, 246, 248, 259], "abov": [172, 174, 188, 192, 200, 201, 203, 204, 205, 206, 213, 219, 224, 227, 228, 229, 230, 231, 235, 243, 244, 246, 249, 250], "absolut": [161, 162, 224, 228, 230, 233, 243], "absolute_path_to_workspac": [187, 243], "absorpt": [190, 202, 210], "abstract": [30, 160, 175], "acc": [194, 195, 196, 200, 219, 220], "acc_top1": 220, "acccuraci": 192, "acceler": [191, 196, 198, 199, 211, 212, 224, 227, 228, 230, 240, 254], "accept": [226, 233, 254, 255, 258, 259], "access": [171, 196, 206, 207, 210, 211, 212, 254], "accord": [9, 169, 179, 218, 247, 250], "accordingli": 254, "account": [24, 215, 226, 254, 255], "accumul": [225, 227, 228, 230, 232], "accur": [196, 214, 222], "accuraci": [1, 2, 12, 13, 17, 22, 23, 25, 29, 176, 181, 182, 183, 195, 196, 200, 208, 209, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 239, 240, 241, 246, 247, 249, 250, 254, 255], "achiev": [178, 189, 193, 201, 207, 225, 234, 235, 240, 258, 259], "acronym": 241, "across": [172, 176, 219, 223, 232, 240, 242, 249], "act": [2, 8, 12, 21, 174, 177, 182, 184, 188, 219, 233], "act_bw": 210, "action": [219, 231], "activ": [2, 8, 9, 12, 15, 20, 21, 22, 24, 168, 170, 172, 174, 175, 176, 177, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259], "activation_bitwidth": [214, 247, 248, 250], "activation_encod": 248, "activation_quant": [2, 233], "activations_pdf": [200, 213, 219], "actual": [188, 192, 195, 197, 206, 209, 216, 219], "acuraci": [192, 233], "ad": [173, 176, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 236, 247, 248, 251, 254], "ada_model": [189, 193, 201, 207], "ada_round_data": [193, 201], "ada_rounded_model": 214, "adam": [194, 195, 196, 198, 199, 200, 219], "adamw": [237, 238], "adapater_name_to_meta_data": 176, "adapt": [23, 26, 176, 180, 181, 186, 187, 195, 201, 209, 219, 220, 221, 236, 237, 238, 239, 240, 254], "adapter1": 176, "adapter1_weight": 176, "adapter_weights_path": 176, "adaptermetadata": 176, "adaptiveavgpool1d": 31, "adaptiveavgpool2d": 32, "adaptiveavgpool3d": 33, "adaptivemaxpool1d": 34, "adaptivemaxpool2d": 35, "adaptivemaxpool3d": 36, "adaptiveround": 254, "adaround": [5, 13, 18, 25, 167, 171, 183, 187, 194, 208, 214, 219, 220, 240, 254, 255], "adaround_data_load": [208, 220], "adaround_dataset": 194, "adaround_dataset_s": [194, 208, 220], "adaround_param": [13, 25, 183, 194, 208, 220], "adaround_weight": [1, 11, 23, 171, 181, 189, 193, 194, 201, 207, 208, 214, 220], "adarounded_model": 214, "adaroundparamet": [1, 11, 13, 23, 25, 181, 183, 189, 193, 194, 201, 207, 208, 214, 220], "adascal": [167, 254], "add": [20, 22, 172, 173, 175, 176, 185, 191, 195, 198, 199, 203, 204, 205, 211, 212, 231, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259], "add_check": 173, "add_lora_to_r": 238, "addit": [30, 178, 179, 185, 188, 195, 196, 197, 200, 201, 206, 209, 213, 221, 246, 247, 248, 250, 251, 254, 257], "address": [229, 255], "adequ": 258, "adher": 259, "adjac": [188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 222, 223, 232, 240, 251], "adjust": [168, 202, 210, 214, 217, 224, 225, 232, 237, 238, 246, 255], "admin": 187, "advanc": [178, 240, 254], "advantag": 239, "affect": [1, 23, 181, 214, 240, 246, 251, 259], "affin": [7, 30, 158, 159, 160, 161, 162, 163, 164, 165, 170, 175, 176, 222, 223, 237, 245, 246], "affine_q": 171, "affine_qdq": 171, "affine_quant": 171, "affinequant": [166, 171], "after": [8, 21, 166, 172, 173, 175, 177, 178, 184, 185, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 219, 220, 221, 222, 223, 225, 227, 229, 240, 250, 254, 255], "afterward": [24, 215], "again": [190, 201, 202, 203, 204, 205, 210, 233, 250, 259], "against": [8, 13, 21, 177, 184, 198, 199, 201, 209, 211, 212, 219, 220, 224], "aggress": 240, "agre": 259, "ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260], "aim": [195, 203, 204, 205, 209, 259], "aimet": [5, 17, 18, 20, 29, 30, 171, 172, 173, 175, 176, 178, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 239, 240, 242, 246, 247, 248, 250, 252, 253, 254, 255, 257, 259], "aimet_cl": 202, "aimet_common": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "aimet_common_def": 228, "aimet_export_artifact": 218, "aimet_exported_model": 257, "aimet_exported_model_path": 257, "aimet_onnx": [188, 189, 190, 191, 214, 218, 219, 222, 223, 233, 239, 242, 244, 247, 248], "aimet_spatial_svd": 228, "aimet_tensorflow": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 214, 218, 219, 220, 221, 222, 223, 228, 233, 242, 244, 247, 248, 250], "aimet_tensorflow_def": 228, "aimet_torch": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 188, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 254], "aimet_vari": 243, "algo": [182, 233], "algorithm": [2, 12, 17, 29, 182, 224, 225, 226, 227, 228, 230, 231, 248, 255], "alia": [9, 22, 179, 185, 247, 250], "aliasbackward0": [158, 159, 160, 161, 162, 178, 245], "align": [247, 251, 254], "all": [1, 2, 3, 7, 8, 9, 12, 14, 15, 20, 21, 22, 27, 30, 100, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 230, 232, 233, 235, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258], "all_q_modul": 171, "all_quant_wrapp": 171, "allclos": 172, "allow": [2, 12, 13, 17, 20, 22, 25, 29, 158, 159, 160, 170, 172, 182, 183, 188, 192, 194, 196, 206, 208, 216, 220, 224, 227, 228, 229, 230, 232, 233, 234, 246, 247, 248, 250, 253, 254, 255], "allow_custom_downsample_op": [29, 203, 205, 224], "allow_overwrit": [171, 214, 238, 247, 250], "allowed_accuracy_drop": [2, 12, 13, 25, 182, 183, 188, 192, 194, 206, 208, 220, 233], "alon": [176, 249], "along": [159, 176, 178, 233, 249], "alpha": [176, 233], "alphadropout": 37, "alreadi": [28, 30, 178, 179, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 223, 237, 243, 247, 250, 255], "also": [1, 11, 13, 22, 23, 160, 172, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 219, 220, 222, 224, 227, 231, 233, 235, 242, 244, 247, 248, 250, 251, 253, 254, 257, 258], "alter": [189, 193, 201, 207], "altern": [8, 177, 184, 188, 192, 203, 204, 205, 206, 219, 244, 246], "alwai": [226, 237, 238], "am": [8, 21, 177, 184, 219], "among": [1, 13, 23, 25, 181, 183, 214, 220, 258], "amount": [200, 213, 233, 239], "amp": [2, 12, 13, 25, 167, 174, 182, 183, 187, 220, 233, 234, 254], "amp_search_algo": [2, 12, 182, 188, 206, 233], "ampsearchalgo": [2, 12, 182, 188, 206, 233], "an": [1, 8, 12, 13, 17, 20, 22, 25, 29, 30, 158, 159, 160, 166, 168, 170, 171, 172, 173, 175, 178, 179, 183, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 230, 231, 233, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "analys": [200, 213, 219], "analysi": [2, 8, 12, 17, 21, 29, 177, 182, 184, 188, 192, 196, 203, 204, 205, 206, 224, 227, 228, 230, 254], "analyt": 229, "analyz": [8, 17, 21, 29, 161, 162, 175, 177, 184, 187, 194, 208, 220, 224, 228, 229, 230, 232, 235, 242, 254], "anchor": [148, 149], "andrea": 227, "andrei": 227, "andrew": 227, "ani": [2, 8, 9, 12, 17, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 172, 173, 174, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 224, 228, 230, 233, 235, 237, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 258], "anneal": [1, 11, 23, 181, 214], "anoth": [176, 179, 185, 196, 230, 231, 240, 247, 248, 250, 251], "any_nam": 243, "any_tag": 243, "anyth": [2, 12, 182, 188, 192, 200, 206, 213, 233], "api": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 168, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 216, 229, 237, 238, 240, 243, 248, 252, 253, 254, 257], "appear": [17, 29, 172, 173, 224, 228, 230], "append": 243, "appli": [2, 7, 8, 13, 16, 25, 30, 100, 161, 162, 163, 164, 165, 170, 173, 174, 175, 180, 183, 186, 187, 188, 195, 196, 203, 204, 205, 206, 208, 209, 214, 215, 219, 220, 222, 223, 227, 229, 232, 233, 237, 239, 240, 241, 242, 246, 247, 249, 250, 251, 254, 255, 258, 259], "applic": [2, 12, 182, 188, 189, 192, 193, 194, 198, 199, 200, 201, 202, 206, 207, 210, 214, 219, 220, 221, 222, 223, 228, 233, 247, 250, 257, 259], "apply_adaround": [1, 11, 23, 181, 189, 193, 201, 207, 214], "apply_adascal": [24, 215], "apply_seq_algo": [10, 239], "apply_seq_ms": [10, 171, 180, 186, 239], "approach": [174, 235, 237, 249], "appropri": [23, 175, 179, 181, 182, 185, 188, 192, 195, 196, 200, 201, 206, 209, 213, 214, 226, 233, 237, 238, 242, 247, 249, 250, 255], "approx": 249, "approxim": [8, 219, 225, 239, 249, 259], "apt": [242, 244], "ar": [1, 2, 8, 9, 10, 11, 12, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "arang": [164, 165, 172, 178], "arbitrari": 246, "architectur": [197, 240, 242, 244, 254], "archiv": 244, "area": [219, 232], "arg": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 170, 174, 175, 179, 197, 233, 235, 246, 247, 250, 254], "argmax": [214, 220, 233, 247, 250], "argument": [1, 2, 9, 12, 13, 22, 23, 24, 25, 30, 166, 170, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 200, 213, 214, 215, 218, 219, 220, 233, 239, 246, 247, 248, 250, 257], "around": [196, 201, 219, 254], "arrai": [170, 189, 246, 248], "arrang": 229, "art": [188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213], "arthmet": [20, 197], "artifact": [9, 174, 196, 234, 235, 243, 247, 254, 257, 258], "arxiv": [202, 215], "asic": 240, "ask": [30, 188, 192, 195, 196, 200, 206, 209, 213], "assert": [171, 172, 178, 197, 206, 247], "assert_array_equ": 197, "assess": 226, "assign": [30, 161, 162, 166, 175, 176, 198, 199, 233, 243, 246], "associ": [2, 12, 13, 15, 25, 30, 160, 173, 174, 175, 178, 182, 183, 200, 213, 220, 222, 233, 257], "assum": [7, 13, 25, 170, 183, 220, 226, 244, 246], "astyp": 219, "asym": [10, 180, 186, 239], "asymmetr": [161, 162, 178, 249, 251], "att": [20, 197], "attempt": [9, 223, 247], "attent": [20, 196, 197], "attention_mask": [237, 238], "attn_output": [20, 197], "attribut": [12, 20, 30, 171, 172, 174, 175, 176, 178, 182, 201, 219, 233], "attributeerror": 254, "augment": 229, "auto": [9, 17, 29, 188, 192, 203, 204, 205, 206, 224, 228, 230, 233, 234, 247, 248], "auto_param": [203, 204, 205, 224, 228, 230], "auto_qu": [194, 208, 220], "auto_quant_v2": [18, 220], "autoconfig": [237, 238], "autograd": [158, 159, 160], "autom": [172, 206, 207, 210, 211, 212, 213, 240, 253], "automat": [13, 17, 25, 29, 174, 183, 187, 194, 208, 219, 224, 225, 227, 228, 230, 240, 243, 244, 246, 254], "automodelforcausallm": [237, 238], "automodeparam": [17, 29, 203, 204, 205, 224, 228, 230], "autoqu": [5, 13, 25, 167, 183, 187, 220, 240, 254], "autoquantwithautomixedprecis": [13, 25, 183, 220], "autotoken": [237, 238], "avail": [10, 172, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 219, 239, 242, 251, 254, 255, 256, 257], "avgpool1d": 38, "avgpool2d": [39, 235], "avgpool3d": 40, "avoid": [8, 22, 177, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 214, 219, 225, 240, 247, 250, 252, 253, 254], "awai": 201, "awar": [30, 187, 214, 221, 227, 232, 239, 240, 249, 255, 259], "axi": [178, 200, 213, 214, 219, 220, 233, 247, 248, 249], "b": [30, 161, 162, 163, 164, 165, 176, 178, 192, 228, 233, 246], "b_": [161, 162, 163, 164, 165], "b_0": [161, 162, 163, 164, 165], "b_1": [161, 162, 163, 164, 165, 246], "b_2": 246, "b_d": [161, 162, 163, 164, 165], "b_n": 246, "back": [2, 12, 158, 159, 174, 177, 182, 184, 219, 233, 249, 250, 251], "backend": [9, 179, 185, 195, 234, 247, 250, 257, 258], "backpropag": [158, 159, 160], "backslash": 254, "backward": [167, 221, 222, 237, 238, 247, 250, 254], "bad": 20, "balanc": [227, 240, 259], "bandwidth": 225, "base": [2, 8, 21, 30, 160, 161, 162, 164, 165, 166, 171, 175, 176, 177, 178, 182, 184, 188, 189, 192, 193, 194, 195, 201, 206, 207, 208, 209, 215, 219, 224, 225, 226, 229, 233, 234, 236, 238, 239, 242, 244, 246, 247, 250, 254, 257, 258], "base_encod": 176, "base_model": 176, "baselin": [2, 12, 182, 195, 196, 208, 226, 227, 233, 250], "bash": 243, "basi": [201, 254], "basic": [188, 192, 195, 196, 206, 209, 233, 246, 250, 254, 257], "batch": [1, 2, 8, 10, 11, 13, 14, 15, 21, 23, 25, 26, 166, 174, 180, 181, 182, 183, 186, 192, 194, 195, 203, 204, 205, 209, 214, 219, 220, 223, 228, 233, 237, 238, 239, 240, 247, 250, 254], "batch_cntr": [188, 189, 190, 191, 193, 198, 199, 201, 202, 207, 209, 210, 211, 212, 213, 220], "batch_data": [214, 233, 247], "batch_id": [237, 238], "batch_norm": [3, 14, 15, 27, 221, 222], "batch_norm_fold": [5, 14, 18, 167, 188, 189, 190, 191, 192, 193, 195, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 221, 222, 233, 250], "batch_siz": [1, 23, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 228, 233, 237, 238, 239, 247, 250], "batchnorm": [13, 15, 20, 25, 26, 183, 187, 188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 214, 220, 221, 222, 223, 231, 254], "batchnorm1d": [27, 43, 222], "batchnorm2d": [27, 44, 173, 222, 223], "batchnorm3d": 45, "batchnrom": 209, "bc": 190, "bc_param": 210, "bceloss": 41, "bcewithlogitsloss": 42, "becaus": [20, 172, 197, 209, 246, 258], "becom": 254, "becuas": [20, 197, 218], "been": [20, 30, 158, 168, 173, 194, 195, 196, 201, 208, 217, 231, 237, 240, 244, 245, 248, 249, 254, 257], "befor": [1, 2, 8, 9, 20, 24, 30, 168, 171, 175, 178, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 227, 233, 236, 237, 238, 247, 249, 250, 252, 254, 258], "begin": [20, 161, 162, 163, 164, 165, 172, 173, 197, 241], "behav": [30, 100, 175, 254, 255], "behavior": [171, 172, 175, 188, 201, 206, 207, 210, 211, 212, 222, 241, 249, 251, 254, 258], "behind": 258, "being": [12, 29, 171, 172, 173, 177, 184, 219, 221, 224, 228, 230, 233, 246, 248, 252, 253, 254], "below": [20, 30, 161, 162, 164, 165, 171, 174, 175, 176, 178, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 224, 226, 227, 229, 233, 235, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255], "benefici": [188, 192, 195, 196, 200, 201, 206, 213], "benefit": [234, 246, 248, 249], "bert": 255, "besid": 246, "bespok": 237, "best": [13, 25, 174, 183, 194, 201, 208, 220, 225, 227, 232, 235, 242, 249], "beta": [1, 11, 23, 181, 214, 215, 254], "better": [189, 193, 198, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 220, 227, 246, 250, 258], "between": [1, 2, 8, 11, 17, 21, 23, 29, 169, 171, 174, 175, 177, 181, 182, 184, 188, 201, 206, 214, 216, 218, 219, 224, 228, 230, 232, 233, 239, 240, 246, 247, 249, 251, 259], "bfloat16": 166, "bia": [30, 166, 171, 172, 173, 175, 176, 179, 190, 195, 202, 222, 223, 224, 245, 247, 250, 251, 254], "bias": [188, 190, 202, 206, 210, 222], "bias_correct": 210, "bilinear": 46, "billion": [258, 259], "bin": [176, 243, 244, 257], "binari": [2, 12, 182, 188, 206, 233, 257], "binary_classifi": 20, "binary_fil": 257, "binary_file_nam": 257, "bit": [1, 2, 8, 12, 21, 23, 166, 170, 177, 178, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 232, 234, 237, 240, 242, 245, 246, 248, 249, 254, 255, 258, 259], "bitop": [2, 12, 182, 233], "bitwidth": [1, 2, 7, 8, 9, 11, 12, 13, 21, 22, 23, 25, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 192, 193, 201, 206, 207, 214, 219, 220, 223, 233, 234, 237, 240, 242, 246, 247, 248, 249, 250, 258], "biwidth": [189, 193, 201, 207], "bkd": [24, 215, 232], "blankevoort": 227, "block": [7, 25, 161, 162, 163, 164, 165, 170, 171, 183, 196, 215, 220, 237, 238, 243, 248, 249, 254], "block_group": [170, 246], "block_siz": [7, 161, 162, 163, 164, 165, 170, 178, 246, 248], "blockwis": [7, 170, 178, 215, 232, 248, 249, 254], "bn": [3, 14, 15, 26, 27, 188, 189, 190, 191, 193, 195, 198, 199, 201, 202, 206, 207, 210, 211, 212, 219, 221, 222, 232, 240, 254], "bn1": [20, 173], "bn2": 20, "bn_conv1": [214, 222, 223], "bn_num_batch": [14, 221], "bn_re_estimation_dataset": [14, 221], "bn_reestim": [167, 195, 209, 221], "bnf": [214, 221, 222, 223], "bokeh": 233, "bool": [1, 2, 9, 12, 13, 17, 22, 25, 29, 161, 162, 164, 165, 166, 170, 172, 173, 174, 176, 179, 182, 183, 185, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 220, 224, 228, 230, 233, 235, 246, 247, 248, 250], "boolean": [30, 174, 235], "both": [20, 21, 164, 165, 171, 172, 175, 177, 184, 188, 192, 199, 205, 206, 211, 212, 219, 222, 227, 228, 229, 231, 233, 236, 239, 242, 245, 247, 249, 250, 251, 255, 257, 259], "bottleneck": 255, "box": 254, "bq": [170, 246, 254], "branch": [172, 187, 251], "break": [188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 207, 209, 210, 211, 212, 213, 220, 228, 233, 237, 238, 247, 250, 254], "bridg": 234, "british": 227, "broken": [236, 248], "browser": 187, "bruteforc": [12, 188, 206, 233], "buffer": 166, "bug": [248, 254], "bugfix": 254, "build": [20, 171, 197, 244], "built": [2, 30, 174, 175, 182, 195, 196, 233, 242], "bw": [2, 7, 12, 25, 170, 174, 176, 179, 182, 183, 185, 220, 233, 246, 247, 248, 250, 253], "bw_output": 253, "c": [178, 225, 244], "c_": 178, "cach": [2, 12, 13, 25, 182, 183, 188, 192, 206, 220, 233, 244, 254], "cache_id": [13, 25, 183, 220], "calcul": [2, 12, 21, 22, 25, 175, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 219, 220, 226, 233, 236, 237, 247, 249, 250, 254], "calculate_and_fuse_encodings_into_weight": 237, "calibr": [8, 9, 21, 161, 162, 168, 175, 177, 179, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 216, 217, 233, 234, 237, 239, 240, 245, 246, 249, 254, 255, 258], "calibration_batch": [233, 250], "calibration_callback": [237, 238], "calibration_data_load": [175, 247], "calibration_data_s": 247, "calibration_dataset": [214, 221, 247, 250], "calibration_dataset_s": [194, 208, 220], "call": [2, 8, 10, 12, 13, 14, 20, 24, 25, 30, 100, 158, 159, 160, 166, 172, 174, 175, 177, 178, 182, 183, 184, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 215, 219, 220, 221, 224, 228, 230, 233, 235, 239, 246, 247, 252, 254, 257, 258, 259], "call_funct": 172, "callabl": [1, 2, 8, 9, 12, 13, 17, 23, 24, 25, 26, 29, 30, 170, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 186, 214, 215, 219, 220, 221, 224, 228, 230, 233, 239, 246, 247, 250], "callal": [2, 182, 233], "callback": [2, 8, 12, 13, 17, 21, 22, 29, 174, 177, 182, 184, 185, 192, 194, 196, 198, 199, 200, 203, 204, 205, 213, 220, 224, 228, 230, 233, 237, 239, 249, 250], "callbackfunc": [2, 12, 21, 174, 177, 182, 184, 188, 192, 200, 206, 213, 219, 233], "callbak": [188, 206], "can": [1, 2, 6, 8, 9, 11, 12, 19, 20, 22, 23, 27, 28, 158, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "candid": [2, 10, 12, 13, 17, 25, 29, 174, 180, 182, 183, 186, 188, 192, 206, 215, 220, 224, 226, 227, 228, 230, 233, 239, 254], "cannot": [161, 162, 172, 173, 188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212], "capabl": [175, 229, 242, 245], "captur": [6, 19, 169, 172, 179, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 216, 218, 247, 250], "card": [242, 245], "care": 227, "carefulli": 240, "carri": [158, 159, 160], "case": [164, 165, 170, 171, 172, 173, 175, 176, 196, 197, 200, 213, 214, 219, 226, 235, 236, 245, 246, 251, 253, 254, 259], "cast": 166, "cat": [178, 244], "categor": [192, 193, 198, 199, 201, 214, 220, 221, 228, 233, 247, 250], "categorical_crossentropi": [198, 199], "categoricalaccuraci": [194, 195, 200, 214, 219, 220, 221, 247, 250], "categoricalcrossentropi": [194, 195, 200, 214, 219, 220, 221, 247, 250], "caus": [20, 203, 204, 205, 227, 251, 255], "caution": 214, "cd": 187, "cdot": [161, 162, 163, 164, 165], "ceil": [1, 23, 181, 214, 220, 233, 247], "cell": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "celu": 47, "center": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "center_crop": [192, 233], "centercrop": [206, 208, 214, 220, 233, 247], "certain": [172, 177, 184, 206, 207, 210, 211, 212, 213, 219, 227, 233, 235, 248, 251, 253, 254], "chain": [237, 238], "challeng": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "chang": [2, 12, 24, 160, 168, 171, 172, 176, 178, 179, 182, 188, 189, 190, 191, 192, 195, 196, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 221, 222, 223, 227, 231, 233, 234, 235, 239, 247, 248, 250, 251, 253, 254, 258], "channel": [7, 8, 17, 21, 29, 170, 175, 176, 177, 184, 187, 188, 189, 190, 191, 202, 204, 206, 207, 209, 210, 211, 212, 213, 219, 221, 222, 223, 225, 226, 228, 230, 231, 232, 240, 246, 248, 249, 251, 254, 255], "channel_index": [8, 21, 177, 184, 219], "channel_index_0": [200, 213], "channel_index_1": [200, 213], "channel_index_n": [200, 213], "channel_prun": [29, 203, 205, 224, 228, 230], "channel_pruning_auto_mod": 224, "channel_pruning_manual_mod": 224, "channelpruningparamet": [29, 203, 205, 224, 228, 230], "channelshuffl": 49, "characterist": [188, 206, 209, 213], "chart": [223, 255], "check": [20, 25, 172, 173, 178, 183, 188, 192, 195, 196, 200, 206, 209, 213, 216, 218, 220, 243, 253, 254], "check_model_sensitivity_to_quant": [8, 21, 177, 184, 219], "checker": [173, 254], "checkpoint": [180, 185, 186, 239], "checkpoints_config": [180, 186, 239], "chipset": 258, "choic": [200, 201, 213, 219, 227, 242, 243, 248, 249], "choos": [185, 188, 192, 203, 204, 205, 206, 214, 218, 224, 225, 227, 233, 240, 244, 251, 254], "choose_fast_mixed_precis": [12, 192, 233], "choose_mixed_precis": [2, 12, 174, 182, 188, 192, 206, 233], "chosen": [187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 243], "chunk": 249, "cin": 178, "circularpad1d": 50, "circularpad2d": 51, "circularpad3d": 52, "cl": [30, 190, 202, 210, 254], "clamp": [161, 162, 164, 165, 166, 249], "class": [1, 2, 6, 8, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 246, 247, 250, 251, 252, 253], "class_nam": [192, 197, 228, 233], "classif": [20, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 227, 239, 240], "classifi": 20, "classmethod": [9, 22, 30, 166, 179, 185, 247, 250], "cle": [4, 16, 28, 187, 214, 219, 220, 223, 254, 255], "cle_applied_model": [202, 223], "clean": [233, 254], "clean_start": [2, 12, 182, 188, 192, 206, 233], "clear_sess": 195, "clearli": 254, "clip": [195, 215, 222, 249, 251], "clone": [160, 187, 196], "clone_lay": 196, "close": [225, 249], "closer": [189, 193, 201, 207], "cloud": [240, 243, 258], "cmp_re": 233, "cnn": 240, "cnt": [192, 228, 233], "code": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 223, 242, 243, 245, 246], "codelinaro": 243, "collate_fn": [237, 238], "collect": [8, 21, 25, 168, 177, 183, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 216, 217, 219, 220, 226, 240], "color": 231, "column": 226, "com": [187, 242, 243, 244], "combin": [2, 12, 172, 182, 188, 192, 206, 220, 225, 227, 233, 240, 243, 246, 254], "come": [227, 234, 250], "command": [187, 229, 242, 243, 244, 245, 257], "common": [171, 176, 178, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 243, 244, 246, 254, 255], "commonli": [1, 23, 178, 181, 214, 240], "comp": [17, 29, 224, 228, 230], "comp_stat": [203, 204], "compar": [2, 12, 172, 182, 188, 192, 195, 196, 197, 200, 206, 209, 213, 215, 219, 233, 234, 240, 250, 258], "comparison": [189, 190, 191, 207, 210, 211, 212, 216, 218], "compat": [167, 170, 192, 195, 196, 233, 242, 245, 246, 247, 253, 254], "compil": [1, 9, 194, 195, 196, 198, 199, 200, 214, 219, 220, 221, 247, 250, 254, 259], "complet": [2, 12, 182, 188, 192, 203, 204, 205, 206, 228, 233, 244, 255, 257], "complex": [1, 22, 185, 196, 214, 219, 235, 247, 250], "compli": [206, 207, 210, 211, 212, 213], "complic": 254, "compon": [171, 178, 247, 254], "compos": [174, 206, 208, 214, 220, 233, 235, 245, 247], "compress": [18, 167, 187, 231, 240, 241, 248, 254], "compress_model": [17, 29, 203, 204, 205, 224, 228, 229, 230], "compress_schem": [17, 29, 203, 204, 205, 224, 228, 230], "compressed_bw": 248, "compressed_model": [203, 204, 224, 228, 230], "compressionschem": [17, 29, 203, 204, 205, 224, 228, 230], "compressionstat": [17, 29, 224, 228, 230], "compressor": [17, 29, 224, 228, 230], "compris": [188, 192, 206, 226], "compromis": [203, 204, 205], "compuat": [13, 25, 183, 220], "comput": [1, 2, 8, 9, 12, 13, 21, 22, 24, 25, 29, 30, 100, 166, 176, 177, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 224, 227, 228, 229, 230, 231, 233, 237, 238, 239, 240, 242, 244, 245, 246, 248, 249, 254, 258, 259], "computation": 229, "compute_encod": [9, 22, 24, 30, 159, 160, 161, 162, 166, 168, 171, 174, 175, 178, 179, 180, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 214, 215, 217, 221, 233, 235, 237, 238, 239, 245, 247, 250], "computeencod": 242, "concat": 254, "concatenated_exampl": [237, 238], "concept": 171, "concis": 248, "concret": 172, "concrete_arg": [25, 172, 183, 220], "condit": [172, 173, 221], "confer": 227, "config": [2, 8, 21, 22, 174, 177, 179, 180, 182, 184, 185, 186, 188, 201, 206, 219, 221, 233, 235, 237, 238, 239, 247, 250, 251, 254], "config_fil": [8, 9, 11, 13, 21, 22, 25, 177, 179, 183, 184, 185, 195, 200, 201, 213, 214, 219, 220, 221, 235, 239, 245, 247, 250], "config_util": [167, 246], "configr": 176, "configur": [1, 8, 9, 11, 13, 17, 21, 23, 25, 29, 166, 174, 176, 177, 178, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 202, 206, 207, 209, 210, 211, 212, 214, 219, 220, 224, 228, 230, 235, 237, 238, 245, 246, 247, 248, 250, 254], "confirm": 245, "conflict": [174, 235], "conform": [247, 259], "conjunct": 249, "connect": [214, 222, 223, 224, 227, 230, 240], "connectedgraph": [173, 254], "consecut": [176, 190, 202, 210, 223], "consid": [24, 196, 203, 205, 215, 228, 230, 255, 259], "consist": [169, 170, 171, 188, 206, 218, 226, 233, 246, 249], "consol": 216, "constant": [172, 191, 198, 211, 212, 226], "constantpad2d": [53, 54], "constantpad3d": 55, "constrain": [240, 246], "constraint": 248, "construct": [218, 243, 244, 254], "constructor": [6, 19, 169, 172, 218, 253], "consum": [194, 208, 220, 227, 234, 248], "contain": [2, 8, 12, 21, 29, 30, 158, 166, 168, 172, 173, 174, 175, 177, 182, 184, 189, 190, 191, 193, 194, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 217, 219, 223, 224, 228, 230, 233, 240, 241, 242, 245, 247, 248, 249, 250, 251, 257, 258], "container_nam": 243, "content": 240, "context": [9, 30, 175, 257, 259], "contigu": [237, 238, 254], "continu": [2, 20, 173, 182, 185, 188, 206, 233, 237, 243, 244, 254, 255], "contrast": [20, 171, 201], "contribut": [219, 233, 242, 255], "control": [25, 172, 175, 178, 183, 220, 249], "conv": [1, 3, 7, 11, 14, 15, 23, 27, 170, 172, 181, 190, 195, 202, 210, 214, 221, 222, 223, 228, 230, 231, 235, 246, 251, 254], "conv1": [20, 172, 173, 179, 195, 203, 204, 205, 214, 222, 223, 224, 228, 230, 247, 250, 253], "conv1_relu": [214, 222, 223], "conv1d": [27, 56, 222, 254], "conv2": [20, 170, 172, 195, 224, 228, 230, 246, 253], "conv2d": [15, 20, 27, 30, 57, 170, 171, 172, 173, 175, 179, 195, 196, 201, 214, 222, 223, 224, 227, 231, 246, 247, 250, 254], "conv2d_lay": 201, "conv2dnormactiv": [222, 223, 245], "conv2dtranspos": [15, 222], "conv3d": 58, "conv_1": [20, 197, 246], "conv_2": [20, 197], "conv_weight": 222, "conv_weight_arrai": 222, "conv_weight_nam": 222, "conveni": [243, 258], "convent": [251, 254], "converg": [240, 250], "convers": [253, 254], "convert": [2, 12, 20, 158, 171, 172, 174, 179, 182, 192, 206, 214, 220, 222, 223, 240, 247, 250, 252, 257, 259], "convert_to_pb": [22, 196, 247, 250], "convinplacelinear": 176, "convolut": [20, 170, 188, 189, 190, 191, 193, 197, 198, 199, 201, 202, 203, 205, 206, 207, 210, 211, 212, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 240, 246, 255], "convtranspose1d": [59, 254], "convtranspose2d": [27, 60, 222], "convtranspose3d": 61, "copi": [20, 22, 160, 166, 185, 187, 189, 206, 207, 210, 211, 212, 237, 238, 243, 247, 249, 250], "copy_": 171, "corp": 233, "correct": [13, 25, 183, 190, 201, 202, 208, 213, 220, 233, 235, 240, 247, 250, 259], "correct_bia": 210, "correct_predict": [214, 233, 247], "correctli": [245, 254], "correl": [188, 206, 233], "correspond": [1, 2, 3, 6, 8, 11, 12, 14, 15, 19, 21, 23, 27, 166, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 194, 201, 208, 214, 218, 219, 221, 222, 224, 231, 232, 233, 239, 242, 243, 244, 246, 247, 249, 250], "cosineembeddingloss": 62, "cosinesimilar": 63, "cost": [17, 29, 203, 205, 224, 226, 227, 228, 230, 232, 234, 249, 250], "cost_metr": [17, 29, 203, 204, 205, 224, 228, 230], "costmetr": [17, 29, 203, 204, 205, 224, 228, 230], "could": [1, 22, 171, 185, 188, 189, 190, 191, 193, 195, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 219, 231, 247, 248, 250, 253], "count_param": 197, "counter": [22, 195, 209, 247, 250], "counterpart": 175, "cours": [198, 199, 201, 203, 204, 205, 211, 212], "cout": 178, "cover": [188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 249], "cp": [224, 225, 226, 231], "cp310": [242, 244], "cp_comp_stat": 205, "cpu": [28, 172, 179, 185, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 222, 223, 233, 235, 239, 240, 242, 243, 245, 247, 250, 254], "cpuexecutionprovid": [188, 189, 190, 191], "creat": [2, 8, 9, 10, 12, 13, 17, 20, 22, 24, 25, 29, 30, 166, 168, 172, 174, 175, 176, 178, 182, 183, 185, 187, 194, 196, 200, 203, 204, 205, 208, 213, 214, 215, 217, 218, 220, 221, 224, 227, 228, 230, 234, 235, 237, 239, 240, 245, 249, 250, 254, 257, 258, 259], "create_quantsim_and_encod": [8, 219], "critic": 192, "crop_length": [192, 233], "cropped_imag": [192, 233], "cross": [4, 13, 16, 25, 28, 183, 187, 214, 219, 220, 255], "cross_layer_equ": [5, 18, 167, 190, 202, 210, 223], "crossentropyloss": [64, 221, 237, 238, 250], "crosslayerequ": 254, "ctcloss": 48, "ctivations_pdf": [8, 21, 177, 184, 219], "cu118": [242, 244], "cu121": [242, 243, 244], "cubla": 254, "cuda": [1, 6, 9, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 233, 235, 237, 238, 239, 242, 244, 245, 247, 250, 254], "cudaexecutionprovid": [188, 189, 190, 191], "cudnn": [242, 245], "cudnn_conv_algo_search": [188, 189, 190, 191], "cumul": [194, 208], "current": [12, 17, 20, 22, 24, 29, 30, 160, 166, 173, 174, 182, 195, 196, 197, 206, 213, 215, 224, 228, 230, 233, 234, 247, 250, 254, 260], "curv": [2, 12, 182, 188, 192, 206, 226, 233], "custom": [1, 9, 20, 22, 30, 172, 175, 188, 194, 196, 208, 214, 240, 243, 247, 248, 249, 250, 254, 255], "custom_function_not_to_be_trac": 172, "custom_object": [22, 247, 250], "customdataload": [214, 220, 233, 247], "customdataset": 215, "custommodel": 172, "custommodul": 172, "cycl": 258, "d": [161, 162, 163, 164, 165, 248], "dangl": [247, 250], "dark": [188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213], "data": [1, 2, 8, 9, 10, 11, 12, 17, 21, 22, 23, 24, 25, 26, 29, 158, 159, 160, 168, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 224, 228, 230, 232, 233, 237, 238, 239, 240, 246, 247, 249, 250, 254, 255], "data_load": [1, 2, 10, 23, 24, 25, 29, 168, 174, 180, 181, 182, 183, 186, 188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 221, 224, 233, 239, 247, 250], "data_loader_wrapp": [12, 192, 233], "data_set": [11, 24, 193, 201, 214, 215], "data_typ": [25, 171, 179, 183, 185, 220, 247, 250], "datacent": 243, "dataload": [2, 12, 23, 24, 25, 26, 174, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 233, 237, 238, 239, 247, 250], "dataloader_wrapp": [192, 233], "dataloadermnist": 224, "dataparallel": 250, "dataset": [2, 8, 9, 12, 13, 14, 21, 24, 25, 26, 177, 179, 182, 183, 184, 187, 196, 214, 215, 219, 220, 221, 228, 233, 237, 238, 239, 245, 247, 249, 250, 258], "dataset_dir": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 233], "dataset_train": [198, 199], "dataset_valid": [198, 199], "datasetv2": [11, 13, 14, 21, 214, 219, 220, 221], "datatyp": [13, 25, 183, 220, 248], "de": [178, 249], "deb": 244, "debian": [242, 244], "debug": [171, 192, 216, 218, 248, 254], "decai": 227, "decid": [180, 186, 188, 189, 190, 191, 192, 193, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 229, 233, 239, 243], "decim": [203, 204, 205, 224, 228, 230], "decis": 259, "declar": 30, "decode_predict": [192, 228, 233], "decompos": [227, 228, 230], "decomposit": [204, 205, 227, 228, 230], "decompress": [7, 170, 246], "decompressed_bw": [7, 170, 246], "decor": 30, "decreas": 240, "dedic": 240, "deem": 258, "deep": [222, 227, 234, 240], "deepcopi": 189, "def": [2, 9, 12, 17, 20, 22, 29, 30, 171, 172, 173, 174, 179, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 224, 228, 230, 233, 237, 238, 239, 245, 247, 250, 252, 253], "default": [1, 2, 8, 9, 10, 11, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 160, 161, 162, 164, 165, 166, 168, 172, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 233, 235, 239, 240, 244, 245, 247, 248, 249, 250, 254], "default_activation_bw": [8, 9, 188, 189, 190, 191, 214, 219, 233, 247], "default_beta_rang": [1, 11, 23, 181, 214], "default_bitwidth": 233, "default_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "default_config_fil": [1, 23, 181, 214], "default_config_per_channel": [195, 251], "default_data_col": [237, 238], "default_data_typ": [9, 22, 179, 185, 247, 250], "default_forward_fn": [180, 186, 215, 239], "default_num_iter": [1, 11, 23, 181, 189, 193, 201, 207, 208, 214], "default_output_bw": [9, 21, 22, 177, 179, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 221, 233, 235, 237, 238, 239, 245, 247, 250], "default_param_bw": [1, 8, 9, 11, 21, 22, 23, 177, 179, 181, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 221, 233, 235, 237, 238, 239, 245, 247, 250], "default_quant_schem": [1, 11, 23, 181, 189, 193, 201, 207, 214], "default_reg_param": [1, 11, 23, 181, 214], "default_warm_start": [1, 11, 23, 181, 214], "defin": [2, 12, 20, 30, 172, 173, 175, 178, 182, 192, 197, 200, 201, 203, 204, 205, 207, 210, 211, 212, 213, 215, 219, 224, 228, 230, 233, 243, 247, 248, 249, 251, 252, 253], "definit": [2, 12, 29, 30, 169, 171, 172, 174, 176, 182, 185, 188, 192, 195, 196, 200, 201, 206, 207, 210, 211, 212, 213, 218, 224, 228, 230, 233, 247, 249, 252, 253], "degrad": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 258, 259], "degre": [228, 230], "deleg": 178, "delet": [2, 12, 182, 188, 192, 206, 219, 233], "deliber": [188, 192, 200, 201, 206, 213], "delta": [8, 20, 21, 177, 184, 196, 197, 219, 242, 249], "demand": 240, "demonstr": [187, 200, 213], "denot": [228, 231, 248], "dens": [15, 20, 195, 196, 197, 222, 252, 254], "depend": [158, 159, 160, 172, 187, 201, 225, 242, 243, 244, 251, 254], "deploi": [249, 256, 258], "deploy": [240, 241, 256, 257, 259], "deprec": [179, 247, 250, 254], "depth": [214, 221, 223, 254, 255], "depthwis": 254, "depthwise_conv2d": 223, "depthwiseconv2d": [15, 222, 223], "dequant": [158, 159, 160, 162, 165, 166, 178, 240, 242, 254, 258, 259], "dequantizedtensor": [159, 160, 162, 178, 245], "deriv": [161, 162, 164, 165, 178, 189, 192, 206, 214, 233, 249], "descend": 166, "describ": [166, 171, 187, 201, 227, 229, 233, 242, 243, 244, 245, 246, 248, 249, 251, 255, 256, 258, 259], "descript": [175, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 248, 249], "design": [173, 188, 192, 197, 200, 201, 206, 213, 214, 240, 246], "desir": [8, 22, 160, 177, 178, 179, 184, 185, 188, 192, 203, 204, 205, 206, 219, 225, 227, 228, 233, 234, 247, 250, 255, 257, 259], "detach": 160, "detail": [25, 172, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 224, 226, 229, 235, 241, 243, 244, 246, 248, 249, 255, 257, 259], "detect": 227, "determin": [1, 8, 21, 22, 166, 170, 175, 177, 184, 185, 188, 196, 206, 208, 214, 215, 219, 220, 232, 237, 238, 239, 240, 246, 247, 248, 250], "determinist": 172, "dev": [243, 244], "develop": [168, 217, 240, 243, 244, 258], "devic": [1, 6, 9, 13, 23, 25, 160, 172, 176, 179, 181, 182, 183, 185, 188, 189, 190, 191, 195, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 233, 235, 237, 238, 239, 240, 241, 245, 247, 249, 250, 256, 257, 258, 259], "diagnost": 255, "diagram": [196, 237, 238], "dict": [2, 8, 9, 12, 17, 21, 22, 24, 25, 29, 166, 169, 172, 174, 175, 176, 177, 182, 183, 184, 185, 215, 218, 219, 220, 224, 228, 230, 233, 235, 247, 248, 250, 253], "dictat": 258, "dictionari": [8, 12, 17, 21, 29, 166, 177, 179, 184, 185, 194, 195, 197, 219, 224, 226, 227, 228, 230, 233, 247, 250, 251], "dicuss": 197, "did": [201, 243], "didn": 209, "diff": 254, "differ": [17, 29, 171, 172, 176, 188, 192, 195, 196, 201, 203, 204, 205, 206, 211, 212, 223, 224, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 240, 244, 246, 248, 249, 255, 257, 259], "dim": [170, 178, 206, 246], "dimens": [7, 170, 175, 228, 230, 246, 248, 249, 255], "dir": [9, 195, 200, 201, 202, 244, 247], "dir_path": [6, 169, 218], "direct": [218, 222, 233, 241, 246, 248, 249, 254, 258, 259], "directli": [8, 14, 195, 209, 219, 221, 235, 237, 249, 258], "directori": [2, 6, 8, 9, 12, 13, 17, 19, 21, 25, 29, 169, 176, 177, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 243, 244, 247, 250, 257], "directrori": 233, "disabl": [2, 8, 21, 171, 175, 176, 177, 179, 180, 184, 185, 186, 192, 203, 205, 219, 222, 226, 227, 233, 239, 247, 249, 250, 251], "disable_lora_adapt": 176, "discard": 219, "disciplin": 214, "discuss": [187, 192, 203, 204, 205, 214], "disk": [6, 19, 169, 218], "displai": [187, 192, 196, 217, 229], "display_comp_ratio_plot": 229, "display_eval_scor": 229, "dist": [243, 244], "distict": 254, "distil": [215, 232], "distinct": 173, "distort": 249, "distribut": [17, 29, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 223, 224, 228, 230, 240, 249, 254, 255], "divbackward0": 178, "diverg": 240, "divid": [225, 246, 250], "divis": [178, 240, 246], "dlc": 257, "dlc_path": 257, "dlf": 240, "do": [1, 9, 12, 20, 23, 172, 173, 176, 179, 181, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 222, 227, 233, 235, 237, 243, 244, 245, 247, 249, 250, 258, 259], "do_constant_fold": [188, 189, 190, 191, 222], "do_not_trace_m": 172, "doc": [172, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 243, 254], "docker": 241, "docker_container_nam": 243, "docker_image_nam": 243, "docker_run_command": 243, "dockerfil": 243, "docstr": 246, "document": [176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 206, 207, 208, 209, 210, 211, 212, 213, 218, 222, 229, 233, 242, 246, 248, 249, 254, 257, 258, 259], "doe": [20, 30, 172, 182, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 217, 219, 224, 226, 228, 230, 239, 249, 250, 253, 254, 255, 258, 259], "doesn": [30, 188, 189, 190, 191, 193, 194, 202, 203, 204, 205, 206, 207, 210, 211, 212, 247, 250, 258], "doesnt": [174, 235], "don": [30, 172, 176, 192, 195, 196, 200, 201, 213, 219, 237, 238], "done": [161, 162, 178, 192, 197, 201, 209, 227, 251, 252, 254], "down": [201, 236, 248], "download": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 241, 242, 244], "download_url": [243, 244], "downsampl": [203, 205], "downstream": [231, 248, 254], "dpkg": 244, "dq_output": 30, "drastic": [226, 259], "drawback": 249, "driver": [228, 242, 245], "drop": [2, 12, 13, 25, 175, 182, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 219, 220, 225, 227, 232, 233, 249, 250, 255], "dropout": [20, 65, 196, 197], "dropout1": [20, 197], "dropout1d": 66, "dropout2": [20, 197], "dropout2d": 67, "dropout3d": 68, "dtype": [158, 159, 160, 166, 170, 171, 172, 174, 176, 235, 237, 238, 246, 248, 254], "due": [20, 173, 254], "dummi": [8, 9, 23, 25, 27, 28, 169, 173, 177, 179, 181, 182, 183, 184, 185, 188, 200, 206, 213, 214, 218, 219, 220, 222, 223, 237, 238, 247, 250], "dummy_attention_mask": [237, 238], "dummy_data": 219, "dummy_input": [8, 9, 23, 24, 25, 27, 28, 168, 169, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 233, 235, 237, 238, 239, 245, 246, 247, 250, 253], "dummy_input_dict": 218, "dummy_input_id": [237, 238], "dummy_model": 215, "dummymodel": [24, 215], "dump": [195, 254], "duplic": [160, 172], "dure": [1, 2, 11, 12, 13, 17, 20, 23, 25, 29, 30, 166, 168, 175, 181, 182, 183, 189, 191, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 216, 217, 220, 224, 227, 228, 229, 230, 233, 240, 241, 247, 249, 250, 251, 254, 259], "dynam": [166, 172, 240, 249, 254], "dynamic_ax": [188, 189, 190, 191, 214, 222, 233, 247], "e": [1, 8, 9, 22, 179, 185, 188, 192, 195, 200, 201, 206, 209, 213, 214, 219, 232, 233, 239, 247, 248, 250], "each": [1, 2, 8, 9, 11, 12, 20, 21, 23, 30, 168, 173, 175, 177, 178, 181, 182, 184, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 219, 222, 223, 224, 225, 226, 227, 228, 233, 235, 240, 246, 247, 248, 249, 251, 255, 257], "earli": [2, 12, 182, 233], "easi": [235, 254, 258], "easier": 171, "easili": [178, 224, 228, 230], "ed": 214, "edg": [240, 241, 258], "edit": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 248], "effect": [1, 11, 14, 22, 23, 26, 175, 176, 181, 191, 196, 198, 199, 211, 212, 214, 219, 221, 232, 240, 247, 250, 258, 259], "effici": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "efficientnetb4": 254, "effort": [13, 25, 174, 183, 194, 208, 220, 235, 258, 259], "eights_pdf": [8, 21, 177, 184, 219], "either": [17, 29, 170, 174, 176, 178, 188, 193, 201, 203, 204, 205, 206, 224, 228, 230, 231, 233, 235, 243, 246, 253], "element": 248, "elementari": 196, "elementwis": [172, 175, 254], "elimin": [219, 222, 240, 249], "els": [2, 12, 172, 173, 182, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 228, 233, 235, 239, 245, 247, 250], "elu": 69, "embed": [20, 70, 172, 179, 185, 196, 197, 227, 247, 250, 254, 255], "embed_dim": [20, 196, 197], "embedding_lay": [20, 197], "embeddingbag": 71, "embodi": 240, "empir": [194, 208], "emploi": [240, 241], "empti": 251, "emul": [241, 249], "enabl": [2, 7, 8, 12, 13, 17, 21, 25, 29, 166, 171, 174, 176, 177, 180, 182, 183, 184, 186, 192, 199, 201, 203, 205, 206, 212, 218, 220, 221, 222, 224, 228, 229, 230, 232, 233, 239, 240, 246, 249, 251, 254, 257, 258], "enable_adapter_and_load_weight": 176, "enable_convert_op_reduct": [12, 174, 182, 192, 206, 233], "enable_onnx_check": [179, 185, 247, 250], "enable_per_layer_mse_loss": [8, 21, 200, 213, 219], "enbl": 246, "enc": 30, "enc_typ": 248, "encapsul": [2, 12, 174, 177, 182, 184, 219, 233], "encod": [1, 2, 8, 9, 11, 12, 13, 21, 22, 23, 24, 25, 30, 158, 159, 160, 161, 162, 166, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 207, 208, 210, 211, 212, 214, 215, 216, 218, 220, 232, 233, 235, 236, 237, 238, 239, 240, 242, 246, 250, 254, 257, 258], "encoding_analyz": [161, 162, 166], "encoding_file_path": [247, 250], "encoding_path": [189, 193, 194, 201, 207, 208, 214, 220], "encoding_vers": [246, 248], "encodinganalyz": [161, 162, 166], "encodinganalyzerforpython": 242, "encodingbas": [158, 159, 166], "encodingmismatchinfo": 247, "encodingtyp": 248, "encount": [30, 196], "encourag": [20, 172, 252, 253], "end": [14, 24, 161, 162, 163, 164, 165, 172, 173, 187, 195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 214, 215, 221, 227, 233, 239, 241, 247, 258], "end_beta": [1, 11, 23, 181, 214], "end_idx": 220, "enforc": 166, "engin": [218, 222, 233, 241, 243, 246, 248, 249, 254, 258, 259], "enhanc": [8, 21, 176, 177, 184, 200, 213, 219, 247, 249, 254], "enough": [192, 203, 204, 205, 214, 259], "ensur": [175, 201, 218, 221, 226, 233, 237, 238, 244, 245, 254, 255, 259], "enter": [30, 175, 220], "entir": [8, 21, 176, 177, 178, 184, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 224, 227, 228, 230, 249], "entireti": [20, 201], "entri": [25, 179, 183, 185, 220, 247, 248, 250, 251], "entrypoint": 243, "enum": [1, 2, 9, 12, 17, 23, 29, 169, 179, 181, 182, 185, 188, 192, 195, 196, 206, 209, 214, 218, 224, 228, 230, 233, 247, 248, 250], "enumer": [17, 29, 169, 197, 218, 224, 228, 230, 233, 237, 238, 247, 250], "environ": [187, 188, 192, 194, 195, 198, 199, 206, 213, 233, 240, 242, 244], "envsetup": [243, 244], "ep": [222, 223], "epoch": [24, 189, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 221, 224, 227, 228, 230, 237, 238, 250], "epsilon": [20, 196, 197, 254], "equal": [4, 13, 16, 25, 28, 159, 160, 170, 178, 183, 187, 193, 197, 214, 219, 220, 225, 226, 246, 249, 255], "equalize_model": [4, 16, 28, 190, 202, 210, 223], "equat": [161, 162, 163, 164, 165, 246, 249], "equival": [25, 30, 164, 165, 166, 170, 174, 179, 182, 183, 185, 188, 201, 206, 207, 210, 211, 212, 213, 215, 220, 233, 246, 247, 250, 253, 257], "erorr": 192, "error": [13, 20, 25, 30, 172, 178, 179, 183, 192, 216, 220, 233, 235, 240, 247, 249, 250, 254, 255], "especi": [188, 201, 206, 237, 240, 250, 255, 258], "essenti": [188, 192, 195, 196, 206, 209], "estim": [187, 249, 254, 258], "esults_dir": [8, 21, 177, 184, 219], "etc": [24, 188, 192, 195, 196, 201, 206, 215, 225, 240, 243, 248, 254], "eval": [2, 8, 12, 13, 17, 21, 24, 25, 29, 172, 174, 177, 180, 182, 183, 184, 186, 188, 189, 190, 191, 192, 195, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 235, 239, 245, 247, 250], "eval_callback": [8, 13, 17, 21, 25, 29, 177, 183, 184, 194, 195, 200, 203, 204, 205, 208, 213, 219, 220, 224, 228, 230, 233], "eval_callback_factori": [188, 206], "eval_callback_fn": 219, "eval_callback_for_phase1": [2, 12, 182, 188, 206, 233], "eval_callback_for_phase2": [2, 12, 182, 188, 206, 233], "eval_callback_for_phase_1": 233, "eval_callback_for_phase_2": 233, "eval_callback_phase1": 192, "eval_callback_phase2": 192, "eval_data_load": [214, 233, 247], "eval_data_s": 247, "eval_dataset": [194, 195, 214, 219, 220, 221, 247, 250], "eval_dataset_s": [194, 195, 208, 220], "eval_func": [192, 200, 228, 233], "eval_iter": [17, 29, 203, 204, 205, 224, 228, 230], "eval_scor": [8, 17, 21, 29, 177, 184, 219, 224, 228, 230], "evalcallbackfactori": [2, 174, 182, 188, 206, 233], "evalfunct": 228, "evalu": [2, 8, 12, 13, 17, 21, 25, 29, 174, 177, 182, 183, 184, 187, 194, 196, 208, 214, 215, 220, 221, 224, 226, 227, 228, 229, 230, 233, 239, 245, 249, 259], "evaluate_accuraci": 206, "evaluate_model": [224, 228, 230], "even": [30, 178, 188, 192, 195, 196, 201, 206, 233, 234, 235], "evenli": 246, "eventu": 235, "everi": [1, 6, 8, 11, 19, 21, 23, 169, 177, 178, 181, 184, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 218, 219, 226, 227, 249, 250], "evlauat": 192, "exactli": [13, 24, 30, 100, 166, 175, 200, 213, 215, 220, 249], "examin": 172, "exampl": [7, 9, 17, 24, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 173, 174, 175, 176, 178, 179, 180, 186, 196, 197, 208, 214, 215, 217, 218, 219, 220, 222, 223, 225, 231, 235, 237, 238, 239, 240, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 259], "exce": [168, 217], "exceed": [168, 217], "except": [20, 180, 186, 188, 189, 190, 191, 197, 200, 213, 214, 222, 223, 233, 235, 239, 246, 247, 250], "exchang": 240, "exclud": [25, 172, 173, 177, 180, 183, 184, 186, 219, 220, 239, 248, 254], "excluded_lay": 248, "exclus": [166, 170, 246], "execut": [2, 9, 12, 13, 25, 172, 179, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 222, 229, 233, 244, 245, 247, 250, 254], "exercis": [188, 195, 200, 201, 206, 209, 213], "exist": [30, 100, 166, 175, 179, 185, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 233, 246, 247, 250, 258], "exist_ok": [188, 189, 192, 193, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "exit": [2, 12, 13, 25, 30, 175, 182, 183, 220, 233], "expand": [246, 254], "expand_dim": 220, "expanded_conv_depthwis": [214, 223], "expans": [227, 246], "expect": [2, 8, 13, 17, 21, 22, 23, 25, 29, 168, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 195, 203, 204, 205, 206, 209, 214, 217, 219, 220, 224, 227, 228, 230, 233, 235, 239, 247, 250, 252], "experi": [17, 29, 170, 189, 193, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 224, 227, 228, 230, 242, 246, 259], "experienc": 242, "experiment": [215, 227, 246, 254], "experss": [20, 197], "expert": [194, 208], "explain": [188, 192, 195, 196, 200, 206, 209, 213, 224, 227, 254], "explan": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 241], "explicitli": [13, 25, 183, 220, 231], "expon": [166, 170, 246], "exponent_bit": [166, 170, 246], "export": [8, 9, 21, 22, 24, 25, 169, 171, 174, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 202, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 227, 233, 234, 235, 239, 243, 244, 248, 253, 254, 257], "export_adapter_weight": 176, "export_model": [9, 176, 179, 185, 247, 250], "export_param": [188, 189, 190, 191], "export_per_layer_encoding_min_max_rang": [8, 21, 177, 184, 219], "export_per_layer_mse_loss": [8, 21, 177, 184, 219], "export_per_layer_stats_histogram": [8, 21, 177, 184, 219], "export_to_torchscript": [179, 185, 247, 250], "exported_model": 246, "expos": [172, 214, 219], "express": [17, 29, 224, 228, 230, 237, 238], "extend": [171, 254], "extens": [167, 175, 187, 243, 244, 257], "extern": 254, "extra": [166, 175, 254], "extract": [189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 240, 247], "extrem": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 249], "ey": 219, "f": [172, 173, 178, 195, 208, 214, 220, 221, 222, 223, 233, 242, 243, 244, 247, 250], "f0": 225, "facebook": [237, 238, 240], "facilit": 241, "fact": 237, "factor": [195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 225, 227, 246], "factori": [2, 12, 174, 182, 233], "fail": [172, 173, 174, 179, 188, 189, 190, 191, 214, 220, 222, 223, 233, 235, 247, 250, 254], "fair": 240, "fairli": [192, 195, 196, 200, 201, 213], "fake": [162, 165, 166, 174, 182, 188, 189, 190, 191, 193, 195, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 212, 233, 247, 254], "fakequ": [179, 185, 247, 250], "fall": [203, 204, 205, 226, 251, 259], "fallback": 257, "fals": [2, 7, 9, 12, 13, 17, 20, 22, 25, 29, 30, 158, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 220, 222, 223, 224, 228, 230, 233, 235, 237, 238, 242, 245, 246, 247, 248, 250, 251], "famili": [235, 240], "familiar": 187, "far": [195, 209], "farther": [189, 193, 207], "fashion": 201, "fast": [12, 233], "faster": [188, 194, 195, 201, 206, 208, 233, 254], "fc": [227, 230], "fc1": 172, "fc2": 172, "featur": [7, 20, 24, 168, 171, 172, 173, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 220, 222, 223, 227, 229, 233, 235, 240, 245, 249, 252, 253, 254, 255], "featurealphadropout": 72, "feed": [20, 196, 197, 249], "feel": [195, 196, 209, 235], "feez": [180, 186, 239], "few": [188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 221, 225], "fewer": [227, 258], "ff_dim": [20, 196, 197], "ffn": [20, 197], "ffn_output": [20, 197], "field": [2, 166, 182, 188, 206, 233, 248], "figur": [214, 220, 223, 224, 226, 228, 229, 230, 231, 249, 255], "file": [1, 2, 8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 194, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 224, 228, 230, 233, 235, 239, 242, 243, 244, 246, 247, 248, 249, 250, 254, 257, 258], "file_path": [185, 214, 222, 223, 233, 247], "filenam": [1, 9, 11, 22, 23, 176, 179, 181, 185, 188, 189, 190, 191, 214, 215, 221, 239, 247, 250], "filename_prefix": [1, 9, 11, 22, 23, 176, 179, 181, 185, 188, 189, 192, 193, 195, 201, 202, 206, 207, 208, 209, 210, 211, 212, 214, 215, 221, 233, 239, 247, 250], "filename_prefix_encod": [176, 179, 185, 247, 250], "fill": [25, 179, 183, 185, 220, 247, 250], "filter": [20, 201, 240], "final": [17, 20, 29, 173, 180, 186, 188, 192, 195, 196, 200, 206, 209, 213, 219, 224, 225, 226, 228, 230, 233, 237, 238, 239, 244, 246, 250, 255, 258], "find": [2, 12, 15, 173, 174, 180, 182, 185, 186, 188, 189, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 215, 219, 222, 226, 234, 235, 239, 249, 250, 259], "find_pkg_url_str": [243, 244], "fine": [17, 22, 29, 176, 185, 189, 190, 191, 193, 194, 196, 198, 199, 202, 207, 208, 210, 211, 212, 224, 225, 228, 230, 241, 247, 250, 258, 259], "finer": [166, 178, 246], "finess": 259, "finetun": [189, 190, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 211, 212], "finetuned_accuraci": [209, 211, 212], "finetuned_accuracy_bn_reestim": 209, "finetuned_model": [203, 204], "finish": [198, 199, 211, 212], "finit": 166, "first": [20, 23, 172, 175, 178, 180, 181, 186, 195, 196, 197, 200, 201, 203, 204, 205, 209, 213, 214, 223, 227, 228, 239, 243, 254, 255, 258], "fit": [17, 29, 195, 196, 198, 199, 209, 221, 224, 226, 228, 230, 250, 258], "five": [190, 210], "fix": [173, 188, 189, 190, 191, 233, 248, 249, 254], "flag": [2, 12, 13, 25, 168, 171, 172, 173, 174, 179, 182, 183, 185, 188, 192, 206, 217, 220, 233, 235, 247, 250], "flatten": [73, 172, 195, 237, 238, 248], "flexibl": [167, 188, 206], "flexround": 215, "float": [1, 2, 8, 9, 10, 11, 12, 13, 17, 21, 22, 23, 25, 29, 30, 158, 159, 166, 170, 174, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 223, 224, 228, 230, 233, 234, 239, 240, 241, 246, 247, 248, 249, 250, 254, 255, 258, 259], "float16": [166, 170, 171, 246], "float32": 219, "float_fallback": 257, "floatencod": [166, 254], "floatquant": [166, 171], "floatquantizedequant": 171, "flow": [25, 172, 183, 220, 249, 255], "fo": 201, "focu": 209, "fold": [3, 13, 14, 15, 25, 27, 74, 183, 192, 214, 219, 220, 221, 223, 233, 240, 254], "fold_all_batch_norm": [15, 27, 192, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 222, 233, 250], "fold_all_batch_norms_to_scal": [14, 195, 209, 221], "fold_all_batch_norms_to_weight": [3, 188, 189, 190, 191, 222], "folded_model": 222, "folder": [200, 213, 219], "follow": [5, 6, 8, 9, 10, 18, 19, 20, 21, 22, 30, 100, 169, 171, 172, 173, 174, 175, 176, 177, 179, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 234, 235, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "footprint": 240, "forall_": [161, 162, 163, 164, 165], "forc": [188, 189, 190, 191, 203, 204, 205, 206, 207, 210, 211, 212, 213], "form": [20, 189, 200, 213], "formal": 246, "format": [1, 8, 11, 21, 22, 23, 160, 176, 177, 179, 181, 184, 185, 214, 219, 220, 233, 239, 240, 241, 246, 247, 249, 250, 252, 254, 257, 258], "former": 253, "forward": [2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 166, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 195, 196, 197, 198, 199, 200, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 233, 237, 238, 239, 243, 247, 250, 253, 254, 255, 259], "forward_fn": [1, 2, 13, 23, 24, 25, 26, 174, 180, 181, 182, 183, 186, 188, 189, 195, 206, 209, 214, 215, 220, 221, 233, 239], "forward_one_batch": [188, 206], "forward_pass": [214, 215, 233, 237, 238, 239, 245], "forward_pass_arg": 247, "forward_pass_call_back": [192, 233], "forward_pass_callback": [1, 2, 8, 9, 12, 21, 22, 177, 179, 182, 184, 185, 188, 189, 190, 191, 193, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 219, 233, 247, 250], "forward_pass_callback_2": [12, 233], "forward_pass_callback_arg": [1, 9, 22, 179, 185, 188, 189, 190, 191, 192, 193, 195, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 214, 233, 247, 250], "forward_pass_callback_fn": 219, "found": [171, 197, 249, 250], "four": [220, 249], "fp": 232, "fp16": [174, 235, 254, 258], "fp32": [2, 6, 8, 12, 19, 21, 169, 174, 176, 177, 180, 182, 184, 186, 195, 196, 213, 215, 218, 219, 233, 239, 240, 248, 249, 250, 254, 257, 258, 259], "fp32_acccuraci": 192, "fp32_layer_output": 218, "fp32_layer_output_util": 218, "fp32_output": [2, 233], "fp_qdq": 171, "fp_quantiz": 171, "frac": [161, 162, 163, 164, 165, 166, 178, 249], "fraction": [233, 259], "fractionalmaxpool2d": 75, "fractionalmaxpool3d": 76, "framework": [0, 187, 215, 218, 222, 240, 241, 242, 243, 244, 245, 247, 249, 251, 257, 259], "free": [190, 195, 196, 202, 209, 210, 235], "freez": [171, 176, 189, 193, 201, 207, 215, 239], "freeze_base_model": 176, "freeze_base_model_activation_quant": 176, "freeze_base_model_param_quant": 176, "freeze_encod": 171, "fresh": 242, "friendli": [167, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 220, 258], "from": [2, 9, 12, 13, 20, 22, 23, 24, 25, 26, 30, 159, 160, 161, 162, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 259], "from_encod": 166, "from_modul": 30, "from_pretrain": [237, 238], "from_str": [9, 22, 179, 185, 247, 250], "from_tensor_slic": 219, "front": [2, 12, 13, 25, 182, 183, 188, 192, 206, 220], "frozen": [201, 237, 238], "full": [24, 188, 189, 190, 191, 192, 193, 195, 198, 199, 202, 206, 207, 209, 210, 211, 212, 215, 228, 233, 234, 240, 252, 253], "fulli": [167, 227, 230, 247, 248, 254], "func": [2, 12, 174, 177, 182, 184, 219, 233], "func_callback_arg": [2, 12, 174, 177, 182, 184, 188, 206, 219, 233], "func_wrapp": [192, 228, 233], "function": [1, 2, 5, 8, 9, 10, 12, 13, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 158, 159, 160, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 192, 193, 196, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 233, 237, 238, 239, 240, 246, 247, 249, 250, 252, 253, 254, 257, 259], "function_nam": [203, 204, 205], "functional_callback": 196, "functional_model": [195, 196, 197], "functional_model_weight_ord": 197, "functional_op": 173, "fundament": 171, "furhter": [194, 208], "furo": 254, "further": [158, 161, 162, 163, 164, 165, 172, 178, 205, 224, 227, 249, 259], "furthermor": 20, "fuse": [195, 237, 249, 251], "fuse_bn_into_conv": 222, "fusion": 240, "futur": [168, 217], "fx": [25, 172, 183, 220], "g": [1, 9, 22, 185, 188, 192, 195, 200, 201, 206, 209, 213, 214, 219, 233, 243, 247, 248, 250], "gain": [189, 193, 198, 199, 201, 202, 203, 204, 205, 207, 210, 211, 212, 214, 224, 225, 227, 259], "gamma": 215, "gap": 234, "gather": 247, "gaussiannllloss": 81, "gave": 220, "gelu": 77, "gemm": [7, 195, 251], "gener": [6, 9, 19, 30, 161, 162, 163, 164, 165, 169, 176, 178, 182, 187, 188, 192, 196, 206, 208, 214, 215, 219, 221, 222, 223, 227, 233, 235, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258], "generate_calibration_callback": [237, 238], "generate_layer_output": [6, 19, 169, 218], "get": [2, 12, 17, 29, 166, 172, 174, 176, 182, 188, 189, 190, 191, 192, 195, 196, 197, 200, 218, 227, 228, 230, 233, 234, 235, 238, 239, 242, 244], "get_activation_quant": [2, 233], "get_active_param_quant": [12, 233], "get_active_quant": [2, 12, 174, 182, 233], "get_available_provid": [188, 189, 190, 191], "get_calibration_and_eval_data_load": 247, "get_candid": [2, 12, 174, 182, 233], "get_data_loader_wrapp": [192, 233], "get_default_kernel": 30, "get_devic": 208, "get_encod": 166, "get_eval_func": [192, 228, 233], "get_extra_st": 166, "get_fp_lora_lay": 176, "get_input": [188, 189, 190, 191, 214, 233, 247], "get_input_quantizer_modul": [174, 182, 233], "get_kernel": 30, "get_loss_fn": [180, 186, 239], "get_model": [192, 252], "get_offset": 178, "get_original_models_weights_in_functional_model_ord": 197, "get_param_quant": [2, 233], "get_path_for_per_channel_config": [214, 220, 221, 235, 239, 245, 247], "get_peft_model": 176, "get_pre_processed_input": 218, "get_quant_scheme_candid": [13, 25, 183, 220], "get_quantized_lora_lay": 176, "get_scal": [160, 178], "get_subclass_model_with_functional_lay": 20, "get_text_classificaiton_model": 20, "get_top5_acc": 192, "get_val_dataload": [188, 189, 190, 191, 203, 205, 206, 207, 209, 210, 211, 212, 213], "get_val_dataset": [193, 194, 195, 200, 201, 202], "get_weight": [197, 222, 223], "git": [187, 243], "github": [187, 242, 243, 244], "give": [192, 196, 200, 201, 203, 204, 205, 213, 214, 219, 223, 227, 233, 254, 256], "given": [2, 4, 12, 13, 16, 17, 22, 23, 25, 26, 28, 29, 30, 168, 174, 175, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 220, 221, 223, 224, 226, 227, 228, 230, 233, 239, 247, 250, 259], "global": [239, 240, 255], "globalaveragepooling1d": [20, 196, 197], "glu": 78, "gnu": 244, "gnupg2": 244, "go": [20, 188, 192, 195, 196, 200, 201, 206, 209, 213, 254], "goal": [13, 25, 183, 188, 206, 219, 220, 258], "good": [20, 176, 195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 227, 235, 259], "googl": 240, "got": [3, 14, 27, 172, 221, 222], "gpu": [203, 204, 205, 207, 209, 210, 211, 212, 213, 218, 224, 228, 230, 240, 242, 243, 244, 245, 254], "grad_fn": [158, 159, 160, 161, 162, 178, 245], "gradient": [158, 159, 160, 237, 238, 247, 250, 254], "grant": 187, "granular": [17, 29, 196, 203, 204, 205, 224, 227, 228, 230, 246, 255], "granularli": 246, "graph": [20, 23, 25, 160, 172, 179, 181, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 220, 222, 223, 228, 229, 233, 235, 247, 248, 249, 250, 254, 257, 258], "graphmodul": 172, "greater": [17, 29, 224, 225, 226, 228, 230, 246], "greedi": [17, 29, 224, 227, 228, 229, 230], "greedili": [188, 192, 206], "greedy_param": [203, 204, 205, 224, 228, 230], "greedy_select_param": [17, 29, 203, 204, 205, 224, 228], "greedymixedprecisionalgo": [12, 174, 182, 192, 206, 233], "greedyselectionparamet": [17, 29, 203, 204, 205, 224, 228, 230], "green": 231, "grep": 243, "grid": [10, 178, 180, 186, 239, 246, 249], "group": [2, 7, 12, 170, 174, 182, 188, 206, 243, 246, 249, 251, 254], "groupedblockquantizedequant": 246, "groupnorm": 82, "gru": [79, 254], "grucel": 80, "guarante": 20, "guid": [187, 188, 192, 194, 206, 207, 208, 210, 211, 212, 213, 214, 233, 236, 243, 247, 254, 258], "guidebook": 227, "guidelin": [172, 206, 207, 210, 211, 212, 213, 214, 247, 250], "h": [187, 230, 231, 244], "h5": [218, 257], "ha": [1, 8, 11, 20, 23, 25, 30, 158, 171, 172, 173, 176, 179, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 225, 226, 229, 231, 235, 236, 239, 240, 245, 246, 247, 249, 250, 254, 258], "had": [252, 253], "half": 225, "hand": [188, 206], "handl": [13, 14, 25, 26, 183, 220, 221, 242, 245, 246, 249, 254], "hard": 172, "hardshrink": 83, "hardsigmoid": 84, "hardswish": 85, "hardtanh": 86, "hardwar": [9, 179, 185, 240, 241, 247, 249, 250, 258], "hat": 249, "have": [8, 20, 21, 30, 168, 169, 170, 171, 172, 173, 177, 178, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 227, 233, 235, 237, 240, 244, 246, 247, 248, 250, 254, 255, 257, 259], "hba": [190, 202, 210], "he": 227, "head": [20, 196, 197], "heavi": [168, 217, 229], "height": [188, 189, 190, 191, 196, 206, 207, 209, 210, 211, 212, 213, 222, 223, 228, 230, 231], "held": [30, 175, 211, 212], "help": [171, 173, 174, 176, 179, 185, 190, 200, 202, 210, 213, 219, 226, 227, 233, 234, 235, 246, 247, 250, 251, 255, 258, 259], "helper": [174, 178, 182, 195, 209, 233, 237], "hen": [13, 25, 183, 220], "here": [1, 23, 171, 176, 178, 181, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 223, 228, 237, 238, 250, 251, 258, 259], "heterogen": 258, "heurist": [194, 208], "hidden": [20, 196, 197], "hide": 235, "high": [2, 4, 12, 16, 28, 171, 182, 189, 190, 191, 193, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 223, 225, 226, 232, 233, 236, 240, 241, 254], "higher": [1, 23, 181, 182, 188, 192, 203, 204, 205, 206, 214, 224, 226, 228, 230, 232, 233, 234, 246, 249, 250, 255, 258], "highest": [13, 25, 183, 220, 226], "highlight": 229, "hingeembeddingloss": 87, "histogram": [8, 21, 177, 184, 200, 213, 216, 249, 254], "histogram_freq": 196, "historgram": [8, 219], "histori": [195, 196, 198, 199], "hold": [158, 159, 160, 175, 221, 235, 251, 255], "home": 243, "honor": [224, 228, 230], "hood": 171, "hook": 249, "hope": [188, 192, 195, 196, 201, 206, 209], "hopefulli": 197, "host": [229, 243, 245, 254], "hostnam": 243, "hotspot": [8, 21, 177, 184, 219, 232], "how": [2, 12, 173, 175, 176, 178, 179, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 227, 228, 230, 233, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 255, 256, 259], "howev": [20, 171, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 224, 228, 230, 236, 242, 246, 249, 252, 254, 258, 259], "html": [8, 21, 168, 172, 177, 184, 187, 200, 213, 216, 217, 219, 242, 243, 244, 254], "htp": 257, "htp_v66": [9, 179, 185, 247, 250], "htp_v68": [9, 179, 185, 247, 250], "htp_v69": [9, 179, 185, 247, 250], "htp_v73": [9, 179, 185, 247, 250], "htp_v75": [9, 179, 185, 247, 250], "htp_v79": [9, 179, 185, 247, 250], "htp_v81": [9, 179, 185, 247, 250], "http": [172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 229, 242, 243, 244], "hub": [218, 222, 233, 241, 246, 248, 249, 254, 258, 259], "huberloss": 88, "huggingfac": [176, 237, 238], "hx": [79, 80, 96, 97, 123, 124], "hxwx5": 231, "hxwx8": 231, "hyper": [189, 193, 195, 196, 198, 199, 202, 203, 204, 205, 207, 209, 210, 211, 212, 221, 250, 258], "hyperparamet": 250, "i": [1, 2, 4, 7, 8, 9, 12, 13, 17, 20, 21, 22, 23, 24, 25, 28, 29, 30, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "i_": [161, 162, 163, 164, 165], "i_0": [161, 162, 163, 164, 165], "i_d": [161, 162, 163, 164, 165], "iccv": [190, 202, 210, 227], "id": [1, 6, 13, 25, 183, 214, 218, 220, 229, 237, 238, 243], "ideal": [192, 200, 201, 213, 254], "idempot": 160, "ident": [197, 222, 252, 253], "identifi": [170, 173, 187, 216, 219, 224, 231, 232, 233, 243, 244, 246, 249, 254, 255, 258], "ie": 235, "ieee": [166, 227], "ignor": [2, 17, 29, 172, 182, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 224, 228, 230, 233, 247, 259], "ignore_quant_ops_list": [1, 23, 181, 214], "illustr": [201, 203, 204, 205, 214, 224, 226, 228, 229, 230, 231, 249, 258], "ilsvrc": [214, 220, 233, 247], "ilsvrc2012": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "imag": [8, 21, 177, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 233, 239, 240, 242, 244, 247, 250], "image_bw": 253, "image_dataset": 219, "image_dataset_from_directori": [192, 193, 198, 199, 201, 214, 220, 221, 228, 233, 247, 250], "image_height": [193, 201], "image_net_config": [188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213], "image_net_data_load": [188, 189, 190, 191, 203, 205, 207, 209, 210, 211, 212, 213], "image_net_dataset": [193, 194, 195, 200, 201, 202], "image_net_evalu": [188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "image_net_train": [203, 204, 205, 209, 210, 211, 212], "image_rgb": 253, "image_s": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 220, 221, 228, 233, 247, 250], "image_width": [193, 201], "imageclassificationevalu": 239, "imagefold": [206, 208, 247], "imagenet": [187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 228, 233, 239, 247, 250], "imagenet_dataset": [208, 214, 220, 221, 247, 250], "imagenet_dir": [198, 199], "imagenetdataload": [188, 189, 190, 191, 200, 203, 205, 207, 209, 210, 211, 212, 213], "imagenetdatapipelin": [188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "imagenetdataset": [193, 194, 195, 200, 201, 202], "imagenetevalu": [188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "imagenettrain": [203, 204, 205, 209, 210, 211, 212], "images_dir": 209, "images_mean": 206, "images_std": 206, "imagin": 201, "imdb": 196, "img": [192, 228, 233], "img_height": [192, 233], "img_width": [192, 233], "immedi": [190, 194, 202, 208, 210], "impact": [188, 201, 206, 226, 240, 255], "implement": [6, 19, 22, 30, 169, 178, 187, 188, 206, 218, 219, 220, 237, 238, 247, 250, 254, 255, 258, 259], "impli": [188, 206, 233], "import": [1, 11, 20, 22, 23, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 175, 176, 178, 179, 181, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254], "impos": 246, "improv": [189, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 222, 225, 227, 232, 234, 244, 246, 250, 254, 255, 256, 259], "in1": 235, "in2": 235, "in_channel": [170, 246], "in_eval_mod": 208, "in_featur": [30, 171, 175], "in_plac": [22, 179, 185, 237, 238, 247, 250], "inc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "includ": [2, 13, 25, 168, 182, 183, 217, 219, 220, 222, 223, 226, 229, 233, 240, 241, 242, 244, 248, 249, 250, 251, 254, 259], "include_top": [192, 193, 201, 202], "incompat": [195, 196], "incorrect": [174, 235, 254], "incorrectli": [254, 259], "increas": [17, 29, 188, 201, 206, 224, 226, 228, 230, 232, 249], "increment": 259, "incur": 219, "independ": [172, 240, 255], "index": [8, 21, 175, 177, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 254], "index_0": [200, 213], "index_1": [200, 213], "index_n": [200, 213], "indic": [17, 29, 109, 110, 111, 174, 175, 178, 179, 194, 201, 206, 208, 224, 225, 228, 230, 231, 235, 247, 248, 250], "indirect": [188, 206, 233], "individu": [8, 21, 177, 184, 219, 226, 241, 251], "induc": 249, "infer": [1, 11, 13, 22, 23, 25, 181, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 222, 225, 228, 233, 235, 239, 240, 246, 247, 249, 250, 254, 259], "inferencesess": [2, 8, 9, 188, 189, 190, 191, 218, 219, 233, 247], "influenc": 249, "info": [15, 173, 192, 222, 254], "inform": [2, 12, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 173, 182, 188, 192, 206, 209, 233, 241, 245, 246, 248, 254], "inherit": [20, 30, 100, 175], "init": [176, 222, 223], "initi": [6, 9, 161, 162, 166, 175, 178, 179, 185, 188, 189, 193, 199, 200, 201, 206, 207, 211, 212, 213, 214, 218, 222, 223, 247], "initial_accuraci": [208, 220], "initializd": 175, "inner": 255, "innov": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "inp_data": 228, "inp_symmetri": [10, 180, 186, 239], "inplac": [166, 173, 222, 223], "input": [2, 6, 7, 8, 9, 10, 12, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 209, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 233, 237, 238, 239, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257], "input1": [46, 62, 105], "input2": [46, 62, 105], "input_": [161, 162, 163, 164, 165], "input_1": [214, 222, 223], "input_batch": 218, "input_channel": [7, 170, 246], "input_data": [188, 189, 190, 191, 206, 207, 209, 210, 211, 212, 213, 220, 247], "input_dim": [20, 196, 197], "input_dlc": 257, "input_id": [237, 238], "input_inst": [6, 19, 169, 218], "input_lay": [20, 197], "input_length": 48, "input_list": 257, "input_nam": [179, 185, 188, 189, 190, 191, 214, 222, 233, 247, 250], "input_network": 257, "input_op_nam": [17, 228], "input_q": 178, "input_qdq": 178, "input_qtzr": 30, "input_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 179, 182, 233, 245, 247, 250], "input_shap": [12, 27, 28, 29, 172, 188, 189, 190, 191, 192, 193, 197, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 219, 222, 223, 224, 228, 230, 233, 235, 247, 252], "input_tensor": [20, 172, 192, 193, 201, 202], "inputlay": [20, 214, 222, 223], "inputs_batch": [188, 189, 190, 191, 206, 207, 209, 210, 211, 212, 213, 247], "insert": [172, 188, 189, 190, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 247, 249, 258], "insid": [20, 24, 30, 172, 175, 196, 197, 215, 228, 235], "insight": [229, 255], "inspect": [196, 227], "instabl": [195, 209], "instal": [187, 198, 199, 202, 208, 210, 211, 212, 229, 240, 254, 258], "instanc": [6, 19, 30, 169, 172, 173, 185, 218, 229, 259], "instancenorm1d": 89, "instancenorm2d": 90, "instancenorm3d": 91, "instanti": [176, 178, 188, 200, 201, 206, 209, 213, 229, 233, 237, 238, 245, 246, 248, 251, 253], "instead": [166, 172, 173, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 228, 231, 246, 248, 252, 253, 254], "instruct": [187, 241, 242, 243, 244, 246, 250, 254, 257, 259], "int": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 21, 22, 23, 24, 25, 26, 29, 59, 60, 61, 109, 110, 111, 161, 162, 163, 164, 165, 166, 170, 171, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 192, 194, 195, 200, 203, 204, 205, 206, 208, 214, 215, 218, 219, 220, 221, 224, 228, 230, 233, 237, 238, 239, 246, 247, 248, 249, 250, 254], "int16": [174, 188, 192, 206, 220, 233, 235, 249, 258, 259], "int32": [237, 238, 248], "int4": [174, 220, 235, 254, 258], "int8": [159, 160, 174, 188, 189, 190, 191, 192, 201, 206, 207, 210, 211, 212, 220, 233, 235, 240, 249, 250, 258, 259], "int_multipli": 30, "intact": 233, "integ": [1, 22, 164, 165, 170, 178, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 219, 233, 237, 240, 246, 247, 248, 250, 258, 259], "integr": [13, 25, 176, 183, 215, 220], "intel": [242, 245], "intellig": 227, "intend": [187, 219, 224, 228, 230, 235, 240, 248], "inter": 216, "interact": [168, 171, 240], "intercept": 249, "interchang": 246, "interest": [8, 177, 184, 219], "interfac": [167, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 242, 254], "intermedi": [2, 6, 12, 19, 25, 169, 179, 182, 183, 185, 188, 192, 206, 216, 218, 220, 233, 240, 247, 250, 254], "intern": [13, 20, 25, 171, 183, 185, 189, 193, 196, 197, 201, 207, 220, 227, 251], "interpol": [12, 188, 206, 226, 233], "interpret": [246, 247, 250], "introduc": [175, 215, 223, 232, 233, 249, 251, 254], "invalid": [172, 246], "invoc": [203, 204, 205], "invok": [1, 8, 9, 21, 175, 177, 179, 184, 185, 201, 214, 219, 227, 229, 247, 250], "involv": [2, 12, 171, 182, 188, 192, 206, 221, 233, 236, 237, 238, 255, 259], "io": [174, 235], "ip": 187, "ipynb": 187, "irrespect": [24, 215], "is_avail": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 233, 235, 239, 245, 250], "is_bfloat16": 166, "is_float16": 166, "is_initi": [30, 161, 162, 166, 175, 178], "is_input_quant": [195, 251], "is_leaf_modul": 172, "is_output_quant": [195, 251], "is_quant": [195, 251], "is_sym": 248, "is_symmetr": [195, 242, 248, 251], "is_train": [188, 189, 190, 191, 192, 203, 205, 207, 209, 210, 211, 212, 213, 233], "is_unsigned_symmetr": 171, "isinst": [170, 237, 238, 246], "isol": 249, "issu": [20, 173, 216, 218, 221, 229, 235, 254, 255, 259], "item": [166, 197, 200, 213, 233, 237, 238, 247, 250, 257], "iter": [1, 8, 11, 17, 23, 25, 29, 181, 183, 188, 189, 190, 191, 192, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 219, 220, 224, 228, 230, 233, 247], "itertool": [237, 238], "its": [8, 12, 20, 30, 100, 158, 166, 174, 175, 187, 188, 189, 190, 191, 193, 194, 195, 197, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 215, 219, 224, 228, 231, 233, 235, 237, 238, 240, 241, 246, 249, 251, 259], "itself": [200, 209, 213, 218, 227, 228], "j_": [161, 162, 163, 164, 165], "j_0": [161, 162, 163, 164, 165], "j_d": [161, 162, 163, 164, 165], "jaderberg": 227, "jan": 227, "jenkin": 243, "jian": 227, "jianhua": 227, "jit": [237, 238, 253], "job": [195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 257], "join": [189, 193, 198, 199, 201, 206, 207, 208, 214, 222, 223, 224, 228, 230, 233, 247], "jointli": [199, 211, 212], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 200, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "jupyt": [187, 241, 254], "just": [188, 192, 195, 196, 200, 201, 206, 211, 212, 213, 231, 249, 254], "k": [178, 208, 230, 237, 238], "kaim": 227, "kd": 254, "keep": [172, 191, 198, 233, 234, 251, 259], "kei": [166, 174, 189, 190, 191, 193, 197, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 235, 237, 238, 244, 248], "kept": [12, 233, 247, 250, 255], "kera": [11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 187, 192, 193, 194, 198, 199, 200, 201, 202, 214, 218, 219, 220, 221, 222, 223, 228, 233, 241, 247, 250, 252, 254], "keraslayeroutput": [19, 218], "kernel": [30, 201, 224, 228, 230, 246, 254], "kernel_s": [20, 172, 173, 179, 201, 222, 223, 245, 247, 250], "key_dim": [20, 196, 197], "keyring_1": 244, "keyword": [30, 173], "kill": 243, "kl": 240, "kldivloss": 92, "know": [30, 188, 195, 196, 201, 206, 209], "knowledg": [215, 232, 248], "known": [173, 249], "kullback": 240, "kuzmin": 227, "kwarg": [20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 173, 174, 175, 179, 197, 233, 247, 250, 254], "l1": [10, 180, 186, 235, 239], "l1loss": 93, "l2": 235, "lab": [240, 258], "label": [188, 192, 193, 194, 195, 198, 199, 201, 206, 208, 214, 219, 220, 221, 228, 233, 237, 238, 247, 250], "label_dataset": 219, "label_mod": [192, 193, 198, 199, 201, 214, 220, 221, 228, 233, 247, 250], "labeled_data": 220, "labeled_data_load": 220, "lambda": [25, 170, 174, 182, 183, 192, 193, 194, 195, 196, 197, 201, 214, 219, 220, 221, 233, 246, 247, 250, 254], "laptop": [240, 241], "larg": [176, 192, 225, 227, 228, 230, 232, 236, 250, 254, 259], "larger": [228, 230, 246], "last": [12, 233], "lastli": 247, "latenc": [225, 234, 254, 259], "later": [185, 188, 195, 196, 200, 201, 209, 213, 242, 245, 254], "latest": [174, 235, 242, 243, 244, 245, 254], "launch": 187, "layer": [1, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 100, 168, 169, 170, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 192, 196, 203, 204, 205, 214, 215, 217, 220, 221, 222, 224, 225, 228, 229, 230, 231, 234, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259], "layer1": [200, 213], "layer2": [200, 213], "layer_nam": [8, 21, 177, 184, 219], "layer_output_util": [5, 18, 167, 218], "layern": [200, 213], "layernorm": [20, 98, 196, 197, 254], "layernorm1": [20, 197], "layernorm2": [20, 197], "layeroutpututil": [6, 19, 169, 218], "layers_to_exclud": 173, "layout": [160, 172], "lazili": 254, "lceil": [161, 162, 164, 165, 166, 249], "lead": [8, 202, 210, 214, 219, 255], "leaf": [172, 174, 215, 254], "leakyrelu": 99, "learn": [171, 185, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 222, 223, 227, 234, 236, 237, 238, 239, 240, 244, 250, 254, 259], "learnabl": [161, 162, 215, 232], "learnedgrid": 254, "learnedgridquant": 171, "learning_r": [203, 204, 205, 209, 211, 212, 221, 250], "learning_rate_schedul": [203, 204, 205, 209, 211, 212], "least": [182, 189, 193, 207], "leav": [214, 238], "left": [161, 162, 163, 164, 165, 166, 178, 188, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 226, 231, 233, 236, 246, 249], "legaci": [242, 254], "leibler": 240, "len": [1, 23, 172, 181, 189, 192, 196, 206, 208, 214, 220, 228, 233, 237, 238, 247, 250], "length": [170, 175, 246, 248], "leq": [161, 162, 163, 164, 165], "less": [192, 206, 224, 226, 233, 234, 240, 246, 249, 251, 258], "lesser": [188, 206], "let": [172, 188, 192, 195, 196, 201, 206, 258], "level": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 171, 172, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 189, 191, 192, 193, 196, 198, 199, 203, 204, 205, 207, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 233, 234, 235, 236, 239, 241, 246, 247, 249, 250, 254, 255], "lfloor": [161, 162, 163, 164, 165, 166], "lib": [243, 244], "libjpeg": 244, "liblapack": 242, "libpymo": [171, 242, 254], "libqnnhtp": 257, "libqnnmodeldlc": 257, "librari": [1, 9, 176, 214, 240, 243, 244, 247, 257], "lie": 246, "light": [188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213], "lightweight": 236, "like": [20, 171, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 227, 232, 233, 234, 241, 248, 249, 251, 257, 258], "limit": [188, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 254], "line": [243, 244, 247, 257], "linear": [1, 3, 11, 14, 15, 23, 27, 30, 100, 170, 171, 172, 173, 175, 176, 181, 214, 221, 222, 223, 224, 232, 246, 254], "linear1": [170, 246], "linear_1": 246, "link": [187, 244], "linux": [242, 244], "list": [1, 2, 3, 6, 9, 12, 13, 14, 15, 17, 19, 20, 23, 25, 27, 28, 29, 59, 60, 61, 109, 110, 111, 164, 165, 166, 169, 170, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 186, 188, 192, 195, 197, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 235, 237, 238, 239, 243, 244, 246, 247, 248, 251, 259], "list_of_module_comp_ratio_pair": [17, 29, 224, 228, 230], "listen": 229, "lite": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "liter": [174, 235], "littl": [171, 189, 193, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 227, 259], "llm": [254, 258], "ln": 244, "load": [22, 24, 172, 173, 176, 185, 188, 189, 190, 191, 196, 214, 215, 220, 221, 222, 223, 224, 227, 228, 230, 233, 237, 238, 239, 240, 247, 250, 254, 257, 258], "load_adapt": [237, 238], "load_checkpoint": 185, "load_data": 196, "load_dataset": [214, 220, 221, 233, 237, 238, 239, 247], "load_encod": [214, 247, 250], "load_encodings_to_sim": [218, 247, 250], "load_model": [188, 189, 190, 191, 214, 218, 222, 223, 233, 247], "load_state_dict": 166, "loader": [1, 2, 8, 10, 23, 25, 26, 174, 180, 181, 182, 183, 186, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 214, 219, 220, 221, 233, 239, 247, 250], "local": [187, 229, 239, 242, 243, 244], "localresponsenorm": 101, "locat": [188, 192, 195, 200, 201, 206, 209, 213, 243, 259], "log": [173, 174, 192, 195, 196, 198, 199, 219, 233, 235], "log_2": 166, "log_dir": [195, 196, 198, 199], "log_fil": [174, 235], "log_input": 122, "log_prob": 48, "logdir": 196, "logger": 173, "logic": [2, 12, 30, 100, 175, 182, 188, 189, 190, 191, 203, 204, 205, 206, 207, 210, 211, 212, 213, 233, 254], "logit": [206, 208, 233, 237, 238, 250], "logsigmoid": 102, "logsoftmax": 103, "long": 237, "longer": [171, 179, 203, 204, 205, 242, 246, 247, 248, 250, 258], "look": [20, 188, 192, 195, 196, 197, 200, 201, 206, 213, 241, 248, 257], "lookup": 197, "lookup_quant": [12, 233], "loop": [172, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 250, 255], "lora": [176, 240, 254], "lora_a": [176, 237, 238], "lora_a_lay": 238, "lora_add_lay": 238, "lora_alpha": 176, "lora_b": [176, 237, 238], "lora_b_lay": 238, "lora_config": 176, "lora_dropout": 176, "lora_modul": 176, "lora_mul_lay": 238, "lora_weights_after_adaptation_for_adapter1": 176, "loraconfig": 176, "loralay": [237, 238], "lose": 231, "loss": [1, 8, 10, 11, 21, 23, 158, 177, 180, 181, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 207, 210, 211, 212, 214, 220, 221, 227, 234, 237, 238, 239, 241, 247, 249, 250, 254], "loss_fn": [10, 180, 186, 195, 221, 237, 238, 239, 250], "lost": [249, 259], "low": [171, 178, 201, 203, 205, 210, 227, 232, 236, 240, 247, 248, 254], "lower": [1, 23, 181, 188, 192, 201, 206, 214, 223, 226, 233, 234, 240, 246, 255, 258], "lowest": 224, "lpbq": [170, 246, 248, 254], "lppool1d": 94, "lppool2d": 95, "lr": [221, 250], "lstm": [96, 254], "lstmcell": 97, "lsvrc": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "lt": 242, "m": [187, 196, 230, 242, 243, 244, 245], "mac": [17, 29, 188, 203, 204, 205, 206, 224, 225, 227, 228, 230, 232, 233], "machin": [227, 236, 240, 242, 243, 244, 254, 259], "made": [172, 174, 206, 207, 210, 211, 212, 235, 240, 251, 254], "magnitud": 224, "mai": [2, 13, 20, 25, 30, 158, 159, 160, 168, 171, 172, 175, 176, 182, 183, 188, 190, 192, 195, 196, 200, 201, 202, 206, 209, 210, 213, 217, 219, 220, 223, 227, 233, 246, 248, 254, 259], "main": [221, 251], "maintain": [189, 193, 207, 220, 226, 227, 240], "major": [227, 248], "make": [174, 175, 195, 196, 197, 201, 209, 235, 240, 251, 252, 253, 254, 258, 259], "makedir": [188, 189, 192, 193, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "man": 244, "manag": [9, 242, 245, 258], "mandatori": 218, "manditori": 20, "mani": [172, 188, 192, 195, 196, 200, 201, 203, 204, 205, 206, 213, 214, 225, 254], "manner": [13, 25, 183, 220, 223], "mantissa": [166, 170, 246], "mantissa_bit": [166, 170, 246], "manual": [17, 29, 161, 162, 171, 174, 203, 204, 205, 220, 224, 227, 228, 230, 242, 248, 254], "manual_param": [224, 228, 230], "manual_se": 206, "manualmodeparam": [17, 29, 224, 228, 230], "manylinux_2_34_x86_64": [242, 244], "map": [12, 13, 22, 30, 159, 164, 165, 173, 175, 176, 192, 193, 194, 195, 197, 201, 214, 219, 220, 221, 226, 233, 237, 238, 240, 247, 248, 249, 250, 251, 254], "map_loc": 218, "marginrankingloss": 105, "marku": 227, "mask": 30, "maskedadd": 30, "match": [166, 179, 185, 197, 219, 224, 227, 228, 230, 231, 246, 247, 250, 251, 254, 255], "math": [214, 220, 233, 247, 259], "mathemat": [178, 188, 201, 206, 240, 253], "matmul": [7, 254], "matmul_8": 173, "matric": 237, "matrix": 201, "matter": [30, 213], "max": [8, 21, 161, 162, 166, 168, 171, 176, 177, 184, 191, 198, 199, 201, 216, 217, 227, 242, 247, 248, 254, 257, 258], "max_epoch": [203, 204, 205, 209, 211, 212], "max_iter": [237, 238], "maximum": [2, 12, 13, 21, 25, 164, 165, 166, 182, 183, 188, 192, 193, 194, 195, 200, 201, 202, 206, 213, 219, 220, 233, 249], "maxlen": [20, 196, 197], "maxpool1d": 106, "maxpool2d": 107, "maxpool3d": 108, "maxpooling2d": 195, "maxunpool1d": 109, "maxunpool2d": 110, "maxunpool3d": 111, "mdoel": 221, "mean": [26, 175, 188, 192, 195, 196, 197, 200, 201, 203, 204, 205, 206, 208, 209, 210, 213, 214, 216, 220, 221, 233, 247, 249, 251], "meaning": 192, "measur": [2, 8, 12, 21, 29, 177, 182, 184, 188, 203, 204, 205, 206, 219, 224, 228, 230, 233, 240, 259], "mechan": [22, 172, 178, 214, 235, 247, 250], "meet": [13, 25, 182, 183, 188, 192, 206, 220, 225, 226, 233, 259], "member": [10, 239, 251], "memori": [17, 29, 160, 176, 203, 204, 205, 224, 225, 227, 228, 230, 231, 232, 234, 240, 254, 259], "memory_format": 160, "merg": 240, "messag": 192, "met": [2, 12, 182, 188, 192, 206, 233], "meta": 176, "meta_data": 176, "metapackag": 187, "method": [6, 13, 19, 22, 24, 25, 30, 100, 160, 169, 171, 172, 174, 175, 179, 182, 183, 185, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 218, 220, 226, 227, 232, 233, 235, 237, 239, 240, 247, 249, 250, 255], "methodologi": 259, "metric": [17, 29, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 219, 220, 221, 224, 228, 230, 233, 239, 247, 249, 250, 259], "mha": [196, 254], "middl": 259, "might": [2, 12, 182, 188, 189, 192, 193, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 219, 233, 244, 248, 254, 255, 259], "migrat": [167, 247, 254], "mimic": 258, "mimick": 171, "min": [8, 21, 161, 162, 168, 171, 176, 177, 184, 191, 198, 199, 201, 216, 217, 242, 248, 254, 257, 258], "min_max": [9, 247, 254], "min_max_rang": [200, 213, 219], "minim": [180, 186, 188, 191, 192, 198, 199, 206, 211, 212, 223, 232, 233, 234, 239, 240, 241, 249], "minima": 239, "minimum": [164, 165, 172, 200, 213, 239, 249, 254], "minmaxencodinganalyz": 166, "minor": [248, 254], "miou": [188, 206], "mish": 112, "mismatch": [178, 201, 216, 218, 247], "miss": [20, 166, 173, 257], "missing_kei": 166, "mix": [2, 12, 13, 25, 174, 182, 183, 187, 220, 252, 254, 259], "mixed_precis": [5, 18, 167, 188, 192, 206, 233, 235], "mixed_precision_algo": [2, 174, 182, 188, 192, 206, 233], "mixed_preision_quant_model": 233, "mixedprecisionconfigur": [174, 235], "mixin": [30, 175], "mkdir": 187, "ml": [191, 196, 198, 199, 211, 212, 227], "mmp": 234, "mmp_log": [174, 235], "mnist": [224, 228, 230], "mnist_after_bn_re_estimation_qat_range_learn": 195, "mnist_torch_model": 224, "mnist_trained_on_gpu": [224, 228, 230], "mnt": 243, "mobil": [240, 241], "mobilenet": [214, 221, 239, 240], "mobilenet_v2": [214, 220, 221, 222, 223, 233, 235, 239, 245, 247, 250], "mobilenet_v2_weight": [214, 222, 223, 233, 239, 247], "mobilenetv2": [214, 220, 221, 222, 223, 245, 247, 250], "mobilenetv2_1": [214, 222, 223], "mode": [9, 13, 17, 22, 25, 29, 172, 179, 183, 185, 203, 204, 205, 220, 224, 228, 230, 247, 251, 254], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 251, 254, 256, 257, 258, 260], "model_after_qat": [196, 198, 199], "model_id": [237, 238], "model_input": [173, 195], "model_or_pipelin": [214, 239], "model_output": 195, "model_prepar": [18, 167, 197, 206, 207, 209, 210, 211, 212, 213, 219, 222, 223, 254], "model_prepare_requir": [25, 183, 220], "model_preparer_elementwise_add_exampl": 172, "model_preparer_functional_exampl": 172, "model_preparer_reused_exampl": 172, "model_preparer_subclassed_model_with_functional_lay": 20, "model_preparer_two_subclassed_lay": 20, "model_torch": 218, "model_transform": 172, "model_valid": 167, "model_weights_in_correct_ord": 197, "modelcompressor": [17, 29, 203, 204, 205, 224, 228, 230], "modeling_opt": [237, 238], "modelprepar": [20, 172, 197, 206, 207, 210, 211, 212, 213], "modelproto": [1, 3, 4, 6, 8, 9, 214, 218, 219, 222, 223, 247], "modelvalid": 173, "modelwithconsecutivelinearblock": 215, "modelwithelementwiseaddop": 172, "modelwithfunctionallinear": 173, "modelwithfunctionalrelu": 172, "modelwithnontorchfunct": 172, "modelwithoutfunctionallinear": 173, "modelwithoutreusednod": 173, "modelwithreusednod": 173, "modelwithreusedrelu": 172, "modif": [206, 207, 210, 211, 212], "modifi": [22, 24, 172, 176, 179, 185, 188, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 222, 223, 231, 233, 237, 238, 244, 247, 249, 250, 254, 258, 259], "modul": [1, 2, 7, 12, 17, 23, 24, 25, 26, 27, 28, 29, 30, 100, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 231, 233, 235, 237, 238, 239, 245, 246, 247, 250, 252, 253, 254, 259], "module_cl": 30, "module_classes_to_exclud": 172, "module_nam": [237, 238], "module_to_exclud": 172, "modulecompratiopair": [17, 29, 224, 228, 230], "moduledict": [30, 171, 175, 179, 245, 247, 250], "modulelist": [30, 171, 175, 179, 245, 247, 250], "modules_to_exclud": [25, 172, 180, 183, 186, 220, 239], "modules_to_ignor": [17, 29, 177, 184, 203, 204, 205, 219, 224, 228, 230], "momentum": [221, 222, 223], "monitor": 219, "monoton": [17, 29, 224, 226, 228, 230], "more": [1, 17, 22, 23, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 171, 173, 175, 181, 182, 185, 188, 192, 195, 196, 197, 200, 201, 206, 209, 213, 214, 219, 223, 224, 226, 227, 228, 229, 230, 233, 234, 235, 240, 247, 249, 250, 251, 254, 255, 257, 258, 259], "most": [178, 196, 220, 240, 242, 243, 249, 251], "move": [187, 250], "movi": 196, "mp": [174, 235], "mp_configur": 235, "mse": [8, 10, 21, 171, 177, 180, 184, 186, 219, 249, 254], "mseloss": 104, "much": [203, 204, 205, 231, 259], "mul": 176, "mul_scal": 238, "multi": [196, 254], "multigpu": 254, "multiheadattent": [20, 196, 197, 254], "multilabelmarginloss": 113, "multilabelsoftmarginloss": 114, "multimarginloss": 115, "multipl": [17, 25, 27, 28, 29, 160, 169, 172, 173, 174, 175, 179, 183, 185, 200, 213, 218, 220, 222, 223, 224, 227, 228, 230, 235, 244, 246, 247, 249, 250, 254], "multipli": [175, 188, 206, 225, 227, 228, 230, 232], "must": [20, 160, 166, 170, 173, 175, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 219, 220, 221, 225, 231, 239, 246, 247, 251, 258], "mutual": [166, 170, 246], "my_functional_model": 20, "myfunctionalmodel": 20, "n": [8, 13, 21, 177, 178, 184, 219, 220, 230, 246], "nagel": 227, "name": [1, 2, 8, 12, 17, 20, 21, 30, 168, 169, 174, 175, 176, 177, 179, 182, 184, 185, 188, 189, 190, 191, 195, 197, 200, 213, 214, 217, 218, 219, 222, 223, 228, 229, 233, 235, 237, 238, 243, 244, 247, 248, 249, 250, 254, 257], "name_": [8, 21, 177, 184, 200, 213, 219], "name_to_module_dict": 176, "name_to_quantizer_dict": [2, 12, 174, 182, 233], "named_modul": [237, 238], "named_paramet": 237, "namedtupl": 166, "namespac": [167, 171, 181, 182, 183, 184, 185, 186], "naming_schem": [169, 218], "namingschem": [169, 218], "nativ": [175, 243], "navig": 187, "na\u00efv": 232, "nconv": 222, "ndarrai": [2, 6, 8, 9, 12, 197, 214, 218, 219, 220, 233, 247], "nearest": [9, 13, 21, 22, 25, 183, 185, 189, 192, 193, 196, 198, 199, 201, 202, 207, 210, 214, 219, 220, 247, 250], "necessari": [158, 159, 160, 179, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 219, 222, 224, 228, 229, 230, 247, 250, 259], "necessarili": [188, 192, 206, 233], "necessit": 242, "need": [1, 8, 17, 19, 20, 21, 22, 23, 24, 29, 169, 174, 176, 177, 181, 184, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 228, 230, 233, 234, 235, 239, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259], "neg": [148, 149, 164, 165, 188, 195, 196, 201, 206], "negat": [189, 193, 207], "nest": 254, "net": [187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 257], "network": [20, 175, 194, 196, 197, 201, 208, 225, 226, 227, 229, 240, 245, 249, 250, 254, 255], "neural": [188, 194, 201, 206, 208, 225, 227, 240, 249, 250, 255], "neuron": 240, "new": [15, 20, 160, 161, 162, 171, 172, 176, 185, 193, 197, 198, 199, 201, 202, 206, 213, 222, 233, 235, 236, 237, 241, 242, 246, 252, 253, 254], "new_empti": 160, "next": [176, 188, 190, 192, 195, 196, 201, 206, 209, 214, 223, 244, 245, 247, 249, 254, 255], "next_conv_weight": 223, "nfolded_model": 222, "night": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "nllloss": 116, "nllloss2d": 117, "nmodel": [222, 223], "nn": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 170, 171, 172, 173, 174, 179, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 224, 228, 230, 233, 235, 237, 238, 239, 245, 246, 247, 250, 253, 254, 259], "nncf": 240, "nnext": 223, "no_grad": [173, 179, 206, 207, 208, 210, 211, 212, 213, 214, 215, 233, 237, 238, 239, 245, 247, 250], "node": [22, 25, 172, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 220, 222, 223, 239, 240, 247, 250, 253, 254, 258, 259], "noffset": 178, "nois": [219, 223, 250, 251, 258], "noisi": [195, 209], "non": [172, 174, 180, 186, 194, 208, 215, 229, 239, 249, 254, 257, 258], "none": [1, 2, 6, 8, 9, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 59, 60, 61, 71, 79, 80, 96, 97, 100, 109, 110, 111, 123, 124, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 233, 235, 239, 242, 243, 244, 245, 246, 247, 250], "norm": [15, 192, 202, 214, 219, 223, 233, 254], "normal": [15, 208, 214, 219, 220, 222, 233, 240, 247, 254], "notabl": 248, "note": [2, 8, 9, 12, 13, 20, 21, 22, 24, 25, 171, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 218, 219, 220, 224, 228, 229, 230, 233, 235, 239, 242, 243, 244, 246, 247, 250], "note1": [188, 206, 209, 213], "note2": [188, 206, 209, 213], "notebook": [189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 254], "noth": [17, 29, 224, 228, 230, 259], "notic": [168, 217, 254], "notimplementederror": 30, "now": [20, 172, 173, 178, 179, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 222, 223, 233, 247, 248, 250, 254], "np": [2, 20, 192, 197, 214, 219, 220, 228, 233, 242, 247], "nprepared_model": [222, 223], "nprev": 223, "nscale": 178, "nullptr": 254, "num": [164, 165], "num_batch": [1, 8, 10, 11, 21, 23, 26, 180, 181, 186, 189, 190, 193, 194, 195, 200, 201, 207, 208, 209, 210, 213, 214, 215, 219, 220, 221, 239, 247], "num_bias_correct_sampl": 210, "num_calibration_sampl": [214, 220, 221, 233, 247, 250], "num_candid": [10, 180, 186, 239], "num_channel": 248, "num_class": 219, "num_comp_ratio_candid": [17, 29, 203, 204, 205, 224, 228, 230], "num_epoch": [24, 215, 221], "num_eval_sampl": [233, 247], "num_head": [20, 196, 197], "num_iter": [192, 228, 233], "num_of_sampl": 220, "num_quant_sampl": 210, "num_reconstruction_sampl": [29, 203, 205, 224], "num_sampl": [2, 174, 182, 194, 195, 206, 208, 214, 215, 219, 233], "num_samples_for_phase_1": [13, 25, 183, 220], "num_samples_for_phase_2": [13, 25, 183, 220], "num_step": [164, 165], "num_word": 196, "num_work": [188, 189, 190, 191, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 220, 221, 239], "number": [1, 2, 8, 10, 11, 13, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 164, 165, 166, 170, 172, 174, 175, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 233, 236, 239, 240, 243, 246, 247, 248, 249, 250, 254, 258, 259], "numer": [169, 218], "numpi": [188, 189, 190, 191, 197, 214, 219, 220, 228, 233, 242, 247], "numpy_help": [222, 223], "nupi": [12, 233], "nvidia": [240, 242, 243, 244, 245], "o": [188, 189, 192, 193, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 222, 223, 224, 228, 230, 233, 242, 247], "object": [1, 2, 7, 8, 9, 10, 12, 13, 22, 24, 25, 30, 158, 159, 160, 166, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 194, 195, 200, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 228, 230, 233, 234, 235, 239, 241, 246, 247, 249, 250, 258, 259], "observ": [9, 30, 166, 175, 179, 201, 209, 219, 227, 247, 249, 250], "obtain": [6, 169, 219, 225, 248, 257], "obvious": [224, 228, 230], "occur": [168, 217, 248], "occurr": [8, 21, 177, 184, 219, 224], "oct": 227, "off": [1, 11, 22, 23, 181, 188, 192, 206, 214, 221, 233, 247, 250, 259], "offer": [8, 177, 184, 194, 208, 216, 219, 220, 242], "offset": [8, 21, 30, 71, 161, 162, 163, 164, 165, 177, 178, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 219, 242, 245, 247, 248, 249, 250, 254, 257, 258], "offset_": [161, 162, 163, 164, 165], "often": [220, 222, 223, 227], "older": [235, 242], "omit": [226, 243, 251], "omniqu": 215, "onc": [30, 160, 173, 176, 178, 191, 196, 198, 199, 203, 204, 205, 210, 211, 212, 224, 227, 235, 250, 252, 253, 254, 257, 258, 259], "one": [9, 23, 25, 27, 172, 173, 174, 176, 178, 179, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 220, 222, 224, 227, 228, 229, 230, 235, 237, 238, 242, 243, 244, 245, 246, 247, 248, 250, 254, 258], "ones": [245, 249], "ones_lik": [161, 162], "onli": [2, 8, 9, 12, 22, 158, 159, 160, 164, 165, 168, 170, 171, 172, 174, 175, 177, 178, 179, 182, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 222, 227, 228, 229, 231, 233, 235, 236, 237, 238, 239, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 259], "onnx": [0, 1, 2, 3, 5, 6, 8, 9, 25, 169, 174, 179, 183, 185, 187, 214, 215, 217, 218, 219, 220, 221, 222, 223, 233, 235, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 257, 258, 259], "onnx_encoding_path": 247, "onnx_export_arg": [25, 169, 179, 183, 185, 218, 220, 247, 250], "onnx_file_nam": 253, "onnx_model": 219, "onnx_util": 218, "onnxexportapiarg": [25, 169, 179, 183, 185, 218, 220, 247, 250], "onnxmodel": [8, 9, 219, 247], "onnxruntim": [188, 189, 190, 191, 218, 219, 242, 244, 247, 254], "onnxruntime_v": 244, "onnxsim": [188, 189, 190, 191, 214, 218, 219, 222, 223, 233, 247], "onto": 258, "op": [1, 2, 9, 11, 12, 15, 17, 22, 23, 25, 173, 179, 181, 182, 183, 185, 188, 189, 190, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 220, 222, 228, 247, 249, 250, 251, 254, 257], "op_list": [195, 251], "op_typ": [2, 7, 182, 188, 195, 206, 233, 251], "op_type_map": 173, "open": [195, 240], "oper": [7, 17, 20, 30, 171, 172, 173, 175, 188, 191, 192, 197, 198, 199, 206, 211, 212, 215, 218, 223, 228, 232, 233, 239, 240, 245, 247, 249, 250, 251, 253, 254, 255, 258, 259], "oppos": [190, 202, 210], "opset": 254, "opset_vers": [179, 185, 247, 250], "opt": [192, 237, 238], "optim": [1, 2, 11, 12, 13, 23, 25, 29, 166, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 229, 233, 237, 238, 239, 240, 241, 244, 247, 249, 250, 254, 258, 259], "optimized_accuraci": [208, 220], "option": [1, 2, 8, 9, 10, 11, 12, 13, 17, 21, 22, 23, 24, 25, 26, 29, 30, 161, 162, 163, 164, 165, 166, 170, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 224, 228, 230, 233, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 254, 257], "optlearnedpositionalembed": [237, 238], "optmiz": [188, 206], "orang": 231, "order": [30, 100, 173, 175, 189, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 211, 212, 213, 216, 224, 235, 246, 250, 251, 252, 253, 257, 258], "org": [172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 242, 243, 244], "org_top1": 233, "organ": [240, 256], "origin": [17, 20, 29, 30, 167, 171, 172, 175, 180, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 218, 219, 224, 225, 226, 228, 229, 230, 232, 233, 239, 240, 249, 254, 259], "original_model": [20, 197], "original_model_weight": 197, "ort": [9, 188, 189, 190, 191, 247], "oscil": 221, "other": [160, 170, 171, 172, 174, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 226, 235, 236, 237, 238, 241, 242, 245, 246, 249, 253, 254, 255, 256], "otherwis": [9, 13, 161, 162, 164, 165, 170, 173, 176, 179, 185, 189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 220, 223, 246, 247, 248, 250, 255, 259], "our": [176, 195, 196, 209], "out": [8, 20, 21, 22, 161, 162, 163, 164, 165, 166, 172, 176, 177, 178, 179, 184, 185, 197, 219, 242, 245, 247, 250, 254], "out1": [20, 197, 235], "out2": 235, "out3": 235, "out_": [161, 162, 163, 164, 165], "out_channel": [170, 246], "out_featur": [30, 171, 175], "outlier": [219, 249], "outlin": [225, 236], "output": [2, 6, 7, 8, 9, 12, 13, 17, 19, 20, 21, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257], "output_bw": [13, 25, 176, 183, 220], "output_dim": [20, 196, 197], "output_dir": 257, "output_dir_path": 257, "output_dlc": 257, "output_encod": 30, "output_nam": [179, 185, 188, 189, 190, 191, 214, 222, 233, 247, 250], "output_op_nam": [12, 17, 228, 233], "output_path": 257, "output_qtzr": 30, "output_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 179, 182, 233, 245, 247, 250], "output_s": [59, 60, 61, 109, 110, 111], "output_shap": 197, "outsid": 251, "over": [8, 20, 25, 164, 165, 175, 178, 183, 219, 220, 224, 226, 227, 228, 230, 232, 233, 249], "overal": [225, 226, 255], "overfit": 239, "overhead": [192, 203, 205, 206, 249], "overlin": [162, 165], "overload": [9, 164, 165, 179, 247, 250], "overrid": [25, 160, 172, 179, 183, 185, 206, 207, 210, 211, 212, 220, 247, 250], "overridden": [30, 175, 251], "overtax": 259, "overview": [171, 256], "overwri": [247, 250], "overwriiten": [247, 250], "overwritten": [171, 238], "own": [219, 220, 258], "p": [188, 206, 243], "p1": 235, "p2": 235, "packag": [167, 187, 244, 245, 254], "pad": [20, 172, 173, 179, 195, 222, 223, 245, 247, 250], "pad_sequ": 196, "page": [225, 241, 242, 243, 244, 245, 246, 249, 259], "pair": [3, 14, 17, 27, 29, 221, 222, 224, 228, 230], "pairwisedist": 119, "parallel": 250, "param": [1, 2, 10, 11, 12, 17, 21, 23, 29, 30, 100, 173, 174, 175, 176, 177, 180, 181, 182, 184, 186, 188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 219, 222, 223, 224, 228, 230, 233, 234, 235, 237, 239, 246, 248, 254, 258], "param_bitwidth": [214, 247, 248, 250], "param_bw": [13, 25, 176, 183, 220], "param_bw_override_list": [1, 23, 181, 214], "param_encod": [171, 248], "param_nam": [8, 21, 177, 184, 219], "param_name_": [8, 21, 177, 184, 200, 213, 219], "param_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 175, 176, 179, 245, 246, 247, 250], "paramet": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 230, 232, 233, 235, 237, 238, 239, 240, 246, 247, 248, 251, 254, 257, 258, 259], "parameter_quant": [2, 12, 174, 182, 233], "parent": [30, 100, 175, 233, 254], "pareto": [2, 12, 13, 25, 182, 183, 188, 192, 206, 220], "pareto_front": 220, "pareto_front_list": [188, 206, 233], "pars": [23, 179, 181, 185, 214, 247, 250], "part": [8, 20, 21, 177, 184, 219, 227, 246, 247, 258], "partial": [25, 172, 183, 220, 247, 250], "particular": [170, 173, 188, 192, 206, 233, 246, 251], "pass": [1, 2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 100, 166, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 228, 229, 233, 235, 237, 238, 239, 240, 246, 247, 249, 250, 253, 254, 255, 257, 259], "pass_calibration_data": [188, 189, 190, 191, 193, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 221, 247, 250], "passwd": 243, "past": [187, 254], "patch": 248, "path": [1, 2, 8, 9, 11, 12, 13, 17, 21, 22, 23, 25, 29, 168, 172, 174, 176, 177, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 243, 244, 247, 250, 257], "path_to_imagenet": [233, 247, 250], "pathlik": [247, 250], "pattern": [227, 254], "pb": 257, "pcq": [8, 21, 177, 184, 219], "pcq_quantsim_config": 201, "pdf": [8, 21, 177, 184, 219, 254], "peft": [167, 237, 238, 254], "peft_model_id": [237, 238], "peft_util": 176, "peftquantutil": 176, "pend": [24, 215], "pendyam": 227, "per": [7, 8, 17, 21, 29, 169, 170, 175, 176, 177, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 218, 221, 222, 223, 224, 228, 229, 230, 232, 233, 239, 240, 248, 249, 250, 251, 254], "per_block": 248, "per_block_int_scal": 248, "per_channel": 248, "per_channel_quant": [175, 195, 201, 248, 251], "per_layer_mse_loss": [200, 213, 219], "per_layer_quant_dis": [200, 213, 219], "per_layer_quant_en": [200, 213, 219], "per_sample_weight": 71, "per_tensor": 248, "percentag": [189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 240], "perform": [2, 3, 4, 8, 10, 12, 13, 16, 21, 23, 24, 25, 26, 28, 30, 100, 161, 162, 166, 175, 176, 177, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 254, 256, 258, 259], "perform_per_layer_analysis_by_disabling_quant": [8, 219], "perform_per_layer_analysis_by_disabling_quant_wrapp": [21, 177, 184, 219], "perform_per_layer_analysis_by_enabling_quant": [8, 219], "perform_per_layer_analysis_by_enabling_quant_wrapp": [21, 177, 184, 219], "perhap": [188, 195, 200, 201, 206, 209, 213], "period": [1, 11, 23, 181, 214], "persist": 166, "person": 240, "perspect": [188, 201, 206, 215], "phase": [2, 12, 13, 25, 174, 182, 183, 188, 192, 206, 220, 227], "phase1": [2, 12, 182, 188, 206, 233], "phase1_optim": [2, 12, 182, 188, 206, 233], "phase2": 182, "phase2_revers": 182, "phone": [240, 241], "php": [187, 188, 192, 195, 200, 201, 206, 209, 213], "pick": [2, 12, 20, 182, 188, 192, 206, 225, 226, 233], "pickl": [17, 29, 224, 228, 230], "pictur": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "piec": [20, 172], "pillow": 244, "pin": 254, "pin_memori": [160, 172, 206], "pink": 231, "pinpoint": 219, "pip": [187, 229, 242, 243, 244, 245, 254], "pip3": 244, "pipelin": [25, 183, 196, 198, 199, 218, 220, 249, 254, 255, 258], "pitr": 227, "pixelshuffl": 120, "pixelunshuffl": 121, "place": [2, 4, 12, 22, 23, 24, 28, 179, 181, 182, 185, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 223, 233, 247, 250, 251, 254], "place_model": [237, 238], "placehold": [237, 238], "placement": [188, 189, 190, 191, 203, 204, 205, 206, 207, 210, 211, 212, 213, 254], "plai": 201, "plan": [243, 258], "platform": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 219, 240, 241, 242], "pleas": [167, 171, 173, 176, 179, 185, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 209, 213, 219, 224, 228, 230, 242, 247, 250, 254, 257], "plot": [2, 12, 168, 182, 188, 192, 200, 206, 213, 217, 219, 233], "pmatrix": [161, 162, 163, 164, 165], "point": [2, 8, 12, 20, 21, 30, 158, 159, 170, 171, 176, 177, 182, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 219, 222, 223, 233, 234, 240, 241, 246, 248, 249, 254, 255, 258, 259], "pointer": [192, 195, 196, 200, 201, 213], "poissonnllloss": 122, "pool": [192, 193, 195, 201, 202], "pop": 197, "popul": 248, "popular": 236, "port": [229, 243, 254], "port_id": 243, "portabl": 240, "portion": 20, "pos_emb": [20, 197], "posit": [20, 148, 149, 164, 165, 195, 196, 197], "possibl": [2, 3, 9, 12, 13, 20, 22, 25, 173, 179, 182, 183, 185, 188, 192, 194, 197, 206, 208, 219, 220, 222, 226, 233, 246, 247, 250, 251, 252, 253, 255, 259], "post": [13, 25, 183, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 219, 220, 223, 227, 232, 240, 241, 247, 248, 249, 250, 254, 259], "post1": 244, "post_training_tf": [1, 8, 9, 11, 21, 22, 23, 168, 177, 181, 184, 188, 192, 193, 195, 196, 198, 201, 202, 206, 209, 210, 214, 217, 219, 220, 247, 248, 250, 254], "post_training_tf_enhanc": [1, 8, 11, 13, 21, 22, 23, 25, 177, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 195, 196, 200, 206, 207, 209, 210, 211, 213, 214, 219, 220, 247, 248, 250], "potenti": [195, 209, 229], "power": [234, 240, 248, 254, 255], "pp": 227, "practic": [188, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 213, 227], "pre": [187, 215, 216, 218, 219, 222, 224, 227, 232, 239, 242, 250, 254], "preced": [221, 231, 232], "precis": [2, 12, 13, 25, 161, 162, 163, 164, 165, 166, 174, 182, 183, 187, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 207, 209, 210, 211, 212, 213, 220, 240, 248, 254, 255], "precomput": [237, 247], "precursor": 222, "pred": [192, 206, 228, 233], "pred_label": [214, 220, 233, 247], "pred_prob": [214, 220, 233, 247], "predefin": [194, 208], "predict": [12, 192, 200, 218, 219, 228, 233, 240, 247], "prefac": 244, "prefer": [167, 171, 242, 246, 258], "prefix": [1, 11, 22, 23, 175, 176, 179, 181, 185, 214, 247, 250], "prelu": [118, 254], "prepar": [20, 24, 25, 172, 176, 183, 194, 215, 220, 222, 223, 233, 242, 252, 253, 254, 256, 259], "prepare_model": [20, 172, 197, 206, 207, 209, 210, 211, 212, 213, 219, 222, 223], "prepared_model": [172, 219, 222, 223], "prepend": [175, 187], "preprocess": [192, 193, 196, 198, 199, 201, 214, 220, 221, 228, 233, 247, 250], "preprocess_input": [192, 193, 198, 199, 201, 202, 214, 220, 221, 228, 233, 247, 250], "prerequisit": 229, "presenc": 250, "present": [169, 171, 173, 176, 197, 209, 218, 246, 248], "preserv": [166, 172, 214], "preserve_format": 160, "preset": 233, "pretrain": [188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 233, 235, 247, 249, 250], "pretti": [224, 228, 230], "prev": 223, "prev_conv_weight": 223, "prevent": [171, 172, 224, 238, 254], "previou": [2, 12, 17, 29, 178, 182, 188, 192, 206, 210, 224, 225, 228, 230, 233, 240, 242, 243, 255, 257], "primari": 241, "print": [30, 164, 165, 171, 172, 173, 175, 178, 179, 188, 189, 190, 191, 195, 196, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 219, 220, 221, 222, 223, 224, 228, 230, 233, 242, 244, 245, 247, 250], "prior": [2, 12, 182, 188, 192, 206, 207, 210, 211, 212, 233, 248, 254], "privileg": [187, 244], "probabl": 240, "problem": [172, 242, 254, 255, 259], "problemat": [172, 255], "proce": [13, 25, 183, 220, 222, 244, 259], "procedur": [190, 202, 203, 205, 210, 226, 229, 242, 244, 247, 254], "proceed": [188, 189, 190, 191, 214, 222, 223, 233, 247], "process": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 218, 220, 222, 224, 226, 227, 228, 235, 240, 244, 246, 247, 249, 258], "processor": [240, 242, 245], "produc": [13, 25, 158, 159, 168, 172, 183, 188, 200, 201, 206, 213, 216, 217, 219, 220, 226, 233, 240, 248, 249], "product": [225, 240, 241], "profil": [174, 233, 257], "progbar": [193, 198, 199, 201, 202], "progbar_stat_upd": [193, 198, 199, 201, 202], "progress": 229, "project": 240, "prone": [220, 235], "pronounc": 234, "propag": [231, 235, 254], "propagate_encod": [25, 179, 183, 185, 220, 247, 250], "proper": 254, "properli": [161, 162, 218, 254], "properti": [166, 171], "provid": [1, 2, 5, 8, 12, 18, 20, 21, 23, 25, 30, 166, 171, 173, 176, 177, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 222, 225, 226, 227, 228, 229, 233, 235, 237, 239, 240, 246, 247, 248, 249, 250, 255, 256, 257, 258, 259], "proxi": 172, "prune": [29, 187, 204, 225, 226, 228, 230, 231, 232, 240, 254], "pt": 176, "pt_model": [188, 189, 190, 191, 214, 222, 223, 233, 247], "pth": [22, 176, 179, 185, 218, 224, 228, 230, 247, 250], "ptq": [13, 25, 183, 194, 208, 215, 219, 220, 223, 227, 232, 240, 249, 250, 254, 258, 259], "public": [167, 247, 254], "publish": 254, "pure": [20, 253], "purpos": [188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 240], "put": [182, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "py38": [242, 243, 244], "pypi": [243, 244], "python": [20, 240, 242, 243, 244, 245, 254], "python3": [187, 242, 243, 244, 245, 254], "pythonpath": [187, 218], "pytorch": [0, 25, 167, 169, 172, 173, 175, 178, 179, 180, 183, 185, 186, 187, 193, 194, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 254, 257, 259], "q": [30, 158, 159, 160, 161, 162, 164, 165, 166, 171, 175, 178, 237, 238, 245, 249], "q_": 249, "q_modul": 171, "q_output": 30, "qadd": 175, "qairt": 257, "qat": [1, 11, 23, 181, 187, 188, 191, 196, 201, 206, 214, 221, 237, 238, 240, 249, 254, 255, 258, 259], "qat2": 254, "qc": 254, "qc_quantize_op": 254, "qcquantizeop": [2, 233], "qcquantizewrapp": [14, 171, 221, 254], "qdo": 240, "qdq": [162, 166, 237, 258, 259], "qlinear": [30, 171, 175], "qmax": [161, 162, 164, 165, 178, 179, 245, 247, 250], "qmin": [161, 162, 164, 165, 178, 179, 245, 247, 250], "qmodul": 171, "qmul": 175, "qmult": 30, "qnn": [201, 202, 234, 254, 257, 258], "qol": 254, "qsim": [24, 195, 215], "qtzr": [178, 237], "quad": [161, 162, 163, 164, 165], "qualcomm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260], "qualiti": [188, 206], "quant": [1, 2, 8, 9, 13, 21, 22, 23, 25, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 212, 214, 219, 220, 233, 239, 247, 250, 254], "quant_analyz": [5, 18, 167, 171, 200, 213, 219], "quant_analyzer_result": 219, "quant_dequ": 158, "quant_schem": [8, 9, 13, 21, 22, 25, 168, 177, 179, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 239, 242, 245, 247, 248, 250], "quant_sim": 235, "quant_sim_model": [185, 247], "quant_stats_visu": [168, 217], "quant_wrapp": 171, "quantanalyz": [8, 21, 171, 177, 184, 216, 254], "quantiz": [1, 2, 5, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 194, 197, 203, 204, 205, 208, 214, 215, 217, 218, 221, 222, 223, 225, 227, 229, 233, 234, 235, 238, 239, 240, 242, 245, 247, 251, 253, 254], "quantizablemultiheadattent": 254, "quantizaiton": 7, "quantization_overrid": 257, "quantization_tf": 242, "quantizationdatatyp": [2, 9, 12, 13, 22, 25, 171, 174, 179, 182, 183, 185, 188, 192, 206, 220, 233, 247, 250], "quantizationmixin": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 237, 238], "quantizationmod": 242, "quantizationsim": [188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "quantizationsimmodel": [2, 7, 8, 9, 10, 12, 13, 14, 21, 22, 24, 25, 30, 168, 170, 171, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 233, 235, 237, 239, 245, 246, 247, 248, 249, 250, 251, 254, 257], "quantizationsimmodelv1": 171, "quantizationsimmodelv2": 171, "quantize_lora_scale_with_fixed_rang": 176, "quantized_": [214, 215, 239], "quantized_callback": [195, 196, 198, 199], "quantized_dlc": 257, "quantized_linear": 30, "quantized_mobilenet_v2": [214, 221, 247, 250], "quantized_mobilenetv2": 250, "quantized_model": [179, 247, 250], "quantized_repr": [30, 158, 159, 160], "quantizedadd": 175, "quantizedconv2d": [171, 175, 179, 245, 246, 247, 250], "quantizedequant": [158, 171, 175, 176, 178, 179, 237, 242, 245, 246, 247, 250], "quantizedlinear": [30, 171, 175, 246], "quantizedmaskedadd": 30, "quantizedmultipli": [30, 175], "quantizedoptlearnedpositionalembed": [237, 238], "quantizedrelu": 171, "quantizedsoftmax": 175, "quantizedtensor": [30, 158, 160, 161, 178], "quantizer_arg": 248, "quantizer_config": [12, 233], "quantizer_group": [2, 12, 174, 182, 233], "quantizer_info": [2, 233], "quantizer_nam": [12, 233], "quantizerbas": [30, 175, 178, 238], "quantizergroup": [2, 12, 13, 25, 174, 182, 183, 220, 233], "quantparam": 210, "quantschem": [1, 8, 9, 11, 13, 21, 22, 23, 25, 168, 177, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 233, 239, 245, 247, 250, 254], "quantsim": [1, 5, 6, 8, 11, 18, 19, 21, 23, 167, 168, 169, 171, 174, 176, 177, 181, 184, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 233, 234, 235, 237, 238, 239, 240, 241, 245, 246, 248, 250, 254, 258, 259], "quantsim_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "quantsim_layer_output": 218, "quantsim_layer_output_util": 218, "quantsimmodel": [215, 239], "quatiz": 258, "quic": [187, 240, 242, 243, 244], "quick": [178, 197, 201, 203, 205, 242, 247], "quickli": [188, 192, 200, 201, 206, 213, 241, 245], "qwa": 254, "r": [2, 8, 12, 21, 176, 177, 182, 184, 201, 219, 233], "radic": 259, "rais": [20, 30, 166, 197, 214, 220, 233, 247], "rand": [173, 206, 207, 209, 210, 211, 212, 213, 215, 218, 219], "randn": [30, 159, 160, 161, 162, 172, 173, 175, 179, 188, 189, 190, 191, 208, 214, 219, 220, 221, 222, 223, 233, 235, 239, 242, 245, 247, 250], "random": [20, 197, 208, 219, 224, 233, 242, 245], "random_input": [20, 197], "random_split": 247, "randperm": 206, "rang": [8, 20, 21, 164, 165, 168, 172, 177, 178, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 201, 202, 206, 207, 208, 209, 210, 211, 214, 216, 217, 221, 223, 226, 232, 233, 237, 238, 240, 247, 249, 250, 254, 255], "rank": [17, 29, 176, 228, 230, 232, 236], "rank_select": 230, "rank_select_schem": [29, 230], "rankselectschem": [29, 224, 228, 230], "rare": 254, "rate": [20, 195, 196, 197, 198, 199, 203, 204, 205, 209, 211, 212, 227, 250], "rather": [172, 195, 209, 239, 251], "ratio": [17, 29, 203, 204, 205, 224, 225, 228, 230], "raw": [237, 238], "rceil": [164, 165], "re": [2, 12, 178, 180, 182, 186, 187, 188, 197, 206, 233, 239, 254, 259], "re_estimation_dataset": 195, "re_estimation_dataset_s": 195, "reach": [194, 208, 220], "read": 219, "reader": [188, 195, 200, 201, 206, 209, 213], "readi": [22, 178, 179, 185, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 247, 250, 255, 258], "readili": [188, 192, 195, 200, 201, 206, 209, 213], "real": [158, 159, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 229, 233, 245], "realiz": [174, 235], "realli": [188, 195, 200, 201, 209, 213], "reason": [173, 189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 259], "recalcul": [195, 209], "receiv": 172, "recent": [243, 258], "recip": 254, "recogn": [173, 249], "recommend": [1, 2, 8, 9, 20, 23, 178, 181, 188, 189, 190, 191, 192, 193, 194, 197, 201, 207, 208, 214, 219, 221, 222, 223, 225, 233, 242, 243, 245, 246, 247, 255, 258, 259], "recomput": [176, 254], "reconstruct": [1, 11, 23, 181, 203, 205, 214], "record": [8, 21, 177, 184, 219], "recov": [190, 202, 203, 204, 205, 210, 254, 255, 258, 259], "recoveri": 259, "recurr": 254, "recurs": 254, "redefin": 173, "redesign": 254, "reduc": [175, 176, 188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 221, 223, 227, 231, 232, 234, 240, 246, 249, 254, 255], "reduct": [203, 204, 205, 225, 259], "redund": [222, 227], "reestim": [14, 26, 195, 221], "reestimate_bn_stat": [14, 26, 195, 209, 221], "ref": 244, "refer": [169, 171, 176, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 218, 233, 239, 246, 247, 248, 250, 257], "reflect": [198, 199, 211, 212, 249], "reflectionpad1d": 128, "reflectionpad2d": 129, "reflectionpad3d": 130, "regard": [2, 12, 182, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 233], "regist": [30, 166, 188, 237, 238, 254], "regress": 224, "regular": [1, 11, 12, 22, 23, 30, 178, 179, 181, 185, 188, 196, 214, 233, 247, 250], "rel": [12, 17, 29, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 224, 225, 228, 230, 233, 255], "relat": [171, 224, 228, 230, 241, 249], "relationship": 246, "releas": [187, 242, 243, 244], "release_tag": [187, 243, 244], "relev": [203, 204, 205, 234, 258], "reli": [171, 188, 189, 190, 191, 192, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "reload": 210, "relu": [20, 126, 171, 172, 173, 195, 196, 197, 214, 222, 223, 231, 251, 252, 253, 254], "relu1": [20, 173, 253], "relu2": [20, 173, 252, 253], "relu6": [127, 222, 223, 254], "remain": [24, 171, 180, 186, 214, 215, 239, 254], "remov": [14, 25, 26, 172, 183, 197, 220, 221, 222, 224, 231, 238, 240, 243, 247, 248, 249, 250, 254], "remove_all_quant": 238, "remove_column": [237, 238], "reorder": 197, "reorgan": 254, "repeat": [176, 201, 224, 259], "repeatedli": 258, "replac": [171, 172, 175, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 237, 244, 246, 249, 250, 254], "replace_lora_layers_with_quantizable_lay": [176, 237, 238], "replaced_module_typ": 176, "replicationpad1d": 131, "replicationpad2d": 132, "replicationpad3d": 133, "repo": [243, 244], "report": [235, 254, 259], "repositori": [187, 243, 244], "repres": [1, 2, 8, 9, 13, 17, 20, 21, 22, 25, 158, 159, 160, 166, 174, 175, 176, 177, 179, 182, 183, 184, 185, 200, 213, 214, 219, 220, 224, 226, 228, 230, 233, 235, 240, 245, 247, 248, 249, 250, 253, 254, 257], "represent": [158, 159, 160, 166, 178, 197, 240, 249, 254, 257], "reqs_deb_common": 244, "reqs_deb_onnx_common": 244, "reqs_deb_onnx_gpu": 244, "reqs_deb_tf_gpu": 244, "reqs_deb_torch_common": 244, "reqs_deb_torch_gpu": 244, "requant": 222, "request": 235, "requir": [2, 17, 20, 29, 30, 169, 171, 172, 176, 178, 179, 185, 188, 189, 192, 197, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 218, 219, 222, 223, 224, 225, 227, 228, 229, 230, 233, 235, 237, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 258, 259], "requires_grad": [159, 160, 172, 247, 250], "requires_grad_": [171, 237, 238], "rerun": 173, "resblock": 20, "research": 240, "resembl": 20, "resid": [243, 254], "residu": 224, "resiz": [206, 214, 220, 233, 247], "resnet": [179, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 225, 228, 233, 247, 250], "resnet18": [179, 188, 189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 247, 250], "resnet18_after_adaround": 189, "resnet18_after_cle_bc": [207, 208, 210], "resnet18_after_qat": [209, 211, 212], "resnet18_mixed_precis": [188, 206], "resnet50": [192, 193, 194, 198, 199, 200, 201, 202, 219, 228, 233], "resnet50_after_adaround": 193, "resnet50_after_amp": 192, "resnet50_after_cl": 202, "resnet50_pcq_adaround": 201, "resolv": [173, 254], "resort": 255, "resourc": [188, 195, 196, 197, 201, 206, 209, 240, 259], "respecit": [188, 206], "respect": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 178, 180, 186, 198, 199, 219, 232, 233, 239, 252, 254], "respond": [200, 213], "respons": [2, 12, 182, 188, 192, 206, 227, 233, 240, 259], "ressembl": 197, "rest": [193, 198, 199, 201, 202, 254, 255], "restor": [185, 203, 204, 205, 249, 254, 255, 258], "restrict": 246, "resu": 20, "result": [2, 8, 12, 13, 20, 21, 25, 30, 158, 159, 160, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 223, 224, 225, 227, 228, 230, 233, 237, 238, 239, 246, 247, 249, 250, 251], "results_dir": [2, 8, 12, 13, 21, 25, 177, 182, 183, 184, 188, 192, 200, 206, 213, 219, 220, 233], "retain": [233, 240], "retest": 259, "retrain": [240, 253, 258], "retriev": 30, "retrieve_context": 257, "retuern": 233, "return": [1, 2, 3, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 233, 237, 238, 239, 246, 247, 249, 250, 252, 253], "return_dict": [237, 238], "reus": [172, 173, 188, 206, 252, 253], "reveal": 255, "revert": 255, "review": 196, "revis": 248, "revisit": 225, "rework": 248, "rewrit": 173, "rfloor": [161, 162, 163, 164, 165, 166, 249], "rgb": [214, 220, 233, 247, 253], "rgb_output": 253, "right": [161, 162, 163, 164, 165, 166, 175, 178, 188, 192, 194, 196, 206, 208, 231, 233, 246, 249], "rm": 243, "rmsnorm": 254, "rmsnormal": 254, "rnn": [123, 254], "rnncell": 124, "ro": 243, "robust": [239, 254, 258], "root": [206, 208, 243, 244, 254], "rough": [188, 206], "roughli": [25, 174, 182, 183, 220, 233], "round": [1, 9, 11, 13, 17, 21, 22, 23, 25, 29, 181, 183, 185, 187, 201, 219, 220, 228, 230, 240, 247, 249, 250, 254], "round_mod": 210, "round_nearest": 242, "rounding_mod": [9, 13, 21, 22, 25, 179, 183, 185, 192, 193, 196, 198, 199, 201, 202, 219, 220, 247, 250], "roundingmod": 242, "routin": [188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 247], "rrelu": 125, "rtype": [12, 20, 158, 159, 160, 174, 182, 233], "rule": [22, 233, 235, 246, 247, 250, 251, 258], "run": [2, 8, 9, 12, 13, 17, 20, 21, 22, 24, 25, 26, 29, 161, 162, 171, 172, 173, 174, 175, 177, 178, 179, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 224, 227, 228, 229, 230, 233, 234, 235, 240, 241, 243, 244, 246, 247, 248, 249, 250, 254, 257, 258, 259], "run_forward_pass": [9, 179, 247, 250], "run_infer": [13, 25, 183, 208, 220], "runnabl": 258, "runtim": [22, 30, 178, 179, 185, 188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 247, 248, 250, 254, 256, 257, 258, 259], "runtimeerror": [166, 179, 247, 250], "s2": 215, "s3": 215, "s_1": 246, "s_2": 246, "s_n": 246, "safe": 160, "safetensor": 176, "sai": [172, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 225, 233, 235], "sake": [190, 210, 218], "same": [8, 20, 21, 25, 30, 100, 158, 159, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 218, 219, 220, 223, 232, 235, 236, 246, 247, 250, 251], "sampl": [1, 2, 8, 13, 21, 22, 24, 25, 168, 174, 175, 177, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 222, 223, 224, 228, 233, 237, 238, 239, 245, 247, 249, 250, 254], "sampled_dataset": [194, 195, 200], "sandeep": 227, "saniti": 178, "satisfactori": [214, 215, 221, 239, 255, 259], "satisfi": [172, 174, 189, 194, 208, 220, 235, 246], "saurabh": 227, "save": [1, 2, 6, 8, 9, 11, 12, 13, 17, 19, 21, 22, 23, 25, 29, 168, 169, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 224, 228, 230, 233, 239, 247, 249, 250, 257, 258], "save_checkpoint": 185, "save_dir": [19, 218], "save_path": [168, 217], "saved_eval_scores_dict": [17, 29, 224, 228, 230], "saw": 201, "scalar": [8, 13, 21, 177, 184, 219, 220, 254], "scale": [14, 30, 159, 160, 161, 162, 163, 164, 165, 166, 176, 178, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 219, 221, 223, 232, 240, 242, 245, 246, 247, 248, 249, 250, 254, 257, 258], "scale_": [161, 162, 163, 164, 165, 178], "scale_max": 176, "scale_min": 176, "scenario": [189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 231], "scene": 258, "schedul": [203, 204, 205, 209, 211, 212, 250], "schema": 254, "scheme": [1, 8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 169, 177, 179, 181, 183, 184, 185, 188, 192, 195, 196, 200, 203, 204, 205, 206, 209, 213, 214, 218, 219, 220, 224, 227, 228, 230, 240, 247, 250, 254], "scope": 172, "score": [2, 8, 12, 13, 17, 21, 25, 29, 177, 182, 183, 184, 188, 189, 190, 191, 192, 194, 195, 208, 209, 219, 220, 224, 226, 227, 228, 229, 230, 233], "script": [209, 243, 244], "sdk": [188, 201, 206, 241, 258], "search": [2, 10, 12, 13, 25, 180, 182, 183, 186, 188, 195, 196, 198, 199, 203, 204, 205, 206, 209, 211, 212, 220, 232, 233, 239, 250, 251, 254, 258], "searcher": 227, "sec": [188, 192, 201, 206, 233], "second": [9, 13, 20, 23, 175, 179, 180, 181, 186, 200, 213, 214, 220, 222, 223, 233, 239, 246, 247, 250], "section": [2, 173, 182, 188, 195, 206, 208, 233, 237, 238, 243, 244, 246, 249, 251, 256, 259], "see": [17, 20, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 223, 224, 227, 228, 229, 230, 241, 242, 245, 246, 247, 249, 251, 254, 255, 259], "seed": 224, "seem": 227, "seen": [200, 213, 219], "select": [13, 17, 25, 29, 183, 188, 192, 206, 219, 220, 225, 228, 229, 230, 231, 237, 238, 240, 242, 243, 244, 249, 251, 257], "select_param": [29, 230], "self": [13, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 172, 173, 189, 197, 208, 214, 220, 233, 247, 252, 253], "selu": 134, "sens": 175, "sensit": [2, 8, 12, 21, 177, 182, 184, 188, 190, 192, 202, 206, 210, 216, 221, 226, 232, 234, 249, 254, 258, 259], "sentiment": 196, "separ": [1, 11, 20, 22, 23, 171, 172, 173, 179, 181, 185, 192, 214, 219, 221, 247, 250, 254, 255], "separableconv2d": 254, "seq": 239, "seq_length": [237, 238], "seq_ms": [5, 167, 171, 239], "seqms": [232, 239, 254], "seqmseparam": [10, 180, 186, 239], "sequanti": 197, "sequenc": [179, 194, 196, 208, 214, 220, 232, 247, 250, 251], "sequenti": [10, 20, 171, 180, 186, 195, 196, 197, 222, 223, 245, 251, 252, 254, 255], "sequential_ms": [10, 239], "sequentialms": [10, 239], "seri": [25, 174, 179, 183, 185, 194, 208, 220, 235, 247, 250, 257], "serial": 257, "serializetostr": [188, 189, 190, 191, 218], "serv": [175, 214, 219, 220, 229], "servic": 235, "sess": [9, 188, 189, 190, 191, 228, 247], "session": [9, 17, 188, 189, 190, 191, 214, 218, 219, 228, 233, 247], "set": [1, 2, 7, 8, 11, 12, 13, 17, 20, 21, 25, 29, 30, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 221, 224, 225, 226, 227, 228, 230, 233, 234, 236, 237, 238, 240, 243, 244, 246, 247, 248, 249, 250, 251, 255, 258, 259], "set_activation_quantizers_to_float": [170, 246], "set_adaround_param": [13, 25, 183, 194, 208, 220], "set_and_freeze_param_encod": [189, 193, 201, 207, 214], "set_bitwidth_for_lora_adapt": 176, "set_blockwise_quantization_for_weight": [170, 246], "set_default_kernel": 30, "set_export_param": [25, 183, 220], "set_extra_st": 166, "set_grouped_blockwise_quantization_for_weight": [5, 170, 246], "set_kernel": 30, "set_mixed_precision_param": [13, 25, 183, 220], "set_model_input_precis": [174, 235], "set_model_output_precis": [174, 235], "set_model_preparer_param": [25, 183, 220], "set_precis": [174, 235], "set_quant": 254, "set_quant_scheme_candid": [13, 25, 183, 220], "set_quantizers_to_candid": [2, 12, 174, 182, 233], "set_rang": [158, 159], "set_transform": [214, 220, 233, 247], "set_verbos": [192, 233], "settabl": 249, "setup": [171, 222, 233, 242, 245], "sever": [173, 175, 219, 225, 239, 252, 253, 254], "sgd": [221, 247, 250], "sh": [243, 244], "shall": 248, "shape": [12, 20, 27, 28, 29, 158, 159, 160, 161, 162, 166, 170, 171, 172, 173, 175, 176, 178, 179, 188, 189, 190, 191, 195, 196, 197, 201, 206, 207, 209, 210, 211, 212, 213, 214, 219, 222, 223, 224, 228, 230, 233, 237, 245, 246, 247, 250, 252], "share": [173, 175], "sharp": 227, "sharpli": [203, 204, 205, 259], "shell": 243, "shift": [202, 210], "shift_label": [237, 238], "shift_logit": [237, 238], "should": [1, 8, 12, 17, 20, 21, 22, 24, 29, 30, 100, 160, 167, 169, 171, 172, 175, 176, 177, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 224, 225, 228, 230, 233, 239, 242, 245, 246, 247, 248, 250, 252, 253, 257, 259], "shouldn": 178, "show": [173, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 223, 226, 246, 255], "showcas": [200, 213], "shown": [171, 176, 200, 213, 219, 220, 231, 242, 243, 245, 253, 255], "shuffl": [192, 193, 198, 199, 201, 214, 215, 220, 221, 224, 228, 233, 247, 250], "side": 231, "sigmoid": [20, 136, 172], "sign": [164, 165, 171, 178, 249], "signatur": [9, 17, 29, 30, 164, 165, 179, 189, 203, 204, 205, 219, 220, 224, 228, 230, 247, 250], "signific": [214, 255], "significantli": 254, "silu": 135, "sim": [1, 2, 7, 8, 9, 10, 12, 14, 21, 22, 24, 168, 170, 171, 174, 176, 177, 179, 180, 182, 184, 185, 186, 192, 195, 196, 201, 208, 214, 215, 217, 219, 220, 221, 233, 235, 238, 239, 245, 246, 247, 248, 250], "sim1": 171, "sim2": 171, "sim_model": [193, 198, 199, 200, 201, 202, 207, 209, 210, 211, 212, 213], "simd": 244, "similar": [176, 178, 223, 240, 242, 245, 246, 249], "similarli": [188, 192, 200, 201, 206, 209, 213, 255, 259], "simpl": [172, 192, 195, 196, 200, 201, 213, 219, 224, 228, 230], "simpler": 171, "simpli": [1, 8, 21, 22, 172, 177, 184, 185, 188, 192, 195, 196, 201, 206, 209, 214, 219, 247, 250], "simplic": 218, "simplif": [223, 247], "simplifi": [1, 2, 8, 9, 171, 214, 218, 219, 222, 223, 233, 247, 257], "simuat": [189, 190, 193, 198, 199, 201, 202, 207, 210, 211, 212], "simul": [9, 22, 166, 170, 175, 176, 179, 185, 187, 195, 196, 203, 204, 205, 213, 214, 215, 216, 217, 218, 221, 222, 233, 234, 239, 240, 246, 247, 248, 250, 251, 253, 254, 259], "sinc": [176, 179, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 225, 233, 239, 246, 247, 249, 250], "singl": [2, 6, 13, 19, 25, 169, 172, 174, 182, 183, 200, 201, 213, 218, 219, 220, 224, 226, 227, 228, 230, 233, 246, 248, 249, 254], "singular": [204, 205, 227, 228, 230], "situat": 219, "six": 251, "size": [7, 8, 20, 160, 161, 162, 163, 164, 165, 170, 173, 175, 178, 189, 193, 194, 195, 196, 197, 201, 207, 214, 219, 228, 230, 233, 234, 240, 246, 247, 248, 258, 259], "skew": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212], "skip": [1, 23, 25, 180, 181, 183, 186, 190, 202, 210, 214, 220, 221, 224, 237, 239, 243, 247, 250], "skipped_optim": 222, "slight": 201, "slightli": [188, 206, 236], "slim": 254, "slow": 227, "small": [9, 179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 221, 236, 239, 247, 250], "smaller": [1, 2, 12, 23, 181, 182, 188, 201, 206, 214, 227, 228, 230, 233, 255, 258], "smoothl1loss": 137, "snapdragon": [188, 201, 206], "snippet": [172, 188, 206, 245, 246], "snpe": [201, 202, 254], "so": [1, 8, 9, 22, 23, 24, 171, 172, 173, 175, 179, 181, 185, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 219, 222, 223, 224, 226, 228, 230, 237, 238, 240, 244, 247, 250, 257, 259], "softmarginloss": 138, "softmax": [20, 139, 175, 196, 197, 206], "softmax2d": 140, "softmin": 141, "softplu": [142, 172], "softshrink": 143, "softsign": 144, "softwar": [240, 241, 254], "sole": 219, "solut": [192, 206, 226, 233, 250, 255], "some": [17, 20, 29, 171, 172, 175, 178, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 223, 224, 226, 228, 230, 231, 233, 237, 238, 249, 255, 258, 259], "someth": [1, 22, 185, 214, 219, 227, 247, 250], "sometim": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 219, 224, 227, 259], "somewher": 259, "soon": 220, "sort": [24, 197, 215], "sourc": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 214, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 239, 240, 243, 244, 246, 247, 250, 255], "space": [29, 224, 228, 230, 233, 249], "spars": 254, "sparse_categorical_crossentropi": 196, "spatial": [17, 29, 187, 224, 225, 226, 230, 232, 254], "spatial_svd": [29, 204, 205, 224, 228, 230], "spatial_svd_auto_mod": 228, "spatial_svd_manual_mod": 228, "spatialsvdparamet": [17, 29, 204, 205, 224, 228, 230], "spconv": 254, "special": [25, 172, 183, 220, 240], "specif": [8, 17, 20, 22, 25, 29, 30, 170, 173, 175, 177, 179, 183, 184, 185, 188, 189, 192, 193, 195, 197, 201, 206, 207, 209, 219, 220, 224, 228, 230, 236, 246, 247, 249, 250, 251, 254, 257, 259], "specifi": [1, 2, 8, 13, 17, 21, 22, 23, 29, 161, 162, 163, 164, 165, 166, 174, 177, 179, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 233, 235, 243, 246, 247, 248, 250, 251], "speed": [17, 29, 176, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 222, 224, 227, 228, 230, 250, 254], "speedup": [180, 186, 188, 201, 206, 239], "split": [180, 186, 214, 220, 221, 233, 237, 238, 239, 246, 247, 249, 250], "sqnr": [2, 10, 13, 25, 174, 180, 182, 183, 186, 188, 192, 206, 220, 233, 239, 249], "sqrt": 172, "squar": [216, 249], "squeez": [195, 206], "ssvd": 225, "ssvd_comp_stat": 205, "ssvd_compressed_model": 205, "ssvd_cp_compressed_model": 205, "ssvd_cp_finetuned_model": 205, "ssvd_finetuned_model": 205, "stabl": [172, 195, 209, 214], "stack": [214, 233, 247], "stand": 254, "standalon": [214, 254], "standard": [12, 166, 172, 175, 191, 196, 198, 199, 211, 212, 233, 240], "start": [1, 2, 11, 12, 20, 23, 164, 165, 172, 173, 181, 182, 187, 188, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 211, 212, 213, 214, 225, 233, 242, 247, 249, 251, 259], "start_beta": [1, 11, 23, 181, 214], "start_i": [192, 233], "start_x": [192, 233], "starting_op_nam": [12, 233], "stat": [8, 26, 168, 217, 219, 221, 224, 228, 230], "statatist": 209, "state": [166, 180, 186, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 233, 239], "state_dict": 166, "stateless": 253, "statement": 172, "static": [12, 17, 20, 29, 172, 173, 224, 228, 230, 233], "static_patch_count": 20, "staticgridperchannelquant": 171, "staticgridquant": 171, "staticgridquantwrapp": 171, "staticmethod": [172, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "statist": [8, 9, 17, 21, 26, 29, 161, 162, 166, 168, 175, 177, 179, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 216, 217, 221, 224, 228, 230, 232, 247, 250], "std": [206, 208, 214, 220, 233, 247], "step": [8, 10, 12, 21, 164, 165, 172, 174, 176, 177, 180, 184, 186, 187, 188, 190, 191, 192, 194, 195, 196, 200, 201, 206, 209, 213, 224, 225, 226, 227, 234, 235, 236, 237, 238, 242, 243, 244, 245, 249, 255, 256, 257, 258], "still": [167, 171, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 242, 246, 252, 255, 259], "stochast": [21, 22, 185, 219, 247, 250], "stop": [1, 11, 23, 181, 214, 220], "stopiter": [214, 220, 233, 247], "storag": [246, 249], "store": [1, 11, 22, 23, 159, 174, 176, 179, 181, 185, 188, 192, 206, 214, 234, 235, 246, 247, 250], "str": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 25, 166, 168, 169, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 197, 214, 217, 218, 219, 220, 228, 233, 235, 239, 247, 250, 253], "str_idx": 220, "straightforward": 259, "strategi": 259, "stream": [214, 220, 221, 239], "strict": [7, 166, 174, 235, 247, 249, 250, 251], "strict_symmetr": [195, 242, 251], "strict_valid": [13, 25, 183, 220], "strictli": 166, "stride": [160, 172, 173, 179, 222, 223, 245, 247, 250], "strike": 227, "string": [9, 22, 174, 179, 185, 235, 243, 247, 248, 250, 251], "strongli": [20, 172, 178, 189, 193, 201, 207], "structur": [25, 172, 175, 183, 200, 205, 213, 220, 227, 235, 240], "style": 201, "sub": [200, 213], "subbackward0": 178, "subclass": [20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 178, 195, 196, 247, 252, 254], "subdirectori": [188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "subfold": [188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "sublay": 173, "submit": 257, "submodul": [20, 253], "subpackag": [30, 254], "subsequ": [158, 188, 190, 201, 202, 206, 214, 222, 223, 240, 251, 254], "subset": [8, 9, 21, 177, 179, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 221, 231, 235, 246, 247, 250], "subsetrandomsampl": 208, "subsidiari": 241, "substanti": 248, "substep": 243, "substitut": 247, "success": [194, 208], "successfulli": [179, 218, 247, 250], "sudo": [187, 244], "suffic": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212], "suffici": [219, 247, 249, 250, 258], "suffix": 243, "suggest": [22, 185, 203, 205, 226, 227, 247, 250, 259], "suit": [194, 208, 220, 237, 240], "suitabl": 240, "sum": [192, 206, 208, 214, 220, 228, 233, 247, 250], "summari": [196, 214, 222, 223, 227, 254], "sun": 227, "super": [20, 30, 172, 173, 197, 214, 220, 233, 247, 254], "supergroup": [195, 249, 254], "suppli": 246, "support": [1, 2, 8, 9, 11, 12, 20, 21, 22, 23, 29, 30, 172, 173, 174, 177, 179, 180, 181, 182, 184, 185, 186, 188, 192, 195, 196, 197, 206, 209, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 227, 228, 230, 232, 233, 239, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 259], "supported_kernel": [2, 182, 188, 206, 233], "supported_kernel_op": [174, 182, 233], "suppos": [2, 12, 182, 188, 192, 206, 233], "svd": [17, 29, 187, 224, 225, 226, 232, 254], "switch": 246, "symbol": [20, 172], "symbolic_trac": [25, 172, 183, 220], "symfp": [10, 180, 186, 239], "symmetr": [9, 30, 158, 159, 160, 161, 162, 170, 171, 175, 176, 178, 179, 197, 237, 245, 246, 247, 248, 249, 250, 251, 254], "symmetri": [10, 171, 180, 186, 239], "symqt": [10, 180, 186, 239], "sync": 250, "syntax": 248, "systemat": 240, "t": [2, 9, 12, 25, 30, 172, 176, 178, 179, 180, 182, 183, 186, 188, 192, 195, 196, 200, 201, 206, 209, 213, 219, 220, 233, 237, 238, 239, 243, 247, 250, 251, 258], "tabl": [168, 187, 217, 229, 243, 248], "tag": [187, 243, 244], "take": [2, 9, 12, 13, 24, 25, 29, 30, 170, 173, 174, 178, 179, 182, 183, 188, 192, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 209, 213, 214, 215, 220, 221, 224, 226, 227, 228, 230, 231, 233, 235, 246, 247, 250, 254, 255, 258], "taken": [20, 24, 215, 231], "tanh": 145, "tanhshrink": 146, "tap": [21, 177, 184, 219], "tar": [29, 230], "target": [9, 17, 20, 22, 29, 41, 42, 48, 62, 64, 81, 87, 88, 92, 93, 104, 105, 113, 114, 115, 116, 117, 122, 137, 138, 176, 179, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 220, 222, 224, 225, 226, 227, 228, 230, 233, 239, 240, 247, 248, 249, 250, 254, 255, 259], "target_comp_ratio": [17, 29, 203, 204, 205, 224, 228, 230], "target_data": [188, 189, 190, 191, 206, 207, 209, 210, 211, 212, 213], "target_length": 48, "target_modul": 176, "task": [188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 229, 240, 248], "taxonomi": 227, "tbd": [217, 239], "teach": 187, "techiqu": 210, "techniqu": [13, 25, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 219, 220, 222, 223, 224, 225, 228, 230, 233, 234, 236, 237, 240, 241, 246, 249, 250, 254, 255, 258, 259], "technologi": [240, 241], "tell": 201, "tempfil": 254, "temporari": [214, 222, 223, 233, 247], "temporarili": [171, 238], "tend": 214, "tensor": [2, 12, 13, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 190, 197, 200, 201, 202, 206, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 228, 230, 233, 235, 237, 238, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255], "tensor_nam": 248, "tensor_quant": 171, "tensorboard": [195, 196, 198, 199], "tensorflow": [0, 18, 187, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 228, 233, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 254, 257, 258, 259], "tensorquant": [12, 233], "tensorquantizationsimforpython": 242, "term": [179, 228, 230, 240, 241, 246, 247, 250], "termin": 187, "test": [8, 21, 177, 184, 195, 196, 197, 219, 237, 238, 244, 258, 259], "test_dataload": [237, 238], "test_dataset": [237, 238], "text": [20, 161, 162, 163, 164, 165, 197, 237, 238], "textclassif": 197, "tf": [2, 8, 11, 14, 16, 17, 20, 21, 177, 184, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 209, 213, 214, 218, 219, 220, 221, 223, 228, 233, 243, 247, 252, 254], "tf_cpp_min_log_level": [192, 194, 195, 198, 199, 233], "tf_dataset": [193, 201, 202], "tf_enhanc": [22, 188, 192, 195, 196, 206, 209, 247, 250], "tfencod": 171, "tflite": [188, 201, 206], "tfoplambda": [20, 197, 254], "than": [1, 17, 23, 29, 171, 172, 173, 181, 182, 185, 188, 189, 193, 195, 196, 206, 207, 209, 214, 224, 225, 228, 230, 233, 235, 239, 246, 250, 251, 254, 258], "thei": [172, 173, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 229, 233, 236, 237, 238, 246, 249, 252, 255, 258], "them": [13, 20, 22, 25, 166, 171, 172, 173, 175, 176, 183, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 227, 235, 240, 247, 250], "theme": 254, "thereaft": 233, "therebi": [188, 206, 234], "therefor": [2, 12, 176, 182, 188, 192, 195, 196, 197, 206, 222, 225, 233], "theta_": [161, 162], "thi": [1, 2, 6, 8, 9, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 100, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "thing": [189, 190, 191, 193, 194, 201, 202, 203, 204, 205, 207, 210, 211, 212, 257], "those": [8, 177, 184, 197, 219, 235, 237, 251, 258], "though": [30, 178, 188, 192, 195, 196, 201, 206, 234, 246, 251, 259], "three": [172, 188, 203, 204, 205, 206, 225, 258], "threshold": [147, 168, 217, 220], "through": [2, 9, 20, 21, 160, 171, 172, 174, 175, 177, 182, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 219, 223, 233, 235, 237, 238, 247, 249, 250, 259], "throughout": [24, 215, 240, 251], "throw": [30, 178, 179, 247, 250], "thrown": [247, 250], "thu": [158, 159, 160], "tijmen": 227, "till": [2, 12, 182, 188, 192, 206, 233], "time": [17, 29, 160, 172, 173, 192, 194, 200, 208, 210, 213, 214, 219, 220, 224, 227, 228, 229, 230, 233, 235, 246, 250, 254, 258], "tmp": [8, 13, 21, 25, 177, 183, 184, 195, 200, 213, 214, 219, 220, 221, 222, 223, 233, 247, 250], "tmp_dir": 176, "tmpdir": 176, "to_arrai": [222, 223], "to_list": [2, 12, 174, 182, 233], "todo": [174, 235], "togeth": [201, 233], "toi": 219, "token": [20, 196, 197, 237, 238, 255], "token_and_position_embed": 197, "token_emb": [20, 197], "tokenandpositionembed": [20, 197], "tokenized_dummy_text": [237, 238], "toler": [194, 208, 220, 225], "tolist": 206, "too": [203, 205, 246], "tool": [21, 177, 184, 197, 219, 223, 231, 234, 240, 246, 254, 256, 257, 259], "toolkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "top": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 174, 177, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 228, 229, 230, 233, 235, 239, 246, 247, 250], "top1": [192, 208, 228, 233], "top1_accuraci": 206, "top5": 192, "topk": [206, 208], "torch": [13, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 187, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 243, 244, 245, 246, 247, 250, 253, 254, 259], "torch_stabl": [242, 243, 244], "torchscript": [25, 169, 179, 183, 185, 218, 220, 240, 247, 250], "torchvis": [179, 188, 189, 190, 191, 193, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 233, 235, 239, 245, 247, 250], "total": [192, 197, 226, 228, 233, 237, 238, 247, 249], "total_length": [237, 238], "total_sampl": [214, 233, 247], "totensor": [206, 208, 214, 220, 233, 247], "touch": 20, "toward": 255, "tpu": 240, "tqdm": [206, 208, 233, 237, 238, 247, 250], "trace": [20, 25, 168, 172, 183, 217, 220, 253], "traceabl": [172, 237, 238, 253], "traceback": 172, "traceerror": 172, "tracer": 172, "track": [176, 200, 213, 219], "track_lora_meta_data": 176, "track_meta_data": 176, "track_running_stat": [222, 223], "trade": [1, 11, 23, 181, 188, 192, 206, 214, 233], "tradeoff": [188, 192, 206, 233, 240, 259], "train": [8, 9, 13, 14, 17, 20, 21, 25, 26, 29, 177, 179, 183, 184, 187, 188, 192, 197, 206, 208, 214, 215, 216, 218, 219, 220, 221, 223, 224, 227, 228, 230, 232, 233, 236, 239, 240, 241, 247, 249, 254, 255, 259], "train_dataload": [179, 237, 238, 247, 250], "train_dataset": [195, 237, 238], "train_dataset_s": 195, "train_flag": [29, 224, 228, 230], "train_load": [209, 224], "train_model": [29, 224, 228, 230], "train_one_epoch": [237, 238], "trainabl": [199, 212, 215, 236, 237, 238], "trainer": [17, 29, 187, 203, 204, 205, 209, 211, 212, 224, 228, 230], "training_range_learning_with_tf_init": [179, 195, 199, 209, 212, 215, 221, 239, 245, 247, 250], "trainingmod": [188, 191], "transact": 227, "transform": [20, 172, 197, 206, 207, 208, 210, 211, 212, 213, 214, 220, 233, 237, 238, 246, 247, 254], "transformer_block": [20, 197], "transformerblock": [20, 197], "transit": 233, "translat": 201, "transpos": 178, "trap": 239, "travers": 235, "tri": [203, 204, 205, 227], "tripletmarginloss": 148, "tripletmarginwithdistanceloss": 149, "triumph": 235, "true": [1, 2, 9, 12, 13, 17, 22, 25, 29, 30, 159, 160, 161, 162, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 242, 245, 246, 247, 248, 250, 251], "true_quant": [237, 238], "truli": 172, "try": [17, 29, 188, 189, 190, 191, 192, 201, 203, 204, 205, 206, 214, 220, 222, 223, 224, 225, 227, 228, 230, 233, 247, 255, 258], "tune": [17, 22, 29, 176, 185, 189, 190, 191, 193, 194, 196, 198, 199, 202, 207, 208, 210, 211, 212, 224, 225, 228, 230, 241, 247, 250, 258, 259], "tuner": 237, "tupl": [1, 2, 6, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 97, 161, 162, 163, 164, 165, 169, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 192, 200, 206, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 246, 247, 250, 253], "turn": [251, 254], "tweak": 176, "twice": 20, "two": [12, 20, 24, 29, 171, 172, 173, 174, 182, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 219, 226, 227, 228, 230, 233, 235, 240, 246, 249, 250, 257, 258], "txt": [174, 235, 244, 257], "type": [1, 2, 3, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 192, 194, 195, 197, 200, 203, 204, 205, 206, 208, 211, 212, 214, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 233, 239, 240, 243, 245, 246, 247, 250, 251, 254, 257, 258], "typeerror": 172, "typic": [20, 30, 175, 188, 189, 193, 194, 195, 196, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 225, 240, 246, 249, 258, 259], "u": [196, 201, 243], "ubuntu": [242, 243, 245], "ubuntu22": 254, "ubuntu2204": 244, "uint16": 248, "uint32": 248, "uint8": [158, 248], "unaccept": 259, "unchang": [180, 186, 239, 247, 250], "uncompress": 225, "under": [2, 9, 12, 168, 171, 182, 188, 206, 217, 219, 221, 233, 251, 255], "undergo": 240, "underli": [30, 178, 255], "understand": [171, 178, 188, 192, 195, 196, 197, 200, 201, 206, 209, 213], "undo": [14, 26, 221], "uneven": 255, "unexpect": 166, "unexpected_kei": 166, "unflatten": 150, "unfold": 151, "unid": [13, 25, 183, 220], "uniniti": [24, 214, 215, 239], "uninstal": 244, "unintuit": [13, 25, 183, 220], "union": [6, 7, 8, 9, 15, 17, 19, 20, 22, 23, 25, 27, 28, 29, 169, 170, 173, 174, 177, 179, 181, 182, 183, 184, 185, 214, 218, 219, 220, 222, 223, 224, 228, 230, 235, 246, 247, 250], "uniqu": [201, 243], "unit": 240, "unknown": 225, "unlabel": [8, 13, 25, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 219, 220, 233, 247], "unlabeled_data": 220, "unlabeled_data_load": [214, 219, 220, 233], "unlabeled_dataset": [21, 194, 195, 200, 214, 219, 220, 221], "unlabeled_dataset_iter": [8, 219], "unlabeled_imagenet_data_load": 208, "unlabeled_imagenet_dataset": 208, "unlabeleddatasetwrapp": [194, 208], "unlabelled_data_load": 220, "unless": [13, 25, 30, 179, 183, 185, 220, 231, 243, 247, 250, 259], "unlik": [166, 209, 222], "unmodifi": [226, 236], "unnecessari": [188, 201, 206, 222, 231, 254], "unrol": [172, 254], "unsign": [249, 251], "unsigned_symmetr": [195, 242, 251], "unsigned_zero": 166, "unsimplifi": [188, 189, 190, 191, 214, 222, 223, 233, 247], "unsqueez": [237, 238], "until": [13, 25, 161, 162, 179, 183, 194, 208, 220, 221, 247, 250], "untouch": [247, 250], "unus": 243, "unwrap": 197, "up": [1, 11, 17, 20, 22, 23, 29, 174, 176, 181, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 221, 224, 227, 228, 230, 231, 233, 235, 240, 247, 250, 251, 254, 258], "updat": [24, 166, 187, 189, 191, 193, 197, 198, 199, 201, 202, 207, 208, 210, 211, 212, 215, 221, 229, 238, 244, 247, 248, 249, 250, 254], "updatestat": 242, "upgrad": [167, 244, 254], "upon": [14, 26, 30, 175, 221, 254, 257], "upsampl": 152, "upsamplingbilinear2d": 153, "upsamplingnearest2d": 154, "upstream": [224, 231], "upto": [188, 195, 200, 201, 206, 209, 213, 233], "url": [17, 29, 187, 224, 228, 229, 230, 243, 244], "us": [1, 2, 6, 7, 8, 9, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 25, 26, 29, 30, 158, 159, 161, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "usabl": 248, "usag": [24, 173, 176, 178, 215, 240, 248, 254, 257], "use_all_amp_candid": [2, 182, 188, 206, 233], "use_cach": [237, 238], "use_cuda": [1, 9, 17, 29, 188, 189, 190, 191, 192, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 224, 228, 230, 242, 247], "use_embedded_encod": [179, 185, 247, 250], "use_monotonic_fit": [17, 29, 224, 228, 230], "use_safetensor": 176, "use_strict_symmetr": 171, "use_symmetric_encod": [9, 171, 247], "user": [1, 2, 9, 12, 13, 14, 17, 20, 22, 23, 24, 25, 29, 30, 167, 171, 172, 174, 178, 179, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 224, 227, 228, 230, 233, 235, 242, 243, 244, 247, 248, 250, 252, 253, 254], "user_onnx_lib": [1, 9, 214, 247], "userflow": [180, 186, 239], "usr": [243, 244], "usual": [221, 227, 249, 250, 259], "util": [6, 8, 20, 171, 173, 176, 177, 184, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 233, 235, 237, 238, 239, 245, 246, 247, 250, 254], "v": [1, 2, 11, 12, 23, 181, 182, 188, 192, 200, 206, 213, 214, 233, 243, 246, 249, 259], "v1": [171, 192, 206, 207, 208, 209, 210, 211, 212, 213, 218, 233, 237, 238, 242, 254], "v2": [30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 174, 179, 215, 217, 235, 237, 238, 246, 247, 250, 254], "val": [188, 189, 190, 191, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "val_dataset": 200, "val_transform": 208, "valid": [2, 8, 12, 21, 173, 177, 182, 184, 188, 192, 195, 196, 198, 199, 200, 201, 206, 208, 209, 213, 214, 219, 220, 224, 228, 230, 233, 239, 246, 247, 248, 254], "validate_example_model": 173, "validate_for_missing_modul": 173, "validate_for_reused_modul": 173, "validate_model": 173, "validation_check": 173, "validation_d": [192, 228, 233], "validation_data": [195, 196, 198, 199], "valu": [1, 2, 8, 9, 12, 13, 17, 21, 22, 23, 29, 30, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 174, 176, 177, 179, 181, 182, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 230, 233, 235, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254], "value_qtzr": 30, "vanilla": 196, "var": [26, 81, 221], "vari": [2, 12, 182, 225, 233], "variabl": [17, 20, 29, 161, 162, 172, 187, 224, 226, 228, 230, 243, 244], "varianc": [195, 209, 223], "variant": [240, 242, 244, 245, 254], "variant_str": 243, "varieti": 223, "varint": 243, "variou": [2, 17, 29, 174, 182, 194, 200, 208, 213, 224, 227, 228, 230, 232, 233, 243, 249, 254, 255], "vector": [189, 193, 201, 207, 254], "vedaldi": 227, "venic": 227, "ver": 254, "verbos": 192, "veri": [24, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 210, 211, 212, 213, 215, 219, 225, 227, 233], "verifi": [20, 172, 207, 210, 211, 212], "versa": [176, 188, 192, 206, 226, 233, 249, 255], "version": [30, 100, 168, 171, 172, 175, 179, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 237, 238, 240, 243, 244, 245, 247, 249, 250, 254, 259], "via": [20, 25, 183, 220, 225, 240, 242, 249, 254, 257], "vice": [176, 188, 192, 206, 226, 233, 249, 255], "view": [168, 173, 178, 216, 217, 229, 233, 237, 238, 241, 242], "view_a": 208, "viewabl": 187, "vision": 227, "visit": 244, "visual": [17, 29, 196, 200, 213, 219, 224, 227, 228, 230, 233, 243, 254], "visualization_tool": [167, 217], "visualization_url": [17, 29, 224, 228, 230], "visualize_stat": [168, 217], "visualizecompress": 229, "vocab_s": [20, 196, 197, 237, 238], "vol": 227, "volum": 231, "w": [2, 8, 12, 21, 177, 182, 184, 195, 219, 220, 230, 231, 233, 243, 247, 254], "w16a16": 254, "w4a16": 254, "w4a8": [220, 254, 258, 259], "w4fp16": 254, "w8a16": [220, 247, 258, 259], "w8a8": [220, 250, 258, 259], "wa": [17, 29, 158, 176, 178, 188, 189, 192, 193, 195, 196, 197, 201, 203, 205, 206, 207, 209, 218, 224, 227, 228, 230, 233, 235, 248, 254], "wai": [171, 178, 180, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 218, 239, 247, 258], "want": [2, 6, 12, 22, 30, 169, 172, 182, 185, 188, 192, 195, 196, 200, 201, 206, 213, 218, 233, 237, 238, 242, 243, 244, 247, 250, 259], "warm": [1, 11, 23, 181, 214], "warn": [24, 173, 215], "we": [1, 2, 6, 12, 20, 169, 171, 172, 173, 175, 176, 178, 182, 188, 189, 192, 193, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 209, 213, 214, 218, 222, 223, 225, 227, 228, 233, 234, 237, 238, 243, 246, 247, 255, 258, 259], "websit": [225, 241], "websocket": 229, "weight": [1, 2, 3, 7, 8, 11, 12, 20, 21, 23, 24, 27, 29, 30, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 232, 233, 235, 236, 238, 239, 240, 245, 246, 247, 249, 250, 251, 254, 258, 259], "weight_bw": 210, "weight_decai": 221, "weight_info": 197, "weight_nam": 197, "weight_q": 178, "weight_qdq": 178, "weight_svd": [29, 224, 228, 230], "weight_svd_auto_mod": 230, "weight_svd_manual_mod": 230, "weights_in_correct_ord": 197, "weights_pdf": [200, 213, 219], "weightsvdparamet": [29, 224, 228, 230], "well": [158, 173, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 219, 227, 233], "were": [176, 194, 201, 208, 218, 225, 231, 247, 248, 251, 254], "weren": 172, "wget": 244, "what": [197, 229, 258], "whatev": 243, "wheel": [243, 244], "wheel_file_nam": [243, 244], "when": [2, 8, 9, 12, 17, 20, 21, 22, 25, 29, 30, 166, 172, 175, 177, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 220, 221, 224, 227, 228, 229, 230, 231, 233, 234, 235, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "whenev": 253, "where": [1, 2, 11, 12, 13, 17, 22, 23, 29, 161, 162, 163, 164, 165, 166, 172, 176, 178, 179, 181, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 224, 226, 228, 229, 230, 231, 233, 240, 243, 244, 247, 248, 249, 250, 253, 254, 257], "wherea": [178, 182, 188, 206], "wherein": [6, 169, 218], "whether": [24, 25, 166, 172, 173, 174, 183, 188, 189, 190, 191, 193, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 218, 220, 226, 235, 247, 250], "which": [1, 2, 6, 7, 11, 12, 13, 17, 19, 20, 23, 25, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 240, 242, 246, 247, 248, 249, 251, 254, 257, 258], "while": [7, 17, 29, 166, 175, 176, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 224, 226, 228, 230, 236, 248, 249, 255, 258, 259], "whl": [242, 243, 244], "who": 248, "whole": [13, 194, 195, 220, 246, 249], "whose": [168, 169, 170, 172, 217, 218, 246, 251, 257], "why": [188, 201, 206, 255], "wide": [222, 223, 240], "width": [8, 21, 177, 184, 188, 189, 190, 191, 201, 206, 207, 209, 210, 211, 212, 213, 219, 222, 223, 228, 230, 231, 232, 234, 246, 248, 249, 255, 258, 259], "wikitext": [237, 238], "wildcard": 178, "wise": [8, 21, 177, 180, 184, 186, 219, 221, 239, 240, 254, 255], "wiseconv2d": [214, 223], "wish": [214, 222, 223, 233, 235, 247], "within": [30, 158, 159, 160, 175, 196, 219, 225, 240, 243, 249, 254, 258], "without": [13, 22, 25, 158, 160, 166, 168, 176, 179, 183, 185, 189, 193, 194, 196, 198, 199, 201, 202, 207, 208, 210, 211, 212, 217, 220, 231, 239, 243, 247, 250, 258, 259], "won": [25, 172, 180, 183, 186, 220, 239, 251], "word": [160, 196], "work": [12, 22, 171, 173, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 223, 227, 233, 236, 246, 247, 250, 254, 259], "workaround": 172, "workflow": [225, 232, 236, 257, 258], "workspac": [187, 243], "world": 245, "wors": 227, "worth": 178, "would": [20, 171, 174, 188, 192, 195, 200, 201, 206, 209, 213, 228, 235, 237, 251, 254], "wq": 254, "wrap": [30, 171, 172, 196, 200, 213], "wrap_linear": 171, "wrapped_module_nam": [21, 177, 184, 219], "wrapper": [21, 177, 184, 192, 196, 206, 207, 210, 211, 212, 219, 224, 228, 230, 233, 254], "write": [174, 189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 235, 246, 247, 250], "written": [9, 179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 247, 250], "wrong": 254, "wrt": [12, 233], "wsl2": 254, "www": 187, "x": [20, 158, 159, 160, 166, 167, 172, 173, 175, 188, 189, 190, 191, 192, 193, 196, 197, 200, 201, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 225, 228, 233, 242, 245, 247, 248, 249, 250, 252, 253, 254], "x1": [63, 119, 172], "x2": [63, 119, 172, 252, 253], "x86": [242, 244, 245], "x86_64": [242, 244], "x_": 249, "x_c": 166, "x_dq": 159, "x_q": [159, 160], "x_qdq": 158, "x_train": 196, "x_val": 196, "xarg": 244, "xiangyu": 227, "xx": 248, "y": [172, 192, 193, 200, 201, 213, 214, 219, 220, 221, 233, 244, 247, 250], "y_train": 196, "y_val": 196, "y_zero_point": 254, "ybelkada": [237, 238], "ye": [227, 244], "yet": [188, 192, 195, 196, 201, 206, 215], "yield": [2, 8, 13, 23, 25, 26, 174, 180, 181, 182, 183, 186, 195, 209, 214, 219, 220, 221, 225, 233, 239, 249, 250, 255], "yihui": 227, "you": [8, 17, 25, 29, 30, 167, 171, 172, 177, 178, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 233, 235, 237, 239, 242, 243, 244, 246, 247, 249, 250, 251, 254, 255, 257, 258, 259], "your": [8, 25, 30, 167, 171, 172, 173, 177, 183, 184, 187, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 218, 219, 220, 221, 225, 227, 229, 232, 237, 242, 244, 247, 249, 250, 258, 259], "your_imagenet_validation_data_path": [214, 220, 221, 247, 250], "yy": 248, "zero": [1, 11, 23, 176, 181, 214, 245, 249, 254], "zero_grad": [221, 237, 238, 250], "zeropad1d": 155, "zeropad2d": 156, "zeropad3d": 157, "zhang": 227, "zip": [192, 219, 228, 233], "zisserman": 227, "zou": 227, "zz": 248, "\u00aa": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00b2": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00b3": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00b5": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00b9": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00ba": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00bc": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00bd": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u00be": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u03c9": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u210e": 228, "\u215b": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u215c": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u215d": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\u215e": [218, 222, 233, 241, 246, 248, 249, 254, 257, 258, 259], "\ud835\udc58": [228, 230], "\ud835\udc5a": 228, "\ud835\udc5b": 228, "\ud835\udc64": 228}, "titles": ["AIMET API", "aimet_onnx.adaround", "aimet_onnx.mixed_precision", "aimet_onnx.batch_norm_fold", "aimet_onnx.cross_layer_equalization", "aimet_onnx API", "aimet_onnx.layer_output_utils", "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", "aimet_onnx.quant_analyzer", "aimet_onnx.quantsim", "aimet_onnx.seq_mse", "aimet_tensorflow.adaround", "aimet_tensorflow.mixed_precision", "aimet_tensorflow.auto_quant_v2", "aimet_tensorflow.keras.bn_reestimation", "aimet_tensorflow.batch_norm_fold", "aimet_tensorflow.cross_layer_equalization", "aimet_tensorflow.compress", "aimet_tensorflow API", "aimet_tensorflow.layer_output_utils", "aimet_tensorflow.model_preparer", "aimet_tensorflow.quant_analyzer", "aimet_tensorflow.quantsim", "aimet_torch.adaround", "aimet_torch.experimental.adascale", "aimet_torch.auto_quant", "aimet_torch.bn_reestimation", "aimet_torch.batch_norm_fold", "aimet_torch.cross_layer_equalization", "aimet_torch.compress", "QuantizationMixin", "QuantizedAdaptiveAvgPool1d", "QuantizedAdaptiveAvgPool2d", "QuantizedAdaptiveAvgPool3d", "QuantizedAdaptiveMaxPool1d", "QuantizedAdaptiveMaxPool2d", "QuantizedAdaptiveMaxPool3d", "QuantizedAlphaDropout", "QuantizedAvgPool1d", "QuantizedAvgPool2d", "QuantizedAvgPool3d", "QuantizedBCELoss", "QuantizedBCEWithLogitsLoss", "QuantizedBatchNorm1d", "QuantizedBatchNorm2d", "QuantizedBatchNorm3d", "QuantizedBilinear", "QuantizedCELU", "QuantizedCTCLoss", "QuantizedChannelShuffle", "QuantizedCircularPad1d", "QuantizedCircularPad2d", "QuantizedCircularPad3d", "QuantizedConstantPad1d", "QuantizedConstantPad2d", "QuantizedConstantPad3d", "QuantizedConv1d", "QuantizedConv2d", "QuantizedConv3d", "QuantizedConvTranspose1d", "QuantizedConvTranspose2d", "QuantizedConvTranspose3d", "QuantizedCosineEmbeddingLoss", "QuantizedCosineSimilarity", "QuantizedCrossEntropyLoss", "QuantizedDropout", "QuantizedDropout1d", "QuantizedDropout2d", "QuantizedDropout3d", "QuantizedELU", "QuantizedEmbedding", "QuantizedEmbeddingBag", "QuantizedFeatureAlphaDropout", "QuantizedFlatten", "QuantizedFold", "QuantizedFractionalMaxPool2d", "QuantizedFractionalMaxPool3d", "QuantizedGELU", "QuantizedGLU", "QuantizedGRU", "QuantizedGRUCell", "QuantizedGaussianNLLLoss", "QuantizedGroupNorm", "QuantizedHardshrink", "QuantizedHardsigmoid", "QuantizedHardswish", "QuantizedHardtanh", "QuantizedHingeEmbeddingLoss", "QuantizedHuberLoss", "QuantizedInstanceNorm1d", "QuantizedInstanceNorm2d", "QuantizedInstanceNorm3d", "QuantizedKLDivLoss", "QuantizedL1Loss", "QuantizedLPPool1d", "QuantizedLPPool2d", "QuantizedLSTM", "QuantizedLSTMCell", "QuantizedLayerNorm", "QuantizedLeakyReLU", "QuantizedLinear", "QuantizedLocalResponseNorm", "QuantizedLogSigmoid", "QuantizedLogSoftmax", "QuantizedMSELoss", "QuantizedMarginRankingLoss", "QuantizedMaxPool1d", "QuantizedMaxPool2d", "QuantizedMaxPool3d", "QuantizedMaxUnpool1d", "QuantizedMaxUnpool2d", "QuantizedMaxUnpool3d", "QuantizedMish", "QuantizedMultiLabelMarginLoss", "QuantizedMultiLabelSoftMarginLoss", "QuantizedMultiMarginLoss", "QuantizedNLLLoss", "QuantizedNLLLoss2d", "QuantizedPReLU", "QuantizedPairwiseDistance", "QuantizedPixelShuffle", "QuantizedPixelUnshuffle", "QuantizedPoissonNLLLoss", "QuantizedRNN", "QuantizedRNNCell", "QuantizedRReLU", "QuantizedReLU", "QuantizedReLU6", "QuantizedReflectionPad1d", "QuantizedReflectionPad2d", "QuantizedReflectionPad3d", "QuantizedReplicationPad1d", "QuantizedReplicationPad2d", "QuantizedReplicationPad3d", "QuantizedSELU", "QuantizedSiLU", "QuantizedSigmoid", "QuantizedSmoothL1Loss", "QuantizedSoftMarginLoss", "QuantizedSoftmax", "QuantizedSoftmax2d", "QuantizedSoftmin", "QuantizedSoftplus", "QuantizedSoftshrink", "QuantizedSoftsign", "QuantizedTanh", "QuantizedTanhshrink", "QuantizedThreshold", "QuantizedTripletMarginLoss", "QuantizedTripletMarginWithDistanceLoss", "QuantizedUnflatten", "QuantizedUnfold", "QuantizedUpsample", "QuantizedUpsamplingBilinear2d", "QuantizedUpsamplingNearest2d", "QuantizedZeroPad1d", "QuantizedZeroPad2d", "QuantizedZeroPad3d", "DequantizedTensor", "QuantizedTensor", "QuantizedTensorBase", "Quantize", "QuantizeDequantize", "dequantize", "quantize", "quantize_dequantize", "FloatQuantizeDequantize", "aimet_torch API", "aimet_torch.visualization_tools", "aimet_torch.layer_output_utils", "aimet_torch.quantsim.config_utils", "Migration guide", "aimet_torch.model_preparer", "aimet_torch.model_validator", "aimet_torch.mixed_precision", "aimet_torch.nn", "aimet_torch.peft", "aimet_torch.quant_analyzer", "aimet_torch.quantization", "aimet_torch.quantsim", "aimet_torch.seq_mse", "aimet_torch.v1.adaround", "aimet_torch.v1.mixed_precision", "aimet_torch.v1.auto_quant", "aimet_torch.v1.quant_analyzer", "aimet_torch.v1.quantsim", "aimet_torch.v1.seq_mse", "Examples", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "Cross-Layer Equalization", "Quantization simulation", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Quantization-Aware Training with a Keras Transformer Model", "Keras Model Preparer", "Quantization-aware training", "Quantization-Aware training with range learning", "Quant Analyzer", "Quantsim and Adaround - Per Channel Quantization (PCQ)", "Cross-Layer Equalization with QuantSim", "Model compression using channel pruning", "Model compression using spatial SVD", "Model compression using spatial SVD and channel pruning", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Cross-Layer Equalization and Bias Correction", "Quantization-aware training", "Quantization-aware training with range learning", "Quant Analyzer", "Adaptive rounding", "AdaScale", "Analysis tools", "Interactive visualization", "Layer output generation", "Quantization analyzer", "Automatic quantization", "Batch norm re-estimation", "Batch norm folding", "Cross-layer equalization", "Channel pruning", "Compression features Guidebook", "Greedy compression ratio selection", "Compression", "Spatial SVD", "AIMET visualization", "Weight SVD", "Winnowing", "Optimization techniques", "Automatic mixed precision", "Mixed precision", "Manual mixed precision", "Quantized LoRa", "QW-LoRa", "QWA-LoRa", "Sequential MSE", "Glossary", "AIMET Documentation", "Installation", "AIMET installation in Docker", "AIMET manual installation and setup", "Quick Start (PyTorch)", "Per-block quantization", "Calibration", "Encoding Format Specification", "Quantization simulation guide", "Quantization-aware training", "Runtime configuration", "TensorFlow model guidelines", "PyTorch model guidelines", "Release notes", "Quantization debugging guidelines", "Quantization user guide", "On-target inference", "AIMET features", "Quantization workflow", "AIMET documentation versions"], "titleterms": {"0": [192, 248, 254], "1": [171, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 233, 239, 247, 248, 250, 251, 254, 255, 259], "13": 254, "16": 254, "17": 254, "18": 254, "19": 254, "2": [171, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 233, 239, 247, 248, 250, 251, 254, 255, 259], "20": 254, "21": 254, "22": 254, "23": 254, "24": 254, "25": 254, "26": 254, "27": 254, "28": 254, "29": 254, "3": [187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 233, 239, 247, 248, 250, 251, 254, 255, 259], "30": 254, "31": 254, "32": 254, "33": 254, "34": 254, "35": 254, "4": [188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 233, 239, 247, 250, 251, 254, 255, 259], "5": [194, 195, 209, 215, 219, 220, 239, 247, 250, 251, 254, 255], "6": [219, 220, 248, 255], "7": [220, 255], "8": 255, "For": [189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212], "On": [256, 257], "accuraci": [188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 258, 259], "activ": [219, 255], "adapt": [189, 193, 207, 214, 232], "adaround": [1, 11, 23, 181, 189, 193, 201, 207], "adascal": [24, 215, 232], "affin": [171, 178], "ai": 257, "aimet": [0, 229, 241, 243, 244, 245, 249, 256, 258, 260], "aimet_onnx": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "aimet_tensorflow": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "aimet_torch": [0, 23, 24, 25, 26, 27, 28, 29, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "algorithm": [188, 192, 206, 233], "also": 249, "altern": 242, "amp": [188, 192, 206], "an": [188, 189, 190, 191, 243], "analysi": [200, 213, 216, 219, 232, 233, 255], "analyz": [200, 213, 216, 219], "api": [0, 5, 18, 20, 167, 172, 173, 175, 176, 178, 188, 192, 206, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 239, 241, 246, 247, 250, 258], "appli": [189, 190, 193, 194, 200, 201, 202, 207, 210, 213, 235], "arg": 248, "auto_qu": [25, 183], "auto_quant_v2": 13, "automat": [188, 192, 206, 220, 232, 233, 234], "autoqu": [194, 208], "awar": [195, 196, 198, 199, 209, 211, 212, 250, 258], "base": [235, 237], "baselin": [188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212], "batch": [188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 221, 222, 232], "batch_norm_fold": [3, 15, 27], "batchnorm": [195, 209], "bc": 210, "between": 197, "bia": 210, "bit": 233, "block": [178, 246], "blockwis": 246, "bn_reestim": [14, 26], "bokeh": 229, "brows": 187, "build": [242, 243], "calibr": [219, 238, 247, 250], "call": [188, 192, 206, 249], "callback": [188, 195, 206, 219, 238, 247], "case": [227, 233], "channel": [178, 201, 203, 205, 224, 227], "check": 255, "choos": [242, 243], "cle": [190, 202, 210], "code": [20, 171, 172, 187, 224, 228, 230, 233], "compil": 257, "complementari": 214, "compress": [17, 29, 203, 204, 205, 224, 225, 226, 227, 228, 229, 230, 232], "comput": [175, 188, 192, 206, 247, 250], "confid": 255, "config_util": 170, "configur": [175, 249, 251], "constant": [194, 195, 208], "contain": 243, "context": [214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239], "convers": 257, "convert": [188, 189, 190, 191, 197, 233], "correct": 210, "cp": 227, "creat": [188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 219, 233, 238, 247], "cross": [190, 202, 210, 223, 232], "cross_layer_equ": [4, 16, 28], "data": 248, "dataset": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "debug": [255, 256], "default": 251, "defin": [188, 194, 195, 206, 208], "definit": 22, "deploi": 259, "deploy": 258, "dequant": 163, "dequantizedtensor": 158, "descript": 219, "design": 229, "determin": [189, 190, 191, 193, 194, 198, 199, 201, 202, 207, 210, 211, 212, 249], "dictionari": 248, "differ": 197, "direct": 257, "disabl": [200, 213], "discuss": 197, "docker": [242, 243], "document": [241, 260], "download": [187, 243], "enabl": [200, 213, 219], "encod": [175, 188, 192, 200, 206, 213, 219, 247, 248, 249], "engin": 257, "enum": 22, "environ": 243, "equal": [190, 202, 210, 223, 232], "error": 219, "estim": [195, 209, 221, 232], "evalu": [188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 219, 247, 250], "exampl": [20, 171, 172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 224, 228, 230, 233, 241, 245], "execut": [221, 223, 246, 257], "experiment": 24, "explor": 226, "export": [195, 209, 246, 247, 249, 250, 258], "fake": 192, "faq": 227, "fast": 192, "featur": [225, 241, 256, 258], "file": 251, "find": [192, 233], "fine": [203, 204, 205, 227], "fix": 255, "float": 171, "floatquantizedequant": 166, "flow": [176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "fold": [188, 189, 190, 191, 193, 195, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 222, 232], "format": 248, "fp16": 259, "fp32": [188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 255], "from": [171, 242], "front": 233, "function": [188, 194, 195, 197, 206, 208], "gener": [216, 218, 259], "get": [193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212], "glossari": [240, 241], "gpu": 250, "granular": 249, "greedi": 226, "group": 233, "guid": [171, 241, 249, 256], "guidebook": 225, "guidelin": [252, 253, 255, 256, 259], "helper": [194, 208], "histogram": 219, "host": 242, "how": [171, 226, 231, 249, 251], "hub": 257, "hyper": 214, "i": [188, 192, 200, 201, 206, 209, 213], "imag": 243, "import": [218, 219], "improv": 258, "individu": 255, "infer": [256, 257, 258], "inform": [189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212], "initi": 250, "input": [218, 235], "insert": 192, "instal": [241, 242, 243, 244, 245], "instanti": [189, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212], "interact": [216, 217], "kera": [14, 195, 196, 197], "layer": [188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 216, 218, 219, 223, 226, 227, 232, 233, 235, 255], "layer_output_util": [6, 19, 169], "leaf": 235, "learn": [199, 212], "learnedgrid": 171, "level": 248, "librari": 219, "limit": [20, 172, 197], "list": 233, "load": [192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218], "lora": [232, 236, 237, 238], "loss": [200, 213, 219], "low": 246, "manual": [234, 235, 244], "max": [200, 213, 219, 249], "mean": 219, "method": 192, "migrat": 171, "min": [200, 213, 219, 249], "mix": [188, 192, 206, 232, 233, 234, 235, 258], "mixed_precis": [2, 12, 174, 182], "mmp": 235, "mode": 250, "model": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 227, 235, 237, 246, 247, 250, 252, 253, 255, 259], "model_input": 251, "model_output": 251, "model_prepar": [20, 172], "model_valid": 173, "modifi": 251, "modul": [171, 175], "more": [189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212], "move": 171, "mse": [200, 213, 232, 239], "multi": 250, "next": [189, 193, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 259], "nn": 175, "nois": 249, "non": 235, "norm": [190, 210, 221, 222, 232], "normal": [188, 189, 191, 193, 198, 199, 201, 202, 206, 207, 211, 212], "note": [227, 241, 254], "notebook": [187, 188, 192, 200, 201, 206, 209, 213, 241], "obtain": 218, "old": 242, "onnx": [188, 189, 190, 191], "op": [192, 233], "optim": 232, "option": [227, 235], "origin": 197, "output": [216, 218, 235], "overal": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "overhead": 233, "overview": [226, 227, 229, 231, 249, 251], "packag": [242, 243], "param": 251, "paramet": [188, 192, 206, 214, 249, 250], "pareto": 233, "path": 258, "pcq": 201, "pdf": [200, 213], "peft": 176, "per": [178, 200, 201, 213, 219, 226, 227, 246, 255], "perform": [195, 198, 199, 209, 211, 212, 233, 255], "phase": 233, "pipelin": [188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213], "platform": 245, "post": 258, "power": 246, "prebuilt": 243, "precis": [188, 192, 206, 232, 233, 234, 235, 258, 259], "prepar": [195, 197, 219], "prerequisit": [214, 215, 219, 220, 221, 239, 242, 243, 244, 247, 250], "pretrain": [194, 200, 208], "procedur": [215, 220, 222, 224, 239, 259], "process": 171, "profil": 235, "prune": [203, 205, 224, 227], "ptq": 237, "pypi": 242, "pytorch": [188, 189, 190, 191, 245, 253], "qat": [195, 198, 199, 209, 211, 212, 250], "qualcomm": 257, "quant": [200, 213], "quant_analyz": [8, 21, 177, 184], "quantanalyz": [200, 213, 219], "quantiz": [161, 164, 171, 175, 178, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 216, 219, 220, 232, 236, 237, 241, 246, 248, 249, 250, 255, 256, 257, 258, 259], "quantizationmixin": 30, "quantizationsim": 195, "quantizationsimmodel": 238, "quantize_dequant": 165, "quantizedadaptiveavgpool1d": 31, "quantizedadaptiveavgpool2d": 32, "quantizedadaptiveavgpool3d": 33, "quantizedadaptivemaxpool1d": 34, "quantizedadaptivemaxpool2d": 35, "quantizedadaptivemaxpool3d": 36, "quantizedalphadropout": 37, "quantizedavgpool1d": 38, "quantizedavgpool2d": 39, "quantizedavgpool3d": 40, "quantizedbatchnorm1d": 43, "quantizedbatchnorm2d": 44, "quantizedbatchnorm3d": 45, "quantizedbceloss": 41, "quantizedbcewithlogitsloss": 42, "quantizedbilinear": 46, "quantizedcelu": 47, "quantizedchannelshuffl": 49, "quantizedcircularpad1d": 50, "quantizedcircularpad2d": 51, "quantizedcircularpad3d": 52, "quantizedconstantpad1d": 53, "quantizedconstantpad2d": 54, "quantizedconstantpad3d": 55, "quantizedconv1d": 56, "quantizedconv2d": 57, "quantizedconv3d": 58, "quantizedconvtranspose1d": 59, "quantizedconvtranspose2d": 60, "quantizedconvtranspose3d": 61, "quantizedcosineembeddingloss": 62, "quantizedcosinesimilar": 63, "quantizedcrossentropyloss": 64, "quantizedctcloss": 48, "quantizeddropout": 65, "quantizeddropout1d": 66, "quantizeddropout2d": 67, "quantizeddropout3d": 68, "quantizedelu": 69, "quantizedembed": 70, "quantizedembeddingbag": 71, "quantizedequant": 162, "quantizedfeaturealphadropout": 72, "quantizedflatten": 73, "quantizedfold": 74, "quantizedfractionalmaxpool2d": 75, "quantizedfractionalmaxpool3d": 76, "quantizedgaussiannllloss": 81, "quantizedgelu": 77, "quantizedglu": 78, "quantizedgroupnorm": 82, "quantizedgru": 79, "quantizedgrucel": 80, "quantizedhardshrink": 83, "quantizedhardsigmoid": 84, "quantizedhardswish": 85, "quantizedhardtanh": 86, "quantizedhingeembeddingloss": 87, "quantizedhuberloss": 88, "quantizedinstancenorm1d": 89, "quantizedinstancenorm2d": 90, "quantizedinstancenorm3d": 91, "quantizedkldivloss": 92, "quantizedl1loss": 93, "quantizedlayernorm": 98, "quantizedleakyrelu": 99, "quantizedlinear": 100, "quantizedlocalresponsenorm": 101, "quantizedlogsigmoid": 102, "quantizedlogsoftmax": 103, "quantizedlppool1d": 94, "quantizedlppool2d": 95, "quantizedlstm": 96, "quantizedlstmcel": 97, "quantizedmarginrankingloss": 105, "quantizedmaxpool1d": 106, "quantizedmaxpool2d": 107, "quantizedmaxpool3d": 108, "quantizedmaxunpool1d": 109, "quantizedmaxunpool2d": 110, "quantizedmaxunpool3d": 111, "quantizedmish": 112, "quantizedmseloss": 104, "quantizedmultilabelmarginloss": 113, "quantizedmultilabelsoftmarginloss": 114, "quantizedmultimarginloss": 115, "quantizednllloss": 116, "quantizednllloss2d": 117, "quantizedpairwisedist": 119, "quantizedpixelshuffl": 120, "quantizedpixelunshuffl": 121, "quantizedpoissonnllloss": 122, "quantizedprelu": 118, "quantizedreflectionpad1d": 128, "quantizedreflectionpad2d": 129, "quantizedreflectionpad3d": 130, "quantizedrelu": 126, "quantizedrelu6": 127, "quantizedreplicationpad1d": 131, "quantizedreplicationpad2d": 132, "quantizedreplicationpad3d": 133, "quantizedrnn": 123, "quantizedrnncel": 124, "quantizedrrelu": 125, "quantizedselu": 134, "quantizedsigmoid": 136, "quantizedsilu": 135, "quantizedsmoothl1loss": 137, "quantizedsoftmarginloss": 138, "quantizedsoftmax": 139, "quantizedsoftmax2d": 140, "quantizedsoftmin": 141, "quantizedsoftplu": 142, "quantizedsoftshrink": 143, "quantizedsoftsign": 144, "quantizedtanh": 145, "quantizedtanhshrink": 146, "quantizedtensor": 159, "quantizedtensorbas": 160, "quantizedthreshold": 147, "quantizedtripletmarginloss": 148, "quantizedtripletmarginwithdistanceloss": 149, "quantizedunflatten": 150, "quantizedunfold": 151, "quantizedupsampl": 152, "quantizedupsamplingbilinear2d": 153, "quantizedupsamplingnearest2d": 154, "quantizedzeropad1d": 155, "quantizedzeropad2d": 156, "quantizedzeropad3d": 157, "quantsim": [7, 9, 22, 170, 179, 185, 201, 202, 247, 249], "quantwrapp": 171, "quick": [241, 245], "qw": [236, 237], "qwa": [236, 238], "rang": [199, 200, 212, 213, 219], "rank": 227, "ratio": [226, 227, 229], "re": [195, 209, 221, 232], "recommend": 250, "reconstruct": 224, "reduc": [233, 259], "reestim": 209, "refer": [175, 178, 227, 241], "regular": 192, "relat": 187, "releas": [241, 254], "restor": 259, "round": [189, 193, 207, 214, 227, 232], "run": [187, 188, 192, 206, 208, 219, 238, 245], "runtim": [249, 251], "scheme": 249, "score": [193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212], "scratch": 242, "sdk": 257, "select": [224, 226, 227], "sensit": [219, 233, 255], "seq_ms": [10, 180, 186], "sequenti": [232, 239], "server": [187, 229], "session": 229, "set": 235, "set_grouped_blockwise_quantization_for_weight": 7, "setup": [214, 215, 221, 223, 224, 228, 230, 235, 237, 238, 239, 243, 244, 250], "show": 197, "signal": 249, "sim": [188, 189, 190, 191, 193, 198, 199, 202, 206, 207, 209, 210, 211, 212], "similar": 197, "simplifi": [188, 189, 190, 191], "simul": [188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 241, 249, 258], "sourc": 242, "spatial": [204, 205, 227, 228], "specif": 248, "squar": 219, "start": [229, 241, 243, 245], "staticgrid": 171, "statist": [200, 209, 213, 219], "step": [189, 193, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 233, 239, 247, 250, 259], "structur": [248, 251], "subclass": 197, "summari": [192, 195, 197, 201, 209], "supergroup": 251, "support": [250, 258], "svd": [204, 205, 227, 228, 230], "target": [256, 257, 258], "techniqu": [210, 214, 227, 232], "tensorflow": 252, "test": 245, "tf": 249, "thi": [188, 192, 200, 201, 206, 209, 213], "tool": [168, 216, 232, 258], "top": 248, "train": [189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 237, 238, 250, 258], "transform": 196, "try": 259, "tune": [203, 204, 205, 227], "type": [235, 248], "updat": 237, "us": [171, 203, 204, 205, 224, 227, 228, 230, 233], "user": [176, 241, 256], "v": 171, "v1": [167, 181, 182, 183, 184, 185, 186], "valid": [189, 190, 191, 193, 194, 202, 203, 204, 205, 207, 210, 211, 212], "variant": 243, "verifi": [242, 245, 259], "version": [242, 248, 260], "visual": [168, 216, 217, 229, 255], "visualization_tool": 168, "w16a16": 259, "weight": [219, 224, 227, 230, 237, 255], "what": [188, 192, 200, 201, 206, 209, 213], "width": 233, "winnow": [224, 231], "work": [226, 231, 249], "workflow": [214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 230, 233, 235, 237, 238, 239, 247, 249, 250, 255, 256, 259], "wrapper": [200, 213], "x": 171, "your": 243}})