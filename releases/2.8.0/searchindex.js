Search.setIndex({"alltitles": {"1) Find layer groups": [[236, "find-layer-groups"]], "1. Creating a Keras model with subclass layers": [[199, "1.-Creating-a-Keras-model-with-subclass-layers"]], "1. Define Constants and Helper functions": [[210, "1.-Define-Constants-and-Helper-functions"]], "1. Example evaluation and training pipeline": [[202, "1.-Example-evaluation-and-training-pipeline"], [203, "1.-Example-evaluation-and-training-pipeline"], [211, "1.-Example-evaluation-and-training-pipeline"], [215, "1.-Example-evaluation-and-training-pipeline"]], "1. Example evaluation pipeline": [[190, "1.-Example-evaluation-pipeline"], [208, "1.-Example-evaluation-pipeline"]], "1. FP32 confidence checks": [[259, "fp32-confidence-checks"]], "1. Instantiate the example evaluation and training datasets": [[200, "1.-Instantiate-the-example-evaluation-and-training-datasets"], [201, "1.-Instantiate-the-example-evaluation-and-training-datasets"]], "1. Instantiate the example evaluation and training pipeline": [[197, "1.-Instantiate-the-example-evaluation-and-training-pipeline"]], "1. Instantiate the example evaluation method": [[194, "1.-Instantiate-the-example-evaluation-method"]], "1. Instantiate the example training and validation pipeline": [[191, "1.-Instantiate-the-example-training-and-validation-pipeline"], [192, "1.-Instantiate-the-example-training-and-validation-pipeline"], [193, "1.-Instantiate-the-example-training-and-validation-pipeline"], [195, "1.-Instantiate-the-example-training-and-validation-pipeline"], [196, "1.-Instantiate-the-example-training-and-validation-pipeline"], [204, "1.-Instantiate-the-example-training-and-validation-pipeline"], [205, "1.-Instantiate-the-example-training-and-validation-pipeline"], [206, "1.-Instantiate-the-example-training-and-validation-pipeline"], [207, "1.-Instantiate-the-example-training-and-validation-pipeline"], [209, "1.-Instantiate-the-example-training-and-validation-pipeline"], [212, "1.-Instantiate-the-example-training-and-validation-pipeline"], [213, "1.-Instantiate-the-example-training-and-validation-pipeline"], [214, "1.-Instantiate-the-example-training-and-validation-pipeline"]], "1. Run the notebook server": [[189, "run-the-notebook-server"]], "1. Sensitivity to weight and activation quantization": [[222, "sensitivity-to-weight-and-activation-quantization"]], "1. Versioning": [[252, "versioning"]], "1. defaults": [[255, "defaults"]], "1.13.0": [[258, "id39"]], "1.16.0": [[258, "id38"]], "1.16.1": [[258, "id37"]], "1.16.2": [[258, "id36"]], "1.17.0": [[258, "id35"]], "1.18.0": [[258, "id34"]], "1.19.1": [[258, "id33"]], "1.20.0": [[258, "id32"]], "1.21.0": [[258, "id31"]], "1.22.0": [[258, "id30"]], "1.22.1": [[258, "id29"]], "1.22.2": [[258, "id28"]], "1.23.0": [[258, "id27"]], "1.24.0": [[258, "id26"]], "1.25.0": [[258, "id25"]], "1.26.0": [[258, "id24"]], "1.27.0": [[258, "id23"]], "1.28.0": [[258, "id22"]], "1.29.0": [[258, "id21"]], "1.30.0": [[258, "id20"]], "1.31.0": [[258, "id19"]], "1.32.0": [[258, "id18"]], "1.33.0": [[258, "id17"]], "1.33.5": [[258, "id16"]], "1.34.0": [[258, "id15"]], "1.35.0": [[258, "id14"]], "1.35.1": [[258, "id13"]], "2) Perform sensitivity analysis (Phase 1)": [[236, "perform-sensitivity-analysis-phase-1"]], "2. Convert an FP32 PyTorch model to ONNX, simplify & then evaluate baseline FP32 accuracy": [[190, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [191, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [192, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [193, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"]], "2. Converting the Keras model with subclass layers to a Keras model with functional layers": [[199, "2.-Converting-the-Keras-model-with-subclass-layers-to-a-Keras-model-with-functional-layers"]], "2. Create the model in Keras": [[197, "2.-Create-the-model-in-Keras"]], "2. Define Constants and Datasets Prepare": [[197, "2.-Define-Constants-and-Datasets-Prepare"]], "2. Download the example notebooks and related code": [[189, "download-the-example-notebooks-and-related-code"]], "2. Load FP32 model": [[211, "2.-Load-FP32-model"]], "2. Load a pretrained FP32 model": [[196, "2.-Load-a-pretrained-FP32-model"], [202, "2.-Load-a-pretrained-FP32-model"], [210, "2.-Load-a-pretrained-FP32-model"]], "2. Load the FP32 model and evaluate the model to find the baseline FP32 accuracy": [[194, "2.-Load-the-FP32-model-and-evaluate-the-model-to-find-the-baseline-FP32-accuracy"]], "2. Load the model": [[215, "2.-Load-the-model"]], "2. Load the model and evaluate to get a baseline FP32 accuracy score": [[195, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [200, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [201, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [203, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [204, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [205, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [206, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [207, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [208, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [209, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [212, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [213, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [214, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"]], "2. Per-layer quantizer enablement": [[222, "per-layer-quantizer-enablement"]], "2. Version 0.6.1": [[252, "version-0-6-1"]], "2. Weights or activations quantization": [[259, "weights-or-activations-quantization"]], "2. params": [[255, "params"]], "2.0.0": [[258, "id12"]], "2.1. Encoding specification": [[252, "encoding-specification"]], "2.1.0": [[258, "id11"]], "2.2.0": [[258, "id10"]], "2.3.0": [[258, "id9"]], "2.4.0": [[258, "id8"]], "2.5.0": [[258, "id7"]], "2.6.0": [[258, "id6"]], "2.7.0": [[258, "id5"]], "2.8.0": [[258, "id1"]], "3) Create a Pareto-front list (Phase 2)": [[236, "create-a-pareto-front-list-phase-2"]], "3. Apply QuantAnalyzer to the model": [[202, "3.-Apply-QuantAnalyzer-to-the-model"], [215, "3.-Apply-QuantAnalyzer-to-the-model"]], "3. Compress the model and fine-tune": [[205, "3.-Compress-the-model-and-fine-tune"], [206, "3.-Compress-the-model-and-fine-tune"], [207, "3.-Compress-the-model-and-fine-tune"]], "3. Create a quantization simulation model": [[190, "3.-Create-a-quantization-simulation-model"], [208, "3.-Create-a-quantization-simulation-model"]], "3. Create a quantization simulation model and Perform QAT": [[211, "3.-Create-a-quantization-simulation-model-and-Perform-QAT"]], "3. Create a quantization simulation model and determine quantized accuracy": [[191, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [192, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [193, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [195, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [200, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [201, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [203, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [204, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [209, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [212, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [213, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [214, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"]], "3. Determine the baseline FP32 accuracy": [[196, "3.-Determine-the-baseline-FP32-accuracy"]], "3. Fixing weight quantization": [[259, "fixing-weight-quantization"]], "3. Per-layer encodings min-max range": [[222, "per-layer-encodings-min-max-range"]], "3. Run AutoQuant": [[210, "3.-Run-AutoQuant"]], "3. Run the notebooks": [[189, "run-the-notebooks"]], "3. Showing similarities and differences between the original and converted models": [[199, "3.-Showing-similarities-and-differences-between-the-original-and-converted-models"]], "3. Train and evaluate the model": [[197, "3.-Train-and-evaluate-the-model"]], "3. Version 1.0.0": [[252, "version-1-0-0"]], "3. supergroups": [[255, "supergroups"]], "3.1. Encoding specification": [[252, "id1"]], "3.Create a quantization simulation model (with fake quantization ops inserted)": [[194, "3.Create-a-quantization-simulation-model-(with-fake-quantization-ops-inserted)"]], "4) Reduce Bit-width Convert Op Overhead (Phase 3)": [[236, "reduce-bit-width-convert-op-overhead-phase-3"]], "4. Apply Adaround": [[191, "4.-Apply-Adaround"], [195, "4.-Apply-Adaround"], [203, "4.-Apply-Adaround"], [209, "4.-Apply-Adaround"]], "4. Apply CLE": [[192, "4.-Apply-CLE"], [204, "4.-Apply-CLE"]], "4. Apply CLE and BC": [[212, "4.-Apply-CLE-and-BC"]], "4. Create a QuantizationSim Model": [[197, "4.-Create-a-QuantizationSim-Model"]], "4. Define constants and helper functions": [[196, "4.-Define-constants-and-helper-functions"]], "4. Discussing the limitations of the Keras Model Preparer": [[199, "4.-Discussing-the-limitations-of-the-Keras-Model-Preparer"]], "4. Fixing activation quantization": [[259, "fixing-activation-quantization"]], "4. Per-layer statistics histogram": [[222, "per-layer-statistics-histogram"]], "4. Perform BatchNorm Reestimation": [[211, "4.-Perform-BatchNorm-Reestimation"]], "4. Perform QAT": [[200, "4.-Perform-QAT"], [201, "4.-Perform-QAT"], [213, "4.-Perform-QAT"], [214, "4.-Perform-QAT"]], "4. Run AMP algorithm on the quantized model": [[190, "4.-Run-AMP-algorithm-on-the-quantized-model"], [194, "4.-Run-AMP-algorithm-on-the-quantized-model"], [208, "4.-Run-AMP-algorithm-on-the-quantized-model"]], "4. model_input": [[255, "model-input"]], "5. Apply AutoQuant": [[196, "5.-Apply-AutoQuant"]], "5. Export Model": [[197, "5.-Export-Model"], [211, "5.-Export-Model"]], "5. Per-layer mean-square-error loss": [[222, "per-layer-mean-square-error-loss"]], "5. Perform QAT": [[197, "5.-Perform-QAT"]], "5. Performing per-layer analysis": [[259, "performing-per-layer-analysis"]], "5. model_output": [[255, "model-output"]], "6. Visualizing sensitive layers": [[259, "visualizing-sensitive-layers"]], "7. Fixing individual quantizers": [[259, "fixing-individual-quantizers"]], "8. Quantize the model": [[259, "quantize-the-model"]], "AIMET API": [[0, null]], "AIMET Documentation": [[245, null]], "AIMET documentation versions": [[264, null]], "AIMET features": [[260, "aimet-features"], [262, null]], "AIMET installation in Docker": [[247, null]], "AIMET manual installation and setup": [[248, null]], "AIMET visualization": [[232, null]], "API": [[20, "api"], [172, "api"], [173, "api"], [178, "api"], [217, "api"], [218, "api"], [220, "api"], [221, "api"], [222, "api"], [223, "api"], [224, "api"], [225, "api"], [226, "api"], [227, "api"], [231, "api"], [233, "api"], [236, "api"], [238, "api"], [239, "api"], [243, "api"], [250, "api"], [251, "api"], [254, "api"]], "API Call for Regular AMP": [[194, "API-Call-for-Regular-AMP"]], "API Reference": [[245, "api-reference"]], "API reference": [[175, "api-reference"], [180, "api-reference"]], "Accuracy improvement tools": [[262, "accuracy-improvement-tools"]], "AdaScale": [[218, null], [235, "adascale"]], "Adaptive Rounding (AdaRound)": [[191, null], [195, null], [209, null]], "Adaptive rounding": [[217, null], [235, "adaptive-rounding"]], "Affine quantizers": [[180, "affine-quantizers"]], "Alternative packages": [[246, "alternative-packages"]], "Analysis descriptions": [[222, "analysis-descriptions"]], "Analysis tools": [[219, null], [235, "analysis-tools"]], "Apply the profile": [[238, "apply-the-profile"]], "AutoQuant": [[196, null], [210, null]], "Automatic Mixed-Precision (AMP)": [[190, null], [194, null], [208, null]], "Automatic mixed precision": [[236, null], [237, "automatic-mixed-precision"]], "Automatic quantization": [[223, null], [235, "automatic-quantization"]], "Batch norm folding": [[225, null], [235, "batch-norm-folding"]], "Batch norm re-estimation": [[224, null], [235, "batch-norm-re-estimation"]], "Bias Correction": [[212, "Bias-Correction"]], "Browse the notebooks": [[189, "browse-the-notebooks"]], "Build a Docker image": [[247, "build-a-docker-image"]], "Building from source": [[246, "building-from-source"]], "CLE": [[212, "CLE"]], "Calibration": [[251, null]], "Calibration Callback": [[242, "calibration-callback"]], "Call AMP API": [[190, "Call-AMP-API"], [208, "Call-AMP-API"]], "Channel pruning": [[227, null]], "Channel pruning (CP)": [[230, "channel-pruning-cp"]], "Channel selection": [[227, "channel-selection"]], "Choose and install a package": [[246, "choose-and-install-a-package"]], "Choose to download or build an image": [[247, "choose-to-download-or-build-an-image"]], "Choose your AIMET variant": [[247, "choose-your-aimet-variant"]], "Code Examples": [[20, "code-examples"], [171, "code-examples"], [172, "code-examples"]], "Code example": [[227, "code-example"], [231, "code-example"], [233, "code-example"], [236, "code-example"]], "Compilation": [[261, "compilation"]], "Complementary techniques": [[217, "complementary-techniques"]], "Compressing using Spatial SVD": [[231, "compressing-using-spatial-svd"]], "Compression": [[230, null], [232, "compression"], [235, "compression"]], "Compression features Guidebook": [[228, null]], "Compression ratio selection": [[229, "compression-ratio-selection"], [230, "compression-ratio-selection"]], "Compression using Channel Pruning": [[227, "compression-using-channel-pruning"]], "Compression using Weight SVD": [[233, "compression-using-weight-svd"]], "Compute Encodings": [[190, "Compute-Encodings"], [194, "Compute-Encodings"], [208, "Compute-Encodings"]], "Computing encodings": [[175, "computing-encodings"]], "Configuration": [[175, "configuration"]], "Configuration file structure": [[255, "configuration-file-structure"]], "Context": [[217, "context"], [218, "context"], [220, "context"], [221, "context"], [222, "context"], [223, "context"], [224, "context"], [225, "context"], [226, "context"], [227, "context"], [231, "context"], [233, "context"], [236, "context"], [238, "context"], [239, "context"], [241, "context"], [242, "context"], [243, "context"]], "Conversion": [[261, "conversion"]], "Create Quantization Sim Model": [[190, "Create-Quantization-Sim-Model"], [208, "Create-Quantization-Sim-Model"], [211, "Create-Quantization-Sim-Model"]], "Create QuantizationSimModel": [[242, "create-quantizationsimmodel"]], "Create the Quantization Sim Model": [[192, "Create-the-Quantization-Sim-Model"], [193, "Create-the-Quantization-Sim-Model"], [195, "Create-the-Quantization-Sim-Model"], [200, "Create-the-Quantization-Sim-Model"], [201, "Create-the-Quantization-Sim-Model"], [204, "Create-the-Quantization-Sim-Model"], [209, "Create-the-Quantization-Sim-Model"], [212, "Create-the-Quantization-Sim-Model"], [213, "Create-the-Quantization-Sim-Model"], [214, "Create-the-Quantization-Sim-Model"]], "Cross-Layer Equalization": [[192, null]], "Cross-Layer Equalization and Bias Correction": [[212, null]], "Cross-Layer Equalization with QuantSim": [[204, null]], "Cross-layer equalization": [[226, null], [235, "cross-layer-equalization"]], "Data type": [[252, "id5"]], "Dataset": [[190, "Dataset"], [191, "Dataset"], [192, "Dataset"], [193, "Dataset"], [194, "Dataset"], [195, "Dataset"], [196, "Dataset"], [197, "Dataset"], [200, "Dataset"], [201, "Dataset"], [202, "Dataset"], [203, "Dataset"], [204, "Dataset"], [205, "Dataset"], [206, "Dataset"], [207, "Dataset"], [208, "Dataset"], [209, "Dataset"], [210, "Dataset"], [211, "Dataset"], [212, "Dataset"], [213, "Dataset"], [214, "Dataset"], [215, "Dataset"]], "Debugging guidelines": [[260, "debugging-guidelines"]], "Debugging workflow": [[259, "debugging-workflow"]], "Define callback functions for AMP": [[190, "Define-callback-functions-for-AMP"], [208, "Define-callback-functions-for-AMP"]], "Deployment paths": [[262, "deployment-paths"]], "DequantizedTensor": [[158, null]], "Design": [[232, "design"]], "Determine quantization parameters (encodings)": [[253, "determine-quantization-parameters-encodings"]], "Docker install": [[246, "docker-install"]], "Download a prebuilt Docker image": [[247, "download-a-prebuilt-docker-image"]], "Encoding Format Specification": [[252, null]], "Encoding dictionary structure": [[252, "id3"]], "Encoding min/max ranges": [[202, "Encoding-min/max-ranges"], [215, "Encoding-min/max-ranges"]], "Encoding type": [[252, "id4"]], "Enum Definition": [[22, "enum-definition"]], "Environment setup": [[247, "environment-setup"]], "Example Notebooks": [[245, "example-notebooks"]], "Examples": [[189, null]], "Executing per-block quantization": [[250, "executing-per-block-quantization"]], "Execution": [[224, "execution"], [226, "execution"], [261, "execution"]], "Export API": [[262, "export-api"]], "Export tools": [[262, "export-tools"]], "Exported Encodings": [[253, "exported-encodings"]], "Exporting blockwise-quantized models": [[250, "exporting-blockwise-quantized-models"]], "External resources": [[216, null]], "FAQs": [[230, "faqs"]], "Fast AMP (AMP 2.0)": [[194, "Fast-AMP-(AMP-2.0)"]], "Feature Guide": [[245, "feature-guide"]], "FloatQuantizeDequantize": [[166, null]], "Fold Batch Norm layers": [[192, "Fold-Batch-Norm-layers"], [212, "Fold-Batch-Norm-layers"]], "Fold Batch Normalization layers": [[190, "Fold-Batch-Normalization-layers"], [193, "Fold-Batch-Normalization-layers"], [195, "Fold-Batch-Normalization-layers"], [200, "Fold-Batch-Normalization-layers"], [201, "Fold-Batch-Normalization-layers"], [203, "Fold-Batch-Normalization-layers"], [204, "Fold-Batch-Normalization-layers"], [208, "Fold-Batch-Normalization-layers"], [209, "Fold-Batch-Normalization-layers"], [213, "Fold-Batch-Normalization-layers"], [214, "Fold-Batch-Normalization-layers"]], "Fold BatchNorm Layers": [[197, "Fold-BatchNorm-Layers"], [211, "Fold-BatchNorm-Layers"]], "For more information": [[191, "For-more-information"], [192, "For-more-information"], [193, "For-more-information"], [195, "For-more-information"], [196, "For-more-information"], [200, "For-more-information"], [201, "For-more-information"], [204, "For-more-information"], [205, "For-more-information"], [206, "For-more-information"], [207, "For-more-information"], [209, "For-more-information"], [210, "For-more-information"], [212, "For-more-information"], [213, "For-more-information"], [214, "For-more-information"]], "General guidelines": [[263, "general-guidelines"]], "Glossary": [[244, null], [245, "glossary"]], "Greedy compression ratio selection": [[229, null]], "Host install from scratch": [[246, "host-install-from-scratch"]], "How it works": [[229, "how-it-works"]], "How quantization simulation works": [[253, "how-quantization-simulation-works"]], "How to modify configuration file": [[255, "how-to-modify-configuration-file"]], "How to use aimet_torch 1.x": [[171, "how-to-use-aimet-torch-1-x"]], "How winnowing works": [[234, "how-winnowing-works"]], "Hyper parameters": [[217, "hyper-parameters"]], "Install AIMET packages": [[247, "install-aimet-packages"]], "Installation": [[245, "installation"], [246, null]], "Installing AIMET": [[247, "installing-aimet"], [248, "installing-aimet"], [249, "installing-aimet"]], "Interactive visualization": [[219, "interactive-visualization"], [220, null]], "Keras Model Preparer": [[199, null]], "Layer output generation": [[219, "layer-output-generation"], [221, null]], "Limitations": [[20, "limitations"], [172, "limitations"]], "LoRa Training": [[241, "lora-training"]], "Low power blockwise quantization": [[250, "low-power-blockwise-quantization"]], "MMP API options": [[238, "mmp-api-options"]], "Manual mixed precision": [[237, "manual-mixed-precision"], [238, null]], "Migration Process": [[171, "migration-process"]], "Migration guide": [[171, null]], "Min-Max (also called \u201cTF\u201d in AIMET)": [[253, "min-max-also-called-tf-in-aimet"]], "Mixed Precision Algorithm": [[236, "mixed-precision-algorithm"]], "Mixed precision": [[235, "mixed-precision"], [237, null], [262, "mixed-precision"]], "Model compression": [[230, "model-compression"]], "Model compression using channel pruning": [[205, null]], "Model compression using spatial SVD": [[206, null]], "Model compression using spatial SVD and channel pruning": [[207, null]], "Model guidelines": [[257, "model-guidelines"]], "Moving from QuantWrapper to Quantized Modules": [[171, "moving-from-quantwrapper-to-quantized-modules"]], "Moving from StaticGrid and LearnedGrid Quantizer to Affine and Float Quantizer": [[171, "moving-from-staticgrid-and-learnedgrid-quantizer-to-affine-and-float-quantizer"]], "Multi-GPU support": [[254, "multi-gpu-support"]], "NOTE": [[230, null]], "Next steps": [[191, "Next-steps"], [195, "Next-steps"], [200, "Next-steps"], [201, "Next-steps"], [204, "Next-steps"], [205, "Next-steps"], [206, "Next-steps"], [207, "Next-steps"], [209, "Next-steps"], [210, "Next-steps"], [212, "Next-steps"], [213, "Next-steps"], [214, "Next-steps"]], "Next: deploying the model": [[263, "next-deploying-the-model"]], "Old versions": [[246, "old-versions"]], "OmniQuant": [[235, "omniquant"], [239, null]], "On-target inference": [[260, "on-target-inference"], [261, null]], "Optimization techniques": [[235, null]], "Optional techniques": [[230, "optional-techniques"]], "Overall flow": [[190, "Overall-flow"], [191, "Overall-flow"], [192, "Overall-flow"], [193, "Overall-flow"], [194, "Overall-flow"], [195, "Overall-flow"], [196, "Overall-flow"], [197, "Overall-flow"], [198, "Overall-flow"], [199, "Overall-flow"], [200, "Overall-flow"], [201, "Overall-flow"], [202, "Overall-flow"], [203, "Overall-flow"], [204, "Overall-flow"], [205, "Overall-flow"], [206, "Overall-flow"], [207, "Overall-flow"], [208, "Overall-flow"], [209, "Overall-flow"], [210, "Overall-flow"], [211, "Overall-flow"], [212, "Overall-flow"], [213, "Overall-flow"], [214, "Overall-flow"], [215, "Overall-flow"]], "Overview": [[229, "overview"], [230, "overview"], [232, "overview"], [234, "overview"], [253, "overview"], [255, "overview"]], "PDF of statistics": [[202, "PDF-of-statistics"], [215, "PDF-of-statistics"]], "PTQ": [[241, "ptq"]], "Parameters for AMP algorithm": [[190, "Parameters-for-AMP-algorithm"], [194, "Parameters-for-AMP-algorithm"], [208, "Parameters-for-AMP-algorithm"]], "Per-block quantization": [[180, "per-block-quantization"], [250, null]], "Per-channel quantization": [[180, "per-channel-quantization"]], "Per-layer MSE loss": [[202, "Per-layer-MSE-loss"], [215, "Per-layer-MSE-loss"]], "Per-layer analysis by enabling/disabling quantization wrappers": [[202, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"], [215, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"]], "Per-layer exploration": [[229, "per-layer-exploration"]], "Per-layer fine-tuning": [[230, "per-layer-fine-tuning"]], "Perform QAT": [[211, "Perform-QAT"]], "Post-training quantization": [[262, "post-training-quantization"]], "Prepare the evaluation callback function": [[197, "Prepare-the-evaluation-callback-function"]], "Prerequisites": [[217, "prerequisites"], [218, "prerequisites"], [222, "prerequisites"], [223, "prerequisites"], [224, "prerequisites"], [239, "prerequisites"], [243, "prerequisites"], [246, "prerequisites"], [247, "prerequisites"], [248, "prerequisites"], [251, "prerequisites"], [254, "prerequisites"]], "Procedure": [[218, "procedure"], [223, "procedure"], [225, "procedure"], [227, "procedure"], [239, "procedure"], [243, "procedure"], [263, "procedure"]], "PyPI": [[246, "pypi"]], "PyTorch model guidelines": [[257, null]], "QAT modes": [[254, "qat-modes"]], "QAT recommendations": [[254, "qat-recommendations"]], "QW-LoRa": [[240, "qw-lora"], [241, null]], "QWA-LoRa": [[240, "qwa-lora"], [242, null]], "Qualcomm\u00ae AI Engine Direct SDK": [[261, "qualcommreg-ai-engine-direct-sdk"]], "Qualcomm\u00ae AI hub": [[261, "qualcommreg-ai-hub"]], "Quant Analyzer": [[202, null], [215, null]], "QuantSim workflow": [[253, "quantsim-workflow"]], "Quantization": [[261, "quantization"]], "Quantization Simulation Guide": [[245, "quantization-simulation-guide"]], "Quantization analyzer": [[219, "quantization-analyzer"], [222, null]], "Quantization debugging guidelines": [[259, null]], "Quantization granularity": [[253, "quantization-granularity"]], "Quantization schemes": [[253, "quantization-schemes"]], "Quantization simulation": [[193, null], [262, "quantization-simulation"]], "Quantization simulation guide": [[253, null]], "Quantization user guide": [[260, null]], "Quantization workflow": [[260, "quantization-workflow"], [263, null]], "Quantization-Aware Training with BatchNorm Re-estimation": [[197, null], [211, null]], "Quantization-Aware Training with a Keras Transformer Model": [[198, null]], "Quantization-Aware training with range learning": [[201, null]], "Quantization-aware training": [[200, null], [213, null], [254, null], [262, "quantization-aware-training"]], "Quantization-aware training with range learning": [[214, null]], "QuantizationMixin": [[30, null]], "Quantize": [[161, null]], "Quantize and Update Base Model Weights": [[241, "quantize-and-update-base-model-weights"]], "QuantizeDequantize": [[162, null]], "Quantized LoRa": [[235, "quantized-lora"], [240, null]], "Quantized modules": [[175, "quantized-modules"]], "QuantizedAdaptiveAvgPool1d": [[31, null]], "QuantizedAdaptiveAvgPool2d": [[32, null]], "QuantizedAdaptiveAvgPool3d": [[33, null]], "QuantizedAdaptiveMaxPool1d": [[34, null]], "QuantizedAdaptiveMaxPool2d": [[35, null]], "QuantizedAdaptiveMaxPool3d": [[36, null]], "QuantizedAlphaDropout": [[37, null]], "QuantizedAvgPool1d": [[38, null]], "QuantizedAvgPool2d": [[39, null]], "QuantizedAvgPool3d": [[40, null]], "QuantizedBCELoss": [[41, null]], "QuantizedBCEWithLogitsLoss": [[42, null]], "QuantizedBatchNorm1d": [[43, null]], "QuantizedBatchNorm2d": [[44, null]], "QuantizedBatchNorm3d": [[45, null]], "QuantizedBilinear": [[46, null]], "QuantizedCELU": [[47, null]], "QuantizedCTCLoss": [[48, null]], "QuantizedChannelShuffle": [[49, null]], "QuantizedCircularPad1d": [[50, null]], "QuantizedCircularPad2d": [[51, null]], "QuantizedCircularPad3d": [[52, null]], "QuantizedConstantPad1d": [[53, null]], "QuantizedConstantPad2d": [[54, null]], "QuantizedConstantPad3d": [[55, null]], "QuantizedConv1d": [[56, null]], "QuantizedConv2d": [[57, null]], "QuantizedConv3d": [[58, null]], "QuantizedConvTranspose1d": [[59, null]], "QuantizedConvTranspose2d": [[60, null]], "QuantizedConvTranspose3d": [[61, null]], "QuantizedCosineEmbeddingLoss": [[62, null]], "QuantizedCosineSimilarity": [[63, null]], "QuantizedCrossEntropyLoss": [[64, null]], "QuantizedDropout": [[65, null]], "QuantizedDropout1d": [[66, null]], "QuantizedDropout2d": [[67, null]], "QuantizedDropout3d": [[68, null]], "QuantizedELU": [[69, null]], "QuantizedEmbedding": [[70, null]], "QuantizedEmbeddingBag": [[71, null]], "QuantizedFeatureAlphaDropout": [[72, null]], "QuantizedFlatten": [[73, null]], "QuantizedFold": [[74, null]], "QuantizedFractionalMaxPool2d": [[75, null]], "QuantizedFractionalMaxPool3d": [[76, null]], "QuantizedGELU": [[77, null]], "QuantizedGLU": [[78, null]], "QuantizedGRU": [[79, null]], "QuantizedGRUCell": [[80, null]], "QuantizedGaussianNLLLoss": [[81, null]], "QuantizedGroupNorm": [[82, null]], "QuantizedHardshrink": [[83, null]], "QuantizedHardsigmoid": [[84, null]], "QuantizedHardswish": [[85, null]], "QuantizedHardtanh": [[86, null]], "QuantizedHingeEmbeddingLoss": [[87, null]], "QuantizedHuberLoss": [[88, null]], "QuantizedInstanceNorm1d": [[89, null]], "QuantizedInstanceNorm2d": [[90, null]], "QuantizedInstanceNorm3d": [[91, null]], "QuantizedKLDivLoss": [[92, null]], "QuantizedL1Loss": [[93, null]], "QuantizedLPPool1d": [[94, null]], "QuantizedLPPool2d": [[95, null]], "QuantizedLSTM": [[96, null]], "QuantizedLSTMCell": [[97, null]], "QuantizedLayerNorm": [[98, null]], "QuantizedLeakyReLU": [[99, null]], "QuantizedLinear": [[100, null]], "QuantizedLocalResponseNorm": [[101, null]], "QuantizedLogSigmoid": [[102, null]], "QuantizedLogSoftmax": [[103, null]], "QuantizedMSELoss": [[104, null]], "QuantizedMarginRankingLoss": [[105, null]], "QuantizedMaxPool1d": [[106, null]], "QuantizedMaxPool2d": [[107, null]], "QuantizedMaxPool3d": [[108, null]], "QuantizedMaxUnpool1d": [[109, null]], "QuantizedMaxUnpool2d": [[110, null]], "QuantizedMaxUnpool3d": [[111, null]], "QuantizedMish": [[112, null]], "QuantizedMultiLabelMarginLoss": [[113, null]], "QuantizedMultiLabelSoftMarginLoss": [[114, null]], "QuantizedMultiMarginLoss": [[115, null]], "QuantizedNLLLoss": [[116, null]], "QuantizedNLLLoss2d": [[117, null]], "QuantizedPReLU": [[118, null]], "QuantizedPairwiseDistance": [[119, null]], "QuantizedPixelShuffle": [[120, null]], "QuantizedPixelUnshuffle": [[121, null]], "QuantizedPoissonNLLLoss": [[122, null]], "QuantizedRNN": [[123, null]], "QuantizedRNNCell": [[124, null]], "QuantizedRReLU": [[125, null]], "QuantizedReLU": [[126, null]], "QuantizedReLU6": [[127, null]], "QuantizedReflectionPad1d": [[128, null]], "QuantizedReflectionPad2d": [[129, null]], "QuantizedReflectionPad3d": [[130, null]], "QuantizedReplicationPad1d": [[131, null]], "QuantizedReplicationPad2d": [[132, null]], "QuantizedReplicationPad3d": [[133, null]], "QuantizedSELU": [[134, null]], "QuantizedSiLU": [[135, null]], "QuantizedSigmoid": [[136, null]], "QuantizedSmoothL1Loss": [[137, null]], "QuantizedSoftMarginLoss": [[138, null]], "QuantizedSoftmax": [[139, null]], "QuantizedSoftmax2d": [[140, null]], "QuantizedSoftmin": [[141, null]], "QuantizedSoftplus": [[142, null]], "QuantizedSoftshrink": [[143, null]], "QuantizedSoftsign": [[144, null]], "QuantizedTanh": [[145, null]], "QuantizedTanhshrink": [[146, null]], "QuantizedTensor": [[159, null]], "QuantizedTensorBase": [[160, null]], "QuantizedThreshold": [[147, null]], "QuantizedTripletMarginLoss": [[148, null]], "QuantizedTripletMarginWithDistanceLoss": [[149, null]], "QuantizedUnflatten": [[150, null]], "QuantizedUnfold": [[151, null]], "QuantizedUpsample": [[152, null]], "QuantizedUpsamplingBilinear2d": [[153, null]], "QuantizedUpsamplingNearest2d": [[154, null]], "QuantizedZeroPad1d": [[155, null]], "QuantizedZeroPad2d": [[156, null]], "QuantizedZeroPad3d": [[157, null]], "Quantizer Args structure": [[252, "id6"]], "Quantizers": [[180, "quantizers"]], "Quantsim and Adaround - Per Channel Quantization (PCQ)": [[203, null]], "Quick Start": [[245, "quick-start"]], "Quick Start (PyTorch)": [[249, null]], "Rank Rounding": [[230, "rank-rounding"]], "Re-estimate BatchNorm Statistics": [[211, "Re-estimate-BatchNorm-Statistics"]], "References": [[230, "references"]], "Regular AMP": [[194, "Regular-AMP"]], "Release Notes": [[245, "release-notes"]], "Release notes": [[258, null]], "Run QWA-LoRa": [[242, "run-qwa-lora"]], "Running a quick example": [[249, "running-a-quick-example"]], "Running the notebooks": [[189, "running-the-notebooks"]], "Runtime configuration": [[253, "runtime-configuration"], [255, null]], "Sequential MSE": [[235, "sequential-mse"], [243, null]], "Set model input precision": [[238, "set-model-input-precision"]], "Set model output precision": [[238, "set-model-output-precision"]], "Set precision based on layer type": [[238, "set-precision-based-on-layer-type"]], "Set precision of a leaf layer": [[238, "set-precision-of-a-leaf-layer"]], "Set precision of a non-leaf layer": [[238, "set-precision-of-a-non-leaf-layer"]], "Setup": [[217, "setup"], [218, "setup"], [224, "setup"], [226, "setup"], [227, "setup"], [231, "setup"], [233, "setup"], [238, "setup"], [239, "setup"], [241, "setup"], [242, "setup"], [243, "setup"]], "Signal-to-Quantization-Noise": [[253, "signal-to-quantization-noise"]], "Simulate quantization noise": [[253, "simulate-quantization-noise"]], "Spatial SVD": [[230, "spatial-svd"], [231, null]], "Start the docker container": [[247, "start-the-docker-container"]], "Starting a Bokeh server session": [[232, "starting-a-bokeh-server-session"]], "Step 1": [[217, "step-1"], [218, "step-1"], [223, "step-1"], [224, "step-1"], [225, "step-1"], [236, "step-1"], [239, "step-1"], [243, "step-1"]], "Step 1 Importing libraries": [[222, "step-1-importing-libraries"]], "Step 1: Creating a QuantSim model": [[251, "step-1-creating-a-quantsim-model"]], "Step 1: Importing the API": [[221, "step-1-importing-the-api"]], "Step 1: Setup": [[254, "step-1-setup"]], "Step 1: Trying FP16 precision (no quantization)": [[263, "step-1-trying-fp16-precision-no-quantization"]], "Step 2": [[217, "step-2"], [218, "step-2"], [223, "step-2"], [224, "step-2"], [225, "step-2"], [236, "step-2"], [239, "step-2"], [243, "step-2"]], "Step 2 Preparing calibration callback": [[222, "step-2-preparing-calibration-callback"]], "Step 2: Computing the initial quantization parameters": [[254, "step-2-computing-the-initial-quantization-parameters"]], "Step 2: Creating a calibration callback": [[251, "step-2-creating-a-calibration-callback"]], "Step 2: Loading a model": [[221, "step-2-loading-a-model"]], "Step 2: Verifying W16A16 quantization": [[263, "step-2-verifying-w16a16-quantization"]], "Step 3": [[217, "step-3"], [218, "step-3"], [223, "step-3"], [224, "step-3"], [225, "step-3"], [239, "step-3"], [243, "step-3"]], "Step 3 Preparing evaluation callback": [[222, "step-3-preparing-evaluation-callback"]], "Step 3. Reducing precision": [[263, "step-3-reducing-precision"]], "Step 3: Calibrate the quantized model": [[254, "step-3-calibrate-the-quantized-model"]], "Step 3: Computing encodings": [[251, "step-3-computing-encodings"]], "Step 3: Obtaining inputs": [[221, "step-3-obtaining-inputs"]], "Step 4": [[217, "step-4"], [218, "step-4"], [223, "step-4"], [224, "step-4"], [239, "step-4"], [243, "step-4"]], "Step 4 Preparing model": [[222, "step-4-preparing-model"]], "Step 4. Restoring accuracy": [[263, "step-4-restoring-accuracy"]], "Step 4: Evaluating the model": [[254, "step-4-evaluating-the-model"]], "Step 4: Evaluation": [[251, "step-4-evaluation"]], "Step 4: Generating layer outputs": [[221, "step-4-generating-layer-outputs"]], "Step 5": [[218, "step-5"], [223, "step-5"], [239, "step-5"], [243, "step-5"]], "Step 5 Creating QuantAnalyzer": [[222, "step-5-creating-quantanalyzer"]], "Step 5: Exporting the model": [[251, "step-5-exporting-the-model"], [254, "step-5-exporting-the-model"]], "Step 6": [[223, "step-6"]], "Step 6 Running the analysis": [[222, "step-6-running-the-analysis"]], "Step 7": [[223, "step-7"]], "Summary": [[194, "Summary"], [197, "Summary"], [199, "Summary"], [203, "Summary"], [211, "Summary"]], "Supported precisions for on-target inference": [[262, "supported-precisions-for-on-target-inference"]], "Techniques": [[212, "Techniques"]], "TensorFlow model guidelines": [[256, null]], "Terminology": [[178, "terminology"]], "Tested platform": [[249, "tested-platform"]], "Top level structure": [[252, "id2"]], "Training Callback": [[242, "training-callback"]], "Use Case": [[230, "use-case"]], "Use Cases": [[236, "use-cases"]], "User Guide": [[245, "user-guide"]], "User flow": [[178, "user-flow"]], "Verifying the installation": [[246, "verifying-the-installation"], [249, "verifying-the-installation"]], "Visualization Tools": [[168, "visualization-tools"]], "Visualizing compression ratios": [[232, "visualizing-compression-ratios"]], "Weight SVD": [[230, "weight-svd"], [233, null]], "Weight reconstruction": [[227, "weight-reconstruction"]], "What this notebook is not": [[190, "What-this-notebook-is-not"], [194, "What-this-notebook-is-not"], [202, "What-this-notebook-is-not"], [203, "What-this-notebook-is-not"], [208, "What-this-notebook-is-not"], [211, "What-this-notebook-is-not"], [215, "What-this-notebook-is-not"]], "Winnowing": [[227, "winnowing"], [234, null], [234, "id1"]], "Workflow": [[217, "workflow"], [217, "id2"], [218, "workflow"], [220, "workflow"], [221, "workflow"], [222, "workflow"], [223, "workflow"], [224, "workflow"], [225, "workflow"], [226, "workflow"], [227, "workflow"], [231, "workflow"], [233, "workflow"], [236, "workflow"], [238, "workflow"], [239, "workflow"], [241, "workflow"], [242, "workflow"], [243, "workflow"], [251, "workflow"], [254, "workflow"]], "aimet_onnx API": [[5, null]], "aimet_onnx.apply_adaround": [[1, null]], "aimet_onnx.apply_seq_mse": [[10, null]], "aimet_onnx.batch_norm_fold": [[3, null]], "aimet_onnx.cross_layer_equalization": [[4, null]], "aimet_onnx.layer_output_utils": [[6, null]], "aimet_onnx.mixed_precision": [[2, null]], "aimet_onnx.quant_analyzer": [[8, null]], "aimet_onnx.quantsim": [[9, null]], "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights": [[7, null]], "aimet_tensorflow API": [[18, null]], "aimet_tensorflow.adaround": [[11, null]], "aimet_tensorflow.auto_quant_v2": [[13, null]], "aimet_tensorflow.batch_norm_fold": [[15, null]], "aimet_tensorflow.compress": [[17, null]], "aimet_tensorflow.cross_layer_equalization": [[16, null]], "aimet_tensorflow.keras.bn_reestimation": [[14, null]], "aimet_tensorflow.layer_output_utils": [[19, null]], "aimet_tensorflow.mixed_precision": [[12, null]], "aimet_tensorflow.model_preparer": [[20, null]], "aimet_tensorflow.quant_analyzer": [[21, null]], "aimet_tensorflow.quantsim": [[22, null]], "aimet_torch": [[167, "aimet-torch"]], "aimet_torch 1.x vs aimet_torch 2": [[171, "aimet-torch-1-x-vs-aimet-torch-2"]], "aimet_torch API": [[167, null]], "aimet_torch.adaround": [[23, null]], "aimet_torch.auto_quant": [[25, null]], "aimet_torch.batch_norm_fold": [[27, null]], "aimet_torch.bn_reestimation": [[26, null]], "aimet_torch.compress": [[29, null]], "aimet_torch.cross_layer_equalization": [[28, null]], "aimet_torch.experimental.adascale": [[24, null]], "aimet_torch.experimental.omniquant": [[176, null]], "aimet_torch.layer_output_utils": [[169, null]], "aimet_torch.mixed_precision": [[174, null]], "aimet_torch.model_preparer": [[172, null]], "aimet_torch.model_validator": [[173, null]], "aimet_torch.nn": [[175, null]], "aimet_torch.onnx.export (beta)": [[177, null]], "aimet_torch.peft": [[178, null]], "aimet_torch.quant_analyzer": [[179, null]], "aimet_torch.quantization": [[180, null]], "aimet_torch.quantsim": [[181, null]], "aimet_torch.quantsim.config_utils": [[170, null]], "aimet_torch.seq_mse": [[182, null]], "aimet_torch.v1": [[167, "aimet-torch-v1"]], "aimet_torch.v1.adaround": [[183, null]], "aimet_torch.v1.auto_quant": [[185, null]], "aimet_torch.v1.mixed_precision": [[184, null]], "aimet_torch.v1.quant_analyzer": [[186, null]], "aimet_torch.v1.quantsim": [[187, null]], "aimet_torch.v1.seq_mse": [[188, null]], "aimet_torch.visualization_tools": [[168, null]], "dequantize": [[163, null]], "quantize": [[164, null]], "quantize_dequantize": [[165, null]]}, "docnames": ["apiref/index", "apiref/onnx/adaround", "apiref/onnx/amp", "apiref/onnx/bnf", "apiref/onnx/cle", "apiref/onnx/index", "apiref/onnx/layer_output_generation", "apiref/onnx/lpbq", "apiref/onnx/quant_analyzer", "apiref/onnx/quantsim", "apiref/onnx/seq_mse", "apiref/tensorflow/adaround", "apiref/tensorflow/amp", "apiref/tensorflow/autoquant", "apiref/tensorflow/bn", "apiref/tensorflow/bnf", "apiref/tensorflow/cle", "apiref/tensorflow/compress", "apiref/tensorflow/index", "apiref/tensorflow/layer_output_generation", "apiref/tensorflow/model_preparer", "apiref/tensorflow/quant_analyzer", "apiref/tensorflow/quantsim", "apiref/torch/adaround", "apiref/torch/adascale", "apiref/torch/autoquant", "apiref/torch/bn", "apiref/torch/bnf", "apiref/torch/cle", "apiref/torch/compress", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d", "apiref/torch/generated/aimet_torch.nn.QuantizedELU", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten", "apiref/torch/generated/aimet_torch.nn.QuantizedFold", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMish", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize", "apiref/torch/index", "apiref/torch/interactive_visualization", "apiref/torch/layer_output_generation", "apiref/torch/lpbq", "apiref/torch/migration_guide", "apiref/torch/model_preparer", "apiref/torch/model_validator", "apiref/torch/mp", "apiref/torch/nn", "apiref/torch/omniquant", "apiref/torch/onnx", "apiref/torch/peft_lora", "apiref/torch/quant_analyzer", "apiref/torch/quantization", "apiref/torch/quantsim", "apiref/torch/seq_mse", "apiref/torch/v1/adaround", "apiref/torch/v1/amp", "apiref/torch/v1/autoquant", "apiref/torch/v1/quant_analyzer", "apiref/torch/v1/quantsim", "apiref/torch/v1/seq_mse", "examples/index", "examples/onnx/quantization/AMP", "examples/onnx/quantization/adaround", "examples/onnx/quantization/cle", "examples/onnx/quantization/quantsim", "examples/tensorflow/quantization/keras/KerasAMP", "examples/tensorflow/quantization/keras/adaround", "examples/tensorflow/quantization/keras/autoquant", "examples/tensorflow/quantization/keras/bn_reestimation", "examples/tensorflow/quantization/keras/keras_transformer_qat", "examples/tensorflow/quantization/keras/model_preparer", "examples/tensorflow/quantization/keras/qat", "examples/tensorflow/quantization/keras/qat_range_learning", "examples/tensorflow/quantization/keras/quant_analyzer", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq", "examples/tensorflow/quantization/keras/quantsim_cle", "examples/torch/compression/channel_pruning", "examples/torch/compression/spatial_svd", "examples/torch/compression/spatial_svd_channel_pruning", "examples/torch/quantization/AMP", "examples/torch/quantization/adaround", "examples/torch/quantization/autoquant", "examples/torch/quantization/bn_reestimation", "examples/torch/quantization/cle_bc", "examples/torch/quantization/qat", "examples/torch/quantization/qat_range_learning", "examples/torch/quantization/quant_analyzer", "external/index", "featureguide/adaround", "featureguide/adascale", "featureguide/analysis tools/index", "featureguide/analysis tools/interactive_visualization", "featureguide/analysis tools/layer_output_generation", "featureguide/analysis tools/quant_analyzer", "featureguide/autoquant", "featureguide/bn", "featureguide/bnf", "featureguide/cle", "featureguide/compression/channel_pruning", "featureguide/compression/feature_guidebook", "featureguide/compression/greedy_compression_ratio_selection", "featureguide/compression/index", "featureguide/compression/spatial_svd", "featureguide/compression/visualization_compression", "featureguide/compression/weight_svd", "featureguide/compression/winnowing", "featureguide/index", "featureguide/mixed precision/amp", "featureguide/mixed precision/index", "featureguide/mixed precision/mmp", "featureguide/omniquant", "featureguide/quantized LoRa/index", "featureguide/quantized LoRa/qw_lora", "featureguide/quantized LoRa/qwa_lora", "featureguide/seq_mse", "glossary", "index", "install/index", "install/install_docker", "install/install_host", "install/quick-start", "quantsim/blockwise", "quantsim/calibration", "quantsim/encoding_spec", "quantsim/index", "quantsim/qat", "quantsim/runtime_config", "quantsim/tensorflow/model_guidelines", "quantsim/torch/model_guidelines", "release_notes", "userguide/debugging_guidelines", "userguide/index", "userguide/on_target_inference", "userguide/quantization_tools", "userguide/quantization_workflow", "versions"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["apiref/index.rst", "apiref/onnx/adaround.rst", "apiref/onnx/amp.rst", "apiref/onnx/bnf.rst", "apiref/onnx/cle.rst", "apiref/onnx/index.rst", "apiref/onnx/layer_output_generation.rst", "apiref/onnx/lpbq.rst", "apiref/onnx/quant_analyzer.rst", "apiref/onnx/quantsim.rst", "apiref/onnx/seq_mse.rst", "apiref/tensorflow/adaround.rst", "apiref/tensorflow/amp.rst", "apiref/tensorflow/autoquant.rst", "apiref/tensorflow/bn.rst", "apiref/tensorflow/bnf.rst", "apiref/tensorflow/cle.rst", "apiref/tensorflow/compress.rst", "apiref/tensorflow/index.rst", "apiref/tensorflow/layer_output_generation.rst", "apiref/tensorflow/model_preparer.rst", "apiref/tensorflow/quant_analyzer.rst", "apiref/tensorflow/quantsim.rst", "apiref/torch/adaround.rst", "apiref/torch/adascale.rst", "apiref/torch/autoquant.rst", "apiref/torch/bn.rst", "apiref/torch/bnf.rst", "apiref/torch/cle.rst", "apiref/torch/compress.rst", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d.rst", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase.rst", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize.rst", "apiref/torch/index.rst", "apiref/torch/interactive_visualization.rst", "apiref/torch/layer_output_generation.rst", "apiref/torch/lpbq.rst", "apiref/torch/migration_guide.rst", "apiref/torch/model_preparer.rst", "apiref/torch/model_validator.rst", "apiref/torch/mp.rst", "apiref/torch/nn.rst", "apiref/torch/omniquant.rst", "apiref/torch/onnx.rst", "apiref/torch/peft_lora.rst", "apiref/torch/quant_analyzer.rst", "apiref/torch/quantization.rst", "apiref/torch/quantsim.rst", "apiref/torch/seq_mse.rst", "apiref/torch/v1/adaround.rst", "apiref/torch/v1/amp.rst", "apiref/torch/v1/autoquant.rst", "apiref/torch/v1/quant_analyzer.rst", "apiref/torch/v1/quantsim.rst", "apiref/torch/v1/seq_mse.rst", "examples/index.rst", "examples/onnx/quantization/AMP.ipynb", "examples/onnx/quantization/adaround.ipynb", "examples/onnx/quantization/cle.ipynb", "examples/onnx/quantization/quantsim.ipynb", "examples/tensorflow/quantization/keras/KerasAMP.ipynb", "examples/tensorflow/quantization/keras/adaround.ipynb", "examples/tensorflow/quantization/keras/autoquant.ipynb", "examples/tensorflow/quantization/keras/bn_reestimation.ipynb", "examples/tensorflow/quantization/keras/keras_transformer_qat.ipynb", "examples/tensorflow/quantization/keras/model_preparer.ipynb", "examples/tensorflow/quantization/keras/qat.ipynb", "examples/tensorflow/quantization/keras/qat_range_learning.ipynb", "examples/tensorflow/quantization/keras/quant_analyzer.ipynb", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq.ipynb", "examples/tensorflow/quantization/keras/quantsim_cle.ipynb", "examples/torch/compression/channel_pruning.ipynb", "examples/torch/compression/spatial_svd.ipynb", "examples/torch/compression/spatial_svd_channel_pruning.ipynb", "examples/torch/quantization/AMP.ipynb", "examples/torch/quantization/adaround.ipynb", "examples/torch/quantization/autoquant.ipynb", "examples/torch/quantization/bn_reestimation.ipynb", "examples/torch/quantization/cle_bc.ipynb", "examples/torch/quantization/qat.ipynb", "examples/torch/quantization/qat_range_learning.ipynb", "examples/torch/quantization/quant_analyzer.ipynb", "external/index.rst", "featureguide/adaround.rst", "featureguide/adascale.rst", "featureguide/analysis tools/index.rst", "featureguide/analysis tools/interactive_visualization.rst", "featureguide/analysis tools/layer_output_generation.rst", "featureguide/analysis tools/quant_analyzer.rst", "featureguide/autoquant.rst", "featureguide/bn.rst", "featureguide/bnf.rst", "featureguide/cle.rst", "featureguide/compression/channel_pruning.rst", "featureguide/compression/feature_guidebook.rst", "featureguide/compression/greedy_compression_ratio_selection.rst", "featureguide/compression/index.rst", "featureguide/compression/spatial_svd.rst", "featureguide/compression/visualization_compression.rst", "featureguide/compression/weight_svd.rst", "featureguide/compression/winnowing.rst", "featureguide/index.rst", "featureguide/mixed precision/amp.rst", "featureguide/mixed precision/index.rst", "featureguide/mixed precision/mmp.rst", "featureguide/omniquant.rst", "featureguide/quantized LoRa/index.rst", "featureguide/quantized LoRa/qw_lora.rst", "featureguide/quantized LoRa/qwa_lora.rst", "featureguide/seq_mse.rst", "glossary.rst", "index.rst", "install/index.rst", "install/install_docker.rst", "install/install_host.rst", "install/quick-start.rst", "quantsim/blockwise.rst", "quantsim/calibration.rst", "quantsim/encoding_spec.rst", "quantsim/index.rst", "quantsim/qat.rst", "quantsim/runtime_config.rst", "quantsim/tensorflow/model_guidelines.rst", "quantsim/torch/model_guidelines.rst", "release_notes.rst", "userguide/debugging_guidelines.rst", "userguide/index.rst", "userguide/on_target_inference.rst", "userguide/quantization_tools.rst", "userguide/quantization_workflow.rst", "versions.rst"], "indexentries": {"accelerator": [[244, "term-Accelerator", true]], "accuracy": [[244, "term-Accuracy", true]], "activation": [[244, "term-Activation", true]], "activation quantization": [[244, "term-Activation-Quantization", true]], "adaround": [[244, "term-AdaRound", true]], "adaroundparameters (class in aimet_tensorflow.keras.adaround_weight)": [[11, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false], [217, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.adaround.adaround_weight)": [[23, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false], [217, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.v1.adaround.adaround_weight)": [[183, "aimet_torch.v1.adaround.adaround_weight.AdaroundParameters", false]], "add_check() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.add_check", false]], "ai model efficiency toolkit": [[244, "term-AI-Model-Efficiency-Toolkit", true]], "aimet": [[244, "term-AIMET", true]], "analyze() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false], [222, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.analyze", false]], "apply() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false], [238, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false]], "apply_adaround() (in module aimet_onnx)": [[1, "aimet_onnx.apply_adaround", false], [217, "aimet_onnx.apply_adaround", false]], "apply_adaround() (in module aimet_tensorflow.keras.adaround_weight.adaround)": [[11, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false], [217, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.adaround.adaround_weight.adaround)": [[23, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false], [217, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.v1.adaround.adaround_weight.adaround)": [[183, "aimet_torch.v1.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adascale() (in module aimet_torch.experimental.adascale)": [[24, "aimet_torch.experimental.adascale.apply_adascale", false], [218, "aimet_torch.experimental.adascale.apply_adascale", false]], "apply_omniquant() (in module aimet_torch.experimental.omniquant)": [[176, "aimet_torch.experimental.omniquant.apply_omniquant", false], [239, "aimet_torch.experimental.omniquant.apply_omniquant", false]], "apply_seq_mse() (in module aimet_onnx)": [[10, "aimet_onnx.apply_seq_mse", false], [243, "aimet_onnx.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.seq_mse)": [[182, "aimet_torch.seq_mse.apply_seq_mse", false], [243, "aimet_torch.seq_mse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.v1.seq_mse)": [[188, "aimet_torch.v1.seq_mse.apply_seq_mse", false]], "auto (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false], [231, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false]], "autoquant": [[244, "term-AutoQuant", true]], "autoquantwithautomixedprecision (class in aimet_tensorflow.keras.auto_quant_v2)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false]], "batch normalization": [[244, "term-Batch-Normalization", true]], "batch normalization folding (bn folding)": [[244, "term-Batch-Normalization-Folding-BN-Folding", true]], "bitwidth (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.bitwidth", false]], "bn": [[244, "term-BN", true]], "callbackfunc (class in aimet_common.defs)": [[2, "aimet_common.defs.CallbackFunc", false], [12, "aimet_common.defs.CallbackFunc", false], [174, "aimet_common.defs.CallbackFunc", false], [184, "aimet_common.defs.CallbackFunc", false], [236, "aimet_common.defs.CallbackFunc", false], [236, "id0", false], [236, "id1", false]], "callbackfunc (class in aimet_common.utils)": [[179, "aimet_common.utils.CallbackFunc", false], [186, "aimet_common.utils.CallbackFunc", false], [222, "aimet_common.utils.CallbackFunc", false]], "check_model_sensitivity_to_quantization() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "check_model_sensitivity_to_quantization() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "choose_fast_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false], [236, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false]], "choose_mixed_precision() (in module aimet_onnx.mixed_precision)": [[2, "aimet_onnx.mixed_precision.choose_mixed_precision", false], [236, "aimet_onnx.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false], [236, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.mixed_precision)": [[174, "aimet_torch.mixed_precision.choose_mixed_precision", false], [236, "aimet_torch.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.v1.mixed_precision)": [[184, "aimet_torch.v1.mixed_precision.choose_mixed_precision", false]], "clone() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.clone", false]], "cnn": [[244, "term-CNN", true]], "compress_model() (aimet_tensorflow.keras.compress.modelcompressor static method)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false], [231, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false]], "compression": [[244, "term-Compression", true]], "compute_encodings() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.compute_encodings", false]], "compute_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.compute_encodings", false]], "compute_encodings() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (in module aimet_onnx)": [[9, "aimet_onnx.compute_encodings", false]], "convolutional layer": [[244, "term-Convolutional-Layer", true]], "convolutional neural network": [[244, "term-Convolutional-Neural-Network", true]], "dequantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.dequantize", false]], "dequantize() (in module aimet_torch.quantization.affine)": [[163, "aimet_torch.quantization.affine.dequantize", false]], "dequantizedtensor (class in aimet_torch.quantization)": [[158, "aimet_torch.quantization.DequantizedTensor", false]], "detach() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.detach", false]], "device": [[244, "term-Device", true]], "dlf": [[244, "term-DLF", true]], "dynamic layer fusion": [[244, "term-Dynamic-Layer-Fusion", true]], "edge device": [[244, "term-Edge-device", true]], "enable_per_layer_mse_loss() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false], [222, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false]], "encoding": [[244, "term-Encoding", true]], "equalize_model() (in module aimet_onnx.cross_layer_equalization)": [[4, "aimet_onnx.cross_layer_equalization.equalize_model", false], [226, "aimet_onnx.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_tensorflow.keras.cross_layer_equalization)": [[16, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false], [226, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_torch.cross_layer_equalization)": [[28, "aimet_torch.cross_layer_equalization.equalize_model", false], [226, "aimet_torch.cross_layer_equalization.equalize_model", false]], "evalcallbackfactory (class in aimet_onnx.amp.mixed_precision_algo)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false], [236, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false]], "evalcallbackfactory (class in aimet_torch.amp.mixed_precision_algo)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [184, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [236, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false]], "exponent_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.exponent_bits", false]], "export() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.export", false]], "export() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.export", false]], "export() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.export", false]], "export() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel.export", false]], "export() (in module aimet_torch.onnx)": [[177, "aimet_torch.onnx.export", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_mse_loss() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_mse_loss() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_stats_histogram() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "export_per_layer_stats_histogram() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "floatquantizedequantize (class in aimet_torch.quantization.float)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize", false]], "fold_all_batch_norms() (in module aimet_tensorflow.keras.batch_norm_fold)": [[15, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false], [225, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms() (in module aimet_torch.batch_norm_fold)": [[27, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false], [225, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms_to_scale() (in module aimet_tensorflow.keras.batch_norm_fold)": [[14, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false], [224, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false]], "fold_all_batch_norms_to_weight() (in module aimet_onnx.batch_norm_fold)": [[3, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false], [225, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false]], "forward() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.forward", false]], "forward() (aimet_torch.nn.quantizedlinear method)": [[100, "aimet_torch.nn.QuantizedLinear.forward", false]], "forward() (aimet_torch.quantization.affine.quantize method)": [[161, "aimet_torch.quantization.affine.Quantize.forward", false]], "forward() (aimet_torch.quantization.affine.quantizedequantize method)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize.forward", false]], "forward() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.forward", false]], "forward_fn() (aimet_torch.seq_mse.seqmseparams method)": [[182, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false], [243, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false]], "forward_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams.forward_fn", false]], "fp32": [[244, "term-FP32", true]], "from_encodings() (aimet_torch.quantization.float.floatquantizedequantize class method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.from_encodings", false]], "from_module() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.from_module", false]], "from_str() (aimet_common.defs.quantscheme class method)": [[9, "aimet_common.defs.QuantScheme.from_str", false], [22, "aimet_common.defs.QuantScheme.from_str", false], [181, "aimet_common.defs.QuantScheme.from_str", false], [187, "aimet_common.defs.QuantScheme.from_str", false]], "generate_layer_outputs() (aimet_onnx.layer_output_utils.layeroutpututil method)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [221, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_tensorflow.keras.layer_output_utils.layeroutpututil method)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [221, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_torch.layer_output_utils.layeroutpututil method)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [221, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "get_activation_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false]], "get_active_param_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false]], "get_active_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [236, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [236, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.get_default_kernel", false]], "get_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_encodings", false]], "get_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_extra_state", false]], "get_input_quantizer_modules() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [236, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false]], "get_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.get_kernel", false]], "get_loss_fn() (aimet_torch.seq_mse.seqmseparams method)": [[182, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false], [243, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false]], "get_loss_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams.get_loss_fn", false]], "get_param_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false]], "get_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false]], "greedyselectionparameters (class in aimet_common.defs)": [[17, "aimet_common.defs.GreedySelectionParameters", false], [231, "aimet_common.defs.GreedySelectionParameters", false]], "implements() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.implements", false]], "inference": [[244, "term-Inference", true]], "input_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.input_quantizers", false]], "int8": [[244, "term-INT8", true]], "is_bfloat16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_bfloat16", false]], "is_float16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_float16", false]], "kl divergence": [[244, "term-KL-Divergence", true]], "layer": [[244, "term-Layer", true]], "layer-wise quantization": [[244, "term-Layer-wise-quantization", true]], "layeroutpututil (class in aimet_onnx.layer_output_utils)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil", false], [221, "aimet_onnx.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_tensorflow.keras.layer_output_utils)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false], [221, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil", false], [221, "aimet_torch.layer_output_utils.LayerOutputUtil", false]], "load_checkpoint() (aimet_torch.v1.quantsim method)": [[187, "aimet_torch.v1.quantsim.load_checkpoint", false]], "load_state_dict() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.load_state_dict", false]], "lookup_quantizer() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup static method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false]], "lora mobilenet": [[244, "term-LoRA-MobileNet", true]], "mantissa_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.mantissa_bits", false]], "manual (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false], [231, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false]], "mixedprecisionconfigurator (class in aimet_torch.v2.mixed_precision)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false], [238, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false]], "model": [[244, "term-Model", true]], "modelcompressor (class in aimet_tensorflow.keras.compress)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor", false], [231, "aimet_tensorflow.keras.compress.ModelCompressor", false]], "modelvalidator (class in aimet_torch.model_validator.model_validator)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator", false]], "namingscheme (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.NamingScheme", false], [221, "aimet_torch.layer_output_utils.NamingScheme", false]], "neural network compression framework": [[244, "term-Neural-Network-Compression-Framework", true]], "new_empty() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.new_empty", false]], "nncf": [[244, "term-NNCF", true]], "node": [[244, "term-Node", true]], "normalization": [[244, "term-Normalization", true]], "onnx": [[244, "term-ONNX", true]], "onnx (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false], [221, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false]], "open neural network exchange": [[244, "term-Open-Neural-Network-Exchange", true]], "optimize() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false]], "output_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.output_quantizers", false]], "param_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.param_quantizers", false]], "per-channel quantization": [[244, "term-Per-channel-Quantization", true]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "post-training quantization": [[244, "term-Post-Training-Quantization", true]], "prepare_model() (in module aimet_tensorflow.keras.model_preparer)": [[20, "aimet_tensorflow.keras.model_preparer.prepare_model", false]], "prepare_model() (in module aimet_torch.model_preparer)": [[172, "aimet_torch.model_preparer.prepare_model", false]], "pruning": [[244, "term-Pruning", true]], "ptq": [[244, "term-PTQ", true]], "pytorch": [[244, "term-PyTorch", true]], "pytorch (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false], [221, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false]], "qat": [[244, "term-QAT", true]], "qdo": [[244, "term-QDO", true]], "qualcomm innovation center": [[244, "term-Qualcomm-Innovation-Center", true]], "quantanalyzer (class in aimet_onnx.quant_analyzer)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer", false], [222, "aimet_onnx.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.quant_analyzer)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer", false], [222, "aimet_torch.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.v1.quant_analyzer)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer", false]], "quantization": [[244, "term-Quantization", true]], "quantization simulation": [[244, "term-Quantization-Simulation", true]], "quantization-aware training": [[244, "term-Quantization-Aware-Training", true]], "quantizationmixin (class in aimet_torch.nn)": [[30, "aimet_torch.nn.QuantizationMixin", false]], "quantizationsimmodel (class in aimet_onnx)": [[9, "aimet_onnx.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_tensorflow.keras.quantsim)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch)": [[181, "aimet_torch.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch.v1.quantsim)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel", false]], "quantize (class in aimet_torch.quantization.affine)": [[161, "aimet_torch.quantization.affine.Quantize", false]], "quantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantize", false]], "quantize() (in module aimet_torch.quantization.affine)": [[164, "aimet_torch.quantization.affine.quantize", false]], "quantize_dequantize() (in module aimet_torch.quantization.affine)": [[165, "aimet_torch.quantization.affine.quantize_dequantize", false]], "quantized_repr() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantized_repr", false]], "quantizedadaptiveavgpool1d (class in aimet_torch.nn)": [[31, "aimet_torch.nn.QuantizedAdaptiveAvgPool1d", false]], "quantizedadaptiveavgpool2d (class in aimet_torch.nn)": [[32, "aimet_torch.nn.QuantizedAdaptiveAvgPool2d", false]], "quantizedadaptiveavgpool3d (class in aimet_torch.nn)": [[33, "aimet_torch.nn.QuantizedAdaptiveAvgPool3d", false]], "quantizedadaptivemaxpool1d (class in aimet_torch.nn)": [[34, "aimet_torch.nn.QuantizedAdaptiveMaxPool1d", false]], "quantizedadaptivemaxpool2d (class in aimet_torch.nn)": [[35, "aimet_torch.nn.QuantizedAdaptiveMaxPool2d", false]], "quantizedadaptivemaxpool3d (class in aimet_torch.nn)": [[36, "aimet_torch.nn.QuantizedAdaptiveMaxPool3d", false]], "quantizedalphadropout (class in aimet_torch.nn)": [[37, "aimet_torch.nn.QuantizedAlphaDropout", false]], "quantizedavgpool1d (class in aimet_torch.nn)": [[38, "aimet_torch.nn.QuantizedAvgPool1d", false]], "quantizedavgpool2d (class in aimet_torch.nn)": [[39, "aimet_torch.nn.QuantizedAvgPool2d", false]], "quantizedavgpool3d (class in aimet_torch.nn)": [[40, "aimet_torch.nn.QuantizedAvgPool3d", false]], "quantizedbatchnorm1d (class in aimet_torch.nn)": [[43, "aimet_torch.nn.QuantizedBatchNorm1d", false]], "quantizedbatchnorm2d (class in aimet_torch.nn)": [[44, "aimet_torch.nn.QuantizedBatchNorm2d", false]], "quantizedbatchnorm3d (class in aimet_torch.nn)": [[45, "aimet_torch.nn.QuantizedBatchNorm3d", false]], "quantizedbceloss (class in aimet_torch.nn)": [[41, "aimet_torch.nn.QuantizedBCELoss", false]], "quantizedbcewithlogitsloss (class in aimet_torch.nn)": [[42, "aimet_torch.nn.QuantizedBCEWithLogitsLoss", false]], "quantizedbilinear (class in aimet_torch.nn)": [[46, "aimet_torch.nn.QuantizedBilinear", false]], "quantizedcelu (class in aimet_torch.nn)": [[47, "aimet_torch.nn.QuantizedCELU", false]], "quantizedchannelshuffle (class in aimet_torch.nn)": [[49, "aimet_torch.nn.QuantizedChannelShuffle", false]], "quantizedcircularpad1d (class in aimet_torch.nn)": [[50, "aimet_torch.nn.QuantizedCircularPad1d", false]], "quantizedcircularpad2d (class in aimet_torch.nn)": [[51, "aimet_torch.nn.QuantizedCircularPad2d", false]], "quantizedcircularpad3d (class in aimet_torch.nn)": [[52, "aimet_torch.nn.QuantizedCircularPad3d", false]], "quantizedconstantpad1d (class in aimet_torch.nn)": [[53, "aimet_torch.nn.QuantizedConstantPad1d", false]], "quantizedconstantpad2d (class in aimet_torch.nn)": [[54, "aimet_torch.nn.QuantizedConstantPad2d", false]], "quantizedconstantpad3d (class in aimet_torch.nn)": [[55, "aimet_torch.nn.QuantizedConstantPad3d", false]], "quantizedconv1d (class in aimet_torch.nn)": [[56, "aimet_torch.nn.QuantizedConv1d", false]], "quantizedconv2d (class in aimet_torch.nn)": [[57, "aimet_torch.nn.QuantizedConv2d", false]], "quantizedconv3d (class in aimet_torch.nn)": [[58, "aimet_torch.nn.QuantizedConv3d", false]], "quantizedconvtranspose1d (class in aimet_torch.nn)": [[59, "aimet_torch.nn.QuantizedConvTranspose1d", false]], "quantizedconvtranspose2d (class in aimet_torch.nn)": [[60, "aimet_torch.nn.QuantizedConvTranspose2d", false]], "quantizedconvtranspose3d (class in aimet_torch.nn)": [[61, "aimet_torch.nn.QuantizedConvTranspose3d", false]], "quantizedcosineembeddingloss (class in aimet_torch.nn)": [[62, "aimet_torch.nn.QuantizedCosineEmbeddingLoss", false]], "quantizedcosinesimilarity (class in aimet_torch.nn)": [[63, "aimet_torch.nn.QuantizedCosineSimilarity", false]], "quantizedcrossentropyloss (class in aimet_torch.nn)": [[64, "aimet_torch.nn.QuantizedCrossEntropyLoss", false]], "quantizedctcloss (class in aimet_torch.nn)": [[48, "aimet_torch.nn.QuantizedCTCLoss", false]], "quantizeddropout (class in aimet_torch.nn)": [[65, "aimet_torch.nn.QuantizedDropout", false]], "quantizeddropout1d (class in aimet_torch.nn)": [[66, "aimet_torch.nn.QuantizedDropout1d", false]], "quantizeddropout2d (class in aimet_torch.nn)": [[67, "aimet_torch.nn.QuantizedDropout2d", false]], "quantizeddropout3d (class in aimet_torch.nn)": [[68, "aimet_torch.nn.QuantizedDropout3d", false]], "quantizedelu (class in aimet_torch.nn)": [[69, "aimet_torch.nn.QuantizedELU", false]], "quantizedembedding (class in aimet_torch.nn)": [[70, "aimet_torch.nn.QuantizedEmbedding", false]], "quantizedembeddingbag (class in aimet_torch.nn)": [[71, "aimet_torch.nn.QuantizedEmbeddingBag", false]], "quantizedequantize (class in aimet_torch.quantization.affine)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize", false]], "quantizedfeaturealphadropout (class in aimet_torch.nn)": [[72, "aimet_torch.nn.QuantizedFeatureAlphaDropout", false]], "quantizedflatten (class in aimet_torch.nn)": [[73, "aimet_torch.nn.QuantizedFlatten", false]], "quantizedfold (class in aimet_torch.nn)": [[74, "aimet_torch.nn.QuantizedFold", false]], "quantizedfractionalmaxpool2d (class in aimet_torch.nn)": [[75, "aimet_torch.nn.QuantizedFractionalMaxPool2d", false]], "quantizedfractionalmaxpool3d (class in aimet_torch.nn)": [[76, "aimet_torch.nn.QuantizedFractionalMaxPool3d", false]], "quantizedgaussiannllloss (class in aimet_torch.nn)": [[81, "aimet_torch.nn.QuantizedGaussianNLLLoss", false]], "quantizedgelu (class in aimet_torch.nn)": [[77, "aimet_torch.nn.QuantizedGELU", false]], "quantizedglu (class in aimet_torch.nn)": [[78, "aimet_torch.nn.QuantizedGLU", false]], "quantizedgroupnorm (class in aimet_torch.nn)": [[82, "aimet_torch.nn.QuantizedGroupNorm", false]], "quantizedgru (class in aimet_torch.nn)": [[79, "aimet_torch.nn.QuantizedGRU", false]], "quantizedgrucell (class in aimet_torch.nn)": [[80, "aimet_torch.nn.QuantizedGRUCell", false]], "quantizedhardshrink (class in aimet_torch.nn)": [[83, "aimet_torch.nn.QuantizedHardshrink", false]], "quantizedhardsigmoid (class in aimet_torch.nn)": [[84, "aimet_torch.nn.QuantizedHardsigmoid", false]], "quantizedhardswish (class in aimet_torch.nn)": [[85, "aimet_torch.nn.QuantizedHardswish", false]], "quantizedhardtanh (class in aimet_torch.nn)": [[86, "aimet_torch.nn.QuantizedHardtanh", false]], "quantizedhingeembeddingloss (class in aimet_torch.nn)": [[87, "aimet_torch.nn.QuantizedHingeEmbeddingLoss", false]], "quantizedhuberloss (class in aimet_torch.nn)": [[88, "aimet_torch.nn.QuantizedHuberLoss", false]], "quantizedinstancenorm1d (class in aimet_torch.nn)": [[89, "aimet_torch.nn.QuantizedInstanceNorm1d", false]], "quantizedinstancenorm2d (class in aimet_torch.nn)": [[90, "aimet_torch.nn.QuantizedInstanceNorm2d", false]], "quantizedinstancenorm3d (class in aimet_torch.nn)": [[91, "aimet_torch.nn.QuantizedInstanceNorm3d", false]], "quantizedkldivloss (class in aimet_torch.nn)": [[92, "aimet_torch.nn.QuantizedKLDivLoss", false]], "quantizedl1loss (class in aimet_torch.nn)": [[93, "aimet_torch.nn.QuantizedL1Loss", false]], "quantizedlayernorm (class in aimet_torch.nn)": [[98, "aimet_torch.nn.QuantizedLayerNorm", false]], "quantizedleakyrelu (class in aimet_torch.nn)": [[99, "aimet_torch.nn.QuantizedLeakyReLU", false]], "quantizedlinear (class in aimet_torch.nn)": [[100, "aimet_torch.nn.QuantizedLinear", false]], "quantizedlocalresponsenorm (class in aimet_torch.nn)": [[101, "aimet_torch.nn.QuantizedLocalResponseNorm", false]], "quantizedlogsigmoid (class in aimet_torch.nn)": [[102, "aimet_torch.nn.QuantizedLogSigmoid", false]], "quantizedlogsoftmax (class in aimet_torch.nn)": [[103, "aimet_torch.nn.QuantizedLogSoftmax", false]], "quantizedlppool1d (class in aimet_torch.nn)": [[94, "aimet_torch.nn.QuantizedLPPool1d", false]], "quantizedlppool2d (class in aimet_torch.nn)": [[95, "aimet_torch.nn.QuantizedLPPool2d", false]], "quantizedlstm (class in aimet_torch.nn)": [[96, "aimet_torch.nn.QuantizedLSTM", false]], "quantizedlstmcell (class in aimet_torch.nn)": [[97, "aimet_torch.nn.QuantizedLSTMCell", false]], "quantizedmarginrankingloss (class in aimet_torch.nn)": [[105, "aimet_torch.nn.QuantizedMarginRankingLoss", false]], "quantizedmaxpool1d (class in aimet_torch.nn)": [[106, "aimet_torch.nn.QuantizedMaxPool1d", false]], "quantizedmaxpool2d (class in aimet_torch.nn)": [[107, "aimet_torch.nn.QuantizedMaxPool2d", false]], "quantizedmaxpool3d (class in aimet_torch.nn)": [[108, "aimet_torch.nn.QuantizedMaxPool3d", false]], "quantizedmaxunpool1d (class in aimet_torch.nn)": [[109, "aimet_torch.nn.QuantizedMaxUnpool1d", false]], "quantizedmaxunpool2d (class in aimet_torch.nn)": [[110, "aimet_torch.nn.QuantizedMaxUnpool2d", false]], "quantizedmaxunpool3d (class in aimet_torch.nn)": [[111, "aimet_torch.nn.QuantizedMaxUnpool3d", false]], "quantizedmish (class in aimet_torch.nn)": [[112, "aimet_torch.nn.QuantizedMish", false]], "quantizedmseloss (class in aimet_torch.nn)": [[104, "aimet_torch.nn.QuantizedMSELoss", false]], "quantizedmultilabelmarginloss (class in aimet_torch.nn)": [[113, "aimet_torch.nn.QuantizedMultiLabelMarginLoss", false]], "quantizedmultilabelsoftmarginloss (class in aimet_torch.nn)": [[114, "aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", false]], "quantizedmultimarginloss (class in aimet_torch.nn)": [[115, "aimet_torch.nn.QuantizedMultiMarginLoss", false]], "quantizednllloss (class in aimet_torch.nn)": [[116, "aimet_torch.nn.QuantizedNLLLoss", false]], "quantizednllloss2d (class in aimet_torch.nn)": [[117, "aimet_torch.nn.QuantizedNLLLoss2d", false]], "quantizedpairwisedistance (class in aimet_torch.nn)": [[119, "aimet_torch.nn.QuantizedPairwiseDistance", false]], "quantizedpixelshuffle (class in aimet_torch.nn)": [[120, "aimet_torch.nn.QuantizedPixelShuffle", false]], "quantizedpixelunshuffle (class in aimet_torch.nn)": [[121, "aimet_torch.nn.QuantizedPixelUnshuffle", false]], "quantizedpoissonnllloss (class in aimet_torch.nn)": [[122, "aimet_torch.nn.QuantizedPoissonNLLLoss", false]], "quantizedprelu (class in aimet_torch.nn)": [[118, "aimet_torch.nn.QuantizedPReLU", false]], "quantizedreflectionpad1d (class in aimet_torch.nn)": [[128, "aimet_torch.nn.QuantizedReflectionPad1d", false]], "quantizedreflectionpad2d (class in aimet_torch.nn)": [[129, "aimet_torch.nn.QuantizedReflectionPad2d", false]], "quantizedreflectionpad3d (class in aimet_torch.nn)": [[130, "aimet_torch.nn.QuantizedReflectionPad3d", false]], "quantizedrelu (class in aimet_torch.nn)": [[126, "aimet_torch.nn.QuantizedReLU", false]], "quantizedrelu6 (class in aimet_torch.nn)": [[127, "aimet_torch.nn.QuantizedReLU6", false]], "quantizedreplicationpad1d (class in aimet_torch.nn)": [[131, "aimet_torch.nn.QuantizedReplicationPad1d", false]], "quantizedreplicationpad2d (class in aimet_torch.nn)": [[132, "aimet_torch.nn.QuantizedReplicationPad2d", false]], "quantizedreplicationpad3d (class in aimet_torch.nn)": [[133, "aimet_torch.nn.QuantizedReplicationPad3d", false]], "quantizedrnn (class in aimet_torch.nn)": [[123, "aimet_torch.nn.QuantizedRNN", false]], "quantizedrnncell (class in aimet_torch.nn)": [[124, "aimet_torch.nn.QuantizedRNNCell", false]], "quantizedrrelu (class in aimet_torch.nn)": [[125, "aimet_torch.nn.QuantizedRReLU", false]], "quantizedselu (class in aimet_torch.nn)": [[134, "aimet_torch.nn.QuantizedSELU", false]], "quantizedsigmoid (class in aimet_torch.nn)": [[136, "aimet_torch.nn.QuantizedSigmoid", false]], "quantizedsilu (class in aimet_torch.nn)": [[135, "aimet_torch.nn.QuantizedSiLU", false]], "quantizedsmoothl1loss (class in aimet_torch.nn)": [[137, "aimet_torch.nn.QuantizedSmoothL1Loss", false]], "quantizedsoftmarginloss (class in aimet_torch.nn)": [[138, "aimet_torch.nn.QuantizedSoftMarginLoss", false]], "quantizedsoftmax (class in aimet_torch.nn)": [[139, "aimet_torch.nn.QuantizedSoftmax", false]], "quantizedsoftmax2d (class in aimet_torch.nn)": [[140, "aimet_torch.nn.QuantizedSoftmax2d", false]], "quantizedsoftmin (class in aimet_torch.nn)": [[141, "aimet_torch.nn.QuantizedSoftmin", false]], "quantizedsoftplus (class in aimet_torch.nn)": [[142, "aimet_torch.nn.QuantizedSoftplus", false]], "quantizedsoftshrink (class in aimet_torch.nn)": [[143, "aimet_torch.nn.QuantizedSoftshrink", false]], "quantizedsoftsign (class in aimet_torch.nn)": [[144, "aimet_torch.nn.QuantizedSoftsign", false]], "quantizedtanh (class in aimet_torch.nn)": [[145, "aimet_torch.nn.QuantizedTanh", false]], "quantizedtanhshrink (class in aimet_torch.nn)": [[146, "aimet_torch.nn.QuantizedTanhshrink", false]], "quantizedtensor (class in aimet_torch.quantization)": [[159, "aimet_torch.quantization.QuantizedTensor", false]], "quantizedtensorbase (class in aimet_torch.quantization)": [[160, "aimet_torch.quantization.QuantizedTensorBase", false]], "quantizedthreshold (class in aimet_torch.nn)": [[147, "aimet_torch.nn.QuantizedThreshold", false]], "quantizedtripletmarginloss (class in aimet_torch.nn)": [[148, "aimet_torch.nn.QuantizedTripletMarginLoss", false]], "quantizedtripletmarginwithdistanceloss (class in aimet_torch.nn)": [[149, "aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", false]], "quantizedunflatten (class in aimet_torch.nn)": [[150, "aimet_torch.nn.QuantizedUnflatten", false]], "quantizedunfold (class in aimet_torch.nn)": [[151, "aimet_torch.nn.QuantizedUnfold", false]], "quantizedupsample (class in aimet_torch.nn)": [[152, "aimet_torch.nn.QuantizedUpsample", false]], "quantizedupsamplingbilinear2d (class in aimet_torch.nn)": [[153, "aimet_torch.nn.QuantizedUpsamplingBilinear2d", false]], "quantizedupsamplingnearest2d (class in aimet_torch.nn)": [[154, "aimet_torch.nn.QuantizedUpsamplingNearest2d", false]], "quantizedzeropad1d (class in aimet_torch.nn)": [[155, "aimet_torch.nn.QuantizedZeroPad1d", false]], "quantizedzeropad2d (class in aimet_torch.nn)": [[156, "aimet_torch.nn.QuantizedZeroPad2d", false]], "quantizedzeropad3d (class in aimet_torch.nn)": [[157, "aimet_torch.nn.QuantizedZeroPad3d", false]], "quantizergroup (class in aimet_onnx.amp.quantizer_groups)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_tensorflow.keras.amp.quantizer_groups)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_torch.amp.quantizer_groups)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [236, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false]], "quantscheme (class in aimet_common.defs)": [[9, "aimet_common.defs.QuantScheme", false], [22, "aimet_common.defs.QuantScheme", false], [181, "aimet_common.defs.QuantScheme", false], [187, "aimet_common.defs.QuantScheme", false]], "quantsim": [[244, "term-QuantSim", true]], "quic": [[244, "term-QUIC", true]], "reestimate_bn_stats() (in module aimet_tensorflow.keras.bn_reestimation)": [[14, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false], [224, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false]], "reestimate_bn_stats() (in module aimet_torch.bn_reestimation)": [[26, "aimet_torch.bn_reestimation.reestimate_bn_stats", false], [224, "aimet_torch.bn_reestimation.reestimate_bn_stats", false]], "run_inference() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false]], "save_checkpoint() (aimet_torch.v1.quantsim method)": [[187, "aimet_torch.v1.quantsim.save_checkpoint", false]], "seqmseparams (class in aimet_torch.seq_mse)": [[182, "aimet_torch.seq_mse.SeqMseParams", false], [243, "aimet_torch.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.v1.seq_mse)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams", false]], "set_activation_quantizers_to_float() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_activation_quantizers_to_float", false]], "set_adaround_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false]], "set_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_blockwise_quantization_for_weights", false]], "set_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.set_default_kernel", false]], "set_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.set_extra_state", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_onnx.quantsim)": [[7, "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_grouped_blockwise_quantization_for_weights", false]], "set_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.set_kernel", false]], "set_mixed_precision_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false]], "set_model_input_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false], [238, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false]], "set_model_output_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false], [238, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false]], "set_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false], [238, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false]], "set_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false], [223, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false]], "set_quantizers_to_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [236, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "spatialsvdparameters (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false], [231, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false]], "spatialsvdparameters.automodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false], [231, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false]], "spatialsvdparameters.manualmodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false], [231, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false]], "spatialsvdparameters.mode (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false], [231, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false]], "sqnr() (aimet_onnx.amp.mixed_precision_algo.evalcallbackfactory method)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [236, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "sqnr() (aimet_torch.amp.mixed_precision_algo.evalcallbackfactory method)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [184, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [236, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "target hardware accelerator": [[244, "term-Target-Hardware-Accelerator", true]], "target runtime": [[244, "term-Target-Runtime", true]], "tensorflow": [[244, "term-TensorFlow", true]], "to_list() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false], [236, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false], [236, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [236, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false]], "torchscript": [[244, "term-TorchScript", true]], "torchscript (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false], [221, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false]], "validate_model() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.validate_model", false]], "variant": [[244, "term-Variant", true]], "visualize_stats() (in module aimet_torch.v2.visualization_tools)": [[168, "aimet_torch.v2.visualization_tools.visualize_stats", false], [220, "aimet_torch.v2.visualization_tools.visualize_stats", false]], "weights": [[244, "term-Weights", true]], "wrap() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.wrap", false]]}, "objects": {"aimet_common.defs": [[236, 0, 1, "id1", "CallbackFunc"], [231, 0, 1, "", "GreedySelectionParameters"], [187, 0, 1, "", "QuantScheme"]], "aimet_common.defs.QuantScheme": [[187, 1, 1, "", "from_str"]], "aimet_common.utils": [[222, 0, 1, "", "CallbackFunc"]], "aimet_onnx": [[9, 0, 1, "", "QuantizationSimModel"], [217, 2, 1, "", "apply_adaround"], [243, 2, 1, "", "apply_seq_mse"], [9, 2, 1, "", "compute_encodings"]], "aimet_onnx.QuantizationSimModel": [[9, 1, 1, "", "compute_encodings"], [9, 1, 1, "", "export"]], "aimet_onnx.amp.mixed_precision_algo": [[236, 0, 1, "", "EvalCallbackFactory"]], "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory": [[236, 1, 1, "", "sqnr"]], "aimet_onnx.amp.quantizer_groups": [[236, 0, 1, "", "QuantizerGroup"]], "aimet_onnx.amp.quantizer_groups.QuantizerGroup": [[236, 1, 1, "", "get_activation_quantizers"], [236, 1, 1, "", "get_active_quantizers"], [236, 1, 1, "", "get_candidate"], [236, 1, 1, "", "get_param_quantizers"], [236, 1, 1, "", "set_quantizers_to_candidate"], [236, 1, 1, "", "to_list"]], "aimet_onnx.batch_norm_fold": [[225, 2, 1, "", "fold_all_batch_norms_to_weight"]], "aimet_onnx.cross_layer_equalization": [[226, 2, 1, "", "equalize_model"]], "aimet_onnx.layer_output_utils": [[221, 0, 1, "", "LayerOutputUtil"]], "aimet_onnx.layer_output_utils.LayerOutputUtil": [[221, 1, 1, "", "generate_layer_outputs"]], "aimet_onnx.mixed_precision": [[236, 2, 1, "", "choose_mixed_precision"]], "aimet_onnx.quant_analyzer": [[222, 0, 1, "", "QuantAnalyzer"]], "aimet_onnx.quant_analyzer.QuantAnalyzer": [[222, 1, 1, "", "analyze"], [222, 1, 1, "", "enable_per_layer_mse_loss"]], "aimet_onnx.quantsim": [[7, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_tensorflow.keras.adaround_weight": [[217, 0, 1, "", "AdaroundParameters"]], "aimet_tensorflow.keras.adaround_weight.Adaround": [[217, 2, 1, "", "apply_adaround"]], "aimet_tensorflow.keras.amp.quantizer_groups": [[236, 0, 1, "", "QuantizerGroup"]], "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup": [[236, 1, 1, "", "get_active_param_quantizers"], [236, 1, 1, "", "get_active_quantizers"], [236, 1, 1, "", "get_candidate"], [236, 1, 1, "", "lookup_quantizer"], [236, 1, 1, "", "set_quantizers_to_candidate"], [236, 1, 1, "", "to_list"]], "aimet_tensorflow.keras.auto_quant_v2": [[223, 0, 1, "", "AutoQuantWithAutoMixedPrecision"]], "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision": [[223, 1, 1, "", "get_quant_scheme_candidates"], [223, 1, 1, "", "optimize"], [223, 1, 1, "", "run_inference"], [223, 1, 1, "", "set_adaround_params"], [223, 1, 1, "", "set_mixed_precision_params"], [223, 1, 1, "", "set_quant_scheme_candidates"]], "aimet_tensorflow.keras.batch_norm_fold": [[225, 2, 1, "", "fold_all_batch_norms"], [224, 2, 1, "", "fold_all_batch_norms_to_scale"]], "aimet_tensorflow.keras.bn_reestimation": [[224, 2, 1, "", "reestimate_bn_stats"]], "aimet_tensorflow.keras.compress": [[231, 0, 1, "", "ModelCompressor"]], "aimet_tensorflow.keras.compress.ModelCompressor": [[231, 1, 1, "", "compress_model"]], "aimet_tensorflow.keras.cross_layer_equalization": [[226, 2, 1, "", "equalize_model"]], "aimet_tensorflow.keras.defs": [[231, 0, 1, "", "SpatialSvdParameters"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters": [[231, 0, 1, "", "AutoModeParams"], [231, 0, 1, "", "ManualModeParams"], [231, 0, 1, "", "Mode"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode": [[231, 3, 1, "", "auto"], [231, 3, 1, "", "manual"]], "aimet_tensorflow.keras.layer_output_utils": [[221, 0, 1, "", "LayerOutputUtil"]], "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil": [[221, 1, 1, "", "generate_layer_outputs"]], "aimet_tensorflow.keras.mixed_precision": [[236, 2, 1, "", "choose_fast_mixed_precision"], [236, 2, 1, "", "choose_mixed_precision"]], "aimet_tensorflow.keras.model_preparer": [[20, 2, 1, "", "prepare_model"]], "aimet_tensorflow.keras.quantsim": [[22, 0, 1, "", "QuantizationSimModel"]], "aimet_tensorflow.keras.quantsim.QuantizationSimModel": [[22, 1, 1, "", "compute_encodings"], [22, 1, 1, "", "export"]], "aimet_torch": [[181, 0, 1, "", "QuantizationSimModel"]], "aimet_torch.QuantizationSimModel": [[181, 1, 1, "", "compute_encodings"], [181, 1, 1, "", "export"]], "aimet_torch.adaround.adaround_weight": [[217, 0, 1, "", "AdaroundParameters"]], "aimet_torch.adaround.adaround_weight.Adaround": [[217, 2, 1, "", "apply_adaround"]], "aimet_torch.amp.mixed_precision_algo": [[236, 0, 1, "", "EvalCallbackFactory"]], "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory": [[236, 1, 1, "", "sqnr"]], "aimet_torch.amp.quantizer_groups": [[236, 0, 1, "", "QuantizerGroup"]], "aimet_torch.amp.quantizer_groups.QuantizerGroup": [[236, 1, 1, "", "get_active_quantizers"], [236, 1, 1, "", "get_candidate"], [236, 1, 1, "", "get_input_quantizer_modules"], [236, 1, 1, "", "set_quantizers_to_candidate"], [236, 1, 1, "", "to_list"]], "aimet_torch.batch_norm_fold": [[225, 2, 1, "", "fold_all_batch_norms"]], "aimet_torch.bn_reestimation": [[224, 2, 1, "", "reestimate_bn_stats"]], "aimet_torch.cross_layer_equalization": [[226, 2, 1, "", "equalize_model"]], "aimet_torch.experimental.adascale": [[218, 2, 1, "", "apply_adascale"]], "aimet_torch.experimental.omniquant": [[239, 2, 1, "", "apply_omniquant"]], "aimet_torch.layer_output_utils": [[221, 0, 1, "", "LayerOutputUtil"], [221, 0, 1, "", "NamingScheme"]], "aimet_torch.layer_output_utils.LayerOutputUtil": [[221, 1, 1, "", "generate_layer_outputs"]], "aimet_torch.layer_output_utils.NamingScheme": [[221, 3, 1, "", "ONNX"], [221, 3, 1, "", "PYTORCH"], [221, 3, 1, "", "TORCHSCRIPT"]], "aimet_torch.mixed_precision": [[236, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.model_preparer": [[172, 2, 1, "", "prepare_model"]], "aimet_torch.model_validator.model_validator": [[173, 0, 1, "", "ModelValidator"]], "aimet_torch.model_validator.model_validator.ModelValidator": [[173, 1, 1, "", "add_check"], [173, 1, 1, "", "validate_model"]], "aimet_torch.nn": [[30, 0, 1, "", "QuantizationMixin"], [31, 0, 1, "", "QuantizedAdaptiveAvgPool1d"], [32, 0, 1, "", "QuantizedAdaptiveAvgPool2d"], [33, 0, 1, "", "QuantizedAdaptiveAvgPool3d"], [34, 0, 1, "", "QuantizedAdaptiveMaxPool1d"], [35, 0, 1, "", "QuantizedAdaptiveMaxPool2d"], [36, 0, 1, "", "QuantizedAdaptiveMaxPool3d"], [37, 0, 1, "", "QuantizedAlphaDropout"], [38, 0, 1, "", "QuantizedAvgPool1d"], [39, 0, 1, "", "QuantizedAvgPool2d"], [40, 0, 1, "", "QuantizedAvgPool3d"], [41, 0, 1, "", "QuantizedBCELoss"], [42, 0, 1, "", "QuantizedBCEWithLogitsLoss"], [43, 0, 1, "", "QuantizedBatchNorm1d"], [44, 0, 1, "", "QuantizedBatchNorm2d"], [45, 0, 1, "", "QuantizedBatchNorm3d"], [46, 0, 1, "", "QuantizedBilinear"], [47, 0, 1, "", "QuantizedCELU"], [48, 0, 1, "", "QuantizedCTCLoss"], [49, 0, 1, "", "QuantizedChannelShuffle"], [50, 0, 1, "", "QuantizedCircularPad1d"], [51, 0, 1, "", "QuantizedCircularPad2d"], [52, 0, 1, "", "QuantizedCircularPad3d"], [53, 0, 1, "", "QuantizedConstantPad1d"], [54, 0, 1, "", "QuantizedConstantPad2d"], [55, 0, 1, "", "QuantizedConstantPad3d"], [56, 0, 1, "", "QuantizedConv1d"], [57, 0, 1, "", "QuantizedConv2d"], [58, 0, 1, "", "QuantizedConv3d"], [59, 0, 1, "", "QuantizedConvTranspose1d"], [60, 0, 1, "", "QuantizedConvTranspose2d"], [61, 0, 1, "", "QuantizedConvTranspose3d"], [62, 0, 1, "", "QuantizedCosineEmbeddingLoss"], [63, 0, 1, "", "QuantizedCosineSimilarity"], [64, 0, 1, "", "QuantizedCrossEntropyLoss"], [65, 0, 1, "", "QuantizedDropout"], [66, 0, 1, "", "QuantizedDropout1d"], [67, 0, 1, "", "QuantizedDropout2d"], [68, 0, 1, "", "QuantizedDropout3d"], [69, 0, 1, "", "QuantizedELU"], [70, 0, 1, "", "QuantizedEmbedding"], [71, 0, 1, "", "QuantizedEmbeddingBag"], [72, 0, 1, "", "QuantizedFeatureAlphaDropout"], [73, 0, 1, "", "QuantizedFlatten"], [74, 0, 1, "", "QuantizedFold"], [75, 0, 1, "", "QuantizedFractionalMaxPool2d"], [76, 0, 1, "", "QuantizedFractionalMaxPool3d"], [77, 0, 1, "", "QuantizedGELU"], [78, 0, 1, "", "QuantizedGLU"], [79, 0, 1, "", "QuantizedGRU"], [80, 0, 1, "", "QuantizedGRUCell"], [81, 0, 1, "", "QuantizedGaussianNLLLoss"], [82, 0, 1, "", "QuantizedGroupNorm"], [83, 0, 1, "", "QuantizedHardshrink"], [84, 0, 1, "", "QuantizedHardsigmoid"], [85, 0, 1, "", "QuantizedHardswish"], [86, 0, 1, "", "QuantizedHardtanh"], [87, 0, 1, "", "QuantizedHingeEmbeddingLoss"], [88, 0, 1, "", "QuantizedHuberLoss"], [89, 0, 1, "", "QuantizedInstanceNorm1d"], [90, 0, 1, "", "QuantizedInstanceNorm2d"], [91, 0, 1, "", "QuantizedInstanceNorm3d"], [92, 0, 1, "", "QuantizedKLDivLoss"], [93, 0, 1, "", "QuantizedL1Loss"], [94, 0, 1, "", "QuantizedLPPool1d"], [95, 0, 1, "", "QuantizedLPPool2d"], [96, 0, 1, "", "QuantizedLSTM"], [97, 0, 1, "", "QuantizedLSTMCell"], [98, 0, 1, "", "QuantizedLayerNorm"], [99, 0, 1, "", "QuantizedLeakyReLU"], [100, 0, 1, "", "QuantizedLinear"], [101, 0, 1, "", "QuantizedLocalResponseNorm"], [102, 0, 1, "", "QuantizedLogSigmoid"], [103, 0, 1, "", "QuantizedLogSoftmax"], [104, 0, 1, "", "QuantizedMSELoss"], [105, 0, 1, "", "QuantizedMarginRankingLoss"], [106, 0, 1, "", "QuantizedMaxPool1d"], [107, 0, 1, "", "QuantizedMaxPool2d"], [108, 0, 1, "", "QuantizedMaxPool3d"], [109, 0, 1, "", "QuantizedMaxUnpool1d"], [110, 0, 1, "", "QuantizedMaxUnpool2d"], [111, 0, 1, "", "QuantizedMaxUnpool3d"], [112, 0, 1, "", "QuantizedMish"], [113, 0, 1, "", "QuantizedMultiLabelMarginLoss"], [114, 0, 1, "", "QuantizedMultiLabelSoftMarginLoss"], [115, 0, 1, "", "QuantizedMultiMarginLoss"], [116, 0, 1, "", "QuantizedNLLLoss"], [117, 0, 1, "", "QuantizedNLLLoss2d"], [118, 0, 1, "", "QuantizedPReLU"], [119, 0, 1, "", "QuantizedPairwiseDistance"], [120, 0, 1, "", "QuantizedPixelShuffle"], [121, 0, 1, "", "QuantizedPixelUnshuffle"], [122, 0, 1, "", "QuantizedPoissonNLLLoss"], [123, 0, 1, "", "QuantizedRNN"], [124, 0, 1, "", "QuantizedRNNCell"], [125, 0, 1, "", "QuantizedRReLU"], [126, 0, 1, "", "QuantizedReLU"], [127, 0, 1, "", "QuantizedReLU6"], [128, 0, 1, "", "QuantizedReflectionPad1d"], [129, 0, 1, "", "QuantizedReflectionPad2d"], [130, 0, 1, "", "QuantizedReflectionPad3d"], [131, 0, 1, "", "QuantizedReplicationPad1d"], [132, 0, 1, "", "QuantizedReplicationPad2d"], [133, 0, 1, "", "QuantizedReplicationPad3d"], [134, 0, 1, "", "QuantizedSELU"], [135, 0, 1, "", "QuantizedSiLU"], [136, 0, 1, "", "QuantizedSigmoid"], [137, 0, 1, "", "QuantizedSmoothL1Loss"], [138, 0, 1, "", "QuantizedSoftMarginLoss"], [139, 0, 1, "", "QuantizedSoftmax"], [140, 0, 1, "", "QuantizedSoftmax2d"], [141, 0, 1, "", "QuantizedSoftmin"], [142, 0, 1, "", "QuantizedSoftplus"], [143, 0, 1, "", "QuantizedSoftshrink"], [144, 0, 1, "", "QuantizedSoftsign"], [145, 0, 1, "", "QuantizedTanh"], [146, 0, 1, "", "QuantizedTanhshrink"], [147, 0, 1, "", "QuantizedThreshold"], [148, 0, 1, "", "QuantizedTripletMarginLoss"], [149, 0, 1, "", "QuantizedTripletMarginWithDistanceLoss"], [150, 0, 1, "", "QuantizedUnflatten"], [151, 0, 1, "", "QuantizedUnfold"], [152, 0, 1, "", "QuantizedUpsample"], [153, 0, 1, "", "QuantizedUpsamplingBilinear2d"], [154, 0, 1, "", "QuantizedUpsamplingNearest2d"], [155, 0, 1, "", "QuantizedZeroPad1d"], [156, 0, 1, "", "QuantizedZeroPad2d"], [157, 0, 1, "", "QuantizedZeroPad3d"]], "aimet_torch.nn.QuantizationMixin": [[30, 1, 1, "", "compute_encodings"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "from_module"], [30, 1, 1, "", "get_default_kernel"], [30, 1, 1, "", "get_kernel"], [30, 1, 1, "", "implements"], [30, 3, 1, "", "input_quantizers"], [30, 3, 1, "", "output_quantizers"], [30, 3, 1, "", "param_quantizers"], [30, 1, 1, "", "set_default_kernel"], [30, 1, 1, "", "set_kernel"], [30, 1, 1, "", "wrap"]], "aimet_torch.nn.QuantizedLinear": [[100, 1, 1, "", "forward"]], "aimet_torch.onnx": [[177, 2, 1, "", "export"]], "aimet_torch.quant_analyzer": [[222, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.quant_analyzer.QuantAnalyzer": [[222, 1, 1, "", "analyze"], [222, 1, 1, "", "check_model_sensitivity_to_quantization"], [222, 1, 1, "", "export_per_layer_encoding_min_max_range"], [222, 1, 1, "", "export_per_layer_mse_loss"], [222, 1, 1, "", "export_per_layer_stats_histogram"], [222, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [222, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.quantization": [[158, 0, 1, "", "DequantizedTensor"], [159, 0, 1, "", "QuantizedTensor"], [160, 0, 1, "", "QuantizedTensorBase"]], "aimet_torch.quantization.DequantizedTensor": [[158, 1, 1, "", "dequantize"], [158, 1, 1, "", "quantize"], [158, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensor": [[159, 1, 1, "", "dequantize"], [159, 1, 1, "", "quantize"], [159, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensorBase": [[160, 1, 1, "", "clone"], [160, 1, 1, "", "dequantize"], [160, 1, 1, "", "detach"], [160, 1, 1, "", "new_empty"], [160, 1, 1, "", "quantize"], [160, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.affine": [[161, 0, 1, "", "Quantize"], [162, 0, 1, "", "QuantizeDequantize"], [163, 2, 1, "", "dequantize"], [164, 2, 1, "", "quantize"], [165, 2, 1, "", "quantize_dequantize"]], "aimet_torch.quantization.affine.Quantize": [[161, 1, 1, "", "forward"]], "aimet_torch.quantization.affine.QuantizeDequantize": [[162, 1, 1, "", "forward"]], "aimet_torch.quantization.float": [[166, 0, 1, "", "FloatQuantizeDequantize"]], "aimet_torch.quantization.float.FloatQuantizeDequantize": [[166, 4, 1, "", "bitwidth"], [166, 1, 1, "", "compute_encodings"], [166, 4, 1, "", "exponent_bits"], [166, 1, 1, "", "forward"], [166, 1, 1, "", "from_encodings"], [166, 1, 1, "", "get_encodings"], [166, 1, 1, "", "get_extra_state"], [166, 1, 1, "", "is_bfloat16"], [166, 1, 1, "", "is_float16"], [166, 1, 1, "", "load_state_dict"], [166, 4, 1, "", "mantissa_bits"], [166, 1, 1, "", "set_extra_state"]], "aimet_torch.seq_mse": [[243, 0, 1, "", "SeqMseParams"], [243, 2, 1, "", "apply_seq_mse"]], "aimet_torch.seq_mse.SeqMseParams": [[243, 1, 1, "", "forward_fn"], [243, 1, 1, "", "get_loss_fn"]], "aimet_torch.v1.adaround.adaround_weight": [[183, 0, 1, "", "AdaroundParameters"]], "aimet_torch.v1.adaround.adaround_weight.Adaround": [[183, 2, 1, "", "apply_adaround"]], "aimet_torch.v1.mixed_precision": [[184, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.v1.quant_analyzer": [[186, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.v1.quant_analyzer.QuantAnalyzer": [[186, 1, 1, "", "analyze"], [186, 1, 1, "", "check_model_sensitivity_to_quantization"], [186, 1, 1, "", "export_per_layer_encoding_min_max_range"], [186, 1, 1, "", "export_per_layer_mse_loss"], [186, 1, 1, "", "export_per_layer_stats_histogram"], [186, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [186, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.v1.quantsim": [[187, 0, 1, "", "QuantizationSimModel"], [187, 1, 1, "", "load_checkpoint"], [187, 1, 1, "", "save_checkpoint"]], "aimet_torch.v1.quantsim.QuantizationSimModel": [[187, 1, 1, "", "compute_encodings"], [187, 1, 1, "", "export"]], "aimet_torch.v1.seq_mse": [[188, 0, 1, "", "SeqMseParams"], [188, 2, 1, "", "apply_seq_mse"]], "aimet_torch.v1.seq_mse.SeqMseParams": [[188, 1, 1, "", "forward_fn"], [188, 1, 1, "", "get_loss_fn"]], "aimet_torch.v2.mixed_precision": [[238, 0, 1, "", "MixedPrecisionConfigurator"]], "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator": [[238, 1, 1, "", "apply"], [238, 1, 1, "", "set_model_input_precision"], [238, 1, 1, "", "set_model_output_precision"], [238, 1, 1, "", "set_precision"]], "aimet_torch.v2.quantsim.config_utils": [[170, 2, 1, "", "set_activation_quantizers_to_float"], [170, 2, 1, "", "set_blockwise_quantization_for_weights"], [170, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_torch.v2.visualization_tools": [[220, 2, 1, "", "visualize_stats"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute", "4": "py:property"}, "terms": {"": [2, 7, 8, 10, 12, 20, 21, 22, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 166, 170, 172, 174, 175, 179, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 243, 244, 248, 250, 251, 252, 253, 254, 256, 258, 259, 262, 263], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264], "00": [164, 165, 205, 206, 207, 225, 226], "000": [217, 253], "0000": [158, 165, 177, 180], "0000e": [164, 165], "001": [190, 208, 224], "0014807": 246, "00183112e": 225, "00215936e": 225, "0030": 180, "00317": 218, "0032": 180, "0034": 180, "00347728e": 226, "0035": 180, "0036": [162, 180], "0037": 180, "0038": 180, "0039": [162, 180], "0059": 180, "0063": 180, "0064": 180, "0068": 180, "0069": 180, "0073": 180, "0074": 180, "0078": 180, "00_224": [217, 225, 226], "01": [11, 23, 164, 165, 183, 194, 196, 210, 217, 223, 225, 226], "0115": 162, "0117": 180, "0142": 160, "01457286e": [225, 226], "0156": 180, "0158": 162, "0176": 162, "0195": 180, "02": [164, 165, 225, 226], "02078857e": [225, 226], "0234": 180, "0235": 223, "026354755942277083": 246, "02635476": 246, "0273": 180, "0278355": 246, "02887694e": 226, "0293162": 246, "0295": 162, "03": [225, 226], "0312": 180, "0352": 180, "03798249e": 225, "0386": 162, "0391": 180, "04": [225, 226, 246, 249], "04025269e": 225, "0406616e": 226, "0424": 162, "0428": 224, "0430": 180, "0449": 249, "0469": 180, "0471": 162, "04721": 204, "05": [164, 165, 225, 226], "0500e": [164, 165], "0508": 180, "05270951": 246, "0541903": 246, "0549": 162, "05549544e": [225, 226], "0564": 162, "0639": 162, "0667": 165, "0680": 162, "0769": 249, "0784": 162, "07906426": 246, "08": [164, 165], "080545": 246, "0819": 162, "0820258": 246, "0859": 166, "0861": 249, "08742931e": [225, 226], "0882": 160, "0889": 166, "0891": 166, "09": 236, "09111059e": 225, "0947": 166, "09685047e": [225, 226], "0x7f127685a598": 173, "0x7f9dd9bd90d0": 173, "0x7ff5703eff28": 173, "0x7ff577373598": 173, "1": [0, 2, 12, 13, 17, 20, 21, 23, 24, 25, 29, 30, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 226, 227, 229, 230, 231, 233, 234, 238, 240, 241, 242, 246, 247, 248, 249, 250, 253, 264], "10": [17, 20, 29, 30, 158, 161, 162, 164, 172, 173, 175, 180, 181, 187, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 211, 213, 214, 217, 224, 227, 229, 230, 231, 233, 236, 246, 247, 248, 249, 250, 251, 254, 256, 258], "100": [2, 12, 14, 26, 171, 184, 197, 211, 224, 236, 244, 246, 249], "1000": [8, 21, 160, 179, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 227, 231, 233, 251], "10000": [1, 11, 190, 191, 192, 193, 195, 203, 208, 209, 217], "1000e": [164, 165], "102": [180, 249], "1024": [198, 217, 236, 251], "103": [161, 180], "104": 249, "105": 249, "1050": 249, "10541902": 246, "10569119e": [225, 226], "106": 161, "1060": 162, "1068997": 246, "107": 180, "10708203e": [225, 226], "108": 180, "109": 161, "10k": [1, 23, 183, 217], "11": [159, 160, 164, 180, 207, 246, 247, 248, 258], "110": [161, 180], "111": [161, 180], "11176670e": 226, "112": [217, 225, 226], "1128": 162, "1155": 249, "116": 249, "1176": 162, "118": 180, "119": [180, 249], "12": [164, 180, 246, 247, 248, 249, 250, 258], "12039044e": 226, "121": 249, "122": 161, "1232": 162, "127": [159, 160, 180, 181, 249, 251, 254], "128": [2, 13, 25, 159, 160, 170, 172, 174, 180, 181, 184, 185, 198, 200, 201, 217, 223, 225, 226, 236, 246, 249, 250, 251, 254], "129": 161, "13": [164, 180, 249, 264], "1307": 162, "131": 161, "13137": [218, 239, 258], "13177378": 246, "1333": 165, "1398": 230, "14": [164, 180, 249, 258, 264], "1406": 230, "141": 161, "143": 161, "144": 161, "145": 161, "1458": 249, "146": 161, "1493fe1": 258, "15": [164, 165, 180, 197, 198, 200, 201, 211, 213, 214, 224, 230, 254, 258], "150": 161, "1500": [24, 218], "15000": 217, "1500e": [164, 165], "152": 161, "15259957e": 226, "153": 159, "155": 161, "15717569e": 225, "15812853": 246, "15e": [205, 207], "15k": [1, 23, 183, 217], "16": [2, 12, 22, 30, 161, 166, 172, 174, 175, 177, 178, 180, 181, 184, 187, 190, 194, 197, 208, 212, 217, 218, 223, 231, 236, 239, 241, 242, 249, 250, 251, 254, 263, 264], "1619": 249, "162": 161, "16245179e": [225, 226], "1647": 162, "16839484e": 226, "16966406e": 226, "17": [161, 180, 226, 264], "1709": 162, "172": 161, "1727": 166, "1729": 166, "1741": 162, "178": 161, "17871511e": 226, "179": 161, "18": [180, 190, 191, 192, 193, 249, 264], "181": 161, "18136823e": 225, "18448329": 246, "186": 161, "18673885e": 225, "187": 161, "188": 161, "1889": 162, "19": [161, 180, 225, 226, 246, 264], "1906": 204, "19186290e": [225, 226], "192": 161, "1921e": [164, 165], "194": 161, "1943": 230, "1945": 160, "1955": 230, "1977": 162, "19778645e": 225, "1_all": 248, "1b": 239, "1e": [20, 198, 199, 224, 225, 226, 251, 254], "1k": [217, 223, 224, 236, 243], "1m": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 216, 219, 220, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 253, 256, 257, 260, 261, 262, 264], "20": [10, 11, 20, 23, 160, 177, 182, 183, 188, 196, 197, 198, 199, 200, 201, 211, 213, 214, 217, 224, 225, 226, 231, 241, 242, 243, 254, 264], "200": [20, 171, 198, 199, 210], "2000": [23, 159, 165, 183, 195, 196, 203, 209, 210, 212, 217], "20000": [20, 198, 199], "2000e": [164, 165], "2012": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "2014": 230, "2016": 230, "2017": 230, "2019": [192, 204, 212], "203": 161, "20433941e": [225, 226], "2048": [217, 223, 224, 239, 254], "205": 159, "2068": 249, "207": 161, "20k": 198, "21": [160, 177, 225, 226, 264], "21066449e": 225, "21083805": 246, "2118": 162, "2123188": 246, "21250950e": 225, "2137995": 246, "216": 161, "218": 161, "2196": 162, "22": [180, 225, 226, 246, 249, 264], "2205": 160, "2212": 162, "2217": 249, "22219264e": [225, 226], "224": [181, 190, 191, 192, 193, 194, 197, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 231, 236, 238, 243, 249, 251, 254], "225": [191, 210, 217, 223, 236, 251], "22583652e": 225, "226": 161, "2260": 160, "2265": 162, "229": [191, 210, 217, 223, 236, 251], "23": [159, 160, 264], "23011987e": [225, 226], "2306": 218, "2308": [218, 239, 258], "2315": 249, "23156421e": [225, 226], "2353": 162, "2355": 162, "2363": [162, 249], "237": 161, "23719281": 246, "238": 161, "24": 264, "240": 180, "2401543": 246, "241": 180, "242": 180, "24257803e": 225, "243": 180, "2431": 249, "244": 180, "245": 180, "2458": 162, "2459": 249, "246": 180, "247": 180, "248": 180, "249": 180, "25": [180, 264], "250": 180, "2500e": [164, 165], "251": 180, "252": 180, "253": 180, "254": 180, "2546": 162, "255": [158, 161, 180, 181, 251, 254], "256": [8, 180, 191, 194, 208, 217, 222, 223, 236, 251], "2568": 162, "2592": 173, "26": [159, 180, 249, 264], "26179108e": 225, "26354757": 246, "2650282": 246, "2667": 165, "27": [249, 264], "27415752e": 226, "2771": 162, "28": [159, 160, 203, 227, 231, 233, 249, 264], "28238320e": 226, "288": [217, 226], "28990233": 246, "29": [180, 264], "291383": 246, "2921": 160, "2930528e": 226, "29590677e": [225, 226], "2b": 228, "2c8ae88": 258, "2d": [203, 227, 230, 234, 250], "3": [2, 12, 13, 25, 29, 158, 160, 164, 165, 169, 171, 172, 173, 174, 178, 180, 181, 182, 184, 185, 188, 198, 226, 227, 228, 231, 233, 234, 238, 241, 246, 247, 248, 249, 250, 264], "30": [161, 180, 249, 264], "300": 208, "3000": [159, 198], "30122258e": [225, 226], "3038": 162, "30402938e": 226, "31": [8, 11, 21, 23, 179, 181, 183, 186, 187, 217, 222, 249, 251, 254, 264], "31080866e": 225, "312": 159, "3137": 162, "31625706": 246, "32": [20, 161, 172, 173, 180, 181, 187, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 218, 222, 223, 224, 225, 226, 236, 243, 244, 249, 251, 252, 254, 256, 259, 264], "32141271e": 225, "3216": 162, "33": [161, 205, 206, 207, 249, 264], "3333": 165, "33731920e": [225, 226], "34": 264, "34215236e": 226, "34261182": 246, "3451": 162, "3467390e": 226, "34694423e": 226, "347054": 246, "3470540046691895": 246, "35": [181, 249, 251, 254, 264], "350m": [241, 242], "35139937e": 226, "36": 161, "3610": 249, "36896658": 246, "37": [160, 161, 180], "3734087606114667": 246, "37757687e": 226, "38": [159, 160, 230], "38100997e": [225, 226], "3861": 249, "39": 158, "39502389e": [225, 226], "3992": 162, "3d": 250, "4": [2, 7, 8, 11, 13, 21, 23, 25, 159, 160, 164, 165, 170, 171, 172, 177, 178, 179, 180, 181, 183, 185, 186, 187, 193, 198, 202, 205, 206, 207, 210, 215, 225, 226, 227, 229, 231, 233, 234, 241, 242, 247, 248, 249, 250, 252, 264], "40": [159, 160, 239], "4000": [158, 165], "406": [191, 210, 217, 223, 236, 251], "41": 158, "41059163e": 226, "4157": 162, "41715762e": [225, 226], "42": [180, 249], "42083430e": 225, "4216761": 246, "4231569": 246, "4246376": 246, "42477691e": 225, "43": [180, 249], "4392": 162, "44408584e": [225, 226], "44632760e": 226, "4475": 162, "44803086": 246, "4495116": 246, "4499": 249, "44993666e": 226, "4549": 162, "455": [246, 249], "456": [191, 210, 217, 223, 236, 251], "4585028e": 226, "46642041e": 226, "4667": 165, "4694": 162, "4706": 162, "47438562": 246, "4758663": 246, "4784": 162, "48": [180, 249], "48045555e": 226, "48399768e": [225, 226], "485": [191, 210, 217, 223, 236, 251], "4863": 162, "49": [161, 180, 249], "49024737e": [225, 226], "4d": 250, "4f": [223, 224, 251, 254], "5": [160, 161, 162, 164, 165, 166, 171, 172, 175, 178, 180, 192, 193, 194, 195, 198, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 224, 225, 226, 227, 228, 231, 233, 236, 246, 247, 248, 249, 250, 264], "50": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 228, 231, 236, 249], "500": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 210, 212, 213, 214, 215, 217, 222, 227, 236, 251, 253], "5000": [196, 210], "50000": [191, 194, 217, 231, 236, 251], "5000e": [164, 165], "5006": 232, "50074035": 246, "5022211": 246, "51": 158, "512": [241, 242], "51446089e": [225, 226], "51547194e": [225, 226], "5157": 249, "51876003e": 225, "52": [158, 249], "521": 158, "5220": 162, "5255": 162, "52709514": 246, "52912678e": [225, 226], "52974629e": 225, "5301": 249, "5307": 249, "5333": [162, 165], "53403008e": [225, 226], "53976866e": [225, 226], "54": 180, "54620111e": [225, 226], "55": [161, 180, 249], "55344987": 246, "5540": 162, "5549306": 246, "55578518e": 226, "56": 249, "56632766e": 225, "5695": 162, "57": [159, 160, 180], "57021021e": 226, "57980466": 246, "57984132e": [225, 226], "58": 249, "5856506e": 226, "5876": 224, "5897": 162, "59": [161, 180, 249], "5962": 249, "59643137e": 225, "5e": [206, 207, 211, 213, 214], "6": [20, 160, 164, 165, 172, 180, 197, 198, 199, 200, 201, 207, 209, 212, 213, 214, 225, 226, 236, 247, 248, 250, 251, 254, 264], "60": 180, "6000": [158, 159, 160, 165], "6039": 162, "6054": 162, "6061594": 246, "60713138e": [225, 226], "6079": 162, "6091": 249, "61": 180, "61087702e": 225, "6177": 162, "6196": 162, "62": 180, "6213797e": 226, "6247": 162, "62498877e": [225, 226], "63": [161, 249], "63172388e": 225, "6325141": 246, "6327": 249, "6340": 249, "64": [7, 8, 20, 161, 170, 180, 181, 203, 217, 218, 222, 223, 236, 246, 249, 250, 251, 254, 256], "6431": 162, "64579314e": [225, 226], "65": [228, 249], "65535": 249, "6583": 254, "6588689": 246, "66": [161, 205, 206, 207, 228, 249], "6603496": 246, "6667": 165, "6695": 162, "67278278e": [225, 226], "67416465e": 226, "67510852e": [225, 226], "67677957e": [225, 226], "68": [158, 249], "68016": 254, "68522364": 246, "6867044": 246, "69": 249, "6910": 254, "69716495e": 226, "6d3aa97": 258, "7": [160, 164, 165, 166, 180, 181, 206, 207, 209, 211, 212, 213, 214, 225, 226, 234, 247, 248, 251, 254, 264], "70": 180, "7013": 251, "70130579e": 226, "70838": 254, "71": 160, "7115784": 246, "7164": 223, "71659231e": [225, 226], "7173": 251, "72": 249, "72468403e": 226, "73242160e": 225, "7333": 165, "73793316": 246, "74": 161, "74478185e": 225, "7466": 249, "75": [228, 249], "75162792e": 226, "75700430e": [225, 226], "76": 180, "76428795": 246, "77": [180, 249], "77213307e": 225, "7741": 162, "7765": 162, "7788": 249, "7793": 249, "78": 249, "7894": 162, "79": 249, "7932": 162, "8": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264], "80": [161, 231, 249], "800": [176, 239], "8000": [162, 165], "80053532e": 225, "8009871": 258, "8078": 162, "80cd141": 258, "81": 249, "81699747": 246, "81760912e": 225, "8188": 249, "81884710e": 225, "8229": 162, "83": [161, 180, 249], "83640555e": 226, "8366": 249, "836ab1": 258, "83861901e": [225, 226], "84": 180, "8405": 249, "8433522": 246, "8442": 249, "84edcf5": 258, "85": 249, "86": [161, 249], "8606": 249, "864": [217, 225, 226], "8667": 165, "86945379e": 225, "8706": 162, "8711877": 246, "87471542e": [225, 226], "87630311e": [225, 226], "87656835e": 225, "8796": 162, "88": 249, "88260233e": [225, 226], "8836": 162, "88373709e": 226, "88706ef": 258, "89": [161, 249], "89074164e": 226, "89249423e": [225, 226], "89348674e": 225, "8984": 166, "8994": 166, "8998": 166, "8bit": 258, "9": [158, 164, 165, 172, 180, 205, 206, 207, 208, 209, 212, 213, 214, 215, 224, 225, 226, 231, 236, 247, 248, 258], "90": [236, 249], "90229788e": [225, 226], "9054": 249, "91": [180, 249], "9150": 249, "9157": 162, "9176": 162, "92": 180, "9216": 172, "92511864e": [225, 226], "93": [180, 249], "93232973e": [225, 226], "9333": 165, "93787616e": 225, "94": [161, 180], "9487": 162, "94877124": 246, "9490": 162, "95": 180, "95088911e": [225, 226], "95260113e": 225, "9570": 180, "95997976e": [225, 226], "96": [180, 218, 249], "9609": 180, "96155685e": 225, "9648": 180, "9688": 180, "97": 158, "9700": 162, "9714": 249, "9727": 180, "97294299e": [225, 226], "9766": 180, "9805": 180, "9826": 249, "9844": 180, "9883": 180, "99": 249, "9904": 249, "9922": 180, "9961": [162, 180], "9999": 177, "A": [2, 3, 8, 9, 12, 13, 14, 15, 17, 21, 22, 23, 25, 27, 28, 29, 170, 174, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 236, 238, 241, 244, 250, 251, 252, 253, 254, 262], "And": [190, 203, 208, 262], "As": [30, 190, 192, 194, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 217, 222, 223, 228, 229, 236, 247, 250, 257], "At": [228, 232], "But": [172, 190, 197, 198, 202, 203, 208, 211, 215, 230, 238], "By": [9, 13, 17, 20, 29, 175, 178, 181, 197, 208, 209, 211, 212, 213, 214, 217, 223, 227, 230, 231, 233, 251, 253, 254], "For": [8, 20, 21, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 172, 173, 175, 177, 178, 179, 180, 186, 189, 190, 194, 197, 198, 199, 202, 203, 208, 211, 215, 217, 221, 222, 223, 226, 227, 228, 229, 230, 236, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 262, 263], "If": [2, 8, 9, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 241, 243, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 263], "In": [20, 30, 160, 171, 172, 173, 175, 181, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 225, 226, 228, 229, 230, 232, 234, 236, 237, 241, 242, 248, 249, 250, 251, 254, 255, 256, 257, 261, 262], "It": [1, 2, 6, 8, 9, 20, 171, 172, 181, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 227, 229, 234, 236, 239, 243, 248, 251, 252, 254, 258], "Its": 234, "NOT": [13, 25, 185, 203, 223], "No": [173, 225, 262], "Not": [8, 21, 179, 186, 189, 190, 197, 202, 203, 211, 215, 218, 222, 224, 229, 239, 243, 250, 254], "ONE": 246, "OR": 171, "Of": [200, 201, 203, 205, 206, 207, 213, 214], "On": [190, 203, 208], "One": [21, 22, 192, 193, 194, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 222, 251, 253, 254], "Or": [22, 172, 187, 221, 222, 230, 251, 254], "Such": 172, "That": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 234], "The": [1, 2, 4, 6, 7, 8, 9, 10, 12, 14, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263], "Then": [8, 179, 186, 213, 214, 222, 230], "There": [169, 171, 173, 187, 190, 191, 194, 195, 197, 198, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 221, 222, 223, 254, 262, 263], "These": [13, 22, 25, 171, 173, 175, 185, 187, 190, 192, 196, 198, 203, 208, 210, 212, 217, 222, 223, 227, 228, 236, 239, 241, 242, 248, 251, 253, 254, 255, 259], "To": [2, 12, 20, 30, 167, 171, 174, 175, 178, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 224, 225, 226, 229, 231, 232, 236, 238, 239, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 259, 262, 263], "With": [158, 199, 202, 215, 246, 254], "_": [8, 9, 20, 21, 30, 161, 162, 165, 168, 175, 179, 180, 181, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 236, 241, 243, 245, 246, 250, 251, 252, 253, 254, 258, 261, 262, 263], "__________________________________________________________________________________________________": [217, 225, 226], "__getitem__": 210, "__init__": [13, 20, 25, 172, 173, 175, 185, 199, 210, 223, 236, 239, 256, 257, 258], "__iter__": [223, 236, 239], "__len__": [8, 210, 222, 239], "__next__": [223, 236], "__quant_init__": [30, 175], "__torch_function__": 172, "__version__": 248, "_batch_index": 223, "_create_sampled_data_load": 210, "_current_iter": 236, "_data": [223, 236], "_dataset": 210, "_default_forward_fn": [13, 25, 185, 223], "_encodingmismatchinfo": 251, "_get_unlabled_data_load": 222, "_is_encoding_frozen": 171, "_max": 166, "_module_to_wrap": 171, "_not_specifi": [181, 251, 254], "_quantizationsimmodelinterfac": [179, 184, 186, 187, 222], "_quantschemepair": [13, 25, 185, 223], "_remove_input_quant": 171, "_remove_output_quant": 171, "_remove_param_quant": 171, "_step": [164, 165], "_tie_quant": 258, "_unlabel": 236, "a2adae2": 258, "ab": [204, 218, 239], "abe8782": 258, "abil": [258, 263], "abl": [8, 20, 25, 158, 159, 160, 172, 173, 185, 192, 193, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 222, 223], "about": [158, 191, 192, 193, 194, 195, 196, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 226, 245, 249, 250, 252, 263], "abov": [172, 174, 190, 194, 202, 203, 205, 206, 207, 208, 215, 222, 227, 230, 231, 232, 233, 234, 238, 247, 248, 250, 253, 254], "absolut": [161, 162, 227, 231, 233, 236, 247], "absolute_path_to_workspac": [189, 247], "absorpt": [192, 204, 212], "abstract": [30, 160, 175], "acc": [196, 197, 198, 202, 222, 223], "acc_top1": 223, "acccuraci": 194, "acceler": [193, 198, 200, 201, 213, 214, 227, 230, 231, 233, 244, 258], "accept": [229, 236, 258, 259, 262, 263], "access": [171, 198, 208, 209, 212, 213, 214, 258], "accord": [9, 169, 181, 221, 251, 254], "accordingli": 258, "account": [24, 217, 218, 229, 258, 259], "accumul": [228, 230, 231, 233, 235], "accur": [198, 217, 225], "accuraci": [2, 10, 12, 13, 17, 22, 23, 25, 29, 178, 183, 184, 185, 197, 198, 202, 210, 211, 215, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 243, 244, 245, 250, 251, 253, 254, 258, 259], "achiev": [180, 191, 195, 203, 209, 228, 237, 238, 244, 262, 263], "acronym": 245, "across": [172, 222, 226, 235, 244, 246, 253], "act": [2, 8, 12, 21, 174, 179, 184, 186, 190, 222, 236], "act_bw": 212, "action": [222, 234], "activ": [2, 8, 9, 12, 15, 20, 21, 22, 24, 168, 170, 172, 174, 175, 178, 179, 182, 184, 186, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 225, 226, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263], "activation_bitwidth": [217, 251, 252, 254], "activation_encod": 252, "activation_quant": [2, 236], "activation_typ": [9, 190, 191, 192, 193, 217, 251], "activations_pdf": [202, 215, 222], "actual": [190, 194, 197, 199, 208, 211, 219, 222], "acuraci": [194, 236], "ad": [173, 178, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 240, 251, 252, 255, 258], "ada": 191, "ada_model": [195, 203, 209], "ada_round_data": [195, 203], "ada_rounded_model": 217, "adam": [196, 197, 198, 200, 201, 202, 222], "adamw": [241, 242], "adapt": [23, 26, 178, 182, 183, 188, 189, 197, 203, 211, 222, 223, 224, 239, 240, 241, 242, 243, 244, 258], "adapter1": 178, "adaptiveavgpool1d": 31, "adaptiveavgpool2d": 32, "adaptiveavgpool3d": 33, "adaptivemaxpool1d": 34, "adaptivemaxpool2d": 35, "adaptivemaxpool3d": 36, "adaptiveround": 258, "adaptor": [176, 239], "adaround": [0, 1, 13, 18, 25, 167, 171, 185, 189, 196, 210, 217, 222, 223, 244, 258, 259], "adaround_data_load": [210, 223], "adaround_dataset": 196, "adaround_dataset_s": [196, 210, 223], "adaround_param": [13, 25, 185, 196, 210, 223], "adaround_weight": [11, 23, 171, 183, 195, 196, 203, 209, 210, 217, 223], "adarounded_model": 217, "adaroundparamet": [11, 13, 23, 25, 183, 185, 195, 196, 203, 209, 210, 217, 223], "adascal": [0, 167, 258], "adascale_optim": 218, "add": [20, 22, 172, 173, 175, 178, 187, 193, 197, 200, 201, 205, 206, 207, 213, 214, 234, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263], "add_adapt": 178, "add_check": 173, "add_lora_to_r": 242, "addit": [30, 180, 181, 187, 190, 197, 198, 199, 202, 203, 208, 211, 215, 224, 250, 251, 252, 254, 255, 258, 261], "address": [232, 259], "adequ": 262, "adher": 263, "adjac": [190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 225, 226, 235, 244, 255], "adjust": [168, 204, 212, 217, 220, 227, 228, 235, 241, 242, 250, 259], "admin": 189, "advanc": [180, 244, 258], "advantag": 243, "affect": [23, 183, 217, 244, 250, 255, 263], "affin": [7, 30, 158, 159, 160, 161, 162, 163, 164, 165, 170, 175, 225, 226, 241, 249, 250], "affine_q": 171, "affine_qdq": 171, "affine_quant": 171, "affinequant": [166, 171], "after": [1, 8, 21, 166, 172, 173, 175, 179, 180, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 222, 223, 224, 225, 226, 228, 230, 232, 244, 254, 258, 259], "afterward": [24, 218], "again": [192, 203, 204, 205, 206, 207, 212, 236, 254, 263], "against": [8, 13, 21, 179, 186, 200, 201, 203, 211, 213, 214, 222, 223, 227], "aggress": 244, "agre": 263, "ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264], "aim": [197, 205, 206, 207, 211, 263], "aimet": [5, 17, 18, 20, 29, 30, 167, 171, 172, 173, 175, 178, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 254, 256, 257, 258, 259, 261, 263], "aimet_cl": 204, "aimet_common": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "aimet_common_def": 231, "aimet_export_artifact": 221, "aimet_exported_model": 261, "aimet_exported_model_path": 261, "aimet_omniquant_artifact": [176, 239], "aimet_onnx": [0, 190, 191, 192, 193, 217, 221, 222, 225, 226, 236, 243, 246, 248, 251, 252, 258], "aimet_spatial_svd": 231, "aimet_tensorflow": [0, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 217, 221, 222, 223, 224, 225, 226, 231, 236, 246, 248, 251, 252, 254], "aimet_tensorflow_def": 231, "aimet_torch": [0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 190, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 254, 258], "aimet_vari": 247, "algo": [184, 236], "algorithm": [2, 12, 17, 29, 184, 227, 228, 229, 230, 231, 233, 234, 252, 259], "alia": [9, 22, 181, 187, 251, 254], "aliasbackward0": [158, 159, 160, 161, 162, 177, 180, 249], "align": [251, 255, 258], "all": [0, 2, 3, 7, 8, 9, 12, 14, 15, 20, 21, 22, 27, 30, 100, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 235, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262], "all_q_modul": 171, "all_quant_wrapp": 171, "allclos": 172, "allow": [2, 12, 13, 17, 20, 22, 25, 29, 158, 159, 160, 170, 172, 177, 184, 185, 190, 194, 196, 198, 208, 210, 219, 223, 227, 230, 231, 232, 233, 235, 236, 237, 250, 251, 252, 254, 257, 258, 259], "allow_custom_downsample_op": [29, 205, 207, 227], "allow_overwrit": [171, 217, 242, 251, 254], "allowed_accuracy_drop": [2, 12, 13, 25, 184, 185, 190, 194, 196, 208, 210, 223, 236], "alon": [178, 253], "along": [159, 178, 180, 236, 253], "alpha": 236, "alphadropout": 37, "alreadi": [28, 30, 180, 181, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 226, 241, 247, 251, 254, 258, 259], "also": [11, 13, 22, 23, 160, 172, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 222, 223, 225, 227, 230, 234, 236, 238, 239, 246, 248, 251, 252, 254, 255, 257, 258, 261, 262], "alter": [195, 203, 209], "altern": [8, 179, 186, 190, 194, 205, 206, 207, 208, 222, 248, 250], "alwai": [229, 241, 242, 258], "am": [8, 21, 179, 186, 222], "among": [13, 23, 25, 183, 185, 217, 223, 262], "amount": [202, 215, 236, 243], "amp": [0, 2, 12, 13, 25, 167, 174, 184, 185, 189, 223, 236, 237, 258], "amp_search_algo": [2, 12, 184, 190, 208, 236], "ampsearchalgo": [2, 12, 184, 190, 208, 236], "an": [8, 12, 13, 17, 20, 22, 25, 29, 30, 158, 159, 160, 166, 168, 170, 171, 172, 173, 175, 180, 181, 185, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 233, 234, 236, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "analys": [202, 215, 222], "analysi": [2, 8, 12, 17, 21, 29, 179, 184, 186, 190, 194, 198, 205, 206, 207, 208, 227, 230, 231, 233, 258], "analyt": 232, "analyz": [8, 17, 21, 29, 161, 162, 175, 179, 186, 189, 196, 210, 223, 227, 231, 232, 233, 235, 238, 246, 258], "analyze_per_layer_sensit": 258, "anchor": [148, 149], "andrea": 230, "andrei": 230, "andrew": 230, "ani": [2, 8, 9, 12, 17, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 172, 173, 174, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 227, 231, 233, 236, 238, 241, 243, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 262], "anneal": [11, 23, 183, 217], "anoth": [178, 181, 187, 198, 233, 234, 244, 251, 252, 254, 255], "any_nam": 247, "any_tag": 247, "anyth": [2, 12, 184, 190, 194, 202, 208, 215, 236], "api": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 168, 169, 170, 171, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 232, 241, 242, 244, 247, 252, 256, 257, 258, 261], "app": 216, "appear": [17, 29, 172, 173, 227, 231, 233], "append": 247, "appli": [1, 2, 7, 8, 13, 16, 25, 30, 100, 161, 162, 163, 164, 165, 170, 173, 174, 175, 182, 185, 188, 189, 190, 197, 198, 205, 206, 207, 208, 210, 211, 217, 218, 222, 223, 225, 226, 230, 232, 235, 236, 239, 241, 243, 244, 245, 246, 250, 253, 254, 255, 258, 259, 262, 263], "applic": [2, 12, 184, 190, 191, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 212, 217, 222, 223, 224, 225, 226, 231, 236, 251, 254, 261, 263], "apply_adaround": [0, 5, 11, 23, 183, 191, 195, 203, 209, 217, 258], "apply_adascal": [24, 218], "apply_omniqu": [176, 239], "apply_seq_ms": [0, 5, 171, 182, 188, 243, 258], "approach": [174, 238, 241, 253], "appropri": [23, 175, 181, 183, 184, 187, 190, 194, 197, 198, 202, 203, 208, 211, 215, 217, 229, 236, 241, 242, 246, 251, 253, 254, 259], "approx": 253, "approxim": [8, 222, 228, 243, 253, 263], "apt": [246, 248], "ar": [2, 8, 9, 11, 12, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 166, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "arang": [164, 165, 172, 180], "arbitrari": 250, "architectur": [199, 244, 246, 248, 258], "archiv": 248, "area": [222, 235], "arg": [9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 170, 174, 175, 177, 181, 199, 236, 238, 250, 251, 254, 258], "argmax": [191, 217, 223, 236, 251, 254], "argument": [2, 9, 12, 13, 22, 23, 24, 25, 30, 166, 170, 172, 173, 174, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 202, 215, 217, 218, 221, 222, 223, 236, 239, 243, 250, 251, 252, 254, 261], "around": [198, 203, 222, 258], "arrai": [170, 250, 252], "arrang": 232, "art": [190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216], "arthmet": [20, 199], "artifact": [9, 174, 178, 198, 237, 238, 247, 251, 258, 261, 262], "arxiv": [204, 218, 239, 258], "asic": 244, "ask": [30, 190, 194, 197, 198, 202, 208, 211, 215], "assert": [171, 172, 180, 199, 208, 251], "assert_array_equ": 199, "assess": 229, "assign": [30, 161, 162, 166, 175, 200, 201, 236, 247, 250], "associ": [2, 12, 13, 15, 25, 30, 160, 173, 174, 175, 180, 184, 185, 202, 215, 223, 225, 236, 261], "assum": [7, 13, 25, 170, 185, 223, 229, 248, 250], "astyp": 222, "asym": [182, 188, 243], "asymmetr": [161, 162, 180, 253, 255], "att": [20, 199], "attempt": 226, "attent": [20, 198, 199], "attention_mask": [239, 241, 242], "attn_output": [20, 199], "attribut": [12, 20, 30, 171, 172, 174, 175, 180, 184, 203, 222, 236, 258], "attributeerror": 258, "augment": 232, "auto": [17, 29, 190, 194, 205, 206, 207, 208, 227, 231, 233, 236, 237, 252], "auto_param": [205, 206, 207, 227, 231, 233], "auto_qu": [196, 210, 223], "auto_quant_v2": [0, 18, 223], "autoconfig": [239, 241, 242], "autograd": [158, 159, 160], "autom": [172, 208, 209, 212, 213, 214, 215, 244, 257], "automat": [13, 17, 25, 29, 174, 185, 189, 196, 210, 222, 227, 228, 230, 231, 233, 244, 247, 248, 250, 258], "automodelforcausallm": [241, 242], "automodeparam": [17, 29, 205, 206, 207, 227, 231, 233], "autoqu": [0, 5, 13, 25, 167, 185, 189, 223, 244, 258], "autoquantwithautomixedprecis": [13, 25, 185, 223], "autotoken": [239, 241, 242], "avail": [172, 177, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 222, 243, 246, 255, 258, 259, 260, 261], "avgpool1d": 38, "avgpool2d": [39, 238], "avgpool3d": 40, "avoid": [8, 22, 179, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 217, 222, 228, 244, 251, 254, 256, 257, 258], "awai": 203, "awar": [30, 189, 217, 224, 230, 235, 243, 244, 253, 259, 263], "axi": [180, 191, 202, 215, 217, 222, 223, 236, 251, 252, 253], "b": [30, 161, 162, 163, 164, 165, 180, 194, 231, 236, 250], "b5521f3": 258, "b_": [161, 162, 163, 164, 165], "b_0": [161, 162, 163, 164, 165], "b_1": [161, 162, 163, 164, 165, 250], "b_2": 250, "b_d": [161, 162, 163, 164, 165], "b_n": 250, "back": [2, 12, 158, 159, 174, 179, 184, 186, 222, 236, 253, 254, 255], "backend": [9, 181, 187, 197, 237, 251, 254, 261, 262], "backpropag": [158, 159, 160], "backslash": 258, "backward": [0, 167, 224, 225, 241, 242, 251, 254, 258], "bad": 20, "balanc": [230, 244, 263], "bandwidth": 228, "base": [2, 8, 21, 30, 160, 161, 162, 164, 165, 166, 171, 175, 177, 178, 179, 180, 184, 186, 190, 194, 195, 196, 197, 203, 208, 209, 210, 211, 218, 222, 227, 228, 229, 232, 236, 237, 239, 240, 242, 243, 246, 248, 250, 251, 254, 258, 261, 262], "baselin": [2, 12, 184, 197, 198, 210, 229, 230, 236, 254], "bash": 247, "basi": [203, 258], "basic": [190, 194, 197, 198, 208, 211, 236, 250, 254, 258, 261], "batch": [2, 8, 11, 13, 14, 15, 21, 23, 25, 26, 166, 174, 182, 183, 184, 185, 188, 194, 196, 197, 205, 206, 207, 211, 217, 218, 222, 223, 226, 231, 236, 239, 241, 242, 243, 244, 251, 254, 258], "batch_cntr": [190, 192, 193, 195, 200, 201, 203, 204, 209, 211, 212, 213, 214, 215, 223], "batch_data": 236, "batch_id": [239, 241, 242], "batch_norm": [3, 14, 15, 27, 224, 225], "batch_norm_fold": [0, 5, 14, 18, 167, 190, 191, 192, 193, 194, 195, 197, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 224, 225, 236, 254], "batch_siz": [23, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 231, 236, 239, 241, 242, 243, 251, 254], "batchnorm": [13, 15, 20, 25, 26, 185, 189, 190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 217, 223, 224, 225, 226, 234, 258], "batchnorm1d": [27, 43, 225], "batchnorm2d": [27, 44, 173, 225, 226], "batchnorm3d": 45, "batchnrom": 211, "bc": 192, "bc_param": 212, "bceloss": 41, "bcewithlogitsloss": 42, "becaus": [20, 172, 191, 199, 211, 250, 262], "becom": 258, "becuas": [20, 199, 221], "been": [0, 20, 30, 158, 167, 168, 173, 196, 197, 198, 203, 210, 220, 234, 241, 244, 248, 249, 252, 253, 258, 261], "befor": [1, 2, 8, 9, 20, 24, 30, 168, 171, 175, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 226, 230, 236, 240, 241, 242, 251, 253, 254, 256, 258, 262], "begin": [20, 161, 162, 163, 164, 165, 172, 173, 199, 245], "behav": [30, 100, 175, 258, 259], "behavior": [171, 172, 175, 190, 203, 208, 209, 212, 213, 214, 225, 245, 253, 255, 258, 262], "behind": 262, "being": [12, 29, 171, 172, 173, 179, 186, 222, 224, 227, 231, 233, 236, 250, 252, 256, 257, 258], "below": [20, 30, 161, 162, 164, 165, 171, 174, 175, 178, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 227, 229, 230, 232, 236, 238, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259], "benefici": [190, 194, 197, 198, 202, 203, 208, 215], "benefit": [237, 250, 252, 253], "bert": 259, "besid": 250, "bespok": 241, "best": [13, 25, 174, 185, 196, 203, 210, 223, 228, 230, 235, 238, 246, 253], "beta": [0, 11, 23, 167, 183, 217, 218, 258], "better": [191, 195, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 223, 230, 250, 254, 262], "between": [2, 8, 11, 17, 21, 23, 29, 169, 171, 174, 175, 179, 183, 184, 186, 190, 203, 208, 217, 219, 221, 222, 227, 231, 233, 235, 236, 243, 244, 250, 251, 253, 255, 263], "bfloat16": 166, "bia": [30, 166, 171, 172, 173, 175, 177, 178, 181, 192, 197, 204, 225, 226, 227, 249, 251, 254, 255, 258], "bias": [190, 192, 204, 208, 212, 225], "bias_correct": 212, "bilinear": 46, "billion": [262, 263], "bin": [247, 248, 261], "binari": [2, 12, 184, 190, 208, 236, 261], "binary_classifi": 20, "binary_fil": 261, "binary_file_nam": 261, "bit": [1, 2, 8, 12, 21, 23, 166, 170, 177, 179, 180, 183, 184, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 222, 235, 237, 241, 244, 246, 249, 250, 252, 253, 258, 259, 262, 263], "bitop": [2, 12, 184, 236], "bitwidth": [1, 2, 7, 8, 11, 12, 13, 21, 22, 23, 25, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 174, 175, 179, 180, 181, 183, 184, 185, 186, 187, 190, 194, 195, 203, 208, 209, 217, 222, 223, 226, 236, 237, 241, 244, 246, 250, 251, 252, 253, 254, 258, 262], "biwidth": [195, 203, 209], "bkd": [24, 218, 235, 239], "blankevoort": 230, "block": [7, 25, 161, 162, 163, 164, 165, 170, 171, 176, 185, 198, 218, 223, 239, 241, 242, 247, 252, 253, 258], "block_group": [170, 250], "block_siz": [7, 161, 162, 163, 164, 165, 170, 180, 250, 252], "blockwis": [7, 170, 180, 218, 235, 239, 252, 253, 258], "bn": [3, 14, 15, 26, 27, 190, 191, 192, 193, 195, 197, 200, 201, 203, 204, 208, 209, 212, 213, 214, 222, 224, 225, 235, 244, 258], "bn1": [20, 173], "bn2": 20, "bn_conv1": [217, 225, 226], "bn_num_batch": [14, 224], "bn_re_estimation_dataset": [14, 224], "bn_reestim": [0, 167, 197, 211, 224], "bnf": [217, 224, 225, 226], "bokeh": 236, "bool": [2, 9, 12, 13, 17, 22, 25, 29, 161, 162, 164, 165, 166, 170, 172, 173, 174, 177, 181, 184, 185, 187, 205, 206, 207, 209, 211, 212, 213, 214, 215, 223, 227, 231, 233, 236, 238, 250, 251, 252, 254], "boolean": [30, 174, 238], "both": [20, 21, 164, 165, 171, 172, 175, 179, 186, 190, 194, 201, 207, 208, 213, 214, 222, 225, 230, 231, 232, 234, 236, 240, 243, 246, 249, 251, 253, 254, 255, 259, 261, 263], "bottleneck": 259, "box": 258, "bq": [170, 250, 258], "branch": [172, 189, 255], "break": [190, 192, 193, 194, 195, 200, 201, 203, 204, 209, 211, 212, 213, 214, 215, 223, 231, 236, 239, 241, 242, 251, 254, 258], "bridg": 237, "british": 230, "broken": [240, 252], "browser": 189, "bruteforc": [12, 190, 208, 236], "buffer": 166, "bug": [252, 258], "bugfix": 258, "build": [9, 20, 171, 199, 248, 251], "built": [2, 30, 174, 175, 184, 197, 198, 236, 246], "bw": [2, 7, 12, 25, 170, 174, 181, 184, 185, 187, 223, 236, 250, 251, 252, 254, 257], "bw_output": 257, "c": [180, 228, 248], "c_": 180, "cach": [2, 12, 13, 25, 176, 184, 185, 190, 194, 208, 223, 236, 239, 248, 258], "cache_id": [13, 25, 185, 223], "calcul": [2, 12, 21, 22, 25, 175, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 222, 223, 229, 236, 240, 241, 251, 253, 254, 258], "calculate_and_fuse_encodings_into_weight": 241, "calibr": [1, 8, 9, 10, 21, 161, 162, 168, 175, 178, 179, 181, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 217, 219, 220, 236, 237, 241, 243, 244, 249, 250, 253, 258, 259, 262], "calibration_batch": [236, 254], "calibration_callback": [241, 242], "calibration_data_load": [175, 251], "calibration_data_s": 251, "calibration_dataset": [217, 224, 251, 254], "calibration_dataset_s": [196, 210, 223], "calibration_wrapp": 239, "call": [2, 8, 12, 13, 14, 20, 24, 25, 30, 100, 158, 159, 160, 166, 172, 174, 175, 179, 180, 184, 185, 186, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 218, 222, 223, 224, 227, 231, 233, 236, 238, 250, 251, 256, 258, 261, 262, 263], "call_funct": 172, "callabl": [2, 8, 9, 12, 13, 17, 23, 24, 25, 26, 29, 30, 170, 172, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 188, 217, 218, 222, 223, 224, 227, 231, 233, 236, 239, 243, 250, 251, 254], "callal": [2, 184, 236], "callback": [2, 8, 12, 13, 17, 21, 22, 29, 174, 179, 184, 186, 187, 194, 196, 198, 200, 201, 202, 205, 206, 207, 215, 223, 227, 231, 233, 236, 241, 243, 253, 254], "callbackfunc": [2, 12, 21, 174, 179, 184, 186, 190, 194, 202, 208, 215, 222, 236], "callbak": [190, 208], "can": [2, 6, 8, 9, 10, 11, 12, 19, 20, 22, 23, 27, 28, 158, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "candid": [2, 10, 12, 13, 17, 25, 29, 174, 182, 184, 185, 188, 190, 194, 208, 218, 223, 227, 229, 230, 231, 233, 236, 239, 243, 258], "cannot": [161, 162, 172, 173, 190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214], "capabl": [175, 232, 246, 249], "captur": [6, 19, 169, 172, 181, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 219, 221, 251, 254], "card": [246, 249], "care": 230, "carefulli": 244, "carri": [158, 159, 160], "case": [164, 165, 170, 171, 172, 173, 175, 198, 199, 202, 215, 217, 222, 229, 238, 240, 249, 250, 255, 257, 258, 263], "cast": 166, "cat": [180, 248], "catch": 258, "categor": [194, 195, 200, 201, 203, 217, 223, 224, 231, 236, 251, 254], "categorical_crossentropi": [200, 201], "categoricalaccuraci": [196, 197, 202, 217, 222, 223, 224, 251, 254], "categoricalcrossentropi": [196, 197, 202, 217, 222, 223, 224, 251, 254], "caus": [20, 205, 206, 207, 230, 255, 259], "caution": 217, "cbe67a": 258, "cd": 189, "cdot": [161, 162, 163, 164, 165], "ce68e75": 258, "ceil": [23, 183, 217, 223, 236], "cell": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "celu": 47, "center": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "center_crop": [194, 236], "centercrop": [191, 208, 210, 217, 223, 236, 251], "certain": [172, 179, 186, 208, 209, 212, 213, 214, 215, 222, 230, 236, 238, 252, 255, 257, 258], "chain": [239, 241, 242], "challeng": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "chang": [2, 12, 24, 160, 168, 171, 172, 178, 180, 181, 184, 190, 191, 192, 193, 194, 197, 198, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 225, 226, 230, 234, 236, 237, 238, 239, 243, 251, 252, 254, 255, 257, 258, 262], "channel": [7, 8, 17, 21, 29, 170, 175, 179, 186, 189, 190, 191, 192, 193, 204, 206, 208, 209, 211, 212, 213, 214, 215, 222, 224, 225, 226, 228, 229, 231, 233, 234, 235, 244, 250, 252, 253, 255, 258, 259], "channel_index": [8, 21, 179, 186, 222], "channel_index_0": [202, 215], "channel_index_1": [202, 215], "channel_index_n": [202, 215], "channel_prun": [29, 205, 207, 227, 231, 233], "channel_pruning_auto_mod": 227, "channel_pruning_manual_mod": 227, "channelpruningparamet": [29, 205, 207, 227, 231, 233], "channelshuffl": 49, "characterist": [190, 208, 211, 215], "chart": [226, 259], "check": [20, 25, 172, 173, 180, 185, 190, 194, 197, 198, 202, 208, 211, 215, 219, 221, 223, 247, 257, 258], "check_model_sensitivity_to_quant": [8, 21, 179, 186, 222], "checker": [173, 258], "checkpoint": [182, 187, 188, 243], "checkpoints_config": [182, 188, 243], "chipset": 262, "choic": [202, 203, 215, 222, 230, 246, 247, 252, 253], "choos": [187, 190, 194, 205, 206, 207, 208, 217, 218, 221, 227, 228, 230, 236, 239, 244, 248, 255, 258], "choose_fast_mixed_precis": [12, 194, 236], "choose_mixed_precis": [2, 12, 174, 184, 190, 194, 208, 236], "chose": 178, "chosen": [189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 247], "chunk": 253, "cin": 180, "circularpad1d": 50, "circularpad2d": 51, "circularpad3d": 52, "cl": [30, 192, 204, 212, 258], "clamp": [161, 162, 164, 165, 166, 253], "class": [2, 6, 8, 9, 11, 12, 13, 17, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 250, 251, 254, 255, 256, 257], "class_nam": [194, 199, 231, 236], "classif": [20, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 230, 243, 244], "classifi": 20, "classmethod": [9, 22, 30, 166, 181, 187, 251, 254], "cle": [4, 16, 28, 189, 217, 222, 223, 226, 258, 259], "cle_applied_model": [204, 226], "clean": [236, 258], "clean_start": [2, 12, 184, 190, 194, 208, 236], "clear_sess": 197, "clearli": 258, "clip": [197, 218, 225, 239, 253, 255], "clone": [160, 189, 198], "clone_lay": 198, "close": [228, 253], "closer": [191, 195, 203, 209], "cloud": [244, 247, 262], "cmp_re": 236, "cnn": 244, "cnt": [194, 231, 236], "code": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 226, 246, 247, 249, 250], "codelinaro": 247, "collate_fn": [239, 241, 242], "collect": [1, 8, 10, 21, 25, 168, 179, 185, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 216, 217, 219, 220, 222, 223, 229, 243, 244], "color": 234, "column": 229, "com": [189, 246, 247, 248], "combin": [2, 12, 172, 184, 190, 194, 208, 223, 228, 230, 236, 244, 247, 250, 258], "come": [230, 237, 254], "command": [189, 232, 246, 247, 248, 249, 261], "common": [171, 180, 190, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 247, 248, 250, 258, 259], "commonli": [23, 180, 183, 217, 244], "comp": [17, 29, 227, 231, 233], "comp_stat": [205, 206], "compar": [2, 12, 172, 184, 190, 194, 197, 198, 199, 202, 208, 211, 215, 218, 222, 236, 237, 239, 244, 254, 262], "comparison": [192, 193, 209, 212, 213, 214, 219, 221], "compat": [0, 167, 170, 191, 194, 197, 198, 236, 246, 249, 250, 251, 257, 258], "compil": [9, 196, 197, 198, 200, 201, 202, 217, 222, 223, 224, 251, 254, 258, 263], "complet": [2, 12, 184, 190, 194, 205, 206, 207, 208, 231, 236, 248, 259, 261], "complex": [22, 187, 198, 222, 238, 251, 254], "compli": [208, 209, 212, 213, 214, 215], "complic": 258, "compon": [171, 180, 239, 251, 258], "compos": [174, 191, 208, 210, 217, 223, 236, 238, 249, 251], "compress": [0, 18, 167, 189, 234, 244, 245, 252, 258], "compress_model": [17, 29, 205, 206, 207, 227, 231, 232, 233], "compress_schem": [17, 29, 205, 206, 207, 227, 231, 233], "compressed_bw": 252, "compressed_model": [205, 206, 227, 231, 233], "compressionschem": [17, 29, 205, 206, 207, 227, 231, 233], "compressionstat": [17, 29, 227, 231, 233], "compressor": [17, 29, 227, 231, 233], "compris": [190, 194, 208, 229, 239], "compromis": [205, 206, 207], "compuat": [13, 25, 185, 223], "comput": [2, 8, 9, 12, 13, 21, 22, 24, 25, 29, 30, 100, 166, 178, 179, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 227, 230, 231, 232, 233, 234, 236, 239, 241, 242, 243, 244, 246, 248, 249, 250, 252, 253, 258, 262, 263], "computation": 232, "compute_encod": [9, 22, 24, 30, 159, 160, 161, 162, 166, 168, 171, 174, 175, 180, 181, 182, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 217, 218, 220, 224, 236, 238, 239, 241, 242, 243, 249, 251, 254, 258], "computeencod": 246, "concat": 258, "concatenated_exampl": [239, 241, 242], "concept": 171, "concis": 252, "concret": 172, "concrete_arg": [25, 172, 185, 223], "concurr": 178, "condit": [172, 173, 224], "confer": 230, "config": [2, 8, 21, 22, 174, 178, 179, 181, 182, 184, 186, 187, 188, 190, 203, 208, 222, 224, 236, 238, 239, 241, 242, 243, 251, 254, 255, 258], "config_fil": [8, 9, 11, 13, 21, 22, 25, 179, 181, 185, 186, 187, 197, 202, 203, 215, 217, 222, 223, 224, 238, 243, 249, 251, 254], "config_util": [0, 167, 250], "configur": [8, 9, 11, 13, 17, 21, 23, 25, 29, 166, 174, 179, 180, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 204, 208, 209, 211, 212, 213, 214, 217, 222, 223, 227, 231, 233, 238, 241, 242, 249, 250, 251, 252, 254, 258], "confirm": 249, "conflict": [174, 238], "conform": [251, 263], "conjunct": 253, "connect": [217, 225, 226, 227, 230, 233, 244], "connectedgraph": [173, 258], "consecut": [192, 204, 212, 226], "consid": [24, 198, 205, 207, 218, 231, 233, 259, 263], "consist": [169, 170, 171, 190, 208, 221, 229, 236, 250, 253, 258], "consol": 219, "constant": [172, 193, 200, 213, 214, 229], "constantpad2d": [53, 54], "constantpad3d": 55, "constrain": [244, 250], "constraint": 252, "construct": [221, 247, 248, 258], "constructor": [6, 19, 169, 172, 221, 257], "consum": [196, 210, 223, 230, 237, 252], "contain": [1, 2, 8, 12, 21, 29, 30, 158, 166, 168, 172, 173, 174, 175, 179, 184, 186, 191, 192, 193, 195, 196, 200, 201, 202, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 220, 222, 226, 227, 231, 233, 236, 244, 245, 246, 249, 251, 252, 253, 254, 255, 261, 262], "container_nam": 247, "content": 244, "context": [9, 30, 175, 261, 263], "contigu": [218, 239, 241, 242, 258], "continu": [2, 20, 173, 184, 187, 190, 208, 236, 241, 247, 248, 258, 259], "contrast": [20, 171, 203], "contribut": [222, 236, 246, 259], "control": [25, 172, 175, 180, 185, 223, 253], "conv": [3, 7, 11, 14, 15, 23, 27, 170, 172, 183, 192, 197, 204, 212, 217, 224, 225, 226, 231, 233, 234, 238, 250, 255, 258], "conv1": [20, 172, 173, 181, 197, 205, 206, 207, 217, 225, 226, 227, 231, 233, 251, 254, 257], "conv1_relu": [217, 225, 226], "conv1d": [27, 56, 225, 258], "conv2": [20, 170, 172, 197, 227, 231, 233, 250, 257], "conv2d": [15, 20, 27, 30, 57, 170, 171, 172, 173, 175, 181, 197, 198, 203, 217, 225, 226, 227, 230, 234, 250, 251, 254, 258], "conv2d_lay": 203, "conv2dnormactiv": [225, 226, 249], "conv2dtranspos": [15, 225], "conv3d": 58, "conv_1": [20, 199, 250], "conv_2": [20, 199], "conv_weight": 225, "conv_weight_arrai": 225, "conv_weight_nam": 225, "conveni": [247, 262], "convent": [255, 258], "converg": [244, 254], "convers": [251, 257, 258], "convert": [2, 12, 20, 158, 171, 172, 174, 181, 184, 194, 208, 217, 223, 225, 226, 244, 251, 254, 256, 261, 263], "convert_to_pb": [22, 198, 251, 254], "convolut": [20, 170, 190, 191, 192, 193, 195, 199, 200, 201, 203, 204, 205, 207, 208, 209, 212, 213, 214, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 244, 250, 259], "convtranspos": 258, "convtranspose1d": [59, 258], "convtranspose2d": [27, 60, 225], "convtranspose3d": 61, "copi": [20, 22, 160, 166, 187, 189, 191, 208, 209, 212, 213, 214, 239, 241, 242, 247, 251, 253, 254], "copy_": 171, "corp": 236, "correct": [13, 25, 185, 192, 203, 204, 210, 215, 223, 236, 238, 244, 251, 254, 263], "correct_bia": 212, "correct_predict": [191, 217, 236, 251], "correctli": [249, 258], "correl": [190, 208, 236], "correspond": [2, 3, 6, 8, 11, 12, 14, 15, 19, 21, 23, 27, 166, 169, 173, 174, 175, 179, 181, 182, 183, 184, 186, 187, 188, 196, 203, 210, 217, 221, 222, 224, 225, 227, 234, 235, 236, 243, 246, 247, 248, 250, 251, 253, 254], "cosine_similar": 177, "cosineembeddingloss": 62, "cosinesimilar": 63, "cost": [17, 29, 205, 207, 227, 229, 230, 231, 233, 235, 237, 253, 254], "cost_metr": [17, 29, 205, 206, 207, 227, 231, 233], "costmetr": [17, 29, 205, 206, 207, 227, 231, 233], "could": [22, 171, 187, 190, 191, 192, 193, 195, 197, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 222, 234, 251, 252, 254, 257], "count_param": 199, "counter": [22, 197, 211, 251, 254], "counterpart": 175, "cours": [200, 201, 203, 205, 206, 207, 213, 214], "cout": 180, "cover": [190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 253], "cp": [227, 228, 229, 234], "cp310": [246, 248], "cp_comp_stat": 207, "cpu": [28, 172, 181, 187, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 225, 226, 236, 238, 239, 243, 244, 246, 247, 249, 251, 254, 258], "cpuexecutionprovid": [9, 190, 191, 192, 193, 217, 251, 258], "creat": [2, 8, 9, 12, 13, 17, 20, 22, 24, 25, 29, 30, 166, 168, 172, 174, 175, 178, 180, 184, 185, 187, 189, 196, 198, 202, 205, 206, 207, 210, 215, 217, 218, 220, 221, 223, 224, 227, 230, 231, 233, 237, 238, 239, 241, 243, 244, 249, 253, 254, 258, 261, 262, 263], "create_quantsim_and_encod": [8, 222], "critic": 194, "crop_length": [194, 236], "cropped_imag": [194, 236], "cross": [4, 13, 16, 25, 28, 185, 189, 217, 222, 223, 259], "cross_layer_equ": [0, 5, 18, 167, 192, 204, 212, 226], "crossentropyloss": [64, 224, 241, 242, 254], "crosslayerequ": 258, "ctcloss": 48, "ctivations_pdf": [8, 21, 179, 186, 222], "cu118": [246, 248], "cu121": [246, 247, 248], "cubla": 258, "cuda": [6, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 236, 238, 239, 241, 242, 243, 246, 248, 249, 251, 254, 258], "cudaexecutionprovid": [190, 191, 192, 193, 217, 251], "cudnn": [246, 249], "cudnn_conv_algo_search": [190, 191, 192, 193], "cumul": [196, 210], "current": [12, 17, 20, 22, 24, 29, 30, 160, 166, 173, 174, 184, 197, 198, 199, 208, 215, 218, 227, 231, 233, 236, 237, 239, 251, 254, 258, 264], "curv": [2, 12, 184, 190, 194, 208, 229, 236], "custom": [9, 20, 22, 30, 172, 175, 190, 196, 198, 210, 239, 244, 247, 251, 252, 253, 254, 258, 259], "custom_function_not_to_be_trac": 172, "custom_object": [22, 251, 254], "customdataload": [223, 236], "customdataset": 218, "custommodel": 172, "custommodul": 172, "cycl": 262, "d": [161, 162, 163, 164, 165, 239, 252], "dangl": [251, 254], "dark": [190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215], "data": [2, 8, 11, 12, 17, 21, 22, 23, 24, 25, 26, 29, 158, 159, 160, 168, 171, 172, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 227, 231, 233, 235, 236, 239, 241, 242, 243, 244, 250, 251, 253, 254, 258, 259], "data_load": [2, 23, 24, 25, 29, 168, 174, 182, 183, 184, 185, 188, 190, 192, 193, 195, 196, 197, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 223, 224, 227, 236, 239, 243, 251, 254], "data_loader_wrapp": [12, 194, 236], "data_set": [11, 24, 195, 203, 217, 218], "data_typ": [25, 171, 181, 185, 187, 223, 251, 254, 258], "datacent": 247, "dataload": [2, 12, 23, 24, 25, 26, 174, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 236, 239, 241, 242, 243, 251, 254], "dataloader_wrapp": [194, 236], "dataloader_wrapper_len": 239, "dataloadermnist": 227, "dataparallel": 254, "dataset": [2, 8, 9, 12, 13, 14, 21, 24, 25, 26, 179, 181, 184, 185, 186, 189, 198, 217, 218, 222, 223, 224, 231, 236, 241, 242, 243, 249, 251, 253, 254, 262], "dataset_dir": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 231, 236], "dataset_root": [217, 251], "dataset_train": [200, 201], "dataset_valid": [200, 201], "datasetv2": [11, 13, 14, 21, 217, 222, 223, 224], "datatyp": [13, 25, 185, 223, 252], "dc34fa4": 258, "de": [180, 253], "deb": 248, "debian": [246, 248], "debug": [171, 194, 219, 221, 252, 258], "decai": 230, "decid": [182, 188, 190, 191, 192, 193, 194, 195, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 218, 232, 236, 239, 243, 247], "decim": [205, 206, 207, 227, 231, 233], "decis": 263, "declar": 30, "decode_predict": [194, 231, 236], "decompos": [230, 231, 233], "decomposit": [206, 207, 230, 231, 233], "decompress": [7, 170, 250], "decompressed_bw": [7, 170, 250], "decor": 30, "decreas": [10, 243, 244], "dedic": 244, "deem": 262, "deep": [225, 230, 237, 244], "deepcopi": 191, "deepseek": 239, "deepspe": 258, "def": [2, 9, 12, 17, 20, 22, 29, 30, 171, 172, 173, 174, 181, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 227, 231, 233, 236, 239, 241, 242, 243, 249, 251, 254, 256, 257], "default": [2, 8, 9, 11, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 160, 161, 162, 164, 165, 166, 168, 172, 174, 175, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 236, 238, 243, 244, 248, 249, 251, 252, 253, 254, 258], "default_activation_bw": [8, 222, 236], "default_beta_rang": [11, 23, 183, 217], "default_bitwidth": 236, "default_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "default_config_fil": [23, 183, 217], "default_config_per_channel": [197, 255], "default_data_col": [239, 241, 242], "default_data_typ": [22, 181, 187, 251, 254], "default_forward_fn": [182, 188, 218, 243], "default_new": 178, "default_num_iter": [11, 23, 183, 195, 203, 209, 210, 217], "default_output_bw": [21, 22, 179, 181, 186, 187, 190, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 222, 224, 236, 238, 239, 241, 242, 243, 249, 251, 254], "default_param_bw": [8, 11, 21, 22, 23, 179, 181, 183, 186, 187, 190, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 222, 224, 236, 238, 239, 241, 242, 243, 249, 251, 254], "default_quant_schem": [11, 23, 183, 195, 203, 209, 217], "default_reg_param": [11, 23, 183, 217], "default_warm_start": [11, 23, 183, 217], "defin": [2, 12, 20, 30, 172, 173, 175, 180, 184, 194, 199, 202, 203, 205, 206, 207, 209, 212, 213, 214, 215, 218, 222, 227, 231, 233, 236, 239, 247, 251, 252, 253, 255, 256, 257, 258], "definit": [2, 12, 29, 30, 169, 171, 172, 174, 178, 184, 187, 190, 194, 197, 198, 202, 203, 208, 209, 212, 213, 214, 215, 221, 227, 231, 233, 236, 251, 253, 256, 257], "degrad": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 262, 263], "degre": [231, 233], "deleg": 180, "delet": [2, 12, 184, 190, 194, 208, 222, 236], "deliber": [190, 194, 202, 203, 208, 215], "delta": [8, 20, 21, 179, 186, 198, 199, 222, 246, 253, 258], "demand": 244, "demonstr": [189, 202, 215], "denot": [231, 234, 252], "dens": [15, 20, 197, 198, 199, 225, 256, 258], "depend": [158, 159, 160, 172, 189, 203, 228, 246, 247, 248, 255, 258], "deploi": [216, 253, 260, 262], "deploy": [216, 244, 245, 260, 261, 263], "deprec": [181, 251, 254, 258], "depth": [217, 224, 226, 258, 259], "depthwis": 258, "depthwise_conv2d": 226, "depthwiseconv2d": [15, 225, 226], "dequant": [158, 159, 160, 162, 165, 166, 180, 244, 246, 258, 262, 263], "dequantizedtensor": [159, 160, 162, 180, 249], "dequantizelinear": 177, "deriv": [161, 162, 164, 165, 180, 194, 208, 217, 236, 253], "descend": 166, "describ": [166, 171, 189, 203, 230, 232, 236, 246, 247, 248, 249, 250, 252, 253, 255, 259, 260, 262, 263], "descript": [175, 190, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 252, 253], "design": [173, 190, 194, 199, 202, 203, 208, 215, 217, 244, 250], "desir": [8, 22, 160, 179, 180, 181, 186, 187, 190, 194, 205, 206, 207, 208, 222, 228, 230, 231, 236, 237, 251, 254, 259, 261, 263], "detach": [160, 177], "detail": [25, 172, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 223, 227, 229, 232, 238, 245, 247, 248, 250, 252, 253, 259, 261, 263], "detect": 230, "determin": [8, 21, 22, 166, 170, 175, 179, 186, 187, 190, 198, 208, 210, 218, 222, 223, 235, 239, 241, 242, 243, 244, 250, 251, 252, 254], "determinist": 172, "dev": [247, 248], "develop": [168, 216, 220, 244, 247, 248, 262], "devic": [6, 13, 23, 25, 160, 172, 181, 183, 184, 185, 187, 190, 191, 192, 193, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 236, 238, 239, 241, 242, 243, 244, 245, 249, 251, 253, 254, 258, 260, 261, 262, 263], "diagnost": 259, "diagram": [198, 241, 242], "dict": [1, 2, 8, 9, 10, 12, 17, 21, 22, 24, 25, 29, 166, 169, 172, 174, 175, 179, 184, 185, 186, 187, 191, 217, 218, 221, 222, 223, 227, 231, 233, 236, 238, 243, 251, 252, 254, 257], "dictat": 262, "dictionari": [8, 12, 17, 21, 29, 166, 179, 181, 186, 187, 196, 197, 199, 222, 227, 229, 230, 231, 233, 236, 251, 254, 255], "dicuss": 199, "did": [203, 247], "didn": 211, "diff": 258, "differ": [17, 29, 171, 172, 178, 190, 194, 197, 198, 203, 205, 206, 207, 208, 213, 214, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 240, 243, 244, 248, 250, 252, 253, 259, 261, 263], "dim": [170, 180, 208, 250], "dimens": [7, 170, 175, 231, 233, 250, 252, 253, 259], "dir": [9, 197, 202, 203, 204, 248, 251], "dir_path": [6, 169, 221], "direct": [1, 217, 221, 225, 236, 245, 250, 252, 253, 258, 262, 263], "directli": [8, 14, 197, 211, 222, 224, 238, 241, 251, 253, 258, 262], "directori": [2, 6, 8, 9, 12, 13, 17, 19, 21, 25, 29, 169, 179, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 247, 248, 251, 254, 261], "directrori": 236, "disabl": [2, 8, 21, 171, 175, 178, 179, 181, 182, 186, 187, 188, 194, 205, 207, 222, 225, 229, 230, 236, 243, 251, 253, 254, 255], "discard": 222, "disciplin": 217, "discuss": [189, 194, 205, 206, 207, 217], "disk": [6, 19, 169, 221], "displai": [189, 194, 198, 220, 232], "display_comp_ratio_plot": 232, "display_eval_scor": 232, "dist": [247, 248], "distict": 258, "distil": [218, 235, 239], "distinct": 173, "distort": 253, "distribut": [17, 29, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 217, 226, 227, 231, 233, 244, 253, 258, 259], "divbackward0": 180, "diverg": 244, "divid": [228, 250, 254], "divis": [180, 244, 250], "dlc": 261, "dlc_path": 261, "dlcompress": 258, "dlequal": 258, "dlf": 244, "do": [9, 12, 20, 23, 172, 173, 178, 181, 183, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 222, 225, 230, 236, 238, 239, 241, 247, 248, 249, 251, 253, 254, 262, 263], "do_constant_fold": [190, 192, 193, 225], "do_not_trace_m": 172, "doc": [172, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 247, 258], "docker": 245, "docker_container_nam": 247, "docker_image_nam": 247, "docker_run_command": 247, "dockerfil": 247, "docstr": 250, "document": [178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 208, 209, 210, 211, 212, 213, 214, 215, 221, 225, 232, 236, 246, 250, 252, 253, 258, 261, 262, 263], "doe": [20, 30, 172, 184, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 220, 222, 227, 229, 231, 233, 239, 243, 253, 254, 257, 258, 259, 262, 263], "doesn": [30, 190, 192, 193, 195, 196, 204, 205, 206, 207, 208, 209, 212, 213, 214, 251, 254, 262], "doesnt": [174, 238], "don": [30, 172, 194, 197, 198, 202, 203, 215, 222, 241, 242], "done": [161, 162, 180, 194, 199, 203, 211, 230, 251, 255, 256, 258], "down": [203, 240, 252], "download": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 245, 246, 248], "download_url": [247, 248], "downsampl": [205, 207], "downstream": [234, 252, 258], "dpkg": 248, "dq_output": 30, "drastic": [229, 263], "drawback": 253, "driver": [231, 246, 249], "drop": [2, 12, 13, 25, 175, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 228, 230, 235, 236, 253, 254, 259], "dropout": [20, 65, 198, 199], "dropout1": [20, 199], "dropout1d": 66, "dropout2": [20, 199], "dropout2d": 67, "dropout3d": 68, "dtype": [158, 159, 160, 166, 170, 171, 172, 174, 238, 239, 241, 242, 250, 252, 258], "due": [20, 173, 258], "dummi": [8, 23, 25, 27, 28, 169, 173, 179, 181, 183, 184, 185, 186, 187, 190, 202, 208, 215, 217, 221, 222, 223, 225, 226, 241, 242, 251, 254], "dummy_attention_mask": [241, 242], "dummy_data": 222, "dummy_input": [8, 9, 23, 24, 25, 27, 28, 168, 169, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 236, 238, 239, 241, 242, 243, 249, 250, 251, 254, 257], "dummy_input_dict": 221, "dummy_input_id": [241, 242], "dummy_model": [218, 239], "dummymodel": [24, 218], "dump": [197, 239, 258], "duplic": [160, 172], "dure": [1, 2, 9, 10, 11, 12, 13, 17, 20, 23, 24, 25, 29, 30, 166, 168, 175, 183, 184, 185, 193, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 217, 218, 219, 220, 223, 227, 230, 231, 232, 233, 236, 243, 244, 245, 251, 253, 254, 255, 258, 263], "dynam": [166, 172, 244, 253, 258], "dynamic_ax": [190, 191, 192, 193, 217, 225, 236, 251], "dynamo": 177, "e": [8, 9, 22, 176, 181, 187, 190, 191, 194, 197, 202, 203, 208, 211, 215, 222, 235, 236, 239, 243, 251, 252, 254], "e7d10c7": 258, "each": [1, 2, 8, 9, 10, 11, 12, 20, 21, 23, 30, 168, 173, 175, 176, 179, 180, 183, 184, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 236, 238, 239, 243, 244, 250, 251, 252, 253, 255, 259, 261], "earli": [2, 12, 184, 236], "easi": [238, 258, 262], "easier": 171, "easili": [180, 227, 231, 233], "ecosystem": 216, "ed": 217, "edg": [244, 245, 262], "edit": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 252], "effect": [11, 14, 22, 23, 26, 175, 183, 193, 198, 200, 201, 213, 214, 217, 222, 224, 235, 244, 251, 254, 262, 263], "effici": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 197, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "efficientnetb4": 258, "effort": [13, 25, 174, 185, 196, 210, 223, 238, 262, 263], "eights_pdf": [8, 21, 179, 186, 222], "either": [17, 29, 170, 174, 180, 190, 195, 203, 205, 206, 207, 208, 227, 231, 233, 234, 236, 238, 247, 250, 257], "element": 252, "elementari": 198, "elementwis": [172, 175, 258], "elimin": [222, 225, 244, 253], "els": [2, 12, 172, 173, 184, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 223, 224, 225, 226, 231, 236, 238, 239, 243, 249, 254], "elu": 69, "embed": [20, 70, 172, 177, 181, 187, 198, 199, 230, 251, 254, 258, 259], "embed_dim": [20, 198, 199], "embedding_lay": [20, 199], "embeddingbag": 71, "embodi": 244, "empir": [196, 210], "emploi": [244, 245], "empti": 255, "emul": [245, 253], "enabl": [2, 7, 8, 12, 13, 17, 21, 25, 29, 166, 171, 174, 178, 179, 182, 184, 185, 186, 188, 194, 201, 203, 205, 207, 208, 214, 221, 223, 224, 225, 227, 231, 232, 233, 235, 236, 243, 244, 250, 251, 253, 255, 258, 261, 262], "enable_convert_op_reduct": [12, 174, 184, 194, 208, 236], "enable_onnx_check": [181, 187, 251, 254], "enable_per_layer_mse_loss": [8, 21, 202, 215, 222], "enbl": 250, "enc": 30, "enc_typ": 252, "encapsul": [2, 12, 174, 179, 184, 186, 222, 236], "encaptur": 178, "encod": [1, 2, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 30, 158, 159, 160, 161, 162, 166, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 209, 210, 212, 213, 214, 217, 218, 219, 221, 223, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 250, 254, 258, 261, 262], "encoding_analyz": [161, 162, 166], "encoding_file_path": [251, 254], "encoding_path": [195, 196, 203, 209, 210, 217, 223], "encoding_vers": [250, 252], "encodinganalyz": [161, 162, 166], "encodinganalyzerforpython": 246, "encodingbas": [158, 159, 166], "encodingmismatchinfo": 251, "encodingtyp": 252, "encount": [30, 198], "encourag": [20, 172, 256, 257], "end": [14, 24, 161, 162, 163, 164, 165, 172, 173, 189, 197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 218, 224, 230, 236, 243, 245, 251, 262], "end_beta": [11, 23, 183, 217], "end_idx": 223, "enforc": 166, "engin": [221, 225, 236, 245, 247, 250, 252, 253, 258, 262, 263], "enhanc": [8, 21, 178, 179, 186, 202, 215, 222, 251, 253, 258], "enough": [194, 205, 206, 207, 217, 263], "ensur": [175, 203, 221, 224, 229, 236, 241, 242, 248, 249, 258, 259, 263], "enter": [30, 175, 223], "entir": [8, 21, 179, 180, 186, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 227, 230, 231, 233, 253], "entireti": [20, 203], "entri": [25, 181, 185, 187, 223, 251, 252, 254, 255], "entrypoint": 247, "enum": [2, 9, 12, 17, 23, 29, 169, 181, 183, 184, 187, 190, 194, 197, 198, 208, 211, 217, 221, 227, 231, 233, 236, 251, 252, 254], "enumer": [17, 29, 169, 199, 221, 227, 231, 233, 236, 239, 241, 242, 251, 254], "environ": [189, 190, 194, 196, 197, 200, 201, 208, 215, 236, 244, 246, 248], "envsetup": [247, 248], "ep": [225, 226, 258], "epoch": [191, 192, 193, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 224, 227, 230, 231, 233, 241, 242, 254], "epsilon": [20, 198, 199, 258], "equal": [4, 13, 16, 25, 28, 159, 160, 170, 180, 185, 189, 195, 199, 217, 222, 223, 228, 229, 250, 253, 259], "equalize_model": [4, 16, 28, 192, 204, 212, 226], "equat": [161, 162, 163, 164, 165, 250, 253], "equival": [25, 30, 164, 165, 166, 170, 174, 181, 184, 185, 187, 190, 203, 208, 209, 212, 213, 214, 215, 218, 223, 236, 239, 250, 251, 254, 257, 261], "erorr": 194, "error": [1, 13, 20, 25, 30, 172, 180, 181, 185, 194, 217, 219, 223, 236, 238, 244, 251, 253, 254, 258, 259], "especi": [190, 203, 208, 241, 244, 254, 259, 262], "essenti": [190, 194, 197, 198, 208, 211], "estim": [189, 253, 258, 262], "esults_dir": [8, 21, 179, 186, 222], "etc": [24, 190, 194, 197, 198, 203, 208, 218, 228, 244, 247, 252, 258], "eval": [2, 8, 12, 13, 17, 21, 24, 25, 29, 172, 174, 179, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 238, 243, 249, 251, 254], "eval_callback": [8, 13, 17, 21, 25, 29, 179, 185, 186, 196, 197, 202, 205, 206, 207, 210, 215, 222, 223, 227, 231, 233, 236], "eval_callback_factori": [190, 208], "eval_callback_fn": 222, "eval_callback_for_phase1": [2, 12, 184, 190, 208, 236], "eval_callback_for_phase2": [2, 12, 184, 190, 208, 236], "eval_callback_for_phase_1": 236, "eval_callback_for_phase_2": 236, "eval_callback_phase1": 194, "eval_callback_phase2": 194, "eval_data_load": [236, 251], "eval_data_s": 251, "eval_dataset": [196, 197, 217, 222, 223, 224, 251, 254], "eval_dataset_s": [196, 197, 210, 223], "eval_func": [194, 202, 231, 236], "eval_iter": [17, 29, 205, 206, 207, 227, 231, 233], "eval_scor": [8, 17, 21, 29, 179, 186, 222, 227, 231, 233], "evalcallbackfactori": [2, 174, 184, 190, 208, 236], "evalfunct": 231, "evalu": [2, 8, 12, 13, 17, 21, 25, 29, 174, 179, 184, 185, 186, 189, 196, 198, 210, 217, 218, 223, 224, 227, 229, 230, 231, 232, 233, 236, 239, 243, 249, 253, 263], "evaluate_accuraci": 208, "evaluate_model": [227, 231, 233], "even": [30, 180, 190, 194, 197, 198, 203, 208, 236, 237, 238], "evenli": 250, "eventu": 238, "everi": [6, 8, 11, 19, 21, 23, 169, 179, 180, 183, 186, 190, 191, 192, 193, 194, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 211, 213, 214, 215, 217, 218, 219, 221, 222, 229, 230, 239, 253, 254], "evlauat": 194, "ex": 178, "exactli": [13, 24, 30, 100, 166, 175, 202, 215, 218, 223, 253], "examin": 172, "exampl": [7, 9, 17, 24, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 173, 174, 175, 177, 178, 180, 181, 182, 188, 198, 199, 210, 217, 218, 220, 221, 222, 223, 225, 226, 228, 234, 238, 239, 241, 242, 243, 244, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 263], "exce": [168, 220], "exceed": [168, 220], "except": [20, 182, 188, 190, 192, 193, 199, 202, 215, 225, 226, 236, 238, 243, 250, 254], "exchang": 244, "exclud": [25, 172, 173, 179, 182, 185, 186, 188, 222, 223, 243, 252, 258], "excluded_lay": 252, "exclus": [166, 170, 250], "execut": [2, 9, 12, 13, 25, 172, 181, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 223, 225, 232, 236, 248, 249, 251, 254, 258], "exercis": [190, 197, 202, 203, 208, 211, 215], "exist": [30, 100, 166, 175, 181, 187, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 236, 250, 251, 254, 262], "exist_ok": [190, 194, 195, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "exit": [2, 12, 13, 25, 30, 175, 184, 185, 223, 236], "expand": [250, 258], "expand_dim": 223, "expanded_conv_depthwis": [217, 226], "expans": [230, 250], "expect": [2, 8, 13, 17, 21, 22, 23, 25, 29, 168, 172, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 197, 205, 206, 207, 208, 211, 217, 220, 222, 223, 227, 230, 231, 233, 236, 238, 239, 243, 251, 254, 256], "experi": [17, 29, 170, 191, 195, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 227, 230, 231, 233, 246, 250, 263], "experienc": 246, "experiment": [218, 230, 239, 250, 258], "experss": [20, 199], "expert": [196, 210], "explain": [190, 194, 197, 198, 202, 208, 211, 215, 227, 230, 258], "explan": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 245], "explicitli": [13, 25, 185, 223, 234], "expon": [166, 170, 250], "exponent_bit": [166, 170, 250], "export": [8, 9, 21, 22, 24, 25, 169, 171, 174, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 209, 210, 212, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 230, 236, 237, 238, 239, 243, 247, 248, 252, 257, 258, 261], "export_int32_bia": 177, "export_model": [9, 178, 181, 187, 251, 254], "export_param": [190, 192, 193], "export_per_layer_encoding_min_max_rang": [8, 21, 179, 186, 222], "export_per_layer_mse_loss": [8, 21, 179, 186, 222], "export_per_layer_stats_histogram": [8, 21, 179, 186, 222], "export_to_torchscript": [181, 187, 251, 254], "exported_model": 250, "expos": [172, 217, 222], "express": [17, 29, 227, 231, 233, 241, 242], "extend": [171, 258], "extens": [175, 189, 247, 248, 261], "extern": 258, "extra": [166, 175, 258], "extract": [192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 244, 251], "extrem": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 253], "ey": 222, "f": [172, 173, 177, 180, 191, 197, 210, 217, 223, 224, 225, 226, 236, 246, 247, 248, 251, 254], "f0": 228, "facebook": [241, 242, 244], "facilit": 245, "fact": 241, "factor": [197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 228, 230, 250], "factori": [2, 12, 174, 184, 236], "fail": [172, 173, 174, 181, 190, 192, 193, 223, 225, 226, 236, 238, 251, 254, 258], "failur": 258, "fair": 244, "fairli": [194, 197, 198, 202, 203, 215], "fake": [162, 165, 166, 174, 184, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 208, 209, 210, 211, 212, 213, 214, 236, 251, 258], "fakequ": [181, 187, 251, 254], "fall": [205, 206, 207, 229, 255, 263], "fallback": 261, "fals": [2, 7, 9, 12, 13, 17, 20, 22, 25, 29, 30, 158, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 178, 180, 181, 184, 185, 187, 190, 192, 193, 194, 195, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 221, 223, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 246, 249, 250, 251, 252, 254, 255], "famili": [238, 244, 258], "familiar": 189, "far": [197, 211], "farther": [191, 195, 209], "fashion": 203, "fast": [12, 236], "faster": [190, 196, 197, 203, 208, 210, 236, 258], "fc": [230, 233], "fc1": 172, "fc2": 172, "featur": [7, 20, 24, 168, 171, 172, 173, 177, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 220, 223, 225, 226, 230, 232, 236, 238, 239, 244, 249, 253, 256, 257, 258, 259], "featurealphadropout": 72, "feed": [20, 198, 199, 253], "feel": [197, 198, 211, 238], "feez": [182, 188, 243], "few": [190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 224, 228], "fewer": [230, 262], "ff_dim": [20, 198, 199], "ffn": [20, 199], "ffn_output": [20, 199], "field": [2, 166, 184, 190, 208, 236, 252], "figur": [217, 223, 226, 227, 229, 231, 232, 233, 234, 253, 259], "file": [2, 8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 174, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 196, 198, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 227, 231, 233, 236, 238, 243, 246, 247, 248, 250, 251, 252, 253, 254, 258, 261, 262], "file_path": [187, 217, 225, 226, 236, 251], "filenam": [8, 9, 11, 22, 23, 181, 183, 187, 190, 191, 192, 193, 217, 218, 222, 224, 239, 243, 251, 254], "filename_prefix": [9, 11, 22, 23, 181, 183, 187, 190, 191, 194, 195, 197, 203, 204, 208, 209, 210, 211, 212, 213, 214, 217, 218, 224, 236, 239, 243, 251, 254], "filename_prefix_encod": [178, 181, 187, 251, 254], "fill": [25, 181, 185, 187, 223, 251, 254], "filter": [20, 203, 244], "final": [17, 20, 29, 173, 182, 188, 190, 194, 197, 198, 202, 208, 211, 215, 222, 227, 228, 229, 231, 233, 236, 241, 242, 243, 248, 250, 254, 259, 262], "find": [2, 12, 15, 173, 174, 182, 184, 187, 188, 190, 191, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 218, 222, 225, 229, 237, 238, 239, 243, 253, 254, 263], "find_pkg_url_str": [247, 248], "fine": [17, 22, 29, 178, 187, 191, 192, 193, 195, 196, 198, 200, 201, 204, 209, 210, 212, 213, 214, 227, 228, 231, 233, 245, 251, 254, 262, 263], "finer": [166, 180, 250], "finess": 263, "finetun": [191, 192, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 213, 214], "finetuned_accuraci": [211, 213, 214], "finetuned_accuracy_bn_reestim": 211, "finetuned_model": [205, 206], "finish": [200, 201, 213, 214], "finit": 166, "first": [20, 23, 172, 175, 178, 180, 182, 183, 188, 197, 198, 199, 202, 203, 205, 206, 207, 211, 215, 217, 226, 230, 231, 243, 247, 258, 259, 262], "fit": [17, 29, 197, 198, 200, 201, 211, 224, 227, 229, 231, 233, 254, 262], "five": [192, 212], "fix": [173, 190, 191, 192, 193, 236, 252, 253, 258], "flag": [2, 12, 13, 25, 168, 171, 172, 173, 174, 181, 184, 185, 187, 190, 194, 208, 220, 223, 236, 238, 251, 254], "flatten": [73, 172, 197, 241, 242, 252], "flexibl": [190, 208], "flexround": 218, "float": [2, 8, 11, 12, 13, 17, 21, 22, 23, 25, 29, 30, 158, 159, 166, 170, 174, 179, 181, 183, 184, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 225, 226, 227, 231, 233, 236, 237, 244, 245, 250, 251, 252, 253, 254, 258, 259, 262, 263], "float16": [9, 166, 170, 171, 250, 251], "float32": [9, 222, 251], "float8": 258, "float_fallback": 261, "floatencod": [166, 258], "floatquant": [166, 171], "floatquantizedequant": 171, "flow": [25, 172, 185, 223, 253, 259], "fly": 177, "fo": 203, "focu": 211, "fold": [3, 13, 14, 15, 25, 27, 74, 185, 191, 194, 217, 222, 223, 224, 226, 236, 244, 258], "fold_all_batch_norm": [15, 27, 194, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 225, 236, 254], "fold_all_batch_norms_to_scal": [14, 197, 211, 224], "fold_all_batch_norms_to_weight": [3, 190, 191, 192, 193, 225], "folded_model": 225, "folder": [202, 215, 222], "follow": [0, 5, 6, 8, 9, 18, 19, 20, 21, 22, 30, 100, 167, 169, 171, 172, 173, 174, 175, 178, 179, 181, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 237, 238, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "footprint": 244, "forall_": [161, 162, 163, 164, 165], "forc": [190, 191, 192, 193, 205, 206, 207, 208, 209, 212, 213, 214, 215], "form": [20, 202, 215], "formal": 250, "format": [8, 11, 21, 22, 23, 160, 176, 179, 181, 183, 186, 187, 191, 217, 222, 223, 236, 239, 243, 244, 245, 250, 251, 253, 254, 256, 258, 261, 262], "former": 257, "forward": [2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 166, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 193, 194, 197, 198, 199, 200, 201, 202, 208, 209, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 236, 239, 241, 242, 243, 247, 251, 254, 257, 258, 259, 263], "forward_fn": [2, 13, 23, 24, 25, 26, 174, 176, 182, 183, 184, 185, 188, 190, 197, 208, 211, 217, 218, 223, 224, 236, 239, 243], "forward_one_batch": [190, 208], "forward_pass": [217, 218, 236, 241, 242, 243, 249], "forward_pass_arg": 251, "forward_pass_call_back": [194, 236], "forward_pass_callback": [2, 8, 9, 12, 21, 22, 179, 181, 184, 186, 187, 190, 192, 193, 195, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 222, 236, 251, 254], "forward_pass_callback_2": [12, 236], "forward_pass_callback_arg": [9, 22, 181, 187, 194, 195, 197, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 236, 251, 254], "forward_pass_callback_fn": 222, "found": [171, 199, 253, 254], "four": [223, 253], "fp": 235, "fp16": [174, 238, 258, 262], "fp32": [2, 6, 8, 12, 19, 21, 169, 174, 179, 182, 184, 186, 188, 197, 198, 215, 218, 221, 222, 236, 239, 243, 244, 252, 253, 254, 258, 261, 262, 263], "fp32_acccuraci": 194, "fp32_layer_output": 221, "fp32_layer_output_util": 221, "fp32_output": [2, 236], "fp_qdq": 171, "fp_quantiz": 171, "frac": [161, 162, 163, 164, 165, 166, 180, 253], "fraction": [236, 263], "fractionalmaxpool2d": 75, "fractionalmaxpool3d": 76, "framework": [189, 218, 221, 225, 239, 244, 245, 246, 247, 248, 249, 251, 253, 255, 261, 263], "free": [192, 197, 198, 204, 211, 212, 238], "freez": [171, 195, 203, 209, 218, 239, 243], "freeze_encod": 171, "fresh": 246, "friendli": [178, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 223, 262], "from": [2, 9, 12, 13, 20, 22, 23, 24, 25, 26, 30, 159, 160, 161, 162, 166, 167, 170, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 263], "from_encod": 166, "from_modul": 30, "from_numpi": 177, "from_pretrain": [239, 241, 242], "from_str": [9, 22, 181, 187, 251, 254], "from_tensor_slic": 222, "front": [2, 12, 13, 25, 184, 185, 190, 194, 208, 223], "frozen": [1, 191, 203, 217, 241, 242], "full": [24, 190, 191, 192, 193, 194, 195, 197, 200, 201, 204, 208, 209, 211, 212, 213, 214, 218, 231, 236, 237, 244, 256, 257], "fulli": [0, 167, 177, 230, 233, 251, 252, 258], "func": [2, 12, 174, 179, 184, 186, 222, 236], "func_callback_arg": [2, 12, 174, 179, 184, 186, 190, 208, 222, 236], "func_wrapp": [194, 231, 236], "function": [0, 2, 5, 8, 9, 12, 13, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 158, 159, 160, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 195, 198, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 236, 239, 241, 242, 243, 244, 250, 251, 253, 254, 256, 257, 258, 261, 263], "function_nam": [205, 206, 207], "functional_callback": 198, "functional_model": [197, 198, 199], "functional_model_weight_ord": 199, "functional_op": 173, "fundament": 171, "furhter": [196, 210], "furo": 258, "further": [158, 161, 162, 163, 164, 165, 172, 180, 207, 227, 230, 253, 263], "furthermor": 20, "fuse": [197, 241, 253, 255], "fuse_bn_into_conv": 225, "fusion": [244, 258], "futur": [168, 220], "fx": [25, 172, 185, 223], "g": [22, 176, 187, 190, 191, 194, 197, 202, 203, 208, 211, 215, 222, 236, 239, 247, 251, 252, 254], "gain": [191, 195, 200, 201, 203, 204, 205, 206, 207, 209, 212, 213, 214, 217, 227, 228, 230, 263], "gamma": 218, "gap": 237, "gather": 251, "gaussiannllloss": 81, "gave": 223, "gelu": 77, "gemm": [7, 197, 255, 258], "gemma3": 258, "gener": [6, 19, 30, 161, 162, 163, 164, 165, 169, 177, 180, 184, 189, 190, 194, 198, 208, 210, 217, 218, 222, 224, 225, 226, 230, 236, 238, 239, 241, 242, 243, 244, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262], "generate_calibration_callback": [241, 242], "generate_layer_output": [6, 19, 169, 221], "get": [2, 12, 17, 29, 166, 172, 174, 178, 184, 190, 191, 192, 193, 194, 197, 198, 199, 202, 217, 221, 230, 231, 233, 236, 237, 238, 242, 243, 246, 248, 258], "get_activation_quant": [2, 236], "get_active_param_quant": [12, 236], "get_active_quant": [2, 12, 174, 184, 236], "get_available_provid": [190, 191, 192, 193, 217], "get_calibration_and_eval_data_load": 251, "get_candid": [2, 12, 174, 184, 236], "get_data_loader_wrapp": [194, 236], "get_default_kernel": 30, "get_devic": 210, "get_encod": 166, "get_eval_func": [194, 231, 236], "get_extra_st": 166, "get_input": [190, 191, 192, 193, 217, 236], "get_input_quantizer_modul": [174, 184, 236], "get_kernel": 30, "get_loss_fn": [182, 188, 243], "get_model": [194, 256], "get_offset": 180, "get_original_models_weights_in_functional_model_ord": 199, "get_param_quant": [2, 236], "get_path_for_per_channel_config": [217, 223, 224, 238, 243, 249, 251], "get_peft_model": 178, "get_pre_processed_input": 221, "get_quant_scheme_candid": [13, 25, 185, 223], "get_scal": [160, 180], "get_subclass_model_with_functional_lay": 20, "get_text_classificaiton_model": 20, "get_top5_acc": 194, "get_val_dataload": [190, 192, 193, 205, 207, 208, 209, 211, 212, 213, 214, 215], "get_val_dataset": [195, 196, 197, 202, 203, 204], "get_weight": [199, 225, 226], "git": [189, 247], "github": [189, 246, 247, 248], "give": [194, 198, 202, 203, 205, 206, 207, 215, 217, 222, 226, 230, 236, 258, 260], "given": [2, 4, 12, 13, 16, 17, 22, 23, 25, 26, 28, 29, 30, 168, 174, 175, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 220, 223, 224, 226, 227, 229, 230, 231, 233, 236, 243, 251, 254, 263], "global": [243, 244, 259], "globalaveragepooling1d": [20, 198, 199], "glu": 78, "gnu": 248, "gnupg2": 248, "go": [20, 190, 194, 197, 198, 202, 203, 208, 211, 215, 258], "goal": [13, 25, 185, 190, 208, 222, 223, 262], "good": [20, 178, 197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 230, 238, 263], "googl": 244, "got": [3, 14, 27, 172, 224, 225], "gpu": [205, 206, 207, 209, 211, 212, 213, 214, 215, 221, 227, 231, 233, 244, 246, 247, 248, 249, 251, 258], "grad_fn": [158, 159, 160, 161, 162, 177, 180, 249], "gradient": [158, 159, 160, 241, 242, 251, 254, 258], "grant": 189, "granular": [17, 29, 198, 205, 206, 207, 227, 230, 231, 233, 250, 259], "granularli": 250, "graph": [20, 23, 25, 160, 172, 177, 181, 183, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 217, 223, 225, 226, 231, 232, 236, 238, 251, 252, 253, 254, 258, 261, 262], "graph_optimization_level": 177, "graphmodul": 172, "graphoptimizationlevel": 177, "greater": [17, 29, 227, 228, 229, 231, 233, 250], "greedi": [17, 29, 227, 230, 231, 232, 233], "greedili": [190, 194, 208], "greedy_param": [205, 206, 207, 227, 231, 233], "greedy_select_param": [17, 29, 205, 206, 207, 227, 231], "greedymixedprecisionalgo": [12, 174, 184, 194, 208, 236], "greedyselectionparamet": [17, 29, 205, 206, 207, 227, 231, 233], "green": 234, "grep": 247, "grid": [180, 182, 188, 243, 250, 253], "group": [2, 7, 12, 170, 174, 184, 190, 208, 247, 250, 253, 255, 258], "groupedblockquantizedequant": 250, "groupnorm": 82, "gru": [79, 258], "grucel": 80, "guarante": 20, "guid": [0, 167, 189, 190, 194, 196, 208, 209, 210, 212, 213, 214, 215, 217, 236, 240, 247, 251, 258, 262], "guidebook": 230, "guidelin": [172, 208, 209, 212, 213, 214, 215, 217, 251, 254], "h": [189, 233, 234, 248], "h5": [221, 261], "ha": [0, 8, 11, 20, 23, 25, 30, 158, 167, 171, 172, 173, 181, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 228, 229, 232, 234, 238, 239, 240, 243, 244, 249, 250, 251, 253, 254, 258, 262], "had": [256, 257], "half": 228, "hand": [190, 208], "handl": [13, 14, 25, 26, 185, 223, 224, 246, 249, 250, 253, 258], "hard": 172, "hardshrink": 83, "hardsigmoid": 84, "hardswish": 85, "hardtanh": 86, "hardwar": [9, 181, 187, 244, 245, 251, 253, 254, 262], "hat": 253, "have": [8, 20, 21, 30, 168, 169, 170, 171, 172, 173, 176, 179, 180, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 230, 236, 238, 239, 241, 244, 248, 250, 251, 252, 254, 258, 259, 261, 263], "hba": [192, 204, 212], "he": 230, "head": [20, 198, 199], "heavi": [168, 220, 232], "height": [190, 191, 192, 193, 198, 208, 209, 211, 212, 213, 214, 215, 225, 226, 231, 233, 234], "held": [30, 175, 213, 214], "help": [171, 173, 174, 181, 187, 192, 202, 204, 212, 215, 216, 222, 229, 230, 236, 237, 238, 250, 251, 254, 255, 259, 262, 263], "helper": [174, 180, 184, 197, 211, 236, 241], "hen": [13, 25, 185, 223], "here": [23, 171, 178, 180, 183, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 217, 226, 231, 241, 242, 254, 255, 262, 263], "heterogen": 262, "heurist": [196, 210], "hidden": [20, 198, 199], "hide": 238, "high": [2, 4, 12, 16, 28, 171, 184, 191, 192, 193, 195, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 226, 228, 229, 235, 236, 240, 244, 245, 258], "higher": [23, 183, 184, 190, 194, 205, 206, 207, 208, 217, 227, 229, 231, 233, 235, 236, 237, 250, 253, 254, 259, 262], "highest": [13, 25, 185, 223, 229], "highlight": 232, "hingeembeddingloss": 87, "histogram": [8, 21, 179, 186, 202, 215, 219, 253, 258], "histogram_freq": 198, "historgram": [8, 222], "histori": [197, 198, 200, 201], "hold": [158, 159, 160, 175, 224, 238, 255, 259], "home": 247, "honor": [227, 231, 233], "hood": 171, "hook": 253, "hope": [190, 194, 197, 198, 203, 208, 211], "hopefulli": 199, "host": [232, 247, 249, 258], "hostnam": 247, "hotspot": [8, 21, 179, 186, 222, 235], "how": [2, 12, 173, 175, 178, 180, 181, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 230, 231, 233, 236, 238, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 259, 260, 263], "howev": [20, 171, 177, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 227, 231, 233, 240, 246, 250, 253, 256, 258, 262, 263], "html": [8, 21, 168, 172, 179, 186, 189, 202, 215, 219, 220, 222, 246, 247, 248, 258], "htp": 261, "htp_v66": [9, 181, 187, 251, 254], "htp_v68": [9, 181, 187, 251, 254], "htp_v69": [9, 181, 187, 251, 254], "htp_v73": [9, 181, 187, 251, 254], "htp_v75": [9, 181, 187, 251, 254], "htp_v79": [9, 181, 187, 251, 254], "htp_v81": [9, 181, 187, 251, 254], "http": [172, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 232, 239, 246, 247, 248, 258], "hub": [216, 221, 225, 236, 245, 250, 252, 253, 258, 262, 263], "huberloss": 88, "huggingfac": [178, 241, 242, 258], "hx": [79, 80, 96, 97, 123, 124], "hxwx5": 234, "hxwx8": 234, "hyper": [191, 195, 197, 198, 200, 201, 204, 205, 206, 207, 209, 211, 212, 213, 214, 224, 254, 262], "hyperparamet": 254, "i": [0, 1, 2, 4, 7, 8, 9, 12, 13, 17, 20, 21, 22, 23, 24, 25, 28, 29, 30, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "i_": [161, 162, 163, 164, 165], "i_0": [161, 162, 163, 164, 165], "i_d": [161, 162, 163, 164, 165], "iccv": [192, 204, 212, 230], "id": [6, 13, 25, 185, 221, 223, 232, 241, 242, 247], "ideal": [194, 202, 203, 215, 258], "idempot": 160, "ident": [199, 225, 256, 257], "identifi": [170, 173, 189, 219, 222, 227, 234, 235, 236, 247, 248, 250, 253, 258, 259, 262], "ie": 238, "ieee": [166, 230], "ignor": [2, 17, 29, 172, 184, 190, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 227, 231, 233, 236, 251, 263], "ignore_quant_ops_list": [23, 183, 217], "illustr": [203, 205, 206, 207, 217, 227, 229, 231, 232, 233, 234, 253, 262], "ilsvrc": [223, 236], "ilsvrc2012": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "imag": [8, 21, 179, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 236, 243, 244, 246, 248, 254], "image_bw": 257, "image_dataset": 222, "image_dataset_from_directori": [194, 195, 200, 201, 203, 217, 223, 224, 231, 236, 251, 254], "image_height": [195, 203], "image_net_config": [190, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215], "image_net_data_load": [190, 192, 193, 205, 207, 209, 211, 212, 213, 214, 215], "image_net_dataset": [195, 196, 197, 202, 203, 204], "image_net_evalu": [190, 192, 193, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "image_net_train": [205, 206, 207, 211, 212, 213, 214], "image_rgb": 257, "image_s": [190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 223, 224, 231, 236, 251, 254], "image_width": [195, 203], "imageclassificationevalu": 243, "imagefold": [208, 210, 251], "imagenet": [189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 223, 224, 225, 226, 231, 236, 243, 251, 254], "imagenet_data": [191, 217, 251], "imagenet_dataset": [210, 217, 223, 224, 251, 254], "imagenet_dir": [200, 201], "imagenetdataload": [190, 192, 193, 202, 205, 207, 209, 211, 212, 213, 214, 215], "imagenetdatapipelin": [190, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "imagenetdataset": [195, 196, 197, 202, 203, 204], "imagenetevalu": [190, 192, 193, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "imagenettrain": [205, 206, 207, 211, 212, 213, 214], "images_dir": 211, "images_mean": 208, "images_std": 208, "imagin": 203, "imdb": 198, "img": [194, 231, 236], "img_height": [194, 236], "img_width": [194, 236], "immedi": [192, 196, 204, 210, 212], "impact": [190, 191, 203, 208, 229, 244, 259], "implement": [6, 19, 22, 30, 169, 180, 189, 190, 208, 221, 222, 223, 241, 242, 251, 254, 258, 259, 262, 263], "impli": [190, 208, 236], "import": [11, 20, 22, 23, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 175, 177, 178, 180, 181, 183, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258], "impos": 250, "improv": [191, 192, 193, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 225, 228, 230, 235, 237, 239, 248, 250, 251, 254, 258, 259, 260, 263], "in1": 238, "in2": 238, "in_channel": [170, 250], "in_eval_mod": 210, "in_featur": [30, 171, 175], "in_plac": [22, 181, 187, 239, 241, 242, 251, 254], "inc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "includ": [2, 13, 25, 168, 184, 185, 220, 222, 223, 225, 226, 229, 232, 236, 244, 245, 246, 248, 252, 253, 254, 255, 258, 263], "include_top": [194, 195, 203, 204], "incompat": [197, 198, 258], "incorrect": [174, 238, 258], "incorrectli": [258, 263], "increas": [17, 29, 190, 203, 208, 227, 229, 231, 233, 235, 253], "increment": 263, "incur": 222, "independ": [172, 244, 259], "index": [8, 21, 175, 179, 186, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 258], "index_0": [202, 215], "index_1": [202, 215], "index_n": [202, 215], "indic": [17, 29, 109, 110, 111, 174, 175, 180, 181, 196, 203, 208, 210, 227, 228, 231, 233, 234, 238, 251, 252, 254], "indirect": [190, 208, 236], "individu": [8, 21, 179, 186, 222, 229, 245, 255], "induc": 253, "infer": [9, 11, 13, 22, 23, 25, 183, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 225, 228, 231, 236, 238, 239, 243, 244, 250, 251, 253, 254, 258, 263], "inferencesess": [2, 8, 9, 177, 190, 191, 192, 193, 221, 222, 236, 251], "influenc": 253, "info": [15, 173, 194, 225, 258], "inform": [2, 12, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 173, 184, 190, 194, 208, 211, 216, 236, 245, 249, 250, 252, 258], "inherit": [20, 30, 100, 175], "init": [225, 226], "initi": [6, 9, 161, 162, 166, 175, 180, 181, 187, 190, 192, 193, 195, 201, 202, 203, 208, 209, 213, 214, 215, 217, 221, 225, 226, 251], "initial_accuraci": [210, 223], "initializd": 175, "inner": 259, "innov": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "inp_data": 231, "inp_symmetri": [182, 188, 243], "inplac": [166, 173, 225, 226], "input": [1, 2, 6, 7, 8, 9, 10, 12, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 211, 215, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 236, 239, 241, 242, 243, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261], "input1": [46, 62, 105], "input2": [46, 62, 105], "input_": [161, 162, 163, 164, 165], "input_1": [217, 225, 226], "input_batch": 221, "input_channel": [7, 170, 250], "input_data": [190, 192, 193, 208, 209, 211, 212, 213, 214, 215, 223, 251], "input_dim": [20, 198, 199], "input_dlc": 261, "input_id": [239, 241, 242], "input_inst": [6, 19, 169, 221], "input_lay": [20, 199], "input_length": 48, "input_list": 261, "input_nam": [177, 181, 187, 190, 191, 192, 193, 217, 225, 236, 251, 254], "input_network": 261, "input_op_nam": [17, 231], "input_q": 180, "input_qdq": 180, "input_qtzr": 30, "input_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 181, 184, 236, 249, 251, 254], "input_shap": [12, 27, 28, 29, 172, 190, 191, 192, 193, 194, 195, 199, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 222, 225, 226, 227, 231, 233, 236, 238, 251, 256], "input_tensor": [20, 172, 194, 195, 203, 204], "inputlay": [20, 217, 225, 226], "inputs_batch": [190, 192, 193, 208, 209, 211, 212, 213, 214, 215, 251], "insert": [172, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 251, 253, 262], "insid": [20, 24, 30, 172, 175, 198, 199, 218, 231, 238], "insight": [232, 259], "inspect": [198, 230], "instabl": [197, 211], "instal": [189, 200, 201, 204, 210, 212, 213, 214, 232, 244, 258, 262], "instanc": [1, 6, 10, 19, 30, 169, 172, 173, 187, 217, 221, 232, 243, 263], "instancenorm1d": 89, "instancenorm2d": 90, "instancenorm3d": 91, "instanti": [178, 180, 190, 202, 203, 208, 211, 215, 232, 236, 241, 242, 249, 250, 252, 255, 257], "instead": [166, 172, 173, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 231, 234, 250, 252, 256, 257, 258], "instruct": [189, 239, 245, 246, 247, 248, 250, 254, 258, 261, 263], "int": [1, 2, 6, 7, 8, 10, 11, 12, 13, 14, 17, 21, 22, 23, 24, 25, 26, 29, 59, 60, 61, 109, 110, 111, 161, 162, 163, 164, 165, 166, 170, 171, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 202, 205, 206, 207, 208, 210, 217, 218, 221, 222, 223, 224, 227, 231, 233, 236, 239, 241, 242, 243, 250, 251, 252, 253, 254, 258], "int16": [9, 174, 190, 194, 208, 223, 236, 238, 251, 253, 262, 263], "int32": [177, 241, 242, 252], "int4": [9, 174, 217, 223, 238, 251, 258, 262], "int8": [9, 159, 160, 174, 190, 191, 192, 193, 194, 203, 208, 209, 212, 213, 214, 217, 223, 236, 238, 244, 251, 253, 254, 262, 263], "int_multipli": 30, "intact": 236, "integ": [22, 164, 165, 170, 180, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 222, 236, 241, 244, 250, 251, 252, 254, 262, 263], "integr": [13, 25, 178, 185, 218, 223], "intel": [246, 249], "intellig": 230, "intend": [189, 222, 227, 231, 233, 238, 244, 252], "inter": 219, "interact": [168, 171, 244], "intercept": 253, "interchang": 250, "interest": [8, 179, 186, 222], "interfac": [192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 246, 258], "intermedi": [2, 6, 12, 19, 25, 169, 176, 181, 184, 185, 187, 190, 194, 208, 219, 221, 223, 236, 239, 244, 251, 254, 258], "intern": [13, 20, 25, 171, 185, 187, 195, 198, 199, 203, 209, 223, 230, 255], "interpol": [12, 190, 208, 229, 236], "interpret": [250, 251, 254], "introduc": [175, 218, 226, 235, 236, 239, 253, 255, 258], "invalid": [172, 250], "invoc": [205, 206, 207], "invok": [8, 9, 21, 175, 179, 181, 186, 187, 203, 222, 230, 232, 251, 254], "involv": [2, 12, 171, 184, 190, 194, 208, 224, 236, 240, 241, 242, 259, 263], "io": [174, 238], "ip": 189, "ipynb": 189, "irrespect": [24, 218], "is_avail": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 223, 224, 225, 226, 236, 238, 239, 243, 249, 254], "is_bfloat16": 166, "is_float16": 166, "is_initi": [30, 161, 162, 166, 175, 180], "is_input_quant": [197, 255], "is_leaf_modul": 172, "is_output_quant": [197, 255], "is_quant": [197, 255], "is_sym": 252, "is_symmetr": [197, 246, 252, 255], "is_train": [190, 192, 193, 194, 205, 207, 209, 211, 212, 213, 214, 215, 236], "is_unsigned_symmetr": 171, "isinst": [170, 241, 242, 250], "islic": [191, 217], "isol": 253, "issu": [20, 173, 219, 221, 224, 232, 238, 258, 259, 263], "item": [166, 199, 202, 215, 236, 239, 241, 242, 251, 254, 261], "iter": [8, 9, 11, 17, 23, 24, 25, 29, 176, 183, 185, 190, 191, 192, 193, 194, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 222, 223, 227, 231, 233, 236, 239, 251, 258], "itertool": [191, 217, 241, 242], "its": [8, 12, 20, 30, 100, 158, 166, 174, 175, 189, 190, 192, 193, 195, 196, 197, 199, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 222, 227, 231, 234, 236, 238, 239, 241, 242, 244, 245, 250, 253, 255, 263], "itself": [202, 211, 215, 221, 230, 231], "j_": [161, 162, 163, 164, 165], "j_0": [161, 162, 163, 164, 165], "j_d": [161, 162, 163, 164, 165], "jaderberg": 230, "jan": 230, "jenkin": 247, "jian": 230, "jianhua": 230, "jit": [241, 242, 257], "job": [197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 261], "join": [195, 200, 201, 203, 208, 209, 210, 217, 225, 226, 227, 231, 233, 236, 251], "jointli": [201, 213, 214], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 197, 202, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "jupyt": [189, 245, 258], "just": [190, 194, 197, 198, 202, 203, 208, 213, 214, 215, 234, 253, 258], "k": [180, 210, 233, 239, 241, 242], "kaim": 230, "kd": 258, "keep": [172, 193, 200, 236, 237, 255, 263], "kei": [166, 174, 191, 192, 193, 195, 199, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 238, 239, 241, 242, 248, 252], "kept": [12, 236, 251, 254, 259], "kera": [11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 189, 194, 195, 196, 200, 201, 202, 203, 204, 217, 221, 222, 223, 224, 225, 226, 231, 236, 245, 251, 254, 256, 258], "keraslayeroutput": [19, 221], "kernel": [30, 203, 227, 231, 233, 250, 258], "kernel_s": [20, 172, 173, 181, 203, 225, 226, 249, 251, 254], "key_dim": [20, 198, 199], "keyring_1": 248, "keyword": [30, 173], "kill": 247, "kl": 244, "kldivloss": 92, "know": [30, 190, 197, 198, 203, 208, 211], "knowledg": [218, 235, 239, 252], "known": [173, 253], "kullback": 244, "kuzmin": 230, "kwarg": [9, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 173, 174, 175, 177, 181, 199, 236, 251, 254, 258], "l1": [182, 188, 238, 243], "l1loss": 93, "l2": 238, "lab": [244, 262], "label": [190, 191, 194, 195, 196, 197, 200, 201, 203, 208, 210, 217, 222, 223, 224, 231, 236, 239, 241, 242, 251, 254], "label_dataset": 222, "label_mod": [194, 195, 200, 201, 203, 217, 223, 224, 231, 236, 251, 254], "labeled_data": 223, "labeled_data_load": 223, "lambda": [25, 170, 174, 176, 184, 185, 194, 195, 196, 197, 198, 199, 203, 217, 222, 223, 224, 236, 239, 250, 251, 254, 258], "laptop": [244, 245], "larg": [178, 194, 228, 230, 231, 233, 235, 240, 254, 258, 263], "larger": [231, 233, 250], "last": [12, 236], "lastli": 251, "latenc": [228, 237, 258, 263], "later": [187, 190, 197, 198, 202, 203, 211, 215, 246, 249, 258], "latest": [174, 238, 246, 247, 248, 249, 258], "launch": 189, "layer": [1, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 100, 168, 169, 170, 173, 175, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 198, 205, 206, 207, 217, 218, 220, 223, 224, 225, 227, 228, 231, 232, 233, 234, 237, 239, 241, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263], "layer1": [202, 215], "layer2": [202, 215], "layer_nam": [8, 21, 176, 179, 186, 222, 239], "layer_output_util": [0, 5, 18, 167, 221], "layern": [202, 215], "layernorm": [20, 98, 198, 199, 258], "layernorm1": [20, 199], "layernorm2": [20, 199], "layeroutpututil": [6, 19, 169, 221], "layers_to_exclud": 173, "layout": [160, 172], "lazili": 258, "lceil": [161, 162, 164, 165, 166, 253], "lead": [8, 10, 204, 212, 217, 222, 243, 259], "leaf": [172, 174, 218, 239, 258], "leakyrelu": [99, 258], "learn": [171, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 225, 226, 230, 237, 240, 241, 242, 243, 244, 248, 254, 258, 263], "learnabl": [161, 162, 218, 235, 239], "learnedgrid": 258, "learnedgridquant": 171, "learning_r": [205, 206, 207, 211, 213, 214, 224, 254], "learning_rate_schedul": [205, 206, 207, 211, 213, 214], "learnt": 239, "least": [184, 191, 195, 209], "leav": [217, 242], "left": [161, 162, 163, 164, 165, 166, 180, 190, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 229, 234, 236, 240, 250, 253], "legaci": [246, 258], "leibler": 244, "len": [23, 172, 183, 194, 198, 208, 210, 217, 223, 231, 236, 239, 241, 242, 251, 254], "length": [170, 175, 250, 252], "leq": [161, 162, 163, 164, 165], "less": [194, 208, 227, 229, 236, 237, 244, 250, 253, 255, 262], "lesser": [190, 208], "let": [172, 190, 194, 197, 198, 203, 208, 239, 262], "level": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 171, 172, 174, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 191, 193, 194, 195, 198, 200, 201, 205, 206, 207, 209, 213, 214, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 237, 238, 239, 240, 243, 245, 250, 251, 253, 254, 258, 259], "lfloor": [161, 162, 163, 164, 165, 166], "lib": [247, 248], "libjpeg": 248, "liblapack": 246, "libpymo": [171, 246, 258], "libqnnhtp": 261, "libqnnmodeldlc": 261, "librari": [9, 178, 244, 247, 248, 251, 261], "lie": 250, "light": [190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215], "lightweight": 240, "like": [20, 171, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 222, 230, 235, 236, 237, 245, 252, 253, 255, 261, 262], "limit": [190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 239, 258], "limitedbatchdataload": 239, "line": [247, 248, 251, 261], "linear": [3, 11, 14, 15, 23, 27, 30, 100, 170, 171, 172, 173, 175, 178, 183, 217, 224, 225, 226, 227, 235, 250, 258], "linear1": [170, 250], "linear_1": 250, "link": [189, 248], "linux": [246, 248], "list": [2, 3, 6, 9, 12, 13, 14, 15, 17, 19, 20, 23, 25, 27, 28, 29, 59, 60, 61, 109, 110, 111, 164, 165, 166, 169, 170, 172, 173, 174, 175, 179, 182, 183, 184, 185, 186, 188, 190, 191, 194, 197, 199, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 238, 239, 241, 242, 243, 247, 248, 250, 251, 252, 255, 263], "list_of_module_comp_ratio_pair": [17, 29, 227, 231, 233], "listen": 232, "lite": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "liter": [174, 238], "littl": [171, 191, 195, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 230, 263], "llama": [239, 258], "llama3": 239, "llamadecoderlay": [218, 239], "llamaforcausallm": 239, "llamamodel": [218, 239], "llm": [258, 262], "ln": 248, "load": [22, 24, 172, 173, 187, 190, 191, 192, 193, 198, 217, 218, 223, 224, 225, 226, 227, 230, 231, 233, 236, 239, 241, 242, 243, 244, 251, 254, 258, 261, 262], "load_adapt": [241, 242], "load_checkpoint": 187, "load_data": 198, "load_dataset": [217, 223, 224, 236, 239, 241, 242, 243], "load_encod": [217, 251, 254], "load_encodings_to_sim": [221, 251, 254], "load_model": [190, 191, 192, 193, 217, 221, 225, 226, 236, 251], "load_state_dict": 166, "loader": [2, 8, 23, 25, 26, 174, 182, 183, 184, 185, 188, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 217, 222, 223, 224, 236, 243, 251, 254], "local": [189, 232, 243, 246, 247, 248], "localresponsenorm": 101, "locat": [190, 194, 197, 202, 203, 208, 211, 215, 247, 263], "log": [173, 174, 194, 197, 198, 200, 201, 222, 236, 238], "log_2": 166, "log_dir": [197, 198, 200, 201], "log_fil": [174, 238], "log_input": 122, "log_prob": 48, "logdir": 198, "logger": 173, "logic": [2, 12, 30, 100, 175, 184, 190, 191, 192, 193, 205, 206, 207, 208, 209, 212, 213, 214, 215, 236, 258], "logit": [208, 210, 236, 241, 242, 254], "logsigmoid": 102, "logsoftmax": 103, "long": [239, 241], "longer": [171, 181, 205, 206, 207, 246, 250, 251, 252, 254, 262], "look": [20, 190, 194, 197, 198, 199, 202, 203, 208, 215, 245, 252, 261], "lookup": 199, "lookup_quant": [12, 236], "loop": [172, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 254, 259], "lora": [176, 178, 239, 244, 258], "lora_a": [241, 242], "lora_a_lay": 242, "lora_add_lay": 242, "lora_alpha": 178, "lora_b": [241, 242], "lora_b_lay": 242, "lora_config": 178, "lora_dropout": 178, "lora_mul_lay": 242, "loraconfig": 178, "loralay": [241, 242], "lose": 234, "loss": [8, 10, 11, 21, 23, 158, 179, 182, 183, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 209, 212, 213, 214, 217, 223, 224, 230, 237, 241, 242, 243, 245, 251, 253, 254, 258], "loss_fn": [182, 188, 197, 224, 241, 242, 243, 254], "lost": [253, 263], "low": [171, 180, 203, 205, 207, 212, 230, 235, 240, 244, 251, 252, 258], "lower": [10, 23, 177, 183, 190, 194, 203, 208, 217, 226, 229, 236, 237, 243, 244, 250, 259, 262], "lowest": 227, "lpbq": [170, 250, 252, 258], "lppool1d": 94, "lppool2d": 95, "lr": [224, 254], "lstm": [96, 258], "lstmcell": 97, "lsvrc": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "lt": 246, "lwc": 239, "m": [189, 198, 233, 246, 247, 248, 249], "mac": [17, 29, 190, 205, 206, 207, 208, 227, 228, 230, 231, 233, 235, 236], "machin": [216, 230, 240, 244, 246, 247, 248, 258, 263], "made": [172, 174, 208, 209, 212, 213, 214, 238, 244, 255, 258], "magnitud": 227, "mai": [2, 10, 13, 20, 25, 30, 158, 159, 160, 168, 171, 172, 175, 184, 185, 190, 191, 192, 194, 197, 198, 202, 203, 204, 208, 211, 212, 215, 220, 222, 223, 226, 230, 236, 243, 250, 251, 252, 258, 263], "main": [224, 255], "maintain": [195, 209, 223, 229, 230, 244], "major": [230, 252], "make": [174, 175, 178, 197, 198, 199, 203, 211, 238, 244, 255, 256, 257, 258, 262, 263], "makedir": [190, 194, 195, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "man": 248, "manag": [9, 246, 249, 262], "mandatori": 221, "manditori": 20, "mani": [172, 190, 194, 197, 198, 202, 203, 205, 206, 207, 208, 215, 217, 228, 258], "manner": [13, 25, 185, 223, 226], "mantissa": [166, 170, 250], "mantissa_bit": [166, 170, 250], "manual": [17, 29, 161, 162, 171, 174, 205, 206, 207, 223, 227, 230, 231, 233, 246, 252, 258], "manual_param": [227, 231, 233], "manual_se": 208, "manualmodeparam": [17, 29, 227, 231, 233], "manylinux_2_34_x86_64": [246, 248], "map": [12, 13, 22, 30, 159, 164, 165, 173, 175, 194, 195, 196, 197, 199, 203, 217, 222, 223, 224, 229, 236, 239, 241, 242, 244, 251, 252, 253, 254, 255, 258], "map_loc": 221, "marginrankingloss": 105, "marku": 230, "mask": 30, "maskedadd": 30, "match": [166, 181, 187, 199, 222, 227, 230, 231, 233, 234, 250, 251, 254, 255, 258, 259], "math": [223, 236, 263], "mathemat": [180, 190, 203, 208, 244, 257], "matmul": [7, 258], "matmul_8": 173, "matric": 241, "matrix": 203, "matter": [30, 215], "max": [8, 21, 161, 162, 166, 168, 171, 179, 186, 193, 200, 201, 203, 219, 220, 230, 246, 251, 252, 258, 261, 262], "max_epoch": [205, 206, 207, 211, 213, 214], "max_iter": [239, 241, 242], "maximum": [2, 12, 13, 21, 25, 164, 165, 166, 184, 185, 190, 194, 195, 196, 197, 202, 203, 204, 208, 215, 222, 223, 236, 253], "maxlen": [20, 198, 199], "maxpool1d": 106, "maxpool2d": 107, "maxpool3d": 108, "maxpooling2d": 197, "maxunpool1d": 109, "maxunpool2d": 110, "maxunpool3d": 111, "mdoel": 224, "mean": [26, 175, 190, 191, 194, 197, 198, 199, 202, 203, 205, 206, 207, 208, 210, 211, 212, 215, 217, 219, 223, 224, 236, 251, 253, 255], "meaning": 194, "measur": [2, 8, 12, 21, 29, 179, 184, 186, 190, 205, 206, 207, 208, 222, 227, 231, 233, 236, 244, 263], "mechan": [22, 172, 180, 217, 238, 251, 254], "meet": [13, 25, 184, 185, 190, 194, 208, 223, 228, 229, 236, 263], "member": 255, "memori": [17, 29, 160, 178, 205, 206, 207, 227, 228, 230, 231, 233, 234, 235, 237, 244, 258, 263], "memory_format": 160, "merg": 244, "messag": 194, "met": [2, 12, 184, 190, 194, 208, 236], "meta": 239, "metadata": [176, 239], "metapackag": 189, "method": [6, 13, 19, 22, 24, 25, 30, 100, 160, 169, 171, 172, 174, 175, 181, 184, 185, 187, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 221, 223, 229, 230, 235, 236, 238, 241, 243, 244, 251, 253, 254, 259], "methodologi": 263, "metric": [17, 29, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 222, 223, 224, 227, 231, 233, 236, 243, 251, 253, 254, 263], "mha": [198, 258], "middl": 263, "might": [2, 12, 184, 190, 191, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 222, 236, 248, 252, 258, 259, 263], "migrat": [0, 167, 251, 258], "mimic": 262, "mimick": 171, "min": [8, 21, 161, 162, 168, 171, 179, 186, 193, 200, 201, 203, 219, 220, 246, 252, 258, 261, 262], "min_max": [9, 190, 191, 193, 217, 251, 258], "min_max_rang": [202, 215, 222], "minim": [182, 188, 190, 193, 194, 200, 201, 208, 213, 214, 226, 235, 236, 237, 243, 244, 245, 253], "minima": 243, "minimum": [164, 165, 172, 202, 215, 218, 239, 243, 253, 258], "minmaxencodinganalyz": 166, "minor": [252, 258], "miou": [190, 208], "mish": 112, "mismatch": [180, 203, 219, 221, 251], "miss": [20, 166, 173, 258, 261], "missing_kei": 166, "mix": [2, 12, 13, 25, 174, 184, 185, 189, 223, 256, 258, 263], "mixed_precis": [0, 5, 18, 167, 190, 194, 208, 236, 238], "mixed_precision_algo": [2, 174, 184, 190, 194, 208, 236], "mixed_preision_quant_model": 236, "mixedprecisionconfigur": [174, 238], "mixin": [30, 175], "mkdir": 189, "ml": [193, 198, 200, 201, 213, 214, 230], "mmp": 237, "mmp_log": [174, 238], "mnist": [227, 231, 233], "mnist_after_bn_re_estimation_qat_range_learn": 197, "mnist_torch_model": 227, "mnist_trained_on_gpu": [227, 231, 233], "mnt": 247, "mobil": [244, 245], "mobilenet": [217, 224, 243, 244], "mobilenet_v2": [217, 223, 224, 225, 226, 236, 238, 243, 249, 251, 254], "mobilenet_v2_weight": [217, 225, 226, 236, 243, 251], "mobilenetv2": [217, 223, 224, 225, 226, 249, 251, 254], "mobilenetv2_1": [217, 225, 226], "mode": [13, 17, 22, 25, 29, 172, 181, 185, 187, 205, 206, 207, 223, 227, 231, 233, 251, 255, 258], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 258, 260, 261, 262, 264], "model_after_qat": [198, 200, 201], "model_config": 239, "model_id": [239, 241, 242], "model_input": [173, 197], "model_or_pipelin": [217, 243], "model_output": 197, "model_prepar": [0, 18, 167, 199, 208, 209, 211, 212, 213, 214, 215, 222, 225, 226, 258], "model_prepare_requir": [25, 185, 223], "model_preparer_elementwise_add_exampl": 172, "model_preparer_functional_exampl": 172, "model_preparer_reused_exampl": 172, "model_preparer_subclassed_model_with_functional_lay": 20, "model_preparer_two_subclassed_lay": 20, "model_to_block_map": 218, "model_torch": 221, "model_transform": 172, "model_valid": [0, 167], "model_weights_in_correct_ord": 199, "modelcompressor": [17, 29, 205, 206, 207, 227, 231, 233], "modeling_llama": 239, "modeling_opt": [241, 242], "modelprepar": [20, 172, 199, 208, 209, 212, 213, 214, 215], "modelproto": [3, 4, 6, 8, 9, 221, 222, 225, 226, 251], "modelvalid": 173, "modelwithconsecutivelinearblock": 218, "modelwithelementwiseaddop": 172, "modelwithfunctionallinear": 173, "modelwithfunctionalrelu": 172, "modelwithlinear": 218, "modelwithnontorchfunct": 172, "modelwithoutfunctionallinear": 173, "modelwithoutreusednod": 173, "modelwithreusednod": 173, "modelwithreusedrelu": 172, "modif": [208, 209, 212, 213, 214], "modifi": [22, 24, 172, 181, 187, 190, 192, 193, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 221, 225, 226, 234, 236, 241, 242, 248, 251, 253, 254, 258, 262, 263], "modul": [2, 7, 12, 17, 23, 24, 25, 26, 27, 28, 29, 30, 100, 166, 168, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 234, 236, 238, 239, 241, 242, 243, 249, 250, 251, 254, 256, 257, 258, 263], "module_cl": 30, "module_classes_to_exclud": 172, "module_nam": [241, 242], "module_to_exclud": 172, "modulecompratiopair": [17, 29, 227, 231, 233], "moduledict": [30, 171, 175, 181, 249, 251, 254], "modulelist": [30, 171, 175, 181, 249, 251, 254], "modules_to_exclud": [25, 172, 182, 185, 188, 223, 243], "modules_to_ignor": [17, 29, 179, 186, 205, 206, 207, 222, 227, 231, 233], "momentum": [224, 225, 226], "monitor": 222, "monoton": [17, 29, 227, 229, 231, 233], "more": [17, 22, 23, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 173, 175, 178, 183, 184, 187, 190, 194, 197, 198, 199, 202, 203, 208, 211, 215, 217, 222, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 244, 251, 253, 254, 255, 258, 259, 261, 262, 263], "most": [180, 198, 223, 244, 246, 247, 253, 255], "move": [189, 254], "movement": 258, "movi": 198, "mp": [174, 238], "mp_configur": 238, "mse": [8, 10, 21, 171, 179, 182, 186, 188, 222, 253, 258], "mseloss": 104, "much": [205, 206, 207, 234, 263], "mul_scal": 242, "multi": [198, 258], "multigpu": 258, "multiheadattent": [20, 198, 199, 258], "multilabelmarginloss": 113, "multilabelsoftmarginloss": 114, "multimarginloss": 115, "multipl": [17, 25, 27, 28, 29, 160, 169, 172, 173, 174, 175, 178, 181, 185, 187, 202, 215, 221, 223, 225, 226, 227, 230, 231, 233, 238, 248, 250, 251, 253, 254, 258], "multipli": [175, 190, 208, 228, 230, 231, 233, 235], "must": [20, 160, 166, 170, 173, 175, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 217, 218, 222, 223, 224, 228, 234, 239, 243, 250, 251, 255, 262], "mutual": [166, 170, 250], "my_functional_model": 20, "myfunctionalmodel": 20, "n": [8, 13, 21, 179, 180, 186, 222, 223, 233, 250], "nagel": 230, "name": [2, 8, 12, 17, 20, 21, 30, 168, 169, 174, 175, 178, 179, 181, 184, 186, 187, 190, 191, 192, 193, 197, 199, 202, 215, 217, 220, 221, 222, 225, 226, 231, 232, 236, 238, 239, 241, 242, 247, 248, 251, 252, 253, 254, 258, 261], "name_": [8, 21, 179, 186, 202, 215, 222], "name_to_quantizer_dict": [2, 12, 174, 184, 236], "named_modul": [241, 242], "named_paramet": 241, "namedtupl": 166, "namespac": [167, 171, 183, 184, 185, 186, 187, 188], "naming_schem": [169, 221], "namingschem": [169, 221], "nativ": [175, 247, 258], "navig": 189, "na\u00efv": 235, "nconv": 225, "ndarrai": [1, 2, 6, 8, 9, 10, 12, 191, 199, 217, 221, 222, 223, 236, 243, 251], "nearest": [13, 21, 22, 25, 185, 187, 191, 194, 195, 198, 200, 201, 203, 204, 209, 212, 217, 222, 223, 251, 254], "necessari": [158, 159, 160, 181, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 222, 225, 227, 231, 232, 233, 251, 254, 263], "necessarili": [190, 194, 208, 236], "necessit": 246, "need": [8, 9, 17, 19, 20, 21, 22, 23, 24, 29, 169, 174, 179, 183, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 221, 222, 224, 225, 226, 227, 231, 233, 236, 237, 238, 239, 243, 244, 246, 248, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 263], "neg": [148, 149, 164, 165, 190, 197, 198, 203, 208], "negat": [195, 209], "nest": 258, "net": [189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 261], "network": [20, 175, 196, 198, 199, 203, 210, 228, 229, 230, 232, 244, 249, 253, 254, 258, 259], "neural": [190, 196, 203, 208, 210, 228, 230, 244, 253, 254, 259], "neuron": 244, "new": [15, 20, 160, 161, 162, 171, 172, 187, 195, 199, 200, 201, 203, 204, 208, 215, 225, 236, 238, 240, 241, 245, 246, 250, 256, 257, 258], "new_empti": 160, "next": [190, 192, 194, 197, 198, 203, 208, 211, 217, 226, 248, 249, 251, 253, 258, 259], "next_conv_weight": 226, "nfolded_model": 225, "night": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215], "nllloss": 116, "nllloss2d": 117, "nmodel": [225, 226], "nn": [0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 170, 171, 172, 173, 174, 177, 181, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 227, 231, 233, 236, 238, 241, 242, 243, 249, 250, 251, 254, 257, 258, 263], "nncf": 244, "nnext": 226, "no_grad": [173, 181, 208, 209, 210, 212, 213, 214, 215, 217, 218, 236, 241, 242, 243, 249, 251, 254], "node": [22, 25, 172, 181, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 223, 225, 226, 243, 244, 251, 254, 257, 258, 262, 263], "noffset": 180, "nois": [222, 226, 254, 255, 262], "noisi": [197, 211], "non": [9, 172, 174, 178, 182, 188, 196, 210, 218, 232, 239, 243, 251, 253, 258, 261, 262], "none": [2, 6, 8, 9, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 59, 60, 61, 71, 79, 80, 96, 97, 100, 109, 110, 111, 123, 124, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 236, 238, 243, 246, 247, 248, 249, 250, 251, 254], "norm": [15, 194, 204, 217, 222, 226, 236, 258], "normal": [15, 191, 210, 217, 222, 223, 225, 236, 244, 251, 258], "notabl": 252, "note": [2, 8, 12, 13, 20, 21, 22, 24, 25, 171, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 221, 222, 223, 227, 231, 232, 233, 236, 238, 243, 246, 247, 248, 250, 251, 254], "note1": [190, 208, 211, 215], "note2": [190, 208, 211, 215], "notebook": [191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 258], "noth": [17, 29, 227, 231, 233, 263], "notic": [168, 220, 258], "notimplementederror": 30, "now": [20, 172, 173, 180, 181, 190, 192, 193, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 225, 226, 236, 251, 252, 254, 258], "np": [1, 2, 9, 10, 20, 191, 194, 199, 217, 222, 223, 231, 236, 243, 246, 251], "nprepared_model": [225, 226], "nprev": 226, "nscale": 180, "nullptr": 258, "num": [164, 165], "num_batch": [8, 11, 21, 23, 26, 182, 183, 188, 191, 192, 195, 196, 197, 202, 203, 209, 210, 211, 212, 215, 217, 218, 222, 223, 224, 243, 251], "num_bias_correct_sampl": 212, "num_calibration_sampl": [191, 217, 223, 224, 236, 251, 254], "num_candid": [10, 182, 188, 243], "num_channel": 252, "num_class": 222, "num_comp_ratio_candid": [17, 29, 205, 206, 207, 227, 231, 233], "num_epoch": [224, 258], "num_eval_sampl": [191, 217, 236, 251], "num_head": [20, 198, 199], "num_iter": [1, 24, 176, 194, 217, 218, 231, 236, 239, 258], "num_of_sampl": 223, "num_quant_sampl": 212, "num_reconstruction_sampl": [29, 205, 207, 227], "num_sampl": [2, 174, 184, 196, 197, 208, 210, 218, 222, 236], "num_samples_for_phase_1": [13, 25, 185, 223], "num_samples_for_phase_2": [13, 25, 185, 223], "num_step": [164, 165], "num_word": 198, "num_work": [190, 191, 192, 193, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 223, 224, 243], "number": [1, 2, 8, 10, 11, 13, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 164, 165, 166, 170, 172, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 236, 239, 240, 243, 244, 247, 250, 251, 252, 253, 254, 258, 262, 263], "numer": [169, 221], "numpi": [177, 190, 191, 192, 193, 199, 217, 222, 223, 231, 236, 246, 251], "numpy_help": [225, 226], "nupi": [12, 236], "nvidia": [244, 246, 247, 248, 249], "o": [190, 191, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 225, 226, 227, 231, 233, 236, 246, 251], "object": [1, 2, 7, 8, 9, 12, 13, 22, 24, 25, 30, 158, 159, 160, 166, 168, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 196, 197, 202, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 227, 231, 233, 236, 237, 238, 239, 243, 245, 250, 251, 253, 254, 258, 262, 263], "observ": [9, 30, 166, 175, 181, 203, 211, 222, 230, 251, 253, 254], "obtain": [6, 169, 222, 228, 252, 261], "obvious": [227, 231, 233], "occur": [168, 220, 252], "occurr": [8, 21, 179, 186, 222, 227], "oct": 230, "off": [11, 22, 23, 183, 190, 194, 208, 217, 224, 236, 251, 254, 263], "offer": [8, 179, 186, 196, 210, 219, 222, 223, 246], "offset": [8, 21, 30, 71, 161, 162, 163, 164, 165, 179, 180, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 222, 246, 249, 251, 252, 253, 254, 258, 261, 262], "offset_": [161, 162, 163, 164, 165], "often": [223, 225, 226, 230], "older": [238, 246], "omit": [229, 247, 255], "omniqu": [0, 167, 218, 258], "onc": [30, 160, 173, 180, 193, 198, 200, 201, 205, 206, 207, 212, 213, 214, 227, 230, 238, 254, 256, 257, 258, 261, 262, 263], "one": [9, 23, 25, 27, 172, 173, 174, 180, 181, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 223, 225, 227, 230, 231, 232, 233, 238, 239, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 258, 262], "ones": [239, 249, 253], "ones_lik": [161, 162], "onli": [2, 8, 9, 12, 22, 158, 159, 160, 164, 165, 168, 170, 171, 172, 174, 175, 177, 179, 180, 181, 184, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 220, 221, 222, 225, 230, 231, 232, 234, 236, 238, 240, 241, 242, 243, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263], "onnx": [0, 1, 2, 3, 5, 6, 8, 9, 25, 167, 169, 174, 181, 185, 187, 189, 217, 218, 220, 221, 222, 223, 224, 225, 226, 236, 238, 239, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263], "onnx_data": [191, 217], "onnx_data_gener": 251, "onnx_encoding_path": 251, "onnx_export_arg": [25, 169, 181, 185, 187, 221, 223, 251, 254], "onnx_file_nam": 257, "onnx_model": 222, "onnx_output": 177, "onnx_util": 221, "onnxexportapiarg": [25, 169, 181, 185, 187, 221, 223, 251, 254], "onnxmodel": [8, 222], "onnxruntim": [9, 177, 190, 191, 192, 193, 217, 221, 222, 246, 248, 251, 258], "onnxruntime_v": 248, "onnxsim": [190, 191, 192, 193, 217, 221, 222, 225, 226, 236, 251], "onto": 262, "op": [2, 9, 11, 12, 15, 17, 22, 23, 25, 173, 181, 183, 184, 185, 187, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 217, 223, 225, 231, 251, 253, 254, 255, 258, 261], "op_list": [197, 255], "op_typ": [2, 7, 184, 190, 197, 208, 236, 255], "op_type_map": 173, "open": [197, 244], "opencv": 258, "oper": [7, 17, 20, 30, 171, 172, 173, 175, 190, 193, 194, 199, 200, 201, 208, 213, 214, 218, 221, 226, 231, 235, 236, 239, 243, 244, 249, 251, 253, 254, 255, 257, 258, 259, 262, 263], "oppos": [192, 204, 212], "opset": [177, 258], "opset_vers": [177, 181, 187, 251, 254], "opt": [194, 241, 242], "optim": [1, 2, 10, 11, 12, 13, 23, 24, 25, 29, 166, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 230, 232, 236, 239, 241, 242, 243, 244, 245, 248, 251, 253, 254, 258, 262, 263], "optimized_accuraci": [210, 223], "option": [2, 8, 9, 11, 12, 13, 17, 21, 22, 23, 24, 25, 26, 29, 30, 161, 162, 163, 164, 165, 166, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 227, 231, 233, 236, 243, 245, 246, 247, 248, 250, 251, 253, 254, 255, 258, 261], "optlearnedpositionalembed": [241, 242], "optmiz": [190, 208], "orang": 234, "order": [30, 100, 173, 175, 191, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 211, 213, 214, 215, 219, 227, 238, 250, 254, 255, 256, 257, 261, 262], "org": [172, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 239, 246, 247, 248, 258], "org_top1": 236, "organ": [244, 260], "origin": [17, 20, 29, 30, 171, 172, 175, 182, 188, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 221, 222, 227, 228, 229, 231, 232, 233, 235, 236, 243, 244, 253, 258, 263], "original_model": [20, 199], "original_model_weight": 199, "ort": [9, 177, 190, 191, 192, 193, 217, 251], "ort_disable_al": 177, "oscil": 224, "other": [160, 170, 171, 172, 174, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 229, 238, 239, 240, 241, 242, 245, 246, 249, 250, 253, 257, 258, 259, 260], "otherwis": [13, 161, 162, 164, 165, 170, 173, 181, 187, 191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 223, 226, 250, 251, 252, 254, 259, 263], "our": [178, 197, 198, 211], "out": [8, 20, 21, 22, 161, 162, 163, 164, 165, 166, 172, 179, 180, 181, 186, 187, 199, 222, 246, 249, 251, 254, 258], "out1": [20, 199, 238], "out2": 238, "out3": 238, "out_": [161, 162, 163, 164, 165], "out_channel": [170, 250], "out_featur": [30, 171, 175], "outlier": [222, 253], "outlin": [228, 240], "output": [2, 6, 7, 8, 10, 12, 13, 17, 19, 20, 21, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 239, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261], "output_bw": [13, 25, 185, 223], "output_dim": [20, 198, 199], "output_dir": 261, "output_dir_path": 261, "output_dlc": 261, "output_encod": 30, "output_nam": [177, 181, 187, 190, 191, 192, 193, 217, 225, 236, 251, 254], "output_op_nam": [12, 17, 231, 236], "output_path": [176, 239, 261], "output_qtzr": 30, "output_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 181, 184, 236, 249, 251, 254], "output_s": [59, 60, 61, 109, 110, 111], "output_shap": 199, "outsid": 255, "over": [8, 20, 25, 164, 165, 175, 180, 185, 222, 223, 227, 229, 230, 231, 233, 235, 236, 253], "overal": [228, 229, 259], "overfit": 243, "overhead": [194, 205, 207, 208, 253], "overlin": [162, 165], "overload": [9, 164, 165, 181, 251, 254], "overrid": [25, 160, 172, 181, 185, 187, 208, 209, 212, 213, 214, 223, 251, 254], "overridden": [30, 175, 255], "overtax": 263, "overview": [171, 260], "overwri": [251, 254], "overwriiten": [251, 254], "overwritten": [171, 242], "own": [222, 223, 262], "p": [190, 208, 247], "p1": 238, "p2": 238, "packag": [0, 167, 189, 248, 249, 258], "pad": [20, 172, 173, 181, 197, 225, 226, 249, 251, 254], "pad_sequ": 198, "page": [228, 245, 246, 247, 248, 249, 250, 253, 263], "pair": [3, 14, 17, 27, 29, 224, 225, 227, 231, 233], "pairwis": 239, "pairwisedist": 119, "parallel": 254, "param": [2, 11, 12, 17, 21, 23, 29, 30, 100, 173, 174, 175, 179, 182, 183, 184, 186, 188, 190, 192, 193, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 222, 225, 226, 227, 231, 233, 236, 237, 238, 241, 243, 250, 252, 258, 262], "param_bitwidth": [217, 251, 252, 254], "param_bw": [13, 25, 185, 223], "param_bw_override_list": [23, 183, 217], "param_encod": [171, 252], "param_nam": [8, 21, 179, 186, 222], "param_name_": [8, 21, 179, 186, 202, 215, 222], "param_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 175, 181, 249, 250, 251, 254], "param_typ": [9, 190, 191, 192, 193, 217, 251], "paramet": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 233, 235, 236, 238, 239, 241, 242, 243, 244, 250, 251, 252, 255, 258, 261, 262, 263], "parameter": [9, 251], "parameter_quant": [2, 12, 174, 184, 236], "parent": [30, 100, 175, 236, 258], "pareto": [2, 12, 13, 25, 184, 185, 190, 194, 208, 223], "pareto_front": 223, "pareto_front_list": [190, 208, 236], "pars": [23, 181, 183, 187, 217, 251, 254], "part": [8, 20, 21, 179, 186, 222, 230, 250, 251, 262], "partial": [25, 172, 185, 223, 251, 254], "particular": [170, 173, 190, 194, 208, 236, 250, 255], "pass": [2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 100, 166, 169, 171, 172, 173, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 231, 232, 236, 238, 241, 242, 243, 244, 250, 251, 253, 254, 257, 258, 259, 261, 263], "pass_calibration_data": [190, 192, 193, 195, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 224, 251, 254], "passwd": 247, "past": [189, 258], "patch": 252, "path": [2, 8, 9, 11, 12, 13, 17, 21, 22, 23, 25, 29, 168, 172, 174, 176, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 247, 248, 251, 254, 261], "path_to_imagenet": [236, 251, 254], "pathlik": [251, 254], "pattern": [230, 258], "pb": 261, "pcq": [8, 21, 179, 186, 222], "pcq_quantsim_config": 203, "pdf": [8, 21, 179, 186, 222, 258], "peft": [0, 167, 176, 239, 241, 242, 258], "peft_model": 178, "peft_model_id": [241, 242], "peftmixedmodel": 178, "pend": [24, 218], "pendyam": 230, "per": [7, 8, 17, 21, 29, 169, 170, 175, 179, 186, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 221, 224, 225, 226, 227, 231, 232, 233, 235, 236, 243, 244, 252, 253, 254, 255, 258], "per_block": 252, "per_block_int_scal": 252, "per_channel": 252, "per_channel_quant": [175, 197, 203, 252, 255], "per_layer_mse_loss": [202, 215, 222], "per_layer_quant_dis": [202, 215, 222], "per_layer_quant_en": [202, 215, 222], "per_sample_weight": 71, "per_tensor": 252, "percentag": [191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 244], "perform": [2, 3, 4, 8, 12, 13, 16, 21, 23, 25, 26, 28, 30, 100, 161, 162, 166, 175, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 254, 258, 260, 262, 263], "perform_per_layer_analysis_by_disabling_quant": [8, 222], "perform_per_layer_analysis_by_disabling_quant_wrapp": [21, 179, 186, 222], "perform_per_layer_analysis_by_enabling_quant": [8, 222], "perform_per_layer_analysis_by_enabling_quant_wrapp": [21, 179, 186, 222], "perhap": [190, 197, 202, 203, 208, 211, 215], "period": [11, 23, 183, 217], "persist": 166, "person": 244, "perspect": [190, 203, 208, 218, 239], "phase": [2, 12, 13, 25, 174, 184, 185, 190, 194, 208, 223, 230], "phase1": [2, 12, 184, 190, 208, 236], "phase1_optim": [2, 12, 184, 190, 208, 236], "phase2": 184, "phase2_revers": 184, "phi": 258, "phone": [244, 245], "php": [189, 190, 194, 197, 202, 203, 208, 211, 215], "pick": [2, 12, 20, 184, 190, 194, 208, 228, 229, 236], "pickl": [17, 29, 227, 231, 233], "pictur": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215], "piec": [20, 172], "pillow": 248, "pin": 258, "pin_memori": [160, 172, 208], "pink": 234, "pinpoint": 222, "pip": [189, 232, 246, 247, 248, 249, 258], "pip3": 248, "pipelin": [25, 185, 198, 200, 201, 221, 223, 253, 258, 259, 262], "pitr": 230, "pixelshuffl": 120, "pixelunshuffl": 121, "place": [2, 4, 12, 22, 23, 24, 28, 181, 183, 184, 187, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 226, 236, 251, 254, 255, 258], "place_model": [241, 242], "placehold": [241, 242], "placement": [190, 191, 192, 193, 205, 206, 207, 208, 209, 212, 213, 214, 215, 258], "plai": 203, "plan": [247, 262], "platform": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 216, 222, 244, 245, 246], "pleas": [171, 173, 178, 181, 187, 190, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 211, 215, 222, 227, 231, 233, 246, 251, 254, 258, 261], "plot": [2, 12, 168, 184, 190, 194, 202, 208, 215, 220, 222, 236], "pmatrix": [161, 162, 163, 164, 165], "point": [2, 8, 12, 20, 21, 30, 158, 159, 170, 171, 179, 184, 186, 187, 190, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 222, 225, 226, 236, 237, 244, 245, 250, 252, 253, 258, 259, 262, 263], "pointer": [194, 197, 198, 202, 203, 215], "poissonnllloss": 122, "pool": [194, 195, 197, 203, 204], "pop": 199, "popul": 252, "popular": 240, "port": [232, 247, 258], "port_id": 247, "portabl": 244, "portion": 20, "pos_emb": [20, 199], "posit": [20, 148, 149, 164, 165, 197, 198, 199], "possibl": [2, 3, 12, 13, 20, 22, 25, 173, 177, 181, 184, 185, 187, 190, 194, 196, 199, 208, 210, 222, 223, 225, 229, 236, 250, 251, 254, 255, 256, 257, 259, 263], "post": [13, 25, 185, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 222, 223, 226, 230, 235, 244, 245, 251, 252, 253, 254, 258, 263], "post1": 248, "post_training_tf": [8, 11, 21, 22, 23, 168, 179, 183, 186, 190, 194, 195, 197, 198, 200, 203, 204, 208, 211, 212, 217, 220, 222, 223, 251, 252, 254, 258], "post_training_tf_enhanc": [8, 11, 13, 21, 22, 23, 25, 179, 181, 183, 185, 186, 187, 190, 192, 194, 197, 198, 202, 208, 209, 211, 212, 213, 215, 217, 222, 223, 251, 252, 254], "potenti": [197, 211, 232], "power": [237, 244, 252, 258, 259], "pp": 230, "practic": [190, 194, 196, 197, 198, 202, 203, 205, 206, 207, 208, 210, 215, 230], "pre": [189, 191, 218, 219, 221, 222, 225, 227, 230, 235, 239, 243, 246, 254, 258], "preced": [224, 234, 235], "precis": [2, 12, 13, 25, 161, 162, 163, 164, 165, 166, 174, 184, 185, 189, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 209, 211, 212, 213, 214, 215, 223, 244, 252, 258, 259], "precomput": [241, 251], "precursor": 225, "pred": [194, 208, 231, 236], "pred_label": [191, 217, 223, 236, 251], "pred_prob": [191, 217, 223, 236, 251], "predefin": [196, 210], "predict": [12, 194, 202, 221, 222, 231, 236, 244, 251], "prefac": 248, "prefer": [171, 246, 250, 262], "prefix": [11, 22, 23, 175, 181, 183, 187, 217, 251, 254], "prelu": [118, 258], "prepar": [20, 24, 25, 172, 178, 185, 196, 218, 223, 225, 226, 236, 246, 256, 257, 258, 260, 263], "prepare_model": [20, 172, 199, 208, 209, 211, 212, 213, 214, 215, 222, 225, 226], "prepared_model": [172, 222, 225, 226], "prepend": [175, 189], "preprocess": [191, 194, 195, 198, 200, 201, 203, 217, 223, 224, 231, 236, 251, 254], "preprocess_input": [194, 195, 200, 201, 203, 204, 217, 223, 224, 231, 236, 251, 254], "prerequisit": 232, "presenc": 254, "present": [169, 171, 173, 178, 199, 211, 221, 250, 252], "preserv": [166, 172, 217], "preserve_format": 160, "preset": 236, "pretrain": [190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 222, 223, 224, 225, 226, 236, 238, 251, 253, 254], "pretti": [227, 231, 233], "prev": 226, "prev_conv_weight": 226, "prevent": [171, 172, 227, 242, 258], "previou": [2, 12, 17, 29, 180, 184, 190, 194, 208, 212, 227, 228, 231, 233, 236, 244, 246, 247, 259, 261], "primari": 245, "print": [30, 164, 165, 171, 172, 173, 175, 180, 181, 190, 191, 192, 193, 197, 198, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 222, 223, 224, 225, 226, 227, 231, 233, 236, 246, 248, 249, 251, 254], "prior": [2, 12, 184, 190, 194, 208, 209, 212, 213, 214, 236, 252, 258], "privileg": [189, 248], "probabl": 244, "problem": [172, 246, 258, 259, 263], "problemat": [172, 259], "proce": [13, 25, 185, 223, 225, 248, 263], "procedur": [192, 204, 205, 207, 212, 229, 232, 246, 248, 251, 258], "proceed": [190, 192, 193, 225, 226, 236], "process": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 221, 223, 225, 227, 229, 230, 231, 238, 244, 248, 250, 251, 253, 262], "processor": [244, 246, 249], "produc": [13, 25, 158, 159, 168, 172, 185, 190, 202, 203, 208, 215, 219, 220, 222, 223, 229, 236, 244, 252, 253], "product": [228, 244, 245], "profil": [174, 236, 261], "progbar": [195, 200, 201, 203, 204], "progbar_stat_upd": [195, 200, 201, 203, 204], "progress": 232, "project": 244, "prone": [223, 238], "pronounc": 237, "propag": [234, 238, 258], "propagate_encod": [25, 181, 185, 187, 223, 251, 254], "proper": 258, "properli": [161, 162, 221, 258], "properti": [166, 171], "provid": [0, 2, 5, 8, 9, 12, 18, 20, 21, 23, 25, 30, 166, 167, 171, 173, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 225, 228, 229, 230, 231, 232, 236, 238, 241, 243, 244, 250, 251, 252, 253, 254, 258, 259, 260, 261, 262, 263], "proxi": 172, "prune": [29, 189, 206, 228, 229, 231, 233, 234, 235, 244, 258], "pt_model": [190, 191, 192, 193, 217, 225, 226, 236, 251], "pth": [22, 181, 187, 221, 227, 231, 233, 251, 254], "ptq": [13, 25, 185, 196, 210, 218, 222, 223, 226, 230, 235, 239, 244, 253, 254, 258, 262, 263], "public": [0, 167, 251, 258], "publish": 258, "pure": [20, 257], "purpos": [190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 244], "put": [184, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "py38": [246, 247, 248], "pypi": [247, 248, 258], "python": [20, 244, 246, 247, 248, 249, 258], "python3": [189, 246, 247, 248, 249, 258], "pythonpath": [189, 221], "pytorch": [0, 25, 167, 169, 172, 173, 175, 180, 181, 182, 185, 187, 188, 189, 195, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 258, 261, 263], "q": [30, 158, 159, 160, 161, 162, 164, 165, 166, 171, 175, 180, 241, 242, 249, 253], "q_": 253, "q_modul": 171, "q_output": 30, "qadd": 175, "qairt": 261, "qat": [11, 23, 183, 189, 190, 193, 198, 203, 208, 217, 224, 241, 242, 244, 253, 258, 259, 262, 263], "qat2": 258, "qc": 258, "qc_quantize_op": 258, "qcquantizeop": [2, 236, 258], "qcquantizewrapp": [14, 171, 224, 258], "qdo": 244, "qdq": [162, 166, 241, 258, 262, 263], "qlinear": [30, 171, 175], "qmax": [161, 162, 164, 165, 180, 181, 249, 251, 254], "qmin": [161, 162, 164, 165, 180, 181, 249, 251, 254], "qmodul": 171, "qmul": 175, "qmult": 30, "qnn": [203, 204, 237, 258, 261, 262], "qol": 258, "qsim": [24, 197, 218], "qtype": [9, 251], "qtzr": [180, 241], "quad": [161, 162, 163, 164, 165], "qualcomm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264], "qualiti": [190, 208], "quant": [2, 8, 9, 13, 21, 22, 23, 25, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 210, 211, 212, 213, 214, 217, 222, 223, 236, 243, 251, 254, 258], "quant_analyz": [0, 5, 18, 167, 171, 202, 215, 222], "quant_analyzer_result": 222, "quant_dequ": 158, "quant_schem": [8, 9, 13, 21, 22, 25, 168, 179, 181, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 239, 243, 246, 249, 251, 252, 254], "quant_sim": [176, 238, 239], "quant_sim_model": [187, 251], "quant_stats_visu": [168, 220], "quant_wrapp": 171, "quantanalyz": [8, 21, 171, 179, 186, 219, 258], "quantiz": [0, 1, 2, 5, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 196, 199, 205, 206, 207, 210, 217, 218, 220, 221, 224, 225, 226, 228, 230, 232, 236, 237, 238, 239, 242, 243, 244, 246, 249, 251, 255, 257, 258], "quantizablemultiheadattent": 258, "quantizaiton": 7, "quantization_overrid": 261, "quantization_tf": 246, "quantizationdatatyp": [2, 12, 13, 22, 25, 171, 174, 181, 184, 185, 187, 190, 194, 208, 223, 236, 251, 254], "quantizationmixin": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 241, 242], "quantizationmod": 246, "quantizationsim": [190, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "quantizationsimmodel": [1, 2, 7, 8, 9, 10, 12, 13, 14, 21, 22, 24, 25, 30, 168, 170, 171, 174, 176, 177, 179, 180, 181, 182, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 236, 238, 239, 241, 243, 249, 250, 251, 252, 253, 254, 255, 258, 261], "quantizationsimmodelv1": 171, "quantizationsimmodelv2": 171, "quantized_": [217, 218, 239, 243], "quantized_callback": [197, 198, 200, 201], "quantized_dlc": 261, "quantized_linear": 30, "quantized_mobilenet_v2": [217, 224, 251, 254], "quantized_mobilenetv2": 254, "quantized_model": [181, 251, 254], "quantized_repr": [30, 158, 159, 160], "quantizedadd": 175, "quantizedconv2d": [171, 175, 181, 249, 250, 251, 254], "quantizedequant": [158, 171, 175, 180, 181, 241, 246, 249, 250, 251, 254], "quantizedlinear": [30, 171, 175, 250], "quantizedmaskedadd": 30, "quantizedmultipli": [30, 175], "quantizedoptlearnedpositionalembed": [241, 242], "quantizedrelu": 171, "quantizedsoftmax": 175, "quantizedtensor": [30, 158, 160, 161, 180], "quantizelinear": 177, "quantizer_arg": 252, "quantizer_config": [12, 236], "quantizer_group": [2, 12, 174, 184, 236], "quantizer_info": [2, 236], "quantizer_nam": [12, 236], "quantizerbas": [30, 175, 180, 242], "quantizergroup": [2, 12, 13, 25, 174, 184, 185, 223, 236], "quantparam": 212, "quantschem": [8, 9, 11, 13, 21, 22, 23, 25, 168, 179, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 236, 239, 243, 249, 251, 254, 258], "quantsim": [0, 5, 6, 8, 11, 18, 19, 21, 23, 167, 168, 169, 171, 174, 178, 179, 183, 186, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 208, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 236, 237, 238, 239, 241, 242, 243, 244, 245, 249, 250, 252, 254, 258, 262, 263], "quantsim_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "quantsim_layer_output": 221, "quantsim_layer_output_util": 221, "quantsimmodel": [218, 239, 243], "quatiz": 262, "quic": [189, 244, 246, 247, 248], "quick": [180, 199, 203, 205, 207, 246, 251], "quickli": [190, 194, 202, 203, 208, 215, 245, 249], "qwa": 258, "qwen": 239, "qwen2": [239, 258], "r": [2, 8, 12, 21, 178, 179, 184, 186, 203, 222, 236], "radic": 263, "rais": [20, 30, 166, 199, 223, 236], "rand": [173, 208, 209, 211, 212, 213, 214, 215, 218, 221, 222], "randint": 239, "randn": [30, 159, 160, 161, 162, 172, 173, 175, 181, 190, 191, 192, 193, 210, 217, 222, 223, 224, 225, 226, 236, 238, 243, 246, 249, 251, 254], "random": [20, 199, 210, 222, 227, 236, 246, 249], "random_input": [20, 199], "random_split": 251, "randperm": 208, "rang": [8, 20, 21, 164, 165, 168, 172, 179, 180, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 217, 219, 220, 224, 226, 229, 235, 236, 239, 241, 242, 244, 251, 253, 254, 258, 259], "rank": [17, 29, 231, 233, 235, 240], "rank_select": 233, "rank_select_schem": [29, 233], "rankselectschem": [29, 227, 231, 233], "rare": 258, "rate": [20, 197, 198, 199, 200, 201, 205, 206, 207, 211, 213, 214, 230, 254], "rather": [172, 197, 211, 243, 255], "ratio": [17, 29, 205, 206, 207, 227, 228, 231, 233], "raw": [239, 241, 242], "rceil": [164, 165], "re": [2, 12, 180, 182, 184, 188, 189, 190, 199, 208, 236, 243, 258, 263], "re_estimation_dataset": 197, "re_estimation_dataset_s": 197, "reach": [196, 210, 223], "read": 222, "reader": [190, 197, 202, 203, 208, 211, 215], "readi": [22, 180, 181, 187, 190, 192, 193, 194, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 251, 254, 259, 262], "readili": [190, 194, 197, 202, 203, 208, 211, 215], "real": [158, 159, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 232, 236, 249], "realiz": [174, 238], "realli": [190, 197, 202, 203, 211, 215], "reason": [173, 191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 263], "recalcul": [197, 211], "receiv": 172, "recent": [247, 262], "recip": 258, "recogn": [173, 253], "recommend": [1, 2, 8, 9, 20, 23, 177, 180, 183, 190, 191, 192, 193, 194, 195, 196, 199, 203, 209, 210, 217, 218, 222, 224, 225, 226, 228, 236, 239, 246, 247, 249, 250, 251, 259, 262, 263], "recomput": [191, 217, 258], "reconfigur": 258, "reconstruct": [11, 23, 183, 205, 207, 217], "record": [8, 21, 179, 186, 222], "recov": [192, 204, 205, 206, 207, 212, 258, 259, 262, 263], "recoveri": 263, "recurr": 258, "recurs": 258, "redefin": 173, "redesign": 258, "reduc": [1, 10, 175, 178, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 224, 226, 230, 234, 235, 237, 243, 244, 250, 253, 258, 259], "reduct": [205, 206, 207, 228, 263], "redund": [225, 230], "reestim": [14, 26, 197, 224], "reestimate_bn_stat": [14, 26, 197, 211, 224], "ref": 248, "refer": [169, 171, 178, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 221, 236, 243, 250, 251, 252, 254, 261], "reflect": [200, 201, 213, 214, 253], "reflectionpad1d": 128, "reflectionpad2d": 129, "reflectionpad3d": 130, "regard": [2, 12, 184, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 236], "regardless": [218, 239], "regist": [30, 166, 190, 218, 241, 242, 258], "regress": 227, "regular": [11, 12, 22, 23, 30, 180, 181, 183, 187, 190, 191, 198, 217, 236, 251, 254], "rel": [12, 17, 29, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 227, 228, 231, 233, 236, 259], "relat": [171, 227, 231, 233, 245, 253], "relationship": 250, "releas": [189, 239, 246, 247, 248], "release_tag": [189, 247, 248], "relev": [205, 206, 207, 237, 262], "reli": [171, 190, 192, 193, 194, 197, 198, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "reload": 212, "relu": [20, 126, 171, 172, 173, 197, 198, 199, 217, 225, 226, 234, 255, 256, 257, 258], "relu1": [20, 173, 257], "relu2": [20, 173, 256, 257], "relu6": [127, 225, 226, 258], "remain": [24, 171, 182, 188, 217, 218, 239, 243, 258], "remov": [14, 25, 26, 172, 185, 199, 223, 224, 225, 227, 234, 242, 244, 247, 251, 252, 253, 254, 258], "remove_all_quant": 242, "remove_column": [239, 241, 242], "reorder": 199, "reorgan": 258, "repeat": [178, 203, 227, 263], "repeatedli": 262, "replac": [171, 172, 175, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 241, 248, 250, 253, 254, 258], "replace_lora_layers_with_quantizable_lay": [178, 241, 242], "replicationpad1d": 131, "replicationpad2d": 132, "replicationpad3d": 133, "repo": [247, 248], "report": [238, 258, 263], "repositori": [189, 247, 248], "repres": [2, 8, 9, 13, 17, 20, 21, 22, 25, 158, 159, 160, 166, 174, 175, 179, 181, 184, 185, 186, 187, 202, 215, 222, 223, 227, 229, 231, 233, 236, 238, 244, 249, 251, 252, 253, 254, 257, 258, 261], "represent": [158, 159, 160, 166, 180, 199, 244, 253, 258, 261], "reqs_deb_common": 248, "reqs_deb_onnx_common": 248, "reqs_deb_onnx_gpu": 248, "reqs_deb_tf_gpu": 248, "reqs_deb_torch_common": 248, "reqs_deb_torch_gpu": 248, "requant": 225, "request": 238, "requir": [2, 17, 20, 29, 30, 169, 171, 172, 178, 180, 181, 187, 190, 194, 199, 202, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 218, 221, 222, 225, 226, 227, 228, 230, 231, 232, 233, 236, 238, 239, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 262, 263], "requires_grad": [159, 160, 172, 251, 254], "requires_grad_": [171, 241, 242], "rerun": 173, "resblock": 20, "research": 244, "resembl": 20, "resid": [247, 258], "residu": 227, "resiz": [191, 208, 217, 223, 236, 251, 258], "resnet": [181, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 228, 231, 236, 251, 254], "resnet18": [181, 190, 191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 251, 254], "resnet18_after_adaround": 191, "resnet18_after_cle_bc": [209, 210, 212], "resnet18_after_qat": [211, 213, 214], "resnet18_mixed_precis": [190, 208], "resnet50": [194, 195, 196, 200, 201, 202, 203, 204, 222, 231, 236], "resnet50_after_adaround": 195, "resnet50_after_amp": 194, "resnet50_after_cl": 204, "resnet50_pcq_adaround": 203, "resolv": [173, 258], "resort": 259, "resourc": [190, 197, 198, 199, 203, 208, 211, 244, 263], "respecit": [190, 208], "respect": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 180, 182, 188, 200, 201, 222, 235, 236, 243, 256, 258], "respond": [202, 215], "respons": [2, 12, 184, 190, 194, 208, 230, 236, 244, 263], "ressembl": 199, "rest": [195, 200, 201, 203, 204, 258, 259], "restor": [187, 205, 206, 207, 253, 258, 259, 262], "restrict": 250, "resu": 20, "result": [2, 8, 12, 13, 20, 21, 25, 30, 158, 159, 160, 179, 180, 181, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 224, 226, 227, 228, 230, 231, 233, 236, 239, 241, 242, 243, 250, 251, 253, 254, 255], "results_dir": [2, 8, 12, 13, 21, 25, 179, 184, 185, 186, 190, 194, 202, 208, 215, 222, 223, 236], "retain": [236, 244], "retest": 263, "retrain": [244, 257, 262], "retriev": 30, "retrieve_context": 261, "retuern": 236, "return": [2, 3, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 169, 170, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 236, 239, 241, 242, 243, 250, 251, 253, 254, 256, 257], "return_dict": [239, 241, 242], "reus": [172, 173, 190, 208, 256, 257], "reveal": 259, "revert": 259, "review": 198, "revis": 252, "revisit": 228, "rework": 252, "rewrit": 173, "rfloor": [161, 162, 163, 164, 165, 166, 253], "rgb": [223, 236, 257], "rgb_output": 257, "right": [161, 162, 163, 164, 165, 166, 175, 180, 190, 194, 196, 198, 208, 210, 234, 236, 250, 253], "rm": 247, "rmsnorm": 258, "rmsnormal": 258, "rnn": [123, 258], "rnncell": 124, "ro": 247, "robust": [177, 243, 258, 262], "root": [208, 210, 217, 247, 248, 251, 258], "rough": [190, 208], "roughli": [25, 174, 184, 185, 223, 236], "round": [1, 11, 13, 17, 21, 22, 23, 25, 29, 183, 185, 187, 189, 203, 222, 223, 231, 233, 244, 251, 253, 254, 258], "round_mod": 212, "round_nearest": 246, "rounding_mod": [13, 21, 22, 25, 181, 185, 187, 194, 195, 198, 200, 201, 203, 204, 222, 223, 251, 254, 258], "roundingmod": 246, "routin": [190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 251], "rrelu": 125, "rtype": [12, 20, 158, 159, 160, 174, 184, 236], "rule": [22, 236, 238, 250, 251, 254, 255, 262], "run": [2, 8, 9, 12, 13, 17, 20, 21, 22, 24, 25, 26, 29, 161, 162, 171, 172, 173, 174, 175, 177, 179, 180, 181, 184, 185, 186, 187, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 221, 223, 224, 227, 230, 231, 232, 233, 236, 237, 238, 244, 245, 247, 248, 250, 251, 252, 253, 254, 258, 261, 262, 263], "run_forward_pass": [9, 181, 251, 254], "run_infer": [13, 25, 185, 210, 223], "runnabl": 262, "runtim": [10, 22, 30, 180, 181, 187, 190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 221, 222, 225, 227, 228, 230, 231, 233, 236, 243, 244, 245, 247, 250, 251, 252, 254, 258, 260, 261, 262, 263], "runtimeerror": [166, 181, 251, 254], "s2": 218, "s3": 218, "s_1": 250, "s_2": 250, "s_n": 250, "safe": 160, "safetensor": [176, 239], "sai": [172, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 228, 236, 238], "sake": [192, 212, 221], "same": [8, 20, 21, 25, 30, 100, 158, 159, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 221, 222, 223, 226, 235, 238, 240, 250, 251, 254, 255], "sampl": [1, 2, 8, 9, 10, 13, 21, 22, 24, 25, 168, 174, 175, 179, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 225, 226, 227, 231, 236, 239, 241, 242, 243, 249, 251, 253, 254, 258], "sampled_dataset": [196, 197, 202], "sandeep": 230, "saniti": 180, "satisfactori": [217, 218, 224, 239, 243, 259, 263], "satisfi": [172, 174, 196, 210, 223, 238, 250], "saurabh": 230, "save": [2, 6, 8, 9, 11, 12, 13, 17, 19, 21, 22, 23, 25, 29, 168, 169, 176, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 227, 231, 233, 236, 239, 243, 251, 253, 254, 258, 261, 262], "save_checkpoint": 187, "save_dir": [19, 221], "save_path": [168, 220], "saved_eval_scores_dict": [17, 29, 227, 231, 233], "saw": 203, "scalar": [8, 13, 21, 179, 186, 222, 223, 258], "scale": [14, 30, 159, 160, 161, 162, 163, 164, 165, 166, 176, 180, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 222, 224, 226, 235, 239, 244, 246, 249, 250, 251, 252, 253, 254, 258, 261, 262], "scale_": [161, 162, 163, 164, 165, 180], "scenario": [191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 234], "scene": 262, "schedul": [205, 206, 207, 211, 213, 214, 254], "schema": 258, "scheme": [8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 169, 179, 181, 183, 185, 186, 187, 190, 194, 197, 198, 202, 205, 206, 207, 208, 211, 215, 217, 221, 222, 223, 227, 230, 231, 233, 244, 251, 254, 258], "scope": 172, "score": [2, 8, 12, 13, 17, 21, 25, 29, 179, 184, 185, 186, 190, 191, 192, 193, 194, 196, 197, 210, 211, 222, 223, 227, 229, 230, 231, 232, 233, 236], "script": [211, 247, 248], "sdk": [190, 203, 208, 245, 262], "search": [2, 12, 13, 25, 182, 184, 185, 188, 190, 197, 198, 200, 201, 205, 206, 207, 208, 211, 213, 214, 223, 235, 236, 243, 254, 255, 258, 262], "searcher": 230, "sec": [190, 194, 203, 208, 236], "second": [9, 13, 20, 23, 175, 178, 181, 182, 183, 188, 202, 215, 217, 223, 225, 226, 236, 243, 250, 251, 254], "section": [2, 173, 184, 190, 197, 208, 210, 236, 241, 242, 247, 248, 250, 253, 255, 260, 263], "see": [0, 17, 20, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 226, 227, 230, 231, 232, 233, 245, 246, 249, 250, 251, 253, 255, 258, 259, 263], "seed": 227, "seem": 230, "seen": [202, 215, 222], "select": [13, 17, 25, 29, 185, 190, 194, 208, 222, 223, 228, 231, 232, 233, 234, 241, 242, 244, 246, 247, 248, 253, 255, 261], "select_param": [29, 233], "self": [13, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 172, 173, 199, 210, 223, 236, 239, 256, 257], "selu": 134, "sens": 175, "sensit": [2, 8, 12, 21, 179, 184, 186, 190, 192, 194, 204, 208, 212, 219, 224, 229, 235, 237, 253, 258, 262, 263], "sentiment": 198, "separ": [11, 20, 22, 23, 171, 172, 173, 181, 183, 187, 194, 217, 222, 224, 251, 254, 258, 259], "separableconv2d": 258, "seq": 243, "seq_length": [239, 241, 242], "seq_ms": [0, 167, 171, 243], "seqms": [235, 243, 258], "seqmseparam": [182, 188, 243], "sequanti": 199, "sequenc": [181, 196, 198, 210, 217, 223, 235, 251, 254, 255], "sequenti": [10, 20, 171, 182, 188, 197, 198, 199, 225, 226, 249, 255, 256, 258, 259], "seri": [25, 174, 181, 185, 187, 196, 210, 223, 238, 251, 254, 261], "serial": 261, "serializetostr": [190, 191, 192, 193, 221], "serv": [175, 217, 222, 223, 232], "servic": 238, "sess": [9, 177, 190, 191, 192, 193, 231, 251], "sess_opt": 177, "session": [9, 17, 190, 191, 192, 193, 217, 221, 222, 231, 236, 251], "sessionopt": 177, "set": [1, 2, 7, 8, 9, 10, 11, 12, 13, 17, 20, 21, 25, 29, 30, 166, 168, 170, 171, 172, 173, 174, 175, 177, 179, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 222, 223, 224, 227, 228, 229, 230, 231, 233, 236, 237, 240, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 262, 263], "set_activation_quantizers_to_float": [170, 250], "set_adapt": 178, "set_adaround_param": [13, 25, 185, 196, 210, 223], "set_and_freeze_param_encod": [195, 203, 209, 217], "set_blockwise_quantization_for_weight": [170, 250], "set_default_kernel": 30, "set_export_param": [25, 185, 223], "set_extra_st": 166, "set_grouped_blockwise_quantization_for_weight": [0, 5, 170, 250], "set_kernel": 30, "set_mixed_precision_param": [13, 25, 185, 223], "set_model_input_precis": [174, 238], "set_model_output_precis": [174, 238], "set_model_preparer_param": [25, 185, 223], "set_precis": [174, 238], "set_quant": 258, "set_quant_scheme_candid": [13, 25, 185, 223], "set_quantizers_to_candid": [2, 12, 174, 184, 236], "set_rang": [158, 159], "set_transform": [223, 236], "set_verbos": [194, 236], "settabl": 253, "setup": [171, 225, 236, 246, 249], "sever": [173, 175, 222, 228, 243, 256, 257, 258], "sgd": [224, 251, 254], "sh": [247, 248], "shall": 252, "shape": [9, 12, 20, 27, 28, 29, 158, 159, 160, 161, 162, 166, 170, 171, 172, 173, 175, 180, 181, 190, 191, 192, 193, 197, 198, 199, 203, 208, 209, 211, 212, 213, 214, 215, 217, 222, 225, 226, 227, 231, 233, 236, 241, 249, 250, 251, 254, 256], "share": [173, 175], "sharp": 230, "sharpli": [205, 206, 207, 263], "shell": 247, "shift": [204, 212], "shift_label": [241, 242], "shift_logit": [241, 242], "should": [8, 12, 17, 20, 21, 22, 24, 29, 30, 100, 160, 169, 171, 172, 175, 179, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 227, 228, 231, 233, 236, 243, 246, 249, 250, 251, 252, 254, 256, 257, 261, 263], "shouldn": 180, "show": [173, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 226, 229, 250, 259], "showcas": [202, 215], "shown": [171, 178, 202, 215, 222, 223, 234, 246, 247, 249, 257, 259], "shuffl": [191, 194, 195, 200, 201, 203, 217, 218, 223, 224, 227, 231, 236, 239, 251, 254], "side": 234, "sigmoid": [20, 136, 172], "sign": [164, 165, 171, 180, 253], "signatur": [9, 17, 29, 30, 164, 165, 181, 205, 206, 207, 222, 223, 227, 231, 233, 251, 254, 258], "signific": [217, 259], "significantli": 258, "silu": 135, "sim": [1, 2, 7, 8, 9, 10, 12, 14, 21, 22, 24, 168, 170, 171, 174, 177, 178, 179, 181, 182, 184, 186, 187, 188, 191, 194, 197, 198, 203, 210, 217, 218, 220, 222, 223, 224, 236, 238, 239, 242, 243, 249, 250, 251, 252, 254], "sim1": 171, "sim2": 171, "sim_model": [195, 200, 201, 202, 203, 204, 209, 211, 212, 213, 214, 215], "simd": 248, "similar": [178, 180, 226, 244, 246, 249, 250, 253], "similarli": [190, 194, 202, 203, 208, 211, 215, 259, 263], "simpl": [172, 194, 197, 198, 202, 203, 215, 222, 227, 231, 233], "simpler": 171, "simpli": [8, 21, 22, 172, 179, 186, 187, 190, 194, 197, 198, 203, 208, 211, 222, 251, 254], "simplic": [178, 221], "simplif": 226, "simplifi": [1, 2, 8, 9, 171, 217, 221, 222, 225, 226, 236, 251, 261], "simuat": [191, 192, 195, 200, 201, 203, 204, 209, 212, 213, 214], "simul": [9, 22, 166, 170, 175, 178, 181, 187, 189, 197, 198, 205, 206, 207, 215, 217, 218, 219, 220, 221, 224, 225, 236, 237, 239, 243, 244, 250, 251, 252, 254, 255, 257, 258, 263], "sinc": [181, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 228, 236, 243, 250, 251, 253, 254], "singl": [2, 6, 13, 19, 25, 169, 172, 174, 184, 185, 202, 203, 215, 221, 222, 223, 227, 229, 230, 231, 233, 236, 250, 252, 253, 258], "singular": [206, 207, 230, 231, 233], "situat": 222, "six": 255, "size": [7, 8, 20, 160, 161, 162, 163, 164, 165, 170, 173, 175, 180, 195, 196, 197, 198, 199, 203, 209, 217, 218, 222, 231, 233, 236, 237, 239, 244, 250, 251, 252, 262, 263], "skew": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214], "skip": [23, 25, 182, 183, 185, 188, 192, 204, 212, 217, 223, 224, 227, 241, 243, 247, 251, 254], "skipped_optim": 225, "slight": 203, "slightli": [190, 208, 240], "slim": 258, "slow": 230, "small": [9, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 224, 240, 243, 251, 254], "smaller": [2, 12, 23, 183, 184, 190, 203, 208, 217, 230, 231, 233, 236, 259, 262], "smoothl1loss": 137, "snapdragon": [190, 203, 208], "snippet": [172, 190, 208, 249, 250], "snpe": [203, 204, 258], "so": [8, 9, 22, 23, 24, 171, 172, 173, 175, 181, 183, 187, 190, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 217, 218, 222, 225, 226, 227, 229, 231, 233, 241, 242, 244, 248, 251, 254, 261, 263], "softmarginloss": 138, "softmax": [20, 139, 175, 198, 199, 208], "softmax2d": 140, "softmin": 141, "softplu": [142, 172], "softshrink": 143, "softsign": 144, "softwar": [244, 245, 258], "sole": 222, "solut": [194, 208, 229, 236, 254, 259], "some": [17, 20, 29, 171, 172, 175, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 226, 227, 229, 231, 233, 234, 236, 241, 242, 253, 259, 262, 263], "someth": [22, 187, 222, 230, 251, 254], "sometim": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 222, 227, 230, 263], "somewher": 263, "soon": 223, "sort": [24, 199, 218], "sourc": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 217, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 243, 244, 247, 248, 250, 251, 254, 259], "space": [29, 227, 231, 233, 236, 253], "spars": 258, "sparse_categorical_crossentropi": 198, "spatial": [17, 29, 189, 227, 228, 229, 233, 235, 258], "spatial_svd": [29, 206, 207, 227, 231, 233], "spatial_svd_auto_mod": 231, "spatial_svd_manual_mod": 231, "spatialsvdparamet": [17, 29, 206, 207, 227, 231, 233], "spconv": 258, "special": [25, 172, 185, 223, 244], "specif": [8, 17, 20, 22, 25, 29, 30, 170, 173, 175, 179, 181, 185, 186, 187, 190, 191, 194, 195, 197, 199, 203, 208, 209, 211, 222, 223, 227, 231, 233, 240, 250, 251, 253, 254, 255, 258, 261, 263], "specifi": [2, 8, 13, 17, 21, 22, 23, 29, 161, 162, 163, 164, 165, 166, 174, 179, 181, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 236, 238, 247, 250, 251, 252, 254, 255], "speed": [17, 29, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 225, 227, 230, 231, 233, 254, 258], "speedup": [182, 188, 190, 203, 208, 243], "split": [182, 188, 191, 217, 223, 224, 236, 239, 241, 242, 243, 250, 251, 253, 254], "sqnr": [2, 13, 25, 174, 182, 184, 185, 188, 190, 194, 208, 223, 236, 243, 253], "sqrt": 172, "squar": [219, 253], "squeez": [197, 208], "ssvd": 228, "ssvd_comp_stat": 207, "ssvd_compressed_model": 207, "ssvd_cp_compressed_model": 207, "ssvd_cp_finetuned_model": 207, "ssvd_finetuned_model": 207, "stabl": [172, 177, 197, 211, 217], "stack": [216, 236], "stand": 258, "standalon": [217, 258], "standard": [12, 166, 172, 175, 193, 198, 200, 201, 213, 214, 236, 244], "start": [2, 11, 12, 20, 23, 164, 165, 172, 173, 178, 183, 184, 189, 190, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 213, 214, 215, 217, 228, 236, 246, 253, 255, 263], "start_beta": [11, 23, 183, 217], "start_i": [194, 236], "start_x": [194, 236], "starting_op_nam": [12, 236], "stat": [8, 26, 168, 220, 222, 224, 227, 231, 233], "statatist": 211, "state": [166, 182, 188, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 236, 243], "state_dict": 166, "stateless": 257, "statement": 172, "static": [12, 17, 20, 29, 172, 173, 227, 231, 233, 236, 258], "static_patch_count": 20, "staticgridperchannelquant": 171, "staticgridquant": 171, "staticgridquantwrapp": 171, "staticmethod": [172, 190, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "statist": [8, 9, 17, 21, 26, 29, 161, 162, 166, 168, 175, 179, 181, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 219, 220, 224, 227, 231, 233, 235, 251, 254], "std": [191, 208, 210, 217, 223, 236, 251], "step": [1, 8, 12, 21, 164, 165, 172, 174, 178, 179, 182, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 202, 203, 208, 211, 215, 227, 228, 229, 230, 237, 238, 240, 241, 242, 246, 247, 248, 249, 253, 259, 260, 261, 262], "still": [171, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 246, 250, 256, 259, 263], "stochast": [21, 22, 187, 222, 251, 254], "stop": [11, 23, 183, 217, 223], "stopiter": [223, 236], "storag": [250, 253], "store": [11, 22, 23, 159, 174, 181, 183, 187, 190, 194, 208, 217, 237, 238, 250, 251, 254], "str": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 25, 166, 168, 169, 172, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 194, 199, 217, 220, 221, 222, 223, 231, 236, 238, 239, 243, 251, 254, 257], "str_idx": 223, "straightforward": 263, "strategi": 263, "stream": [217, 223, 224, 243], "strict": [7, 166, 174, 238, 251, 253, 254, 255], "strict_symmetr": [197, 246, 255], "strict_valid": [13, 25, 185, 223], "strictli": [166, 251], "stride": [160, 172, 173, 181, 225, 226, 249, 251, 254], "strike": 230, "string": [9, 22, 174, 181, 187, 238, 247, 251, 252, 254, 255], "strongli": [20, 172, 180, 191, 195, 203, 209], "structur": [25, 172, 175, 185, 202, 207, 215, 223, 230, 238, 244], "style": 203, "sub": [202, 215], "subbackward0": 180, "subclass": [20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 180, 197, 198, 251, 256, 258], "subdirectori": [190, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "subfold": [190, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "sublay": 173, "submit": 261, "submodul": [20, 257], "subpackag": [30, 258], "subsequ": [158, 190, 192, 203, 204, 208, 217, 225, 226, 244, 255, 258], "subset": [8, 9, 21, 179, 181, 186, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 224, 234, 238, 250, 251, 254], "subsetrandomsampl": 210, "subsidiari": 245, "substanti": 252, "substep": 247, "substitut": 251, "success": [196, 210], "successfulli": [181, 221, 251, 254], "sudo": [189, 248], "suffic": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214], "suffici": [222, 251, 253, 254, 262], "suffix": 247, "suggest": [22, 187, 205, 207, 229, 230, 251, 254, 263], "suit": [196, 210, 223, 241, 244], "suitabl": 244, "sum": [191, 194, 208, 210, 217, 223, 231, 236, 251, 254], "summari": [198, 217, 225, 226, 230, 258], "sun": 230, "super": [20, 30, 172, 173, 199, 223, 236, 258], "supergroup": [197, 253, 258], "suppli": 250, "support": [2, 8, 11, 12, 20, 21, 22, 23, 29, 30, 172, 173, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 190, 194, 197, 198, 199, 208, 211, 213, 214, 217, 218, 220, 222, 223, 224, 225, 227, 228, 230, 231, 233, 235, 236, 239, 243, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 263], "supported_kernel": [2, 184, 190, 208, 236], "supported_kernel_op": [174, 184, 236], "suppos": [2, 12, 184, 190, 194, 208, 236], "svd": [17, 29, 189, 227, 228, 229, 235, 258], "sweep": [10, 243], "switch": 250, "symbol": [20, 172], "symbolic_trac": [25, 172, 185, 223], "symfp": [182, 188, 243], "symmetr": [30, 158, 159, 160, 161, 162, 170, 171, 175, 180, 181, 199, 241, 249, 250, 251, 252, 253, 254, 255, 258], "symmetri": [171, 182, 188, 243, 258], "symqt": [182, 188, 243], "sync": 254, "syntax": 252, "systemat": 244, "t": [2, 9, 12, 25, 30, 172, 180, 181, 182, 184, 185, 188, 190, 194, 197, 198, 202, 203, 208, 211, 215, 222, 223, 236, 239, 241, 242, 243, 247, 251, 254, 255, 258, 262], "tabl": [168, 189, 220, 232, 247, 252], "tag": [189, 247, 248], "take": [1, 2, 9, 12, 13, 24, 25, 29, 30, 170, 173, 174, 177, 178, 180, 181, 184, 185, 190, 194, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 211, 215, 217, 218, 223, 224, 227, 229, 230, 231, 233, 234, 236, 238, 239, 250, 251, 254, 258, 259, 262], "taken": [20, 24, 218, 234], "tanh": 145, "tanhshrink": 146, "tap": [21, 179, 186, 222], "tar": [29, 233], "target": [9, 17, 20, 22, 29, 41, 42, 48, 62, 64, 81, 87, 88, 92, 93, 104, 105, 113, 114, 115, 116, 117, 122, 137, 138, 178, 181, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 223, 225, 227, 228, 229, 230, 231, 233, 236, 239, 243, 244, 251, 252, 253, 254, 258, 259, 263], "target_comp_ratio": [17, 29, 205, 206, 207, 227, 231, 233], "target_data": [208, 209, 211, 212, 213, 214, 215], "target_length": 48, "target_modul": 178, "task": [190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 232, 244, 252], "taxonomi": 230, "tbd": [220, 243], "teach": 189, "techiqu": 212, "techniqu": [13, 25, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 218, 222, 223, 225, 226, 227, 228, 231, 233, 236, 237, 239, 240, 241, 244, 245, 250, 253, 254, 258, 259, 262, 263], "technologi": [244, 245], "tell": 203, "tempfil": 258, "temporari": [9, 217, 225, 226, 236, 251], "temporarili": [171, 242], "tend": 217, "tensor": [1, 2, 9, 12, 13, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 190, 192, 199, 202, 203, 204, 208, 212, 213, 214, 215, 217, 218, 221, 222, 223, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "tensor_nam": 252, "tensor_quant": 171, "tensorboard": [197, 198, 200, 201], "tensorflow": [0, 18, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 231, 236, 239, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 261, 262, 263], "tensorquant": [12, 236], "tensorquantizationsimforpython": 246, "term": [181, 231, 233, 244, 245, 250, 251, 254], "termin": 189, "test": [8, 21, 179, 186, 197, 198, 199, 222, 239, 241, 242, 248, 262, 263], "test_dataload": [239, 241, 242], "test_dataset": [239, 241, 242], "text": [20, 161, 162, 163, 164, 165, 199, 239, 241, 242], "textclassif": 199, "tf": [2, 8, 11, 14, 16, 17, 20, 21, 179, 186, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 211, 215, 217, 221, 222, 223, 224, 226, 231, 236, 247, 251, 256, 258], "tf_cpp_min_log_level": [194, 196, 197, 200, 201, 236], "tf_dataset": [195, 203, 204], "tf_enhanc": [9, 22, 190, 194, 197, 198, 208, 211, 251, 254], "tfencod": 171, "tflite": [190, 203, 208], "tfoplambda": [20, 199, 258], "than": [17, 23, 29, 171, 172, 173, 183, 184, 187, 190, 191, 195, 197, 198, 208, 209, 211, 217, 227, 228, 231, 233, 236, 238, 243, 250, 254, 255, 258, 262], "thei": [172, 173, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 232, 236, 240, 241, 242, 250, 253, 256, 259, 262], "them": [13, 20, 22, 25, 166, 171, 172, 173, 175, 185, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 222, 223, 230, 238, 244, 251, 254], "theme": 258, "thereaft": 236, "therebi": [190, 208, 237], "therefor": [2, 12, 184, 190, 194, 197, 198, 199, 208, 225, 228, 236], "theta_": [161, 162], "thi": [2, 6, 8, 9, 10, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 100, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "thing": [191, 192, 193, 195, 196, 203, 204, 205, 206, 207, 209, 212, 213, 214, 261], "those": [8, 179, 186, 199, 222, 238, 241, 255, 262], "though": [30, 180, 190, 194, 197, 198, 203, 208, 237, 250, 255, 263], "three": [172, 190, 205, 206, 207, 208, 228, 262], "threshold": [147, 168, 220, 223], "through": [2, 9, 20, 21, 160, 171, 172, 174, 175, 179, 184, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 217, 222, 226, 236, 238, 241, 242, 251, 253, 254, 263], "throughout": [24, 218, 244, 255], "throw": [30, 180, 181, 251, 254], "thrown": [251, 254, 258], "thu": [158, 159, 160], "tijmen": 230, "till": [2, 12, 184, 190, 194, 208, 236], "time": [17, 29, 160, 172, 173, 178, 194, 196, 202, 210, 212, 215, 217, 222, 223, 227, 230, 231, 232, 233, 236, 238, 250, 254, 258, 262], "tmp": [8, 13, 21, 25, 179, 185, 186, 197, 202, 215, 217, 222, 223, 224, 225, 226, 236, 251, 254], "tmpdir": 178, "to_arrai": [225, 226], "to_list": [2, 12, 174, 184, 236], "todo": [174, 238], "togeth": [203, 236], "toi": 222, "token": [20, 198, 199, 239, 241, 242, 259], "token_and_position_embed": 199, "token_emb": [20, 199], "tokenandpositionembed": [20, 199], "tokenized_dummy_text": [241, 242], "toler": [196, 210, 223, 228], "tolist": 208, "too": [205, 207, 250], "tool": [21, 179, 186, 199, 222, 226, 234, 237, 244, 250, 258, 260, 261, 263], "toolkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "top": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 174, 176, 179, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 226, 227, 231, 232, 233, 236, 238, 239, 243, 250, 251, 254], "top1": [194, 210, 231, 236], "top1_accuraci": 208, "top5": 194, "topk": [208, 210], "torch": [13, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 187, 189, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 254, 257, 258, 263], "torch_stabl": [246, 247, 248], "torchscript": [25, 169, 181, 185, 187, 221, 223, 244, 251, 254], "torchvis": [181, 190, 191, 192, 193, 195, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 225, 226, 236, 238, 243, 249, 251, 254], "total": [194, 199, 229, 231, 236, 241, 242, 251, 253], "total_length": [239, 241, 242], "total_sampl": [191, 217, 236, 251], "totensor": [191, 208, 210, 217, 223, 236, 251], "touch": 20, "toward": 259, "tpu": 244, "tqdm": [191, 208, 210, 217, 236, 241, 242, 251, 254], "trace": [20, 25, 168, 172, 185, 220, 223, 257], "traceabl": [172, 241, 242, 257], "traceback": 172, "traceerror": 172, "tracer": 172, "track": [202, 215, 222], "track_running_stat": [225, 226], "trade": [11, 23, 183, 190, 194, 208, 217, 236], "tradeoff": [190, 194, 208, 236, 244, 263], "train": [8, 9, 13, 14, 17, 20, 21, 25, 26, 29, 176, 179, 181, 185, 186, 189, 190, 194, 199, 208, 210, 217, 218, 219, 221, 222, 223, 224, 226, 227, 230, 231, 233, 235, 236, 239, 240, 243, 244, 245, 251, 253, 258, 259, 263], "train_dataload": [181, 239, 241, 242, 251, 254], "train_dataset": [197, 239, 241, 242], "train_dataset_s": 197, "train_flag": [29, 227, 231, 233], "train_load": [211, 227], "train_model": [29, 227, 231, 233], "train_one_epoch": [241, 242], "trainabl": [201, 214, 218, 239, 240, 241, 242], "trainer": [17, 29, 189, 205, 206, 207, 211, 213, 214, 227, 231, 233], "training_range_learning_with_tf_init": [181, 197, 201, 211, 214, 218, 224, 239, 243, 249, 251, 254], "trainingmod": [190, 193], "transact": 230, "transform": [20, 172, 191, 199, 208, 209, 210, 212, 213, 214, 215, 217, 223, 236, 239, 241, 242, 250, 251, 258], "transformer_block": [20, 199], "transformerblock": [20, 199], "transit": 236, "translat": 203, "transpos": 180, "trap": 243, "travers": 238, "tri": [205, 206, 207, 230], "tripletmarginloss": 148, "tripletmarginwithdistanceloss": 149, "triumph": 238, "true": [2, 9, 12, 13, 17, 22, 25, 29, 30, 159, 160, 161, 162, 166, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 246, 249, 250, 251, 252, 254, 255], "true_quant": [241, 242], "truli": 172, "trust_remote_cod": 239, "try": [17, 29, 190, 192, 193, 194, 203, 205, 206, 207, 208, 217, 223, 225, 226, 227, 228, 230, 231, 233, 236, 259, 262], "tune": [17, 22, 29, 178, 187, 191, 192, 193, 195, 196, 198, 200, 201, 204, 209, 210, 212, 213, 214, 227, 228, 231, 233, 245, 251, 254, 262, 263], "tuner": 241, "tupl": [2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 97, 161, 162, 163, 164, 165, 169, 170, 173, 174, 179, 180, 181, 183, 184, 185, 186, 187, 190, 194, 202, 208, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 250, 251, 254, 257], "turn": [255, 258], "tutori": 216, "tweak": 178, "twice": [20, 178], "two": [12, 20, 24, 29, 171, 172, 173, 174, 184, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 218, 222, 229, 230, 231, 233, 236, 238, 244, 250, 253, 254, 261, 262], "txt": [174, 238, 248, 261], "type": [2, 3, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 170, 171, 172, 173, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 199, 202, 205, 206, 207, 208, 210, 213, 214, 217, 218, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 236, 243, 244, 247, 249, 250, 251, 254, 255, 258, 261, 262], "typeerror": 172, "typic": [20, 30, 175, 190, 191, 195, 196, 197, 198, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 228, 244, 250, 253, 262, 263], "u": [198, 203, 247], "ubuntu": [246, 247, 249], "ubuntu22": 258, "ubuntu2204": 248, "uint16": 252, "uint32": 252, "uint8": [158, 252], "unaccept": 263, "unchang": [182, 188, 243, 251, 254], "uncompress": 228, "under": [2, 9, 12, 168, 171, 184, 190, 208, 220, 222, 224, 236, 255, 259], "undergo": 244, "underli": [30, 180, 259], "understand": [171, 180, 190, 194, 197, 198, 199, 202, 203, 208, 211, 215], "undo": [14, 26, 224], "uneven": 259, "unexpect": 166, "unexpected_kei": 166, "unflatten": 150, "unfold": 151, "unid": [13, 25, 185, 223], "uniniti": [24, 217, 218, 239, 243], "uninstal": 248, "unintuit": [13, 25, 185, 223], "union": [6, 7, 8, 15, 17, 19, 20, 22, 23, 25, 27, 28, 29, 169, 170, 173, 174, 179, 181, 183, 184, 185, 186, 187, 217, 221, 222, 223, 225, 226, 227, 231, 233, 238, 250, 251, 254], "uniqu": [203, 247], "unit": 244, "unknown": 228, "unlabel": [8, 13, 25, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 222, 223, 236], "unlabeled_data": 223, "unlabeled_data_load": [222, 223, 236], "unlabeled_dataset": [21, 196, 197, 202, 217, 222, 223, 224], "unlabeled_dataset_iter": [8, 222], "unlabeled_imagenet_data_load": 210, "unlabeled_imagenet_dataset": 210, "unlabeleddatasetwrapp": [196, 210], "unlabelled_data_load": 223, "unless": [13, 25, 30, 181, 185, 187, 223, 234, 247, 251, 254, 263], "unlik": [166, 177, 211, 225], "unmodifi": [229, 240], "unnecessari": [190, 203, 208, 225, 234, 258], "unpin": 258, "unrol": [172, 258], "unsign": [253, 255], "unsigned_symmetr": [197, 246, 255], "unsigned_zero": 166, "unsimplifi": [190, 192, 193, 225, 226, 236], "unsqueez": [241, 242], "until": [13, 25, 161, 162, 181, 185, 196, 210, 223, 224, 251, 254], "untouch": [251, 254], "unus": 247, "unwrap": 199, "up": [11, 17, 20, 22, 23, 29, 174, 177, 183, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 224, 227, 230, 231, 233, 234, 236, 238, 244, 251, 254, 255, 258, 262], "updat": [1, 24, 166, 176, 189, 191, 193, 195, 199, 200, 201, 203, 204, 209, 210, 212, 213, 214, 217, 218, 224, 232, 239, 242, 248, 251, 252, 253, 254, 258], "update_lora_weight": [176, 239], "updatestat": 246, "upgrad": [0, 167, 248, 258], "upon": [14, 26, 30, 175, 224, 258, 261], "upsampl": 152, "upsamplingbilinear2d": 153, "upsamplingnearest2d": 154, "upstream": [227, 234], "upto": [190, 197, 202, 203, 208, 211, 215, 236], "url": [17, 29, 189, 227, 231, 232, 233, 247, 248], "us": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 25, 26, 29, 30, 158, 159, 161, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "usabl": 252, "usag": [24, 173, 178, 180, 218, 239, 244, 252, 258, 261], "use_all_amp_candid": [2, 184, 190, 208, 236], "use_cach": [239, 241, 242], "use_cuda": [17, 29, 194, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 221, 227, 231, 233, 246, 258], "use_embedded_encod": [181, 187, 251, 254], "use_fast": 239, "use_monotonic_fit": [17, 29, 227, 231, 233], "use_strict_symmetr": 171, "use_symmetric_encod": [171, 258], "user": [2, 9, 12, 13, 14, 17, 20, 22, 23, 24, 25, 29, 30, 171, 172, 174, 180, 181, 183, 184, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 227, 230, 231, 233, 236, 238, 246, 247, 248, 251, 252, 254, 256, 257, 258], "user_onnx_lib": [9, 251], "userflow": [182, 188, 243], "usr": [247, 248], "usual": [224, 230, 253, 254, 263], "util": [6, 8, 20, 171, 173, 179, 186, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 236, 238, 241, 242, 243, 249, 250, 251, 254, 258], "v": [2, 11, 12, 23, 183, 184, 190, 194, 202, 208, 215, 217, 236, 247, 250, 253, 263], "v1": [0, 171, 194, 208, 209, 210, 211, 212, 213, 214, 215, 221, 236, 239, 241, 242, 246, 258], "v2": [0, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 174, 181, 218, 220, 238, 241, 242, 250, 251, 254, 258], "val": [190, 191, 192, 193, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 251], "val_dataset": 202, "val_transform": 210, "valid": [2, 8, 12, 21, 173, 179, 184, 186, 190, 194, 197, 198, 200, 201, 202, 203, 208, 210, 211, 215, 216, 217, 222, 223, 227, 231, 233, 236, 243, 250, 251, 252, 258], "validate_example_model": 173, "validate_for_missing_modul": 173, "validate_for_reused_modul": 173, "validate_model": 173, "validation_check": 173, "validation_d": [194, 231, 236], "validation_data": [197, 198, 200, 201], "valu": [1, 2, 8, 9, 12, 13, 17, 21, 22, 23, 29, 30, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 174, 179, 181, 183, 184, 186, 187, 190, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 236, 238, 239, 244, 246, 249, 250, 251, 252, 253, 254, 255, 258], "value_qtzr": 30, "vanilla": 198, "var": [26, 81, 224], "vari": [2, 12, 184, 228, 236], "variabl": [17, 20, 29, 161, 162, 172, 189, 227, 229, 231, 233, 247, 248], "varianc": [197, 211, 226], "variant": [244, 246, 248, 249, 258], "variant_str": 247, "varieti": 226, "varint": 247, "variou": [2, 17, 29, 174, 184, 196, 202, 210, 215, 227, 230, 231, 233, 235, 236, 247, 253, 258, 259], "vector": [191, 195, 203, 209, 258], "vedaldi": 230, "venic": 230, "ver": 258, "verbos": 194, "veri": [24, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 209, 210, 212, 213, 214, 215, 218, 222, 228, 230, 236], "verifi": [20, 172, 209, 212, 213, 214], "versa": [190, 194, 208, 229, 236, 253, 259], "version": [30, 100, 168, 171, 172, 175, 181, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 241, 242, 244, 247, 248, 249, 251, 253, 254, 258, 263], "via": [20, 25, 185, 223, 228, 244, 246, 253, 258, 261], "vice": [190, 194, 208, 229, 236, 253, 259], "view": [168, 173, 180, 219, 220, 232, 236, 241, 242, 245, 246], "view_a": 210, "viewabl": 189, "vision": 230, "visit": 248, "visual": [17, 29, 198, 202, 215, 222, 227, 230, 231, 233, 236, 247, 258], "visualization_tool": [0, 167, 220], "visualization_url": [17, 29, 227, 231, 233], "visualize_stat": [168, 220], "visualizecompress": 232, "vocab_s": [20, 198, 199, 239, 241, 242], "vol": 230, "volum": 234, "w": [2, 8, 12, 21, 179, 184, 186, 197, 222, 223, 233, 234, 236, 247, 251, 258], "w16a16": 258, "w4a16": 258, "w4a8": [223, 258, 262, 263], "w4fp16": 258, "w8a16": [223, 251, 262, 263], "w8a8": [223, 254, 262, 263], "wa": [17, 29, 158, 180, 190, 194, 195, 197, 198, 199, 203, 205, 207, 208, 209, 211, 221, 227, 230, 231, 233, 236, 238, 252, 258], "wai": [171, 180, 182, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 221, 243, 251, 262], "want": [2, 6, 12, 22, 30, 169, 172, 184, 187, 190, 194, 197, 198, 202, 203, 208, 215, 221, 236, 241, 242, 246, 247, 248, 251, 254, 263], "warm": [11, 23, 183, 217], "warn": [24, 173, 218, 239], "wasn": 258, "we": [2, 6, 12, 20, 169, 171, 172, 173, 175, 178, 180, 184, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 207, 208, 209, 210, 211, 215, 217, 221, 225, 226, 228, 230, 231, 236, 237, 239, 241, 242, 247, 250, 251, 259, 262, 263], "websit": [228, 245], "websocket": 232, "weight": [1, 2, 3, 7, 8, 10, 11, 12, 20, 21, 23, 24, 27, 29, 30, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 228, 231, 235, 236, 238, 239, 240, 242, 243, 244, 249, 250, 251, 253, 254, 255, 258, 262, 263], "weight_bw": 212, "weight_decai": 224, "weight_info": 199, "weight_nam": 199, "weight_q": 180, "weight_qdq": 180, "weight_svd": [29, 227, 231, 233], "weight_svd_auto_mod": 233, "weight_svd_manual_mod": 233, "weights_in_correct_ord": 199, "weights_pdf": [202, 215, 222], "weightsvdparamet": [29, 227, 231, 233], "well": [158, 173, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 217, 222, 230, 236], "were": [196, 203, 210, 221, 228, 234, 251, 252, 255, 258], "weren": 172, "wget": 248, "what": [199, 232, 262], "whatev": 247, "wheel": [247, 248], "wheel_file_nam": [247, 248], "when": [2, 8, 9, 12, 17, 20, 21, 22, 25, 29, 30, 166, 172, 175, 179, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 222, 223, 224, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 243, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "whenev": [177, 257, 258], "where": [2, 11, 12, 13, 17, 22, 23, 29, 161, 162, 163, 164, 165, 166, 172, 180, 181, 183, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 225, 227, 229, 231, 232, 233, 234, 236, 244, 247, 248, 251, 252, 253, 254, 257, 258, 261], "wherea": [180, 184, 190, 208], "wherein": [6, 169, 221], "whether": [24, 25, 166, 172, 173, 174, 185, 190, 191, 192, 193, 195, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 221, 223, 229, 238, 251, 254], "which": [2, 6, 7, 11, 12, 13, 17, 19, 20, 23, 25, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 178, 180, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 243, 244, 246, 250, 251, 252, 253, 255, 258, 261, 262], "while": [7, 17, 29, 166, 175, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 227, 229, 231, 233, 240, 252, 253, 258, 259, 262, 263], "whl": [246, 247, 248], "who": 252, "whole": [13, 196, 197, 223, 250, 253], "whose": [168, 169, 170, 172, 220, 221, 250, 255, 261], "why": [190, 203, 208, 259], "wide": [225, 226, 244], "width": [8, 21, 179, 186, 190, 191, 192, 193, 203, 208, 209, 211, 212, 213, 214, 215, 222, 225, 226, 231, 233, 234, 235, 237, 250, 252, 253, 259, 262, 263], "wikitext": [239, 241, 242], "wildcard": 180, "wise": [8, 21, 179, 182, 186, 188, 222, 224, 243, 244, 258, 259], "wiseconv2d": [217, 226], "wish": [217, 225, 226, 236, 238, 251], "within": [30, 158, 159, 160, 175, 198, 222, 228, 244, 247, 253, 258, 262], "without": [13, 22, 25, 158, 160, 166, 168, 178, 181, 185, 187, 191, 195, 196, 198, 200, 201, 203, 204, 209, 210, 212, 213, 214, 220, 223, 234, 243, 247, 251, 254, 258, 262, 263], "won": [25, 172, 182, 185, 188, 223, 243, 255], "word": [160, 198], "work": [12, 22, 171, 173, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 226, 230, 236, 240, 250, 251, 254, 258, 263], "workaround": 172, "workflow": [228, 235, 240, 261, 262], "workspac": [189, 247], "world": 249, "wors": 230, "worth": 180, "would": [20, 171, 174, 190, 194, 197, 202, 203, 208, 211, 215, 231, 238, 241, 255, 258], "wq": 258, "wrap": [30, 171, 172, 198, 202, 215], "wrap_linear": 171, "wrapped_module_nam": [21, 179, 186, 222], "wrapper": [21, 179, 186, 194, 198, 208, 209, 212, 213, 214, 222, 227, 231, 233, 236, 258], "write": [174, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 238, 250, 251, 254], "written": [9, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 251, 254], "wrong": 258, "wrt": [12, 236], "wsl2": 258, "www": 189, "x": [0, 20, 158, 159, 160, 166, 167, 172, 173, 175, 177, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 208, 209, 211, 212, 213, 214, 215, 217, 222, 223, 224, 225, 226, 228, 231, 236, 246, 249, 251, 252, 253, 254, 256, 257, 258], "x1": [63, 119, 172], "x2": [63, 119, 172, 256, 257], "x86": [246, 248, 249], "x86_64": [246, 248], "x_": 253, "x_c": 166, "x_dq": 159, "x_q": [159, 160], "x_qdq": 158, "x_train": 198, "x_val": 198, "xarg": 248, "xiangyu": 230, "xx": 252, "y": [172, 194, 195, 202, 203, 215, 217, 222, 223, 224, 236, 248, 251, 254], "y_train": 198, "y_val": 198, "y_zero_point": 258, "ybelkada": [241, 242], "ye": [230, 248], "yet": [177, 190, 194, 197, 198, 203, 208, 218, 239], "yield": [2, 8, 13, 23, 25, 26, 174, 182, 183, 184, 185, 188, 197, 211, 217, 222, 223, 224, 228, 236, 243, 251, 253, 254, 259], "yihui": 230, "you": [8, 17, 25, 29, 30, 171, 172, 179, 180, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 236, 238, 239, 241, 243, 246, 247, 248, 250, 251, 253, 254, 255, 258, 259, 261, 262, 263], "your": [8, 25, 30, 171, 172, 173, 179, 185, 186, 189, 190, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 219, 221, 222, 223, 224, 228, 230, 232, 235, 241, 246, 248, 251, 253, 254, 262, 263], "your_imagenet_validation_data_path": [217, 223, 224, 251, 254], "yy": 252, "zero": [11, 23, 183, 217, 249, 253, 258], "zero_grad": [224, 241, 242, 254], "zeropad1d": 155, "zeropad2d": 156, "zeropad3d": 157, "zhang": 230, "zip": [194, 222, 231, 236], "zisserman": 230, "zlib": 258, "zou": 230, "zz": 252, "\u00aa": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00b2": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00b3": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00b5": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00b9": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00ba": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00bc": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00bd": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u00be": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u03c9": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u210e": 231, "\u215b": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u215c": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u215d": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\u215e": [221, 225, 236, 245, 250, 252, 253, 258, 261, 262, 263], "\ud835\udc58": [231, 233], "\ud835\udc5a": 231, "\ud835\udc5b": 231, "\ud835\udc64": 231}, "titles": ["AIMET API", "aimet_onnx.apply_adaround", "aimet_onnx.mixed_precision", "aimet_onnx.batch_norm_fold", "aimet_onnx.cross_layer_equalization", "aimet_onnx API", "aimet_onnx.layer_output_utils", "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", "aimet_onnx.quant_analyzer", "aimet_onnx.quantsim", "aimet_onnx.apply_seq_mse", "aimet_tensorflow.adaround", "aimet_tensorflow.mixed_precision", "aimet_tensorflow.auto_quant_v2", "aimet_tensorflow.keras.bn_reestimation", "aimet_tensorflow.batch_norm_fold", "aimet_tensorflow.cross_layer_equalization", "aimet_tensorflow.compress", "aimet_tensorflow API", "aimet_tensorflow.layer_output_utils", "aimet_tensorflow.model_preparer", "aimet_tensorflow.quant_analyzer", "aimet_tensorflow.quantsim", "aimet_torch.adaround", "aimet_torch.experimental.adascale", "aimet_torch.auto_quant", "aimet_torch.bn_reestimation", "aimet_torch.batch_norm_fold", "aimet_torch.cross_layer_equalization", "aimet_torch.compress", "QuantizationMixin", "QuantizedAdaptiveAvgPool1d", "QuantizedAdaptiveAvgPool2d", "QuantizedAdaptiveAvgPool3d", "QuantizedAdaptiveMaxPool1d", "QuantizedAdaptiveMaxPool2d", "QuantizedAdaptiveMaxPool3d", "QuantizedAlphaDropout", "QuantizedAvgPool1d", "QuantizedAvgPool2d", "QuantizedAvgPool3d", "QuantizedBCELoss", "QuantizedBCEWithLogitsLoss", "QuantizedBatchNorm1d", "QuantizedBatchNorm2d", "QuantizedBatchNorm3d", "QuantizedBilinear", "QuantizedCELU", "QuantizedCTCLoss", "QuantizedChannelShuffle", "QuantizedCircularPad1d", "QuantizedCircularPad2d", "QuantizedCircularPad3d", "QuantizedConstantPad1d", "QuantizedConstantPad2d", "QuantizedConstantPad3d", "QuantizedConv1d", "QuantizedConv2d", "QuantizedConv3d", "QuantizedConvTranspose1d", "QuantizedConvTranspose2d", "QuantizedConvTranspose3d", "QuantizedCosineEmbeddingLoss", "QuantizedCosineSimilarity", "QuantizedCrossEntropyLoss", "QuantizedDropout", "QuantizedDropout1d", "QuantizedDropout2d", "QuantizedDropout3d", "QuantizedELU", "QuantizedEmbedding", "QuantizedEmbeddingBag", "QuantizedFeatureAlphaDropout", "QuantizedFlatten", "QuantizedFold", "QuantizedFractionalMaxPool2d", "QuantizedFractionalMaxPool3d", "QuantizedGELU", "QuantizedGLU", "QuantizedGRU", "QuantizedGRUCell", "QuantizedGaussianNLLLoss", "QuantizedGroupNorm", "QuantizedHardshrink", "QuantizedHardsigmoid", "QuantizedHardswish", "QuantizedHardtanh", "QuantizedHingeEmbeddingLoss", "QuantizedHuberLoss", "QuantizedInstanceNorm1d", "QuantizedInstanceNorm2d", "QuantizedInstanceNorm3d", "QuantizedKLDivLoss", "QuantizedL1Loss", "QuantizedLPPool1d", "QuantizedLPPool2d", "QuantizedLSTM", "QuantizedLSTMCell", "QuantizedLayerNorm", "QuantizedLeakyReLU", "QuantizedLinear", "QuantizedLocalResponseNorm", "QuantizedLogSigmoid", "QuantizedLogSoftmax", "QuantizedMSELoss", "QuantizedMarginRankingLoss", "QuantizedMaxPool1d", "QuantizedMaxPool2d", "QuantizedMaxPool3d", "QuantizedMaxUnpool1d", "QuantizedMaxUnpool2d", "QuantizedMaxUnpool3d", "QuantizedMish", "QuantizedMultiLabelMarginLoss", "QuantizedMultiLabelSoftMarginLoss", "QuantizedMultiMarginLoss", "QuantizedNLLLoss", "QuantizedNLLLoss2d", "QuantizedPReLU", "QuantizedPairwiseDistance", "QuantizedPixelShuffle", "QuantizedPixelUnshuffle", "QuantizedPoissonNLLLoss", "QuantizedRNN", "QuantizedRNNCell", "QuantizedRReLU", "QuantizedReLU", "QuantizedReLU6", "QuantizedReflectionPad1d", "QuantizedReflectionPad2d", "QuantizedReflectionPad3d", "QuantizedReplicationPad1d", "QuantizedReplicationPad2d", "QuantizedReplicationPad3d", "QuantizedSELU", "QuantizedSiLU", "QuantizedSigmoid", "QuantizedSmoothL1Loss", "QuantizedSoftMarginLoss", "QuantizedSoftmax", "QuantizedSoftmax2d", "QuantizedSoftmin", "QuantizedSoftplus", "QuantizedSoftshrink", "QuantizedSoftsign", "QuantizedTanh", "QuantizedTanhshrink", "QuantizedThreshold", "QuantizedTripletMarginLoss", "QuantizedTripletMarginWithDistanceLoss", "QuantizedUnflatten", "QuantizedUnfold", "QuantizedUpsample", "QuantizedUpsamplingBilinear2d", "QuantizedUpsamplingNearest2d", "QuantizedZeroPad1d", "QuantizedZeroPad2d", "QuantizedZeroPad3d", "DequantizedTensor", "QuantizedTensor", "QuantizedTensorBase", "Quantize", "QuantizeDequantize", "dequantize", "quantize", "quantize_dequantize", "FloatQuantizeDequantize", "aimet_torch API", "aimet_torch.visualization_tools", "aimet_torch.layer_output_utils", "aimet_torch.quantsim.config_utils", "Migration guide", "aimet_torch.model_preparer", "aimet_torch.model_validator", "aimet_torch.mixed_precision", "aimet_torch.nn", "aimet_torch.experimental.omniquant", "aimet_torch.onnx.export (beta)", "aimet_torch.peft", "aimet_torch.quant_analyzer", "aimet_torch.quantization", "aimet_torch.quantsim", "aimet_torch.seq_mse", "aimet_torch.v1.adaround", "aimet_torch.v1.mixed_precision", "aimet_torch.v1.auto_quant", "aimet_torch.v1.quant_analyzer", "aimet_torch.v1.quantsim", "aimet_torch.v1.seq_mse", "Examples", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "Cross-Layer Equalization", "Quantization simulation", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Quantization-Aware Training with a Keras Transformer Model", "Keras Model Preparer", "Quantization-aware training", "Quantization-Aware training with range learning", "Quant Analyzer", "Quantsim and Adaround - Per Channel Quantization (PCQ)", "Cross-Layer Equalization with QuantSim", "Model compression using channel pruning", "Model compression using spatial SVD", "Model compression using spatial SVD and channel pruning", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Cross-Layer Equalization and Bias Correction", "Quantization-aware training", "Quantization-aware training with range learning", "Quant Analyzer", "External resources", "Adaptive rounding", "AdaScale", "Analysis tools", "Interactive visualization", "Layer output generation", "Quantization analyzer", "Automatic quantization", "Batch norm re-estimation", "Batch norm folding", "Cross-layer equalization", "Channel pruning", "Compression features Guidebook", "Greedy compression ratio selection", "Compression", "Spatial SVD", "AIMET visualization", "Weight SVD", "Winnowing", "Optimization techniques", "Automatic mixed precision", "Mixed precision", "Manual mixed precision", "OmniQuant", "Quantized LoRa", "QW-LoRa", "QWA-LoRa", "Sequential MSE", "Glossary", "AIMET Documentation", "Installation", "AIMET installation in Docker", "AIMET manual installation and setup", "Quick Start (PyTorch)", "Per-block quantization", "Calibration", "Encoding Format Specification", "Quantization simulation guide", "Quantization-aware training", "Runtime configuration", "TensorFlow model guidelines", "PyTorch model guidelines", "Release notes", "Quantization debugging guidelines", "Quantization user guide", "On-target inference", "AIMET features", "Quantization workflow", "AIMET documentation versions"], "titleterms": {"0": [194, 252, 258], "1": [171, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 236, 239, 243, 251, 252, 254, 255, 258, 259, 263], "13": 258, "16": 258, "17": 258, "18": 258, "19": 258, "2": [171, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 236, 239, 243, 251, 252, 254, 255, 258, 259, 263], "20": 258, "21": 258, "22": 258, "23": 258, "24": 258, "25": 258, "26": 258, "27": 258, "28": 258, "29": 258, "3": [189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 236, 239, 243, 251, 252, 254, 255, 258, 259, 263], "30": 258, "31": 258, "32": 258, "33": 258, "34": 258, "35": 258, "4": [190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 236, 239, 243, 251, 254, 255, 258, 259, 263], "5": [196, 197, 211, 218, 222, 223, 239, 243, 251, 254, 255, 258, 259], "6": [222, 223, 252, 258, 259], "7": [223, 258, 259], "8": [258, 259], "For": [191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214], "On": [260, 261], "accuraci": [190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 262, 263], "activ": [222, 259], "adapt": [191, 195, 209, 217, 235], "adaround": [11, 23, 183, 191, 195, 203, 209], "adascal": [24, 218, 235], "affin": [171, 180], "ai": 261, "aimet": [0, 232, 245, 247, 248, 249, 253, 260, 262, 264], "aimet_onnx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "aimet_tensorflow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "aimet_torch": [23, 24, 25, 26, 27, 28, 29, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "algorithm": [190, 194, 208, 236], "also": 253, "altern": 246, "amp": [190, 194, 208], "an": [190, 191, 192, 193, 247], "analysi": [202, 215, 219, 222, 235, 236, 259], "analyz": [202, 215, 219, 222], "api": [0, 5, 18, 20, 167, 172, 173, 175, 178, 180, 190, 194, 208, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 243, 245, 250, 251, 254, 262], "appli": [191, 192, 195, 196, 202, 203, 204, 209, 212, 215, 238], "apply_adaround": 1, "apply_seq_ms": 10, "arg": 252, "auto_qu": [25, 185], "auto_quant_v2": 13, "automat": [190, 194, 208, 223, 235, 236, 237], "autoqu": [196, 210], "awar": [197, 198, 200, 201, 211, 213, 214, 254, 262], "base": [238, 241], "baselin": [190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214], "batch": [190, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 224, 225, 235], "batch_norm_fold": [3, 15, 27], "batchnorm": [197, 211], "bc": 212, "beta": 177, "between": 199, "bia": 212, "bit": 236, "block": [180, 250], "blockwis": 250, "bn_reestim": [14, 26], "bokeh": 232, "brows": 189, "build": [246, 247], "calibr": [222, 242, 251, 254], "call": [190, 194, 208, 253], "callback": [190, 197, 208, 222, 242, 251], "case": [230, 236], "channel": [180, 203, 205, 207, 227, 230], "check": 259, "choos": [246, 247], "cle": [192, 204, 212], "code": [20, 171, 172, 189, 227, 231, 233, 236], "compil": 261, "complementari": 217, "compress": [17, 29, 205, 206, 207, 227, 228, 229, 230, 231, 232, 233, 235], "comput": [175, 190, 194, 208, 251, 254], "confid": 259, "config_util": 170, "configur": [175, 253, 255], "constant": [196, 197, 210], "contain": 247, "context": [217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243], "convers": 261, "convert": [190, 191, 192, 193, 199, 236], "correct": 212, "cp": 230, "creat": [190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 222, 236, 242, 251], "cross": [192, 204, 212, 226, 235], "cross_layer_equ": [4, 16, 28], "data": 252, "dataset": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "debug": [259, 260], "default": 255, "defin": [190, 196, 197, 208, 210], "definit": 22, "deploi": 263, "deploy": 262, "dequant": 163, "dequantizedtensor": 158, "descript": 222, "design": 232, "determin": [191, 192, 193, 195, 196, 200, 201, 203, 204, 209, 212, 213, 214, 253], "dictionari": 252, "differ": 199, "direct": 261, "disabl": [202, 215], "discuss": 199, "docker": [246, 247], "document": [245, 264], "download": [189, 247], "enabl": [202, 215, 222], "encod": [175, 190, 194, 202, 208, 215, 222, 251, 252, 253], "engin": 261, "enum": 22, "environ": 247, "equal": [192, 204, 212, 226, 235], "error": 222, "estim": [197, 211, 224, 235], "evalu": [190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 222, 251, 254], "exampl": [20, 171, 172, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 227, 231, 233, 236, 245, 249], "execut": [224, 226, 250, 261], "experiment": [24, 176], "explor": 229, "export": [177, 197, 211, 250, 251, 253, 254, 262], "extern": 216, "fake": 194, "faq": 230, "fast": 194, "featur": [228, 245, 260, 262], "file": 255, "find": [194, 236], "fine": [205, 206, 207, 230], "fix": 259, "float": 171, "floatquantizedequant": 166, "flow": [178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "fold": [190, 192, 193, 195, 197, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 225, 235], "format": 252, "fp16": 263, "fp32": [190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 259], "from": [171, 246], "front": 236, "function": [190, 196, 197, 199, 208, 210], "gener": [219, 221, 263], "get": [195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214], "glossari": [244, 245], "gpu": 254, "granular": 253, "greedi": 229, "group": 236, "guid": [171, 245, 253, 260], "guidebook": 228, "guidelin": [256, 257, 259, 260, 263], "helper": [196, 210], "histogram": 222, "host": 246, "how": [171, 229, 234, 253, 255], "hub": 261, "hyper": 217, "i": [190, 194, 202, 203, 208, 211, 215], "imag": 247, "import": [221, 222], "improv": 262, "individu": 259, "infer": [260, 261, 262], "inform": [191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214], "initi": 254, "input": [221, 238], "insert": 194, "instal": [245, 246, 247, 248, 249], "instanti": [191, 192, 193, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214], "interact": [219, 220], "kera": [14, 197, 198, 199], "layer": [190, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 219, 221, 222, 226, 229, 230, 235, 236, 238, 259], "layer_output_util": [6, 19, 169], "leaf": 238, "learn": [201, 214], "learnedgrid": 171, "level": 252, "librari": 222, "limit": [20, 172, 199], "list": 236, "load": [194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221], "lora": [235, 240, 241, 242], "loss": [202, 215, 222], "low": 250, "manual": [237, 238, 248], "max": [202, 215, 222, 253], "mean": 222, "method": 194, "migrat": 171, "min": [202, 215, 222, 253], "mix": [190, 194, 208, 235, 236, 237, 238, 262], "mixed_precis": [2, 12, 174, 184], "mmp": 238, "mode": 254, "model": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 222, 230, 238, 241, 250, 251, 254, 256, 257, 259, 263], "model_input": 255, "model_output": 255, "model_prepar": [20, 172], "model_valid": 173, "modifi": 255, "modul": [171, 175], "more": [191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214], "move": 171, "mse": [202, 215, 235, 243], "multi": 254, "next": [191, 195, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 263], "nn": 175, "nois": 253, "non": 238, "norm": [192, 212, 224, 225, 235], "normal": [190, 193, 195, 200, 201, 203, 204, 208, 209, 213, 214], "note": [230, 245, 258], "notebook": [189, 190, 194, 202, 203, 208, 211, 215, 245], "obtain": 221, "old": 246, "omniqu": [176, 235, 239], "onnx": [177, 190, 191, 192, 193], "op": [194, 236], "optim": 235, "option": [230, 238], "origin": 199, "output": [219, 221, 238], "overal": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "overhead": 236, "overview": [229, 230, 232, 234, 253, 255], "packag": [246, 247], "param": 255, "paramet": [190, 194, 208, 217, 253, 254], "pareto": 236, "path": 262, "pcq": 203, "pdf": [202, 215], "peft": 178, "per": [180, 202, 203, 215, 222, 229, 230, 250, 259], "perform": [197, 200, 201, 211, 213, 214, 236, 259], "phase": 236, "pipelin": [190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215], "platform": 249, "post": 262, "power": 250, "prebuilt": 247, "precis": [190, 194, 208, 235, 236, 237, 238, 262, 263], "prepar": [197, 199, 222], "prerequisit": [217, 218, 222, 223, 224, 239, 243, 246, 247, 248, 251, 254], "pretrain": [196, 202, 210], "procedur": [218, 223, 225, 227, 239, 243, 263], "process": 171, "profil": 238, "prune": [205, 207, 227, 230], "ptq": 241, "pypi": 246, "pytorch": [190, 191, 192, 193, 249, 257], "qat": [197, 200, 201, 211, 213, 214, 254], "qualcomm": 261, "quant": [202, 215], "quant_analyz": [8, 21, 179, 186], "quantanalyz": [202, 215, 222], "quantiz": [161, 164, 171, 175, 180, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 219, 222, 223, 235, 240, 241, 245, 250, 252, 253, 254, 259, 260, 261, 262, 263], "quantizationmixin": 30, "quantizationsim": 197, "quantizationsimmodel": 242, "quantize_dequant": 165, "quantizedadaptiveavgpool1d": 31, "quantizedadaptiveavgpool2d": 32, "quantizedadaptiveavgpool3d": 33, "quantizedadaptivemaxpool1d": 34, "quantizedadaptivemaxpool2d": 35, "quantizedadaptivemaxpool3d": 36, "quantizedalphadropout": 37, "quantizedavgpool1d": 38, "quantizedavgpool2d": 39, "quantizedavgpool3d": 40, "quantizedbatchnorm1d": 43, "quantizedbatchnorm2d": 44, "quantizedbatchnorm3d": 45, "quantizedbceloss": 41, "quantizedbcewithlogitsloss": 42, "quantizedbilinear": 46, "quantizedcelu": 47, "quantizedchannelshuffl": 49, "quantizedcircularpad1d": 50, "quantizedcircularpad2d": 51, "quantizedcircularpad3d": 52, "quantizedconstantpad1d": 53, "quantizedconstantpad2d": 54, "quantizedconstantpad3d": 55, "quantizedconv1d": 56, "quantizedconv2d": 57, "quantizedconv3d": 58, "quantizedconvtranspose1d": 59, "quantizedconvtranspose2d": 60, "quantizedconvtranspose3d": 61, "quantizedcosineembeddingloss": 62, "quantizedcosinesimilar": 63, "quantizedcrossentropyloss": 64, "quantizedctcloss": 48, "quantizeddropout": 65, "quantizeddropout1d": 66, "quantizeddropout2d": 67, "quantizeddropout3d": 68, "quantizedelu": 69, "quantizedembed": 70, "quantizedembeddingbag": 71, "quantizedequant": 162, "quantizedfeaturealphadropout": 72, "quantizedflatten": 73, "quantizedfold": 74, "quantizedfractionalmaxpool2d": 75, "quantizedfractionalmaxpool3d": 76, "quantizedgaussiannllloss": 81, "quantizedgelu": 77, "quantizedglu": 78, "quantizedgroupnorm": 82, "quantizedgru": 79, "quantizedgrucel": 80, "quantizedhardshrink": 83, "quantizedhardsigmoid": 84, "quantizedhardswish": 85, "quantizedhardtanh": 86, "quantizedhingeembeddingloss": 87, "quantizedhuberloss": 88, "quantizedinstancenorm1d": 89, "quantizedinstancenorm2d": 90, "quantizedinstancenorm3d": 91, "quantizedkldivloss": 92, "quantizedl1loss": 93, "quantizedlayernorm": 98, "quantizedleakyrelu": 99, "quantizedlinear": 100, "quantizedlocalresponsenorm": 101, "quantizedlogsigmoid": 102, "quantizedlogsoftmax": 103, "quantizedlppool1d": 94, "quantizedlppool2d": 95, "quantizedlstm": 96, "quantizedlstmcel": 97, "quantizedmarginrankingloss": 105, "quantizedmaxpool1d": 106, "quantizedmaxpool2d": 107, "quantizedmaxpool3d": 108, "quantizedmaxunpool1d": 109, "quantizedmaxunpool2d": 110, "quantizedmaxunpool3d": 111, "quantizedmish": 112, "quantizedmseloss": 104, "quantizedmultilabelmarginloss": 113, "quantizedmultilabelsoftmarginloss": 114, "quantizedmultimarginloss": 115, "quantizednllloss": 116, "quantizednllloss2d": 117, "quantizedpairwisedist": 119, "quantizedpixelshuffl": 120, "quantizedpixelunshuffl": 121, "quantizedpoissonnllloss": 122, "quantizedprelu": 118, "quantizedreflectionpad1d": 128, "quantizedreflectionpad2d": 129, "quantizedreflectionpad3d": 130, "quantizedrelu": 126, "quantizedrelu6": 127, "quantizedreplicationpad1d": 131, "quantizedreplicationpad2d": 132, "quantizedreplicationpad3d": 133, "quantizedrnn": 123, "quantizedrnncel": 124, "quantizedrrelu": 125, "quantizedselu": 134, "quantizedsigmoid": 136, "quantizedsilu": 135, "quantizedsmoothl1loss": 137, "quantizedsoftmarginloss": 138, "quantizedsoftmax": 139, "quantizedsoftmax2d": 140, "quantizedsoftmin": 141, "quantizedsoftplu": 142, "quantizedsoftshrink": 143, "quantizedsoftsign": 144, "quantizedtanh": 145, "quantizedtanhshrink": 146, "quantizedtensor": 159, "quantizedtensorbas": 160, "quantizedthreshold": 147, "quantizedtripletmarginloss": 148, "quantizedtripletmarginwithdistanceloss": 149, "quantizedunflatten": 150, "quantizedunfold": 151, "quantizedupsampl": 152, "quantizedupsamplingbilinear2d": 153, "quantizedupsamplingnearest2d": 154, "quantizedzeropad1d": 155, "quantizedzeropad2d": 156, "quantizedzeropad3d": 157, "quantsim": [7, 9, 22, 170, 181, 187, 203, 204, 251, 253], "quantwrapp": 171, "quick": [245, 249], "qw": [240, 241], "qwa": [240, 242], "rang": [201, 202, 214, 215, 222], "rank": 230, "ratio": [229, 230, 232], "re": [197, 211, 224, 235], "recommend": 254, "reconstruct": 227, "reduc": [236, 263], "reestim": 211, "refer": [175, 180, 230, 245], "regular": 194, "relat": 189, "releas": [245, 258], "resourc": 216, "restor": 263, "round": [191, 195, 209, 217, 230, 235], "run": [189, 190, 194, 208, 210, 222, 242, 249], "runtim": [253, 255], "scheme": 253, "score": [195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214], "scratch": 246, "sdk": 261, "select": [227, 229, 230], "sensit": [222, 236, 259], "seq_ms": [182, 188], "sequenti": [235, 243], "server": [189, 232], "session": 232, "set": 238, "set_grouped_blockwise_quantization_for_weight": 7, "setup": [217, 218, 224, 226, 227, 231, 233, 238, 239, 241, 242, 243, 247, 248, 254], "show": 199, "signal": 253, "sim": [190, 192, 193, 195, 200, 201, 204, 208, 209, 211, 212, 213, 214], "similar": 199, "simplifi": [190, 191, 192, 193], "simul": [190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 245, 253, 262], "sourc": 246, "spatial": [206, 207, 230, 231], "specif": 252, "squar": 222, "start": [232, 245, 247, 249], "staticgrid": 171, "statist": [202, 211, 215, 222], "step": [191, 195, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 236, 239, 243, 251, 254, 263], "structur": [252, 255], "subclass": 199, "summari": [194, 197, 199, 203, 211], "supergroup": 255, "support": [254, 262], "svd": [206, 207, 230, 231, 233], "target": [260, 261, 262], "techniqu": [212, 217, 230, 235], "tensorflow": 256, "terminologi": 178, "test": 249, "tf": 253, "thi": [190, 194, 202, 203, 208, 211, 215], "tool": [168, 219, 235, 262], "top": 252, "train": [191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 241, 242, 254, 262], "transform": 198, "try": 263, "tune": [205, 206, 207, 230], "type": [238, 252], "updat": 241, "us": [171, 205, 206, 207, 227, 230, 231, 233, 236], "user": [178, 245, 260], "v": 171, "v1": [167, 183, 184, 185, 186, 187, 188], "valid": [191, 192, 193, 195, 196, 204, 205, 206, 207, 209, 212, 213, 214], "variant": 247, "verifi": [246, 249, 263], "version": [246, 252, 264], "visual": [168, 219, 220, 232, 259], "visualization_tool": 168, "w16a16": 263, "weight": [222, 227, 230, 233, 241, 259], "what": [190, 194, 202, 203, 208, 211, 215], "width": 236, "winnow": [227, 234], "work": [229, 234, 253], "workflow": [217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 231, 233, 236, 238, 239, 241, 242, 243, 251, 253, 254, 259, 260, 263], "wrapper": [202, 215], "x": 171, "your": 247}})