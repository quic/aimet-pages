Search.setIndex({"alltitles": {"1) Find layer groups": [[232, "find-layer-groups"]], "1. Creating a Keras model with subclass layers": [[197, "1.-Creating-a-Keras-model-with-subclass-layers"]], "1. Define Constants and Helper functions": [[208, "1.-Define-Constants-and-Helper-functions"]], "1. Example evaluation and training pipeline": [[200, "1.-Example-evaluation-and-training-pipeline"], [201, "1.-Example-evaluation-and-training-pipeline"], [209, "1.-Example-evaluation-and-training-pipeline"], [213, "1.-Example-evaluation-and-training-pipeline"]], "1. Example evaluation pipeline": [[188, "1.-Example-evaluation-pipeline"], [206, "1.-Example-evaluation-pipeline"]], "1. FP32 confidence checks": [[254, "fp32-confidence-checks"]], "1. Instantiate the example evaluation and training datasets": [[198, "1.-Instantiate-the-example-evaluation-and-training-datasets"], [199, "1.-Instantiate-the-example-evaluation-and-training-datasets"]], "1. Instantiate the example evaluation and training pipeline": [[195, "1.-Instantiate-the-example-evaluation-and-training-pipeline"]], "1. Instantiate the example evaluation method": [[192, "1.-Instantiate-the-example-evaluation-method"]], "1. Instantiate the example training and validation pipeline": [[189, "1.-Instantiate-the-example-training-and-validation-pipeline"], [190, "1.-Instantiate-the-example-training-and-validation-pipeline"], [191, "1.-Instantiate-the-example-training-and-validation-pipeline"], [193, "1.-Instantiate-the-example-training-and-validation-pipeline"], [194, "1.-Instantiate-the-example-training-and-validation-pipeline"], [202, "1.-Instantiate-the-example-training-and-validation-pipeline"], [203, "1.-Instantiate-the-example-training-and-validation-pipeline"], [204, "1.-Instantiate-the-example-training-and-validation-pipeline"], [205, "1.-Instantiate-the-example-training-and-validation-pipeline"], [207, "1.-Instantiate-the-example-training-and-validation-pipeline"], [210, "1.-Instantiate-the-example-training-and-validation-pipeline"], [211, "1.-Instantiate-the-example-training-and-validation-pipeline"], [212, "1.-Instantiate-the-example-training-and-validation-pipeline"]], "1. Run the notebook server": [[187, "run-the-notebook-server"]], "1. Versioning": [[247, "versioning"]], "1. defaults": [[250, "defaults"]], "1.13.0": [[253, "id30"]], "1.16.0": [[253, "id29"]], "1.16.1": [[253, "id28"]], "1.16.2": [[253, "id27"]], "1.17.0": [[253, "id26"]], "1.18.0": [[253, "id25"]], "1.19.1": [[253, "id24"]], "1.20.0": [[253, "id23"]], "1.21.0": [[253, "id22"]], "1.22.0": [[253, "id21"]], "1.22.1": [[253, "id20"]], "1.22.2": [[253, "id19"]], "1.23.0": [[253, "id18"]], "1.24.0": [[253, "id17"]], "1.25.0": [[253, "id16"]], "1.26.0": [[253, "id15"]], "1.27.0": [[253, "id14"]], "1.28.0": [[253, "id13"]], "1.29.0": [[253, "id12"]], "1.30.0": [[253, "id11"]], "1.31.0": [[253, "id10"]], "1.32.0": [[253, "id9"]], "1.33.0": [[253, "id8"]], "1.33.5": [[253, "id7"]], "1.34.0": [[253, "id6"]], "1.35.0": [[253, "id5"]], "1.35.1": [[253, "id4"]], "1: Sensitivity to weight and activation quantization": [[218, "sensitivity-to-weight-and-activation-quantization"]], "2) Perform sensitivity analysis (Phase 1)": [[232, "perform-sensitivity-analysis-phase-1"]], "2. Convert an FP32 PyTorch model to ONNX, simplify & then evaluate baseline FP32 accuracy": [[188, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [189, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [190, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [191, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"]], "2. Converting the Keras model with subclass layers to a Keras model with functional layers": [[197, "2.-Converting-the-Keras-model-with-subclass-layers-to-a-Keras-model-with-functional-layers"]], "2. Create the model in Keras": [[195, "2.-Create-the-model-in-Keras"]], "2. Define Constants and Datasets Prepare": [[195, "2.-Define-Constants-and-Datasets-Prepare"]], "2. Download the example notebooks and related code": [[187, "download-the-example-notebooks-and-related-code"]], "2. Load FP32 model": [[209, "2.-Load-FP32-model"]], "2. Load a pretrained FP32 model": [[194, "2.-Load-a-pretrained-FP32-model"], [200, "2.-Load-a-pretrained-FP32-model"], [208, "2.-Load-a-pretrained-FP32-model"]], "2. Load the FP32 model and evaluate the model to find the baseline FP32 accuracy": [[192, "2.-Load-the-FP32-model-and-evaluate-the-model-to-find-the-baseline-FP32-accuracy"]], "2. Load the model": [[213, "2.-Load-the-model"]], "2. Load the model and evaluate to get a baseline FP32 accuracy score": [[193, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [198, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [199, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [201, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [202, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [203, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [204, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [205, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [206, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [207, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [210, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [211, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [212, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"]], "2. Version 0.6.1": [[247, "version-0-6-1"]], "2. Weights or activations quantization": [[254, "weights-or-activations-quantization"]], "2. params": [[250, "params"]], "2.0.0": [[253, "id3"]], "2.1. Encoding specification": [[247, "encoding-specification"]], "2.1.0": [[253, "id2"]], "2.2.0": [[253, "id1"]], "2: Per-layer quantizer enablement": [[218, "per-layer-quantizer-enablement"]], "3) Create a Pareto-front list (Phase 2)": [[232, "create-a-pareto-front-list-phase-2"]], "3. Apply QuantAnalyzer to the model": [[200, "3.-Apply-QuantAnalyzer-to-the-model"], [213, "3.-Apply-QuantAnalyzer-to-the-model"]], "3. Compress the model and fine-tune": [[203, "3.-Compress-the-model-and-fine-tune"], [204, "3.-Compress-the-model-and-fine-tune"], [205, "3.-Compress-the-model-and-fine-tune"]], "3. Create a quantization simulation model": [[188, "3.-Create-a-quantization-simulation-model"], [206, "3.-Create-a-quantization-simulation-model"]], "3. Create a quantization simulation model and Perform QAT": [[209, "3.-Create-a-quantization-simulation-model-and-Perform-QAT"]], "3. Create a quantization simulation model and determine quantized accuracy": [[189, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [190, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [191, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [193, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [198, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [199, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [201, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [202, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [207, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [210, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [211, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [212, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"]], "3. Determine the baseline FP32 accuracy": [[194, "3.-Determine-the-baseline-FP32-accuracy"]], "3. Fixing weight quantization": [[254, "fixing-weight-quantization"]], "3. Run AutoQuant": [[208, "3.-Run-AutoQuant"]], "3. Run the notebooks": [[187, "run-the-notebooks"]], "3. Showing similarities and differences between the original and converted models": [[197, "3.-Showing-similarities-and-differences-between-the-original-and-converted-models"]], "3. Train and evaluate the model": [[195, "3.-Train-and-evaluate-the-model"]], "3. Version 1.0.0": [[247, "version-1-0-0"]], "3. supergroups": [[250, "supergroups"]], "3.1. Encoding specification": [[247, "id1"]], "3.Create a quantization simulation model (with fake quantization ops inserted)": [[192, "3.Create-a-quantization-simulation-model-(with-fake-quantization-ops-inserted)"]], "3: Per-layer encodings min-max range": [[218, "per-layer-encodings-min-max-range"]], "4) Reduce Bit-width Convert Op Overhead (Phase 3)": [[232, "reduce-bit-width-convert-op-overhead-phase-3"]], "4. Apply Adaround": [[189, "4.-Apply-Adaround"], [193, "4.-Apply-Adaround"], [201, "4.-Apply-Adaround"], [207, "4.-Apply-Adaround"]], "4. Apply CLE": [[190, "4.-Apply-CLE"], [202, "4.-Apply-CLE"]], "4. Apply CLE and BC": [[210, "4.-Apply-CLE-and-BC"]], "4. Create a QuantizationSim Model": [[195, "4.-Create-a-QuantizationSim-Model"]], "4. Define constants and helper functions": [[194, "4.-Define-constants-and-helper-functions"]], "4. Discussing the limitations of the Keras Model Preparer": [[197, "4.-Discussing-the-limitations-of-the-Keras-Model-Preparer"]], "4. Fixing activation quantization": [[254, "fixing-activation-quantization"]], "4. Perform BatchNorm Reestimation": [[209, "4.-Perform-BatchNorm-Reestimation"]], "4. Perform QAT": [[198, "4.-Perform-QAT"], [199, "4.-Perform-QAT"], [211, "4.-Perform-QAT"], [212, "4.-Perform-QAT"]], "4. Run AMP algorithm on the quantized model": [[188, "4.-Run-AMP-algorithm-on-the-quantized-model"], [192, "4.-Run-AMP-algorithm-on-the-quantized-model"], [206, "4.-Run-AMP-algorithm-on-the-quantized-model"]], "4. model_input": [[250, "model-input"]], "4: Per-layer statistics histogram": [[218, "per-layer-statistics-histogram"]], "5. Apply AutoQuant": [[194, "5.-Apply-AutoQuant"]], "5. Export Model": [[195, "5.-Export-Model"], [209, "5.-Export-Model"]], "5. Perform QAT": [[195, "5.-Perform-QAT"]], "5. Performing per-layer analysis": [[254, "performing-per-layer-analysis"]], "5. model_output": [[250, "model-output"]], "5: Per-layer mean-square-error loss": [[218, "per-layer-mean-square-error-loss"]], "6. Visualizing sensitive layers": [[254, "visualizing-sensitive-layers"]], "7. Fixing individual quantizers": [[254, "fixing-individual-quantizers"]], "8. Quantize the model": [[254, "quantize-the-model"]], "AIMET API": [[0, null]], "AIMET Documentation": [[240, null]], "AIMET documentation versions": [[259, null]], "AIMET features": [[255, "aimet-features"], [257, null]], "AIMET installation in Docker": [[242, null]], "AIMET manual installation and setup": [[243, null]], "AIMET visualization": [[228, null]], "API": [[21, "api"], [172, "api"], [173, "api"], [176, "api"], [214, "api"], [216, "api"], [217, "api"], [218, "api"], [219, "api"], [220, "api"], [221, "api"], [222, "api"], [223, "api"], [227, "api"], [229, "api"], [232, "api"], [234, "api"], [238, "api"], [245, "api"], [246, "api"], [249, "api"]], "API Call for Regular AMP": [[192, "API-Call-for-Regular-AMP"]], "API Reference": [[240, "api-reference"]], "API reference": [[175, "api-reference"], [178, "api-reference"]], "Accuracy improvement tools": [[257, "accuracy-improvement-tools"]], "Adaptive Rounding (AdaRound)": [[189, null], [193, null], [207, null]], "Adaptive rounding": [[214, null], [231, "adaptive-rounding"]], "Affine quantizers": [[178, "affine-quantizers"]], "Alternative packages": [[241, "alternative-packages"]], "Analysis descriptions": [[218, "analysis-descriptions"]], "Analysis tools": [[215, null], [231, "analysis-tools"]], "Apply the profile": [[234, "apply-the-profile"]], "AutoQuant": [[194, null], [208, null]], "Automatic Mixed-Precision (AMP)": [[188, null], [192, null], [206, null]], "Automatic mixed precision": [[232, null], [233, "automatic-mixed-precision"]], "Automatic quantization": [[219, null], [231, "automatic-quantization"]], "Batch norm folding": [[221, null], [231, "batch-norm-folding"]], "Batch norm re-estimation": [[220, null], [231, "batch-norm-re-estimation"]], "Bias Correction": [[210, "Bias-Correction"]], "Browse the notebooks": [[187, "browse-the-notebooks"]], "Build a Docker image": [[242, "build-a-docker-image"]], "Building from source": [[241, "building-from-source"]], "CLE": [[210, "CLE"]], "Calibration": [[246, null]], "Calibration Callback": [[237, "calibration-callback"]], "Call AMP API": [[188, "Call-AMP-API"], [206, "Call-AMP-API"]], "Channel pruning": [[223, null]], "Channel pruning (CP)": [[226, "channel-pruning-cp"]], "Channel selection": [[223, "channel-selection"]], "Choose and install a package": [[241, "choose-and-install-a-package"]], "Choose to download or build an image": [[242, "choose-to-download-or-build-an-image"]], "Choose your AIMET variant": [[242, "choose-your-aimet-variant"]], "Code Examples": [[21, "code-examples"], [171, "code-examples"], [172, "code-examples"]], "Code example": [[223, "code-example"], [227, "code-example"], [229, "code-example"], [232, "code-example"]], "Compilation": [[256, "compilation"]], "Complementary techniques": [[214, "complementary-techniques"]], "Compressing using Spatial SVD": [[227, "compressing-using-spatial-svd"]], "Compression": [[226, null], [228, "compression"], [231, "compression"]], "Compression features Guidebook": [[224, null]], "Compression ratio selection": [[225, "compression-ratio-selection"], [226, "compression-ratio-selection"]], "Compression using Channel Pruning": [[223, "compression-using-channel-pruning"]], "Compression using Weight SVD": [[229, "compression-using-weight-svd"]], "Compute Encodings": [[188, "Compute-Encodings"], [192, "Compute-Encodings"], [206, "Compute-Encodings"]], "Computing encodings": [[175, "computing-encodings"]], "Configuration": [[175, "configuration"]], "Configuration file structure": [[250, "configuration-file-structure"]], "Context": [[214, "context"], [216, "context"], [217, "context"], [218, "context"], [219, "context"], [220, "context"], [221, "context"], [222, "context"], [223, "context"], [227, "context"], [229, "context"], [232, "context"], [234, "context"], [236, "context"], [237, "context"], [238, "context"]], "Conversion": [[256, "conversion"]], "Create Quantization Sim Model": [[188, "Create-Quantization-Sim-Model"], [206, "Create-Quantization-Sim-Model"], [209, "Create-Quantization-Sim-Model"]], "Create QuantizationSimModel": [[237, "create-quantizationsimmodel"]], "Create the Quantization Sim Model": [[189, "Create-the-Quantization-Sim-Model"], [190, "Create-the-Quantization-Sim-Model"], [191, "Create-the-Quantization-Sim-Model"], [193, "Create-the-Quantization-Sim-Model"], [198, "Create-the-Quantization-Sim-Model"], [199, "Create-the-Quantization-Sim-Model"], [202, "Create-the-Quantization-Sim-Model"], [207, "Create-the-Quantization-Sim-Model"], [210, "Create-the-Quantization-Sim-Model"], [211, "Create-the-Quantization-Sim-Model"], [212, "Create-the-Quantization-Sim-Model"]], "Cross-Layer Equalization": [[190, null]], "Cross-Layer Equalization and Bias Correction": [[210, null]], "Cross-Layer Equalization with QuantSim": [[202, null]], "Cross-layer equalization": [[222, null], [231, "cross-layer-equalization"]], "Data type": [[247, "id5"]], "Dataset": [[188, "Dataset"], [189, "Dataset"], [190, "Dataset"], [191, "Dataset"], [192, "Dataset"], [193, "Dataset"], [194, "Dataset"], [195, "Dataset"], [198, "Dataset"], [199, "Dataset"], [200, "Dataset"], [201, "Dataset"], [202, "Dataset"], [203, "Dataset"], [204, "Dataset"], [205, "Dataset"], [206, "Dataset"], [207, "Dataset"], [208, "Dataset"], [209, "Dataset"], [210, "Dataset"], [211, "Dataset"], [212, "Dataset"], [213, "Dataset"]], "Debugging guidelines": [[255, "debugging-guidelines"]], "Debugging workflow": [[254, "debugging-workflow"]], "Define callback functions for AMP": [[188, "Define-callback-functions-for-AMP"], [206, "Define-callback-functions-for-AMP"]], "Deployment paths": [[257, "deployment-paths"]], "DequantizedTensor": [[158, null]], "Design": [[228, "design"]], "Determine quantization parameters (encodings)": [[248, "determine-quantization-parameters-encodings"]], "Docker install": [[241, "docker-install"]], "Download a prebuilt Docker image": [[242, "download-a-prebuilt-docker-image"]], "Encoding Format Specification": [[247, null]], "Encoding dictionary structure": [[247, "id3"]], "Encoding min/max ranges": [[200, "Encoding-min/max-ranges"], [213, "Encoding-min/max-ranges"]], "Encoding type": [[247, "id4"]], "Enum Definition": [[10, "enum-definition"], [23, "enum-definition"]], "Environment setup": [[242, "environment-setup"]], "Example Notebooks": [[240, "example-notebooks"]], "Examples": [[187, null]], "Executing per-block quantization": [[245, "executing-per-block-quantization"]], "Execution": [[220, "execution"], [222, "execution"], [256, "execution"]], "Export API": [[257, "export-api"]], "Export tools": [[257, "export-tools"]], "Exported Encodings": [[248, "exported-encodings"]], "Exporting blockwise-quantized models": [[245, "exporting-blockwise-quantized-models"]], "FAQs": [[226, "faqs"]], "Fast AMP (AMP 2.0)": [[192, "Fast-AMP-(AMP-2.0)"]], "Feature Guide": [[240, "feature-guide"]], "FloatQuantizeDequantize": [[166, null]], "Fold Batch Norm layers": [[190, "Fold-Batch-Norm-layers"], [210, "Fold-Batch-Norm-layers"]], "Fold Batch Normalization layers": [[188, "Fold-Batch-Normalization-layers"], [189, "Fold-Batch-Normalization-layers"], [191, "Fold-Batch-Normalization-layers"], [193, "Fold-Batch-Normalization-layers"], [198, "Fold-Batch-Normalization-layers"], [199, "Fold-Batch-Normalization-layers"], [201, "Fold-Batch-Normalization-layers"], [202, "Fold-Batch-Normalization-layers"], [206, "Fold-Batch-Normalization-layers"], [207, "Fold-Batch-Normalization-layers"], [211, "Fold-Batch-Normalization-layers"], [212, "Fold-Batch-Normalization-layers"]], "Fold BatchNorm Layers": [[195, "Fold-BatchNorm-Layers"], [209, "Fold-BatchNorm-Layers"]], "For more information": [[189, "For-more-information"], [190, "For-more-information"], [191, "For-more-information"], [193, "For-more-information"], [194, "For-more-information"], [198, "For-more-information"], [199, "For-more-information"], [202, "For-more-information"], [203, "For-more-information"], [204, "For-more-information"], [205, "For-more-information"], [207, "For-more-information"], [208, "For-more-information"], [210, "For-more-information"], [211, "For-more-information"], [212, "For-more-information"]], "General guidelines": [[258, "general-guidelines"]], "Glossary": [[239, null], [240, "glossary"]], "Greedy compression ratio selection": [[225, null]], "Host install from scratch": [[241, "host-install-from-scratch"]], "How it works": [[225, "how-it-works"]], "How quantization simulation works": [[248, "how-quantization-simulation-works"]], "How to modify configuration file": [[250, "how-to-modify-configuration-file"]], "How to use aimet_torch 1.x": [[171, "how-to-use-aimet-torch-1-x"]], "How winnowing works": [[230, "how-winnowing-works"]], "Hyper parameters": [[214, "hyper-parameters"]], "Install AIMET packages": [[242, "install-aimet-packages"]], "Installation": [[240, "installation"], [241, null]], "Installing AIMET": [[242, "installing-aimet"], [243, "installing-aimet"], [244, "installing-aimet"]], "Interactive visualization": [[215, "interactive-visualization"], [216, null]], "Keras Model Preparer": [[197, null]], "Layer output generation": [[215, "layer-output-generation"], [217, null]], "Limitations": [[21, "limitations"], [172, "limitations"]], "LoRa Training": [[236, "lora-training"]], "Low power blockwise quantization": [[245, "low-power-blockwise-quantization"]], "MMP API options": [[234, "mmp-api-options"]], "Manual mixed precision": [[233, "manual-mixed-precision"], [234, null]], "Migration Process": [[171, "migration-process"]], "Migration guide": [[171, null]], "Min-Max (also called \u201cTF\u201d in AIMET)": [[248, "min-max-also-called-tf-in-aimet"]], "Mixed Precision Algorithm": [[232, "mixed-precision-algorithm"]], "Mixed precision": [[231, "mixed-precision"], [233, null], [257, "mixed-precision"]], "Model compression": [[226, "model-compression"]], "Model compression using channel pruning": [[203, null]], "Model compression using spatial SVD": [[204, null]], "Model compression using spatial SVD and channel pruning": [[205, null]], "Model guidelines": [[252, "model-guidelines"]], "Moving from QuantWrapper to Quantized Modules": [[171, "moving-from-quantwrapper-to-quantized-modules"]], "Moving from StaticGrid and LearnedGrid Quantizer to Affine and Float Quantizer": [[171, "moving-from-staticgrid-and-learnedgrid-quantizer-to-affine-and-float-quantizer"]], "Multi-GPU support": [[249, "multi-gpu-support"]], "NOTE": [[226, null]], "Next steps": [[189, "Next-steps"], [193, "Next-steps"], [198, "Next-steps"], [199, "Next-steps"], [202, "Next-steps"], [203, "Next-steps"], [204, "Next-steps"], [205, "Next-steps"], [207, "Next-steps"], [208, "Next-steps"], [210, "Next-steps"], [211, "Next-steps"], [212, "Next-steps"]], "Next: deploying the model": [[258, "next-deploying-the-model"]], "Old versions": [[241, "old-versions"]], "On-target inference": [[255, "on-target-inference"], [256, null]], "Optimization techniques": [[231, null]], "Optional techniques": [[226, "optional-techniques"]], "Overall flow": [[188, "Overall-flow"], [189, "Overall-flow"], [190, "Overall-flow"], [191, "Overall-flow"], [192, "Overall-flow"], [193, "Overall-flow"], [194, "Overall-flow"], [195, "Overall-flow"], [196, "Overall-flow"], [197, "Overall-flow"], [198, "Overall-flow"], [199, "Overall-flow"], [200, "Overall-flow"], [201, "Overall-flow"], [202, "Overall-flow"], [203, "Overall-flow"], [204, "Overall-flow"], [205, "Overall-flow"], [206, "Overall-flow"], [207, "Overall-flow"], [208, "Overall-flow"], [209, "Overall-flow"], [210, "Overall-flow"], [211, "Overall-flow"], [212, "Overall-flow"], [213, "Overall-flow"]], "Overview": [[225, "overview"], [226, "overview"], [228, "overview"], [230, "overview"], [248, "overview"], [250, "overview"]], "PDF of statistics": [[200, "PDF-of-statistics"], [213, "PDF-of-statistics"]], "PTQ": [[236, "ptq"]], "Parameters for AMP algorithm": [[188, "Parameters-for-AMP-algorithm"], [192, "Parameters-for-AMP-algorithm"], [206, "Parameters-for-AMP-algorithm"]], "Per-block quantization": [[178, "per-block-quantization"], [245, null]], "Per-channel quantization": [[178, "per-channel-quantization"]], "Per-layer MSE loss": [[200, "Per-layer-MSE-loss"], [213, "Per-layer-MSE-loss"]], "Per-layer analysis by enabling/disabling quantization wrappers": [[200, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"], [213, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"]], "Per-layer exploration": [[225, "per-layer-exploration"]], "Per-layer fine-tuning": [[226, "per-layer-fine-tuning"]], "Perform QAT": [[209, "Perform-QAT"]], "Post-training quantization": [[257, "post-training-quantization"]], "Prepare the evaluation callback function": [[195, "Prepare-the-evaluation-callback-function"]], "Prerequisites": [[214, "prerequisites"], [218, "prerequisites"], [219, "prerequisites"], [220, "prerequisites"], [238, "prerequisites"], [241, "prerequisites"], [242, "prerequisites"], [243, "prerequisites"], [246, "prerequisites"], [249, "prerequisites"]], "Procedure": [[219, "procedure"], [221, "procedure"], [223, "procedure"], [238, "procedure"], [258, "procedure"]], "PyPI": [[241, "pypi"]], "PyTorch model guidelines": [[252, null]], "QAT modes": [[249, "qat-modes"]], "QAT recommendations": [[249, "qat-recommendations"]], "QW-LoRa": [[235, "qw-lora"], [236, null]], "QWA-LoRa": [[235, "qwa-lora"], [237, null]], "Qualcomm\u00ae AI Engine Direct SDK": [[256, "qualcommreg-ai-engine-direct-sdk"]], "Qualcomm\u00ae AI hub": [[256, "qualcommreg-ai-hub"]], "Quant Analyzer": [[200, null], [213, null]], "QuantSim workflow": [[248, "quantsim-workflow"]], "Quantization": [[256, "quantization"]], "Quantization Simulation Guide": [[240, "quantization-simulation-guide"]], "Quantization analyzer": [[215, "quantization-analyzer"], [218, null]], "Quantization debugging guidelines": [[254, null]], "Quantization granularity": [[248, "quantization-granularity"]], "Quantization schemes": [[248, "quantization-schemes"]], "Quantization simulation": [[191, null], [257, "quantization-simulation"]], "Quantization simulation guide": [[248, null]], "Quantization user guide": [[255, null]], "Quantization workflow": [[255, "quantization-workflow"], [258, null]], "Quantization-Aware Training with BatchNorm Re-estimation": [[195, null], [209, null]], "Quantization-Aware Training with a Keras Transformer Model": [[196, null]], "Quantization-Aware training with range learning": [[199, null]], "Quantization-aware training": [[198, null], [211, null], [249, null], [257, "quantization-aware-training"]], "Quantization-aware training with range learning": [[212, null]], "QuantizationMixin": [[30, null]], "Quantize": [[161, null]], "Quantize and Update Base Model Weights": [[236, "quantize-and-update-base-model-weights"]], "QuantizeDequantize": [[162, null]], "Quantized LoRa": [[231, "quantized-lora"], [235, null]], "Quantized modules": [[175, "quantized-modules"]], "QuantizedAdaptiveAvgPool1d": [[31, null]], "QuantizedAdaptiveAvgPool2d": [[32, null]], "QuantizedAdaptiveAvgPool3d": [[33, null]], "QuantizedAdaptiveMaxPool1d": [[34, null]], "QuantizedAdaptiveMaxPool2d": [[35, null]], "QuantizedAdaptiveMaxPool3d": [[36, null]], "QuantizedAlphaDropout": [[37, null]], "QuantizedAvgPool1d": [[38, null]], "QuantizedAvgPool2d": [[39, null]], "QuantizedAvgPool3d": [[40, null]], "QuantizedBCELoss": [[41, null]], "QuantizedBCEWithLogitsLoss": [[42, null]], "QuantizedBatchNorm1d": [[43, null]], "QuantizedBatchNorm2d": [[44, null]], "QuantizedBatchNorm3d": [[45, null]], "QuantizedBilinear": [[46, null]], "QuantizedCELU": [[47, null]], "QuantizedCTCLoss": [[48, null]], "QuantizedChannelShuffle": [[49, null]], "QuantizedCircularPad1d": [[50, null]], "QuantizedCircularPad2d": [[51, null]], "QuantizedCircularPad3d": [[52, null]], "QuantizedConstantPad1d": [[53, null]], "QuantizedConstantPad2d": [[54, null]], "QuantizedConstantPad3d": [[55, null]], "QuantizedConv1d": [[56, null]], "QuantizedConv2d": [[57, null]], "QuantizedConv3d": [[58, null]], "QuantizedConvTranspose1d": [[59, null]], "QuantizedConvTranspose2d": [[60, null]], "QuantizedConvTranspose3d": [[61, null]], "QuantizedCosineEmbeddingLoss": [[62, null]], "QuantizedCosineSimilarity": [[63, null]], "QuantizedCrossEntropyLoss": [[64, null]], "QuantizedDropout": [[65, null]], "QuantizedDropout1d": [[66, null]], "QuantizedDropout2d": [[67, null]], "QuantizedDropout3d": [[68, null]], "QuantizedELU": [[69, null]], "QuantizedEmbedding": [[70, null]], "QuantizedEmbeddingBag": [[71, null]], "QuantizedFeatureAlphaDropout": [[72, null]], "QuantizedFlatten": [[73, null]], "QuantizedFold": [[74, null]], "QuantizedFractionalMaxPool2d": [[75, null]], "QuantizedFractionalMaxPool3d": [[76, null]], "QuantizedGELU": [[77, null]], "QuantizedGLU": [[78, null]], "QuantizedGRU": [[79, null]], "QuantizedGRUCell": [[80, null]], "QuantizedGaussianNLLLoss": [[81, null]], "QuantizedGroupNorm": [[82, null]], "QuantizedHardshrink": [[83, null]], "QuantizedHardsigmoid": [[84, null]], "QuantizedHardswish": [[85, null]], "QuantizedHardtanh": [[86, null]], "QuantizedHingeEmbeddingLoss": [[87, null]], "QuantizedHuberLoss": [[88, null]], "QuantizedInstanceNorm1d": [[89, null]], "QuantizedInstanceNorm2d": [[90, null]], "QuantizedInstanceNorm3d": [[91, null]], "QuantizedKLDivLoss": [[92, null]], "QuantizedL1Loss": [[93, null]], "QuantizedLPPool1d": [[94, null]], "QuantizedLPPool2d": [[95, null]], "QuantizedLSTM": [[96, null]], "QuantizedLSTMCell": [[97, null]], "QuantizedLayerNorm": [[98, null]], "QuantizedLeakyReLU": [[99, null]], "QuantizedLinear": [[100, null]], "QuantizedLocalResponseNorm": [[101, null]], "QuantizedLogSigmoid": [[102, null]], "QuantizedLogSoftmax": [[103, null]], "QuantizedMSELoss": [[104, null]], "QuantizedMarginRankingLoss": [[105, null]], "QuantizedMaxPool1d": [[106, null]], "QuantizedMaxPool2d": [[107, null]], "QuantizedMaxPool3d": [[108, null]], "QuantizedMaxUnpool1d": [[109, null]], "QuantizedMaxUnpool2d": [[110, null]], "QuantizedMaxUnpool3d": [[111, null]], "QuantizedMish": [[112, null]], "QuantizedMultiLabelMarginLoss": [[113, null]], "QuantizedMultiLabelSoftMarginLoss": [[114, null]], "QuantizedMultiMarginLoss": [[115, null]], "QuantizedNLLLoss": [[116, null]], "QuantizedNLLLoss2d": [[117, null]], "QuantizedPReLU": [[118, null]], "QuantizedPairwiseDistance": [[119, null]], "QuantizedPixelShuffle": [[120, null]], "QuantizedPixelUnshuffle": [[121, null]], "QuantizedPoissonNLLLoss": [[122, null]], "QuantizedRNN": [[123, null]], "QuantizedRNNCell": [[124, null]], "QuantizedRReLU": [[125, null]], "QuantizedReLU": [[126, null]], "QuantizedReLU6": [[127, null]], "QuantizedReflectionPad1d": [[128, null]], "QuantizedReflectionPad2d": [[129, null]], "QuantizedReflectionPad3d": [[130, null]], "QuantizedReplicationPad1d": [[131, null]], "QuantizedReplicationPad2d": [[132, null]], "QuantizedReplicationPad3d": [[133, null]], "QuantizedSELU": [[134, null]], "QuantizedSiLU": [[135, null]], "QuantizedSigmoid": [[136, null]], "QuantizedSmoothL1Loss": [[137, null]], "QuantizedSoftMarginLoss": [[138, null]], "QuantizedSoftmax": [[139, null]], "QuantizedSoftmax2d": [[140, null]], "QuantizedSoftmin": [[141, null]], "QuantizedSoftplus": [[142, null]], "QuantizedSoftshrink": [[143, null]], "QuantizedSoftsign": [[144, null]], "QuantizedTanh": [[145, null]], "QuantizedTanhshrink": [[146, null]], "QuantizedTensor": [[159, null]], "QuantizedTensorBase": [[160, null]], "QuantizedThreshold": [[147, null]], "QuantizedTripletMarginLoss": [[148, null]], "QuantizedTripletMarginWithDistanceLoss": [[149, null]], "QuantizedUnflatten": [[150, null]], "QuantizedUnfold": [[151, null]], "QuantizedUpsample": [[152, null]], "QuantizedUpsamplingBilinear2d": [[153, null]], "QuantizedUpsamplingNearest2d": [[154, null]], "QuantizedZeroPad1d": [[155, null]], "QuantizedZeroPad2d": [[156, null]], "QuantizedZeroPad3d": [[157, null]], "Quantizer Args structure": [[247, "id6"]], "Quantizers": [[178, "quantizers"]], "Quantsim and Adaround - Per Channel Quantization (PCQ)": [[201, null]], "Quick Start": [[240, "quick-start"]], "Quick Start (PyTorch)": [[244, null]], "Rank Rounding": [[226, "rank-rounding"]], "Re-estimate BatchNorm Statistics": [[209, "Re-estimate-BatchNorm-Statistics"]], "References": [[226, "references"]], "Regular AMP": [[192, "Regular-AMP"]], "Release Notes": [[240, "release-notes"]], "Release notes": [[253, null]], "Run QWA-LoRa": [[237, "run-qwa-lora"]], "Running a quick example": [[244, "running-a-quick-example"]], "Running the notebooks": [[187, "running-the-notebooks"]], "Runtime configuration": [[248, "runtime-configuration"], [250, null]], "Sequential MSE": [[231, "sequential-mse"], [238, null]], "Set model input precision": [[234, "set-model-input-precision"]], "Set model output precision": [[234, "set-model-output-precision"]], "Set precision based on layer type": [[234, "set-precision-based-on-layer-type"]], "Set precision of a leaf layer": [[234, "set-precision-of-a-leaf-layer"]], "Set precision of a non-leaf layer": [[234, "set-precision-of-a-non-leaf-layer"]], "Setup": [[214, "setup"], [220, "setup"], [222, "setup"], [223, "setup"], [227, "setup"], [229, "setup"], [234, "setup"], [236, "setup"], [237, "setup"], [238, "setup"]], "Signal-to-Quantization-Noise": [[248, "signal-to-quantization-noise"]], "Simulate quantization noise": [[248, "simulate-quantization-noise"]], "Spatial SVD": [[226, "spatial-svd"], [227, null]], "Start the docker container": [[242, "start-the-docker-container"]], "Starting a Bokeh server session": [[228, "starting-a-bokeh-server-session"]], "Step 1": [[214, "step-1"], [219, "step-1"], [220, "step-1"], [221, "step-1"], [232, "step-1"], [238, "step-1"]], "Step 1 Importing libraries": [[218, "step-1-importing-libraries"]], "Step 1: Creating a QuantSim model": [[246, "step-1-creating-a-quantsim-model"]], "Step 1: Importing the API": [[217, "step-1-importing-the-api"]], "Step 1: Setup": [[249, "step-1-setup"]], "Step 1: Trying FP16 precision (no quantization)": [[258, "step-1-trying-fp16-precision-no-quantization"]], "Step 2": [[214, "step-2"], [219, "step-2"], [220, "step-2"], [221, "step-2"], [232, "step-2"], [238, "step-2"]], "Step 2 Preparing the calibration callback": [[218, "step-2-preparing-the-calibration-callback"]], "Step 2: Computing the initial quantization parameters": [[249, "step-2-computing-the-initial-quantization-parameters"]], "Step 2: Creating a calibration callback": [[246, "step-2-creating-a-calibration-callback"]], "Step 2: Loading a model": [[217, "step-2-loading-a-model"]], "Step 2: Verifying W16A16 quantization": [[258, "step-2-verifying-w16a16-quantization"]], "Step 3": [[214, "step-3"], [219, "step-3"], [220, "step-3"], [221, "step-3"], [238, "step-3"]], "Step 3 Preparing the evaluation callback": [[218, "step-3-preparing-the-evaluation-callback"]], "Step 3. Reducing precision": [[258, "step-3-reducing-precision"]], "Step 3: Calibrate the quantized model": [[249, "step-3-calibrate-the-quantized-model"]], "Step 3: Computing encodings": [[246, "step-3-computing-encodings"]], "Step 3: Obtaining inputs": [[217, "step-3-obtaining-inputs"]], "Step 4": [[214, "step-4"], [219, "step-4"], [220, "step-4"], [238, "step-4"]], "Step 4 Preparing model": [[218, "step-4-preparing-model"]], "Step 4. Restoring accuracy": [[258, "step-4-restoring-accuracy"]], "Step 4: Evaluating the model": [[249, "step-4-evaluating-the-model"]], "Step 4: Evaluation": [[246, "step-4-evaluation"]], "Step 4: Generating layer outputs": [[217, "step-4-generating-layer-outputs"]], "Step 5": [[219, "step-5"], [238, "step-5"]], "Step 5 Creating the QuantAnalyzer": [[218, "step-5-creating-the-quantanalyzer"]], "Step 5: Exporting the model": [[246, "step-5-exporting-the-model"], [249, "step-5-exporting-the-model"]], "Step 6": [[219, "step-6"]], "Step 6 Running the analysis": [[218, "step-6-running-the-analysis"]], "Step 7": [[219, "step-7"]], "Summary": [[192, "Summary"], [195, "Summary"], [197, "Summary"], [201, "Summary"], [209, "Summary"]], "Supported precisions for on-target inference": [[257, "supported-precisions-for-on-target-inference"]], "Techniques": [[210, "Techniques"]], "TensorFlow model guidelines": [[251, null]], "Tested platform": [[244, "tested-platform"]], "Top level structure": [[247, "id2"]], "Training Callback": [[237, "training-callback"]], "Use Case": [[226, "use-case"]], "Use Cases": [[232, "use-cases"]], "User Guide": [[240, "user-guide"]], "User flow": [[176, "user-flow"]], "Verifying the installation": [[241, "verifying-the-installation"], [244, "verifying-the-installation"]], "Visualization Tools": [[168, "visualization-tools"]], "Visualizing compression ratios": [[228, "visualizing-compression-ratios"]], "Weight SVD": [[226, "weight-svd"], [229, null]], "Weight reconstruction": [[223, "weight-reconstruction"]], "What this notebook is not": [[188, "What-this-notebook-is-not"], [192, "What-this-notebook-is-not"], [200, "What-this-notebook-is-not"], [201, "What-this-notebook-is-not"], [206, "What-this-notebook-is-not"], [209, "What-this-notebook-is-not"], [213, "What-this-notebook-is-not"]], "Winnowing": [[223, "winnowing"], [230, null], [230, "id1"]], "Workflow": [[214, "workflow"], [214, "id2"], [216, "workflow"], [217, "workflow"], [218, "workflow"], [219, "workflow"], [220, "workflow"], [221, "workflow"], [222, "workflow"], [223, "workflow"], [227, "workflow"], [229, "workflow"], [232, "workflow"], [234, "workflow"], [236, "workflow"], [237, "workflow"], [238, "workflow"], [246, "workflow"], [249, "workflow"]], "aimet_onnx": [[0, "aimet-onnx"]], "aimet_onnx API": [[6, null]], "aimet_onnx.adaround": [[1, null]], "aimet_onnx.auto_quant_v2": [[3, null]], "aimet_onnx.batch_norm_fold": [[4, null]], "aimet_onnx.cross_layer_equalization": [[5, null]], "aimet_onnx.layer_output_utils": [[7, null]], "aimet_onnx.mixed_precision": [[2, null]], "aimet_onnx.quant_analyzer": [[9, null]], "aimet_onnx.quantsim": [[10, null]], "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights": [[8, null]], "aimet_onnx.seq_mse": [[11, null]], "aimet_tensorflow": [[0, "aimet-tensorflow"]], "aimet_tensorflow API": [[19, null]], "aimet_tensorflow.adaround": [[12, null]], "aimet_tensorflow.auto_quant_v2": [[14, null]], "aimet_tensorflow.batch_norm_fold": [[16, null]], "aimet_tensorflow.compress": [[18, null]], "aimet_tensorflow.cross_layer_equalization": [[17, null]], "aimet_tensorflow.keras.bn_reestimation": [[15, null]], "aimet_tensorflow.layer_output_utils": [[20, null]], "aimet_tensorflow.mixed_precision": [[13, null]], "aimet_tensorflow.model_preparer": [[21, null]], "aimet_tensorflow.quant_analyzer": [[22, null]], "aimet_tensorflow.quantsim": [[23, null]], "aimet_torch": [[0, "aimet-torch"], [167, "aimet-torch"]], "aimet_torch 1.x vs aimet_torch 2": [[171, "aimet-torch-1-x-vs-aimet-torch-2"]], "aimet_torch API": [[167, null]], "aimet_torch.adaround": [[24, null]], "aimet_torch.auto_quant": [[25, null]], "aimet_torch.batch_norm_fold": [[27, null]], "aimet_torch.bn_reestimation": [[26, null]], "aimet_torch.compress": [[29, null]], "aimet_torch.cross_layer_equalization": [[28, null]], "aimet_torch.layer_output_utils": [[169, null]], "aimet_torch.mixed_precision": [[174, null]], "aimet_torch.model_preparer": [[172, null]], "aimet_torch.model_validator": [[173, null]], "aimet_torch.nn": [[175, null]], "aimet_torch.peft": [[176, null]], "aimet_torch.quant_analyzer": [[177, null]], "aimet_torch.quantization": [[178, null]], "aimet_torch.quantsim": [[179, null]], "aimet_torch.quantsim.config_utils": [[170, null]], "aimet_torch.seq_mse": [[180, null]], "aimet_torch.v1": [[167, "aimet-torch-v1"]], "aimet_torch.v1.adaround": [[181, null]], "aimet_torch.v1.auto_quant": [[183, null]], "aimet_torch.v1.mixed_precision": [[182, null]], "aimet_torch.v1.quant_analyzer": [[184, null]], "aimet_torch.v1.quantsim": [[185, null]], "aimet_torch.v1.seq_mse": [[186, null]], "aimet_torch.visualization_tools": [[168, null]], "dequantize": [[163, null]], "quantize": [[164, null]], "quantize_dequantize": [[165, null]]}, "docnames": ["apiref/index", "apiref/onnx/adaround", "apiref/onnx/amp", "apiref/onnx/autoquant", "apiref/onnx/bnf", "apiref/onnx/cle", "apiref/onnx/index", "apiref/onnx/layer_output_generation", "apiref/onnx/lpbq", "apiref/onnx/quant_analyzer", "apiref/onnx/quantsim", "apiref/onnx/seq_mse", "apiref/tensorflow/adaround", "apiref/tensorflow/amp", "apiref/tensorflow/autoquant", "apiref/tensorflow/bn", "apiref/tensorflow/bnf", "apiref/tensorflow/cle", "apiref/tensorflow/compress", "apiref/tensorflow/index", "apiref/tensorflow/layer_output_generation", "apiref/tensorflow/model_preparer", "apiref/tensorflow/quant_analyzer", "apiref/tensorflow/quantsim", "apiref/torch/adaround", "apiref/torch/autoquant", "apiref/torch/bn", "apiref/torch/bnf", "apiref/torch/cle", "apiref/torch/compress", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d", "apiref/torch/generated/aimet_torch.nn.QuantizedELU", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten", "apiref/torch/generated/aimet_torch.nn.QuantizedFold", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMish", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize", "apiref/torch/index", "apiref/torch/interactive_visualization", "apiref/torch/layer_output_generation", "apiref/torch/lpbq", "apiref/torch/migration_guide", "apiref/torch/model_preparer", "apiref/torch/model_validator", "apiref/torch/mp", "apiref/torch/nn", "apiref/torch/peft_lora", "apiref/torch/quant_analyzer", "apiref/torch/quantization", "apiref/torch/quantsim", "apiref/torch/seq_mse", "apiref/torch/v1/adaround", "apiref/torch/v1/amp", "apiref/torch/v1/autoquant", "apiref/torch/v1/quant_analyzer", "apiref/torch/v1/quantsim", "apiref/torch/v1/seq_mse", "examples/index", "examples/onnx/quantization/AMP", "examples/onnx/quantization/adaround", "examples/onnx/quantization/cle", "examples/onnx/quantization/quantsim", "examples/tensorflow/quantization/keras/KerasAMP", "examples/tensorflow/quantization/keras/adaround", "examples/tensorflow/quantization/keras/autoquant", "examples/tensorflow/quantization/keras/bn_reestimation", "examples/tensorflow/quantization/keras/keras_transformer_qat", "examples/tensorflow/quantization/keras/model_preparer", "examples/tensorflow/quantization/keras/qat", "examples/tensorflow/quantization/keras/qat_range_learning", "examples/tensorflow/quantization/keras/quant_analyzer", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq", "examples/tensorflow/quantization/keras/quantsim_cle", "examples/torch/compression/channel_pruning", "examples/torch/compression/spatial_svd", "examples/torch/compression/spatial_svd_channel_pruning", "examples/torch/quantization/AMP", "examples/torch/quantization/adaround", "examples/torch/quantization/autoquant", "examples/torch/quantization/bn_reestimation", "examples/torch/quantization/cle_bc", "examples/torch/quantization/qat", "examples/torch/quantization/qat_range_learning", "examples/torch/quantization/quant_analyzer", "featureguide/adaround", "featureguide/analysis tools/index", "featureguide/analysis tools/interactive_visualization", "featureguide/analysis tools/layer_output_generation", "featureguide/analysis tools/quant_analyzer", "featureguide/autoquant", "featureguide/bn", "featureguide/bnf", "featureguide/cle", "featureguide/compression/channel_pruning", "featureguide/compression/feature_guidebook", "featureguide/compression/greedy_compression_ratio_selection", "featureguide/compression/index", "featureguide/compression/spatial_svd", "featureguide/compression/visualization_compression", "featureguide/compression/weight_svd", "featureguide/compression/winnowing", "featureguide/index", "featureguide/mixed precision/amp", "featureguide/mixed precision/index", "featureguide/mixed precision/mmp", "featureguide/quantized LoRa/index", "featureguide/quantized LoRa/qw_lora", "featureguide/quantized LoRa/qwa_lora", "featureguide/seq_mse", "glossary", "index", "install/index", "install/install_docker", "install/install_host", "install/quick-start", "quantsim/blockwise", "quantsim/calibration", "quantsim/encoding_spec", "quantsim/index", "quantsim/qat", "quantsim/runtime_config", "quantsim/tensorflow/model_guidelines", "quantsim/torch/model_guidelines", "release_notes", "userguide/debugging_guidelines", "userguide/index", "userguide/on_target_inference", "userguide/quantization_tools", "userguide/quantization_workflow", "versions"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["apiref/index.rst", "apiref/onnx/adaround.rst", "apiref/onnx/amp.rst", "apiref/onnx/autoquant.rst", "apiref/onnx/bnf.rst", "apiref/onnx/cle.rst", "apiref/onnx/index.rst", "apiref/onnx/layer_output_generation.rst", "apiref/onnx/lpbq.rst", "apiref/onnx/quant_analyzer.rst", "apiref/onnx/quantsim.rst", "apiref/onnx/seq_mse.rst", "apiref/tensorflow/adaround.rst", "apiref/tensorflow/amp.rst", "apiref/tensorflow/autoquant.rst", "apiref/tensorflow/bn.rst", "apiref/tensorflow/bnf.rst", "apiref/tensorflow/cle.rst", "apiref/tensorflow/compress.rst", "apiref/tensorflow/index.rst", "apiref/tensorflow/layer_output_generation.rst", "apiref/tensorflow/model_preparer.rst", "apiref/tensorflow/quant_analyzer.rst", "apiref/tensorflow/quantsim.rst", "apiref/torch/adaround.rst", "apiref/torch/autoquant.rst", "apiref/torch/bn.rst", "apiref/torch/bnf.rst", "apiref/torch/cle.rst", "apiref/torch/compress.rst", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d.rst", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase.rst", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize.rst", "apiref/torch/index.rst", "apiref/torch/interactive_visualization.rst", "apiref/torch/layer_output_generation.rst", "apiref/torch/lpbq.rst", "apiref/torch/migration_guide.rst", "apiref/torch/model_preparer.rst", "apiref/torch/model_validator.rst", "apiref/torch/mp.rst", "apiref/torch/nn.rst", "apiref/torch/peft_lora.rst", "apiref/torch/quant_analyzer.rst", "apiref/torch/quantization.rst", "apiref/torch/quantsim.rst", "apiref/torch/seq_mse.rst", "apiref/torch/v1/adaround.rst", "apiref/torch/v1/amp.rst", "apiref/torch/v1/autoquant.rst", "apiref/torch/v1/quant_analyzer.rst", "apiref/torch/v1/quantsim.rst", "apiref/torch/v1/seq_mse.rst", "examples/index.rst", "examples/onnx/quantization/AMP.ipynb", "examples/onnx/quantization/adaround.ipynb", "examples/onnx/quantization/cle.ipynb", "examples/onnx/quantization/quantsim.ipynb", "examples/tensorflow/quantization/keras/KerasAMP.ipynb", "examples/tensorflow/quantization/keras/adaround.ipynb", "examples/tensorflow/quantization/keras/autoquant.ipynb", "examples/tensorflow/quantization/keras/bn_reestimation.ipynb", "examples/tensorflow/quantization/keras/keras_transformer_qat.ipynb", "examples/tensorflow/quantization/keras/model_preparer.ipynb", "examples/tensorflow/quantization/keras/qat.ipynb", "examples/tensorflow/quantization/keras/qat_range_learning.ipynb", "examples/tensorflow/quantization/keras/quant_analyzer.ipynb", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq.ipynb", "examples/tensorflow/quantization/keras/quantsim_cle.ipynb", "examples/torch/compression/channel_pruning.ipynb", "examples/torch/compression/spatial_svd.ipynb", "examples/torch/compression/spatial_svd_channel_pruning.ipynb", "examples/torch/quantization/AMP.ipynb", "examples/torch/quantization/adaround.ipynb", "examples/torch/quantization/autoquant.ipynb", "examples/torch/quantization/bn_reestimation.ipynb", "examples/torch/quantization/cle_bc.ipynb", "examples/torch/quantization/qat.ipynb", "examples/torch/quantization/qat_range_learning.ipynb", "examples/torch/quantization/quant_analyzer.ipynb", "featureguide/adaround.rst", "featureguide/analysis tools/index.rst", "featureguide/analysis tools/interactive_visualization.rst", "featureguide/analysis tools/layer_output_generation.rst", "featureguide/analysis tools/quant_analyzer.rst", "featureguide/autoquant.rst", "featureguide/bn.rst", "featureguide/bnf.rst", "featureguide/cle.rst", "featureguide/compression/channel_pruning.rst", "featureguide/compression/feature_guidebook.rst", "featureguide/compression/greedy_compression_ratio_selection.rst", "featureguide/compression/index.rst", "featureguide/compression/spatial_svd.rst", "featureguide/compression/visualization_compression.rst", "featureguide/compression/weight_svd.rst", "featureguide/compression/winnowing.rst", "featureguide/index.rst", "featureguide/mixed precision/amp.rst", "featureguide/mixed precision/index.rst", "featureguide/mixed precision/mmp.rst", "featureguide/quantized LoRa/index.rst", "featureguide/quantized LoRa/qw_lora.rst", "featureguide/quantized LoRa/qwa_lora.rst", "featureguide/seq_mse.rst", "glossary.rst", "index.rst", "install/index.rst", "install/install_docker.rst", "install/install_host.rst", "install/quick-start.rst", "quantsim/blockwise.rst", "quantsim/calibration.rst", "quantsim/encoding_spec.rst", "quantsim/index.rst", "quantsim/qat.rst", "quantsim/runtime_config.rst", "quantsim/tensorflow/model_guidelines.rst", "quantsim/torch/model_guidelines.rst", "release_notes.rst", "userguide/debugging_guidelines.rst", "userguide/index.rst", "userguide/on_target_inference.rst", "userguide/quantization_tools.rst", "userguide/quantization_workflow.rst", "versions.rst"], "indexentries": {"accelerator": [[239, "term-Accelerator", true]], "accuracy": [[239, "term-Accuracy", true]], "activation": [[239, "term-Activation", true]], "activation quantization": [[239, "term-Activation-Quantization", true]], "adaptermetadata (class in aimet_torch.peft)": [[176, "aimet_torch.peft.AdapterMetaData", false]], "adaround": [[239, "term-AdaRound", true]], "adaroundparameters (class in aimet_torch.adaround.adaround_weight)": [[24, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false], [214, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.v1.adaround.adaround_weight)": [[181, "aimet_torch.v1.adaround.adaround_weight.AdaroundParameters", false]], "add_check() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.add_check", false]], "ai model efficiency toolkit": [[239, "term-AI-Model-Efficiency-Toolkit", true]], "aimet": [[239, "term-AIMET", true]], "analyze() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.analyze", false]], "apply() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false], [234, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false]], "apply_adaround() (in module aimet_torch.adaround.adaround_weight.adaround)": [[24, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false], [214, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.v1.adaround.adaround_weight.adaround)": [[181, "aimet_torch.v1.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_seq_mse() (in module aimet_torch.seq_mse)": [[180, "aimet_torch.seq_mse.apply_seq_mse", false], [238, "aimet_torch.seq_mse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.v1.seq_mse)": [[186, "aimet_torch.v1.seq_mse.apply_seq_mse", false]], "auto (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[18, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false], [227, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false]], "autoquant": [[239, "term-AutoQuant", true]], "batch normalization": [[239, "term-Batch-Normalization", true]], "batch normalization folding (bn folding)": [[239, "term-Batch-Normalization-Folding-BN-Folding", true]], "bitwidth (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.bitwidth", false]], "bn": [[239, "term-BN", true]], "callbackfunc (class in aimet_common.defs)": [[2, "aimet_common.defs.CallbackFunc", false], [13, "aimet_common.defs.CallbackFunc", false], [174, "aimet_common.defs.CallbackFunc", false], [182, "aimet_common.defs.CallbackFunc", false], [232, "aimet_common.defs.CallbackFunc", false], [232, "id0", false], [232, "id1", false]], "callbackfunc (class in aimet_common.utils)": [[177, "aimet_common.utils.CallbackFunc", false], [184, "aimet_common.utils.CallbackFunc", false], [218, "aimet_common.utils.CallbackFunc", false]], "check_model_sensitivity_to_quantization() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "check_model_sensitivity_to_quantization() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "choose_mixed_precision() (in module aimet_torch.mixed_precision)": [[174, "aimet_torch.mixed_precision.choose_mixed_precision", false], [232, "aimet_torch.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.v1.mixed_precision)": [[182, "aimet_torch.v1.mixed_precision.choose_mixed_precision", false]], "clone() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.clone", false]], "cnn": [[239, "term-CNN", true]], "compression": [[239, "term-Compression", true]], "compute_encodings() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.compute_encodings", false]], "compute_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.compute_encodings", false]], "compute_encodings() (aimet_torch.quantizationsimmodel method)": [[179, "aimet_torch.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[185, "aimet_torch.v1.quantsim.QuantizationSimModel.compute_encodings", false]], "convolutional layer": [[239, "term-Convolutional-Layer", true]], "convolutional neural network": [[239, "term-Convolutional-Neural-Network", true]], "dequantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.dequantize", false]], "dequantize() (in module aimet_torch.quantization.affine)": [[163, "aimet_torch.quantization.affine.dequantize", false]], "dequantizedtensor (class in aimet_torch.quantization)": [[158, "aimet_torch.quantization.DequantizedTensor", false]], "detach() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.detach", false]], "device": [[239, "term-Device", true]], "disable_lora_adapters() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.disable_lora_adapters", false]], "dlf": [[239, "term-DLF", true]], "dynamic layer fusion": [[239, "term-Dynamic-Layer-Fusion", true]], "edge device": [[239, "term-Edge-device", true]], "enable_adapter_and_load_weights() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.enable_adapter_and_load_weights", false]], "encoding": [[239, "term-Encoding", true]], "equalize_model() (in module aimet_torch.cross_layer_equalization)": [[28, "aimet_torch.cross_layer_equalization.equalize_model", false], [222, "aimet_torch.cross_layer_equalization.equalize_model", false]], "evalcallbackfactory (class in aimet_torch.amp.mixed_precision_algo)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [182, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [232, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false]], "export() (aimet_torch.quantizationsimmodel method)": [[179, "aimet_torch.QuantizationSimModel.export", false]], "export() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[185, "aimet_torch.v1.quantsim.QuantizationSimModel.export", false]], "export_adapter_weights() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.export_adapter_weights", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_mse_loss() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_mse_loss() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_stats_histogram() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "export_per_layer_stats_histogram() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "floatquantizedequantize (class in aimet_torch.quantization.float)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize", false]], "fold_all_batch_norms() (in module aimet_torch.batch_norm_fold)": [[27, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false], [221, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false]], "forward() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.forward", false]], "forward() (aimet_torch.nn.quantizedlinear method)": [[100, "aimet_torch.nn.QuantizedLinear.forward", false]], "forward() (aimet_torch.quantization.affine.quantize method)": [[161, "aimet_torch.quantization.affine.Quantize.forward", false]], "forward() (aimet_torch.quantization.affine.quantizedequantize method)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize.forward", false]], "forward() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.forward", false]], "forward_fn() (aimet_torch.seq_mse.seqmseparams method)": [[180, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false], [238, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false]], "forward_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[186, "aimet_torch.v1.seq_mse.SeqMseParams.forward_fn", false]], "fp32": [[239, "term-FP32", true]], "freeze_base_model() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.freeze_base_model", false]], "freeze_base_model_activation_quantizers() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.freeze_base_model_activation_quantizers", false]], "freeze_base_model_param_quantizers() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.freeze_base_model_param_quantizers", false]], "from_module() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.from_module", false]], "generate_layer_outputs() (aimet_torch.layer_output_utils.layeroutpututil method)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [217, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "get_active_quantizers() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [232, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [232, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.get_default_kernel", false]], "get_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_encodings", false]], "get_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_extra_state", false]], "get_fp_lora_layer() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.get_fp_lora_layer", false]], "get_input_quantizer_modules() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [232, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false]], "get_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.get_kernel", false]], "get_loss_fn() (aimet_torch.seq_mse.seqmseparams method)": [[180, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false], [238, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false]], "get_loss_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[186, "aimet_torch.v1.seq_mse.SeqMseParams.get_loss_fn", false]], "get_quantized_lora_layer() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.get_quantized_lora_layer", false]], "greedyselectionparameters (class in aimet_common.defs)": [[18, "aimet_common.defs.GreedySelectionParameters", false], [227, "aimet_common.defs.GreedySelectionParameters", false]], "implements() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.implements", false]], "inference": [[239, "term-Inference", true]], "input_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.input_quantizers", false]], "int8": [[239, "term-INT8", true]], "is_bfloat16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_bfloat16", false]], "is_float16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_float16", false]], "kl divergence": [[239, "term-KL-Divergence", true]], "layer": [[239, "term-Layer", true]], "layer-wise quantization": [[239, "term-Layer-wise-quantization", true]], "layeroutpututil (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil", false], [217, "aimet_torch.layer_output_utils.LayerOutputUtil", false]], "load_checkpoint() (aimet_torch.v1.quantsim method)": [[185, "aimet_torch.v1.quantsim.load_checkpoint", false]], "load_state_dict() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.load_state_dict", false]], "lora mobilenet": [[239, "term-LoRA-MobileNet", true]], "manual (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[18, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false], [227, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false]], "mixedprecisionconfigurator (class in aimet_torch.v2.mixed_precision)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false], [234, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false]], "model": [[239, "term-Model", true]], "modelvalidator (class in aimet_torch.model_validator.model_validator)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator", false]], "namingscheme (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.NamingScheme", false], [217, "aimet_torch.layer_output_utils.NamingScheme", false]], "neural network compression framework": [[239, "term-Neural-Network-Compression-Framework", true]], "new_empty() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.new_empty", false]], "nncf": [[239, "term-NNCF", true]], "node": [[239, "term-Node", true]], "normalization": [[239, "term-Normalization", true]], "onnx": [[239, "term-ONNX", true]], "onnx (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false], [217, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false]], "open neural network exchange": [[239, "term-Open-Neural-Network-Exchange", true]], "output_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.output_quantizers", false]], "param_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.param_quantizers", false]], "peftquantutils (class in aimet_torch.peft)": [[176, "aimet_torch.peft.PeftQuantUtils", false]], "per-channel quantization": [[239, "term-Per-channel-Quantization", true]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "post-training quantization": [[239, "term-Post-Training-Quantization", true]], "post_training_percentile (aimet_common.defs.quantscheme attribute)": [[10, "aimet_common.defs.QuantScheme.post_training_percentile", false], [23, "aimet_common.defs.QuantScheme.post_training_percentile", false], [179, "aimet_common.defs.QuantScheme.post_training_percentile", false], [185, "aimet_common.defs.QuantScheme.post_training_percentile", false]], "post_training_tf (aimet_common.defs.quantscheme attribute)": [[10, "aimet_common.defs.QuantScheme.post_training_tf", false], [23, "aimet_common.defs.QuantScheme.post_training_tf", false], [179, "aimet_common.defs.QuantScheme.post_training_tf", false], [185, "aimet_common.defs.QuantScheme.post_training_tf", false]], "post_training_tf_enhanced (aimet_common.defs.quantscheme attribute)": [[10, "aimet_common.defs.QuantScheme.post_training_tf_enhanced", false], [23, "aimet_common.defs.QuantScheme.post_training_tf_enhanced", false], [179, "aimet_common.defs.QuantScheme.post_training_tf_enhanced", false], [185, "aimet_common.defs.QuantScheme.post_training_tf_enhanced", false]], "prepare_model() (in module aimet_torch.model_preparer)": [[172, "aimet_torch.model_preparer.prepare_model", false]], "pruning": [[239, "term-Pruning", true]], "ptq": [[239, "term-PTQ", true]], "pytorch": [[239, "term-PyTorch", true]], "pytorch (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false], [217, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false]], "qat": [[239, "term-QAT", true]], "qdo": [[239, "term-QDO", true]], "qualcomm innovation center": [[239, "term-Qualcomm-Innovation-Center", true]], "quantanalyzer (class in aimet_torch.quant_analyzer)": [[177, "aimet_torch.quant_analyzer.QuantAnalyzer", false], [218, "aimet_torch.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.v1.quant_analyzer)": [[184, "aimet_torch.v1.quant_analyzer.QuantAnalyzer", false]], "quantization": [[239, "term-Quantization", true]], "quantization simulation": [[239, "term-Quantization-Simulation", true]], "quantization-aware training": [[239, "term-Quantization-Aware-Training", true]], "quantizationmixin (class in aimet_torch.nn)": [[30, "aimet_torch.nn.QuantizationMixin", false]], "quantizationsimmodel (class in aimet_torch)": [[179, "aimet_torch.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch.v1.quantsim)": [[185, "aimet_torch.v1.quantsim.QuantizationSimModel", false]], "quantize (class in aimet_torch.quantization.affine)": [[161, "aimet_torch.quantization.affine.Quantize", false]], "quantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantize", false]], "quantize() (in module aimet_torch.quantization.affine)": [[164, "aimet_torch.quantization.affine.quantize", false]], "quantize_dequantize() (in module aimet_torch.quantization.affine)": [[165, "aimet_torch.quantization.affine.quantize_dequantize", false]], "quantize_lora_scale_with_fixed_range() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.quantize_lora_scale_with_fixed_range", false]], "quantized_repr() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantized_repr", false]], "quantizedadaptiveavgpool1d (class in aimet_torch.nn)": [[31, "aimet_torch.nn.QuantizedAdaptiveAvgPool1d", false]], "quantizedadaptiveavgpool2d (class in aimet_torch.nn)": [[32, "aimet_torch.nn.QuantizedAdaptiveAvgPool2d", false]], "quantizedadaptiveavgpool3d (class in aimet_torch.nn)": [[33, "aimet_torch.nn.QuantizedAdaptiveAvgPool3d", false]], "quantizedadaptivemaxpool1d (class in aimet_torch.nn)": [[34, "aimet_torch.nn.QuantizedAdaptiveMaxPool1d", false]], "quantizedadaptivemaxpool2d (class in aimet_torch.nn)": [[35, "aimet_torch.nn.QuantizedAdaptiveMaxPool2d", false]], "quantizedadaptivemaxpool3d (class in aimet_torch.nn)": [[36, "aimet_torch.nn.QuantizedAdaptiveMaxPool3d", false]], "quantizedalphadropout (class in aimet_torch.nn)": [[37, "aimet_torch.nn.QuantizedAlphaDropout", false]], "quantizedavgpool1d (class in aimet_torch.nn)": [[38, "aimet_torch.nn.QuantizedAvgPool1d", false]], "quantizedavgpool2d (class in aimet_torch.nn)": [[39, "aimet_torch.nn.QuantizedAvgPool2d", false]], "quantizedavgpool3d (class in aimet_torch.nn)": [[40, "aimet_torch.nn.QuantizedAvgPool3d", false]], "quantizedbatchnorm1d (class in aimet_torch.nn)": [[43, "aimet_torch.nn.QuantizedBatchNorm1d", false]], "quantizedbatchnorm2d (class in aimet_torch.nn)": [[44, "aimet_torch.nn.QuantizedBatchNorm2d", false]], "quantizedbatchnorm3d (class in aimet_torch.nn)": [[45, "aimet_torch.nn.QuantizedBatchNorm3d", false]], "quantizedbceloss (class in aimet_torch.nn)": [[41, "aimet_torch.nn.QuantizedBCELoss", false]], "quantizedbcewithlogitsloss (class in aimet_torch.nn)": [[42, "aimet_torch.nn.QuantizedBCEWithLogitsLoss", false]], "quantizedbilinear (class in aimet_torch.nn)": [[46, "aimet_torch.nn.QuantizedBilinear", false]], "quantizedcelu (class in aimet_torch.nn)": [[47, "aimet_torch.nn.QuantizedCELU", false]], "quantizedchannelshuffle (class in aimet_torch.nn)": [[49, "aimet_torch.nn.QuantizedChannelShuffle", false]], "quantizedcircularpad1d (class in aimet_torch.nn)": [[50, "aimet_torch.nn.QuantizedCircularPad1d", false]], "quantizedcircularpad2d (class in aimet_torch.nn)": [[51, "aimet_torch.nn.QuantizedCircularPad2d", false]], "quantizedcircularpad3d (class in aimet_torch.nn)": [[52, "aimet_torch.nn.QuantizedCircularPad3d", false]], "quantizedconstantpad1d (class in aimet_torch.nn)": [[53, "aimet_torch.nn.QuantizedConstantPad1d", false]], "quantizedconstantpad2d (class in aimet_torch.nn)": [[54, "aimet_torch.nn.QuantizedConstantPad2d", false]], "quantizedconstantpad3d (class in aimet_torch.nn)": [[55, "aimet_torch.nn.QuantizedConstantPad3d", false]], "quantizedconv1d (class in aimet_torch.nn)": [[56, "aimet_torch.nn.QuantizedConv1d", false]], "quantizedconv2d (class in aimet_torch.nn)": [[57, "aimet_torch.nn.QuantizedConv2d", false]], "quantizedconv3d (class in aimet_torch.nn)": [[58, "aimet_torch.nn.QuantizedConv3d", false]], "quantizedconvtranspose1d (class in aimet_torch.nn)": [[59, "aimet_torch.nn.QuantizedConvTranspose1d", false]], "quantizedconvtranspose2d (class in aimet_torch.nn)": [[60, "aimet_torch.nn.QuantizedConvTranspose2d", false]], "quantizedconvtranspose3d (class in aimet_torch.nn)": [[61, "aimet_torch.nn.QuantizedConvTranspose3d", false]], "quantizedcosineembeddingloss (class in aimet_torch.nn)": [[62, "aimet_torch.nn.QuantizedCosineEmbeddingLoss", false]], "quantizedcosinesimilarity (class in aimet_torch.nn)": [[63, "aimet_torch.nn.QuantizedCosineSimilarity", false]], "quantizedcrossentropyloss (class in aimet_torch.nn)": [[64, "aimet_torch.nn.QuantizedCrossEntropyLoss", false]], "quantizedctcloss (class in aimet_torch.nn)": [[48, "aimet_torch.nn.QuantizedCTCLoss", false]], "quantizeddropout (class in aimet_torch.nn)": [[65, "aimet_torch.nn.QuantizedDropout", false]], "quantizeddropout1d (class in aimet_torch.nn)": [[66, "aimet_torch.nn.QuantizedDropout1d", false]], "quantizeddropout2d (class in aimet_torch.nn)": [[67, "aimet_torch.nn.QuantizedDropout2d", false]], "quantizeddropout3d (class in aimet_torch.nn)": [[68, "aimet_torch.nn.QuantizedDropout3d", false]], "quantizedelu (class in aimet_torch.nn)": [[69, "aimet_torch.nn.QuantizedELU", false]], "quantizedembedding (class in aimet_torch.nn)": [[70, "aimet_torch.nn.QuantizedEmbedding", false]], "quantizedembeddingbag (class in aimet_torch.nn)": [[71, "aimet_torch.nn.QuantizedEmbeddingBag", false]], "quantizedequantize (class in aimet_torch.quantization.affine)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize", false]], "quantizedfeaturealphadropout (class in aimet_torch.nn)": [[72, "aimet_torch.nn.QuantizedFeatureAlphaDropout", false]], "quantizedflatten (class in aimet_torch.nn)": [[73, "aimet_torch.nn.QuantizedFlatten", false]], "quantizedfold (class in aimet_torch.nn)": [[74, "aimet_torch.nn.QuantizedFold", false]], "quantizedfractionalmaxpool2d (class in aimet_torch.nn)": [[75, "aimet_torch.nn.QuantizedFractionalMaxPool2d", false]], "quantizedfractionalmaxpool3d (class in aimet_torch.nn)": [[76, "aimet_torch.nn.QuantizedFractionalMaxPool3d", false]], "quantizedgaussiannllloss (class in aimet_torch.nn)": [[81, "aimet_torch.nn.QuantizedGaussianNLLLoss", false]], "quantizedgelu (class in aimet_torch.nn)": [[77, "aimet_torch.nn.QuantizedGELU", false]], "quantizedglu (class in aimet_torch.nn)": [[78, "aimet_torch.nn.QuantizedGLU", false]], "quantizedgroupnorm (class in aimet_torch.nn)": [[82, "aimet_torch.nn.QuantizedGroupNorm", false]], "quantizedgru (class in aimet_torch.nn)": [[79, "aimet_torch.nn.QuantizedGRU", false]], "quantizedgrucell (class in aimet_torch.nn)": [[80, "aimet_torch.nn.QuantizedGRUCell", false]], "quantizedhardshrink (class in aimet_torch.nn)": [[83, "aimet_torch.nn.QuantizedHardshrink", false]], "quantizedhardsigmoid (class in aimet_torch.nn)": [[84, "aimet_torch.nn.QuantizedHardsigmoid", false]], "quantizedhardswish (class in aimet_torch.nn)": [[85, "aimet_torch.nn.QuantizedHardswish", false]], "quantizedhardtanh (class in aimet_torch.nn)": [[86, "aimet_torch.nn.QuantizedHardtanh", false]], "quantizedhingeembeddingloss (class in aimet_torch.nn)": [[87, "aimet_torch.nn.QuantizedHingeEmbeddingLoss", false]], "quantizedhuberloss (class in aimet_torch.nn)": [[88, "aimet_torch.nn.QuantizedHuberLoss", false]], "quantizedinstancenorm1d (class in aimet_torch.nn)": [[89, "aimet_torch.nn.QuantizedInstanceNorm1d", false]], "quantizedinstancenorm2d (class in aimet_torch.nn)": [[90, "aimet_torch.nn.QuantizedInstanceNorm2d", false]], "quantizedinstancenorm3d (class in aimet_torch.nn)": [[91, "aimet_torch.nn.QuantizedInstanceNorm3d", false]], "quantizedkldivloss (class in aimet_torch.nn)": [[92, "aimet_torch.nn.QuantizedKLDivLoss", false]], "quantizedl1loss (class in aimet_torch.nn)": [[93, "aimet_torch.nn.QuantizedL1Loss", false]], "quantizedlayernorm (class in aimet_torch.nn)": [[98, "aimet_torch.nn.QuantizedLayerNorm", false]], "quantizedleakyrelu (class in aimet_torch.nn)": [[99, "aimet_torch.nn.QuantizedLeakyReLU", false]], "quantizedlinear (class in aimet_torch.nn)": [[100, "aimet_torch.nn.QuantizedLinear", false]], "quantizedlocalresponsenorm (class in aimet_torch.nn)": [[101, "aimet_torch.nn.QuantizedLocalResponseNorm", false]], "quantizedlogsigmoid (class in aimet_torch.nn)": [[102, "aimet_torch.nn.QuantizedLogSigmoid", false]], "quantizedlogsoftmax (class in aimet_torch.nn)": [[103, "aimet_torch.nn.QuantizedLogSoftmax", false]], "quantizedlppool1d (class in aimet_torch.nn)": [[94, "aimet_torch.nn.QuantizedLPPool1d", false]], "quantizedlppool2d (class in aimet_torch.nn)": [[95, "aimet_torch.nn.QuantizedLPPool2d", false]], "quantizedlstm (class in aimet_torch.nn)": [[96, "aimet_torch.nn.QuantizedLSTM", false]], "quantizedlstmcell (class in aimet_torch.nn)": [[97, "aimet_torch.nn.QuantizedLSTMCell", false]], "quantizedmarginrankingloss (class in aimet_torch.nn)": [[105, "aimet_torch.nn.QuantizedMarginRankingLoss", false]], "quantizedmaxpool1d (class in aimet_torch.nn)": [[106, "aimet_torch.nn.QuantizedMaxPool1d", false]], "quantizedmaxpool2d (class in aimet_torch.nn)": [[107, "aimet_torch.nn.QuantizedMaxPool2d", false]], "quantizedmaxpool3d (class in aimet_torch.nn)": [[108, "aimet_torch.nn.QuantizedMaxPool3d", false]], "quantizedmaxunpool1d (class in aimet_torch.nn)": [[109, "aimet_torch.nn.QuantizedMaxUnpool1d", false]], "quantizedmaxunpool2d (class in aimet_torch.nn)": [[110, "aimet_torch.nn.QuantizedMaxUnpool2d", false]], "quantizedmaxunpool3d (class in aimet_torch.nn)": [[111, "aimet_torch.nn.QuantizedMaxUnpool3d", false]], "quantizedmish (class in aimet_torch.nn)": [[112, "aimet_torch.nn.QuantizedMish", false]], "quantizedmseloss (class in aimet_torch.nn)": [[104, "aimet_torch.nn.QuantizedMSELoss", false]], "quantizedmultilabelmarginloss (class in aimet_torch.nn)": [[113, "aimet_torch.nn.QuantizedMultiLabelMarginLoss", false]], "quantizedmultilabelsoftmarginloss (class in aimet_torch.nn)": [[114, "aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", false]], "quantizedmultimarginloss (class in aimet_torch.nn)": [[115, "aimet_torch.nn.QuantizedMultiMarginLoss", false]], "quantizednllloss (class in aimet_torch.nn)": [[116, "aimet_torch.nn.QuantizedNLLLoss", false]], "quantizednllloss2d (class in aimet_torch.nn)": [[117, "aimet_torch.nn.QuantizedNLLLoss2d", false]], "quantizedpairwisedistance (class in aimet_torch.nn)": [[119, "aimet_torch.nn.QuantizedPairwiseDistance", false]], "quantizedpixelshuffle (class in aimet_torch.nn)": [[120, "aimet_torch.nn.QuantizedPixelShuffle", false]], "quantizedpixelunshuffle (class in aimet_torch.nn)": [[121, "aimet_torch.nn.QuantizedPixelUnshuffle", false]], "quantizedpoissonnllloss (class in aimet_torch.nn)": [[122, "aimet_torch.nn.QuantizedPoissonNLLLoss", false]], "quantizedprelu (class in aimet_torch.nn)": [[118, "aimet_torch.nn.QuantizedPReLU", false]], "quantizedreflectionpad1d (class in aimet_torch.nn)": [[128, "aimet_torch.nn.QuantizedReflectionPad1d", false]], "quantizedreflectionpad2d (class in aimet_torch.nn)": [[129, "aimet_torch.nn.QuantizedReflectionPad2d", false]], "quantizedreflectionpad3d (class in aimet_torch.nn)": [[130, "aimet_torch.nn.QuantizedReflectionPad3d", false]], "quantizedrelu (class in aimet_torch.nn)": [[126, "aimet_torch.nn.QuantizedReLU", false]], "quantizedrelu6 (class in aimet_torch.nn)": [[127, "aimet_torch.nn.QuantizedReLU6", false]], "quantizedreplicationpad1d (class in aimet_torch.nn)": [[131, "aimet_torch.nn.QuantizedReplicationPad1d", false]], "quantizedreplicationpad2d (class in aimet_torch.nn)": [[132, "aimet_torch.nn.QuantizedReplicationPad2d", false]], "quantizedreplicationpad3d (class in aimet_torch.nn)": [[133, "aimet_torch.nn.QuantizedReplicationPad3d", false]], "quantizedrnn (class in aimet_torch.nn)": [[123, "aimet_torch.nn.QuantizedRNN", false]], "quantizedrnncell (class in aimet_torch.nn)": [[124, "aimet_torch.nn.QuantizedRNNCell", false]], "quantizedrrelu (class in aimet_torch.nn)": [[125, "aimet_torch.nn.QuantizedRReLU", false]], "quantizedselu (class in aimet_torch.nn)": [[134, "aimet_torch.nn.QuantizedSELU", false]], "quantizedsigmoid (class in aimet_torch.nn)": [[136, "aimet_torch.nn.QuantizedSigmoid", false]], "quantizedsilu (class in aimet_torch.nn)": [[135, "aimet_torch.nn.QuantizedSiLU", false]], "quantizedsmoothl1loss (class in aimet_torch.nn)": [[137, "aimet_torch.nn.QuantizedSmoothL1Loss", false]], "quantizedsoftmarginloss (class in aimet_torch.nn)": [[138, "aimet_torch.nn.QuantizedSoftMarginLoss", false]], "quantizedsoftmax (class in aimet_torch.nn)": [[139, "aimet_torch.nn.QuantizedSoftmax", false]], "quantizedsoftmax2d (class in aimet_torch.nn)": [[140, "aimet_torch.nn.QuantizedSoftmax2d", false]], "quantizedsoftmin (class in aimet_torch.nn)": [[141, "aimet_torch.nn.QuantizedSoftmin", false]], "quantizedsoftplus (class in aimet_torch.nn)": [[142, "aimet_torch.nn.QuantizedSoftplus", false]], "quantizedsoftshrink (class in aimet_torch.nn)": [[143, "aimet_torch.nn.QuantizedSoftshrink", false]], "quantizedsoftsign (class in aimet_torch.nn)": [[144, "aimet_torch.nn.QuantizedSoftsign", false]], "quantizedtanh (class in aimet_torch.nn)": [[145, "aimet_torch.nn.QuantizedTanh", false]], "quantizedtanhshrink (class in aimet_torch.nn)": [[146, "aimet_torch.nn.QuantizedTanhshrink", false]], "quantizedtensor (class in aimet_torch.quantization)": [[159, "aimet_torch.quantization.QuantizedTensor", false]], "quantizedtensorbase (class in aimet_torch.quantization)": [[160, "aimet_torch.quantization.QuantizedTensorBase", false]], "quantizedthreshold (class in aimet_torch.nn)": [[147, "aimet_torch.nn.QuantizedThreshold", false]], "quantizedtripletmarginloss (class in aimet_torch.nn)": [[148, "aimet_torch.nn.QuantizedTripletMarginLoss", false]], "quantizedtripletmarginwithdistanceloss (class in aimet_torch.nn)": [[149, "aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", false]], "quantizedunflatten (class in aimet_torch.nn)": [[150, "aimet_torch.nn.QuantizedUnflatten", false]], "quantizedunfold (class in aimet_torch.nn)": [[151, "aimet_torch.nn.QuantizedUnfold", false]], "quantizedupsample (class in aimet_torch.nn)": [[152, "aimet_torch.nn.QuantizedUpsample", false]], "quantizedupsamplingbilinear2d (class in aimet_torch.nn)": [[153, "aimet_torch.nn.QuantizedUpsamplingBilinear2d", false]], "quantizedupsamplingnearest2d (class in aimet_torch.nn)": [[154, "aimet_torch.nn.QuantizedUpsamplingNearest2d", false]], "quantizedzeropad1d (class in aimet_torch.nn)": [[155, "aimet_torch.nn.QuantizedZeroPad1d", false]], "quantizedzeropad2d (class in aimet_torch.nn)": [[156, "aimet_torch.nn.QuantizedZeroPad2d", false]], "quantizedzeropad3d (class in aimet_torch.nn)": [[157, "aimet_torch.nn.QuantizedZeroPad3d", false]], "quantizergroup (class in aimet_torch.amp.quantizer_groups)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [232, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false]], "quantscheme (class in aimet_common.defs)": [[10, "aimet_common.defs.QuantScheme", false], [23, "aimet_common.defs.QuantScheme", false], [179, "aimet_common.defs.QuantScheme", false], [185, "aimet_common.defs.QuantScheme", false]], "quantsim": [[239, "term-QuantSim", true]], "quic": [[239, "term-QUIC", true]], "reestimate_bn_stats() (in module aimet_torch.bn_reestimation)": [[26, "aimet_torch.bn_reestimation.reestimate_bn_stats", false], [220, "aimet_torch.bn_reestimation.reestimate_bn_stats", false]], "replace_lora_layers_with_quantizable_layers() (aimet_torch.peft method)": [[176, "aimet_torch.peft.replace_lora_layers_with_quantizable_layers", false]], "save_checkpoint() (aimet_torch.v1.quantsim method)": [[185, "aimet_torch.v1.quantsim.save_checkpoint", false]], "seqmseparams (class in aimet_torch.seq_mse)": [[180, "aimet_torch.seq_mse.SeqMseParams", false], [238, "aimet_torch.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.v1.seq_mse)": [[186, "aimet_torch.v1.seq_mse.SeqMseParams", false]], "set_activation_quantizers_to_float() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_activation_quantizers_to_float", false]], "set_bitwidth_for_lora_adapters() (aimet_torch.peft.peftquantutils method)": [[176, "aimet_torch.peft.PeftQuantUtils.set_bitwidth_for_lora_adapters", false]], "set_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_blockwise_quantization_for_weights", false]], "set_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.set_default_kernel", false]], "set_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.set_extra_state", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_grouped_blockwise_quantization_for_weights", false]], "set_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.set_kernel", false]], "set_model_input_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false], [234, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false]], "set_model_output_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false], [234, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false]], "set_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false], [234, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false]], "set_quantizers_to_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [232, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "spatialsvdparameters (class in aimet_tensorflow.keras.defs)": [[18, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false], [227, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false]], "spatialsvdparameters.automodeparams (class in aimet_tensorflow.keras.defs)": [[18, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false], [227, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false]], "spatialsvdparameters.manualmodeparams (class in aimet_tensorflow.keras.defs)": [[18, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false], [227, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false]], "spatialsvdparameters.mode (class in aimet_tensorflow.keras.defs)": [[18, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false], [227, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false]], "sqnr() (aimet_torch.amp.mixed_precision_algo.evalcallbackfactory method)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [182, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [232, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "target hardware accelerator": [[239, "term-Target-Hardware-Accelerator", true]], "target runtime": [[239, "term-Target-Runtime", true]], "tensorflow": [[239, "term-TensorFlow", true]], "to_list() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [182, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [232, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false]], "torchscript": [[239, "term-TorchScript", true]], "torchscript (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false], [217, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false]], "track_lora_meta_data() (aimet_torch.peft method)": [[176, "aimet_torch.peft.track_lora_meta_data", false]], "training_range_learning_with_tf_enhanced_init (aimet_common.defs.quantscheme attribute)": [[10, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_enhanced_init", false], [23, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_enhanced_init", false], [179, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_enhanced_init", false], [185, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_enhanced_init", false]], "training_range_learning_with_tf_init (aimet_common.defs.quantscheme attribute)": [[10, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_init", false], [23, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_init", false], [179, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_init", false], [185, "aimet_common.defs.QuantScheme.training_range_learning_with_tf_init", false]], "validate_model() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.validate_model", false]], "variant": [[239, "term-Variant", true]], "visualize_stats() (in module aimet_torch.v2.visualization_tools)": [[168, "aimet_torch.v2.visualization_tools.visualize_stats", false], [216, "aimet_torch.v2.visualization_tools.visualize_stats", false]], "weights": [[239, "term-Weights", true]], "wrap() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.wrap", false]]}, "objects": {"aimet_common.defs": [[232, 0, 1, "id1", "CallbackFunc"], [227, 0, 1, "", "GreedySelectionParameters"], [185, 0, 1, "", "QuantScheme"]], "aimet_common.defs.QuantScheme": [[185, 1, 1, "", "post_training_percentile"], [185, 1, 1, "", "post_training_tf"], [185, 1, 1, "", "post_training_tf_enhanced"], [185, 1, 1, "", "training_range_learning_with_tf_enhanced_init"], [185, 1, 1, "", "training_range_learning_with_tf_init"]], "aimet_common.utils": [[218, 0, 1, "", "CallbackFunc"]], "aimet_tensorflow.keras.defs": [[227, 0, 1, "", "SpatialSvdParameters"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters": [[227, 0, 1, "", "AutoModeParams"], [227, 0, 1, "", "ManualModeParams"], [227, 0, 1, "", "Mode"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode": [[227, 1, 1, "", "auto"], [227, 1, 1, "", "manual"]], "aimet_torch": [[179, 0, 1, "", "QuantizationSimModel"]], "aimet_torch.QuantizationSimModel": [[179, 2, 1, "", "compute_encodings"], [179, 2, 1, "", "export"]], "aimet_torch.adaround.adaround_weight": [[214, 0, 1, "", "AdaroundParameters"]], "aimet_torch.adaround.adaround_weight.Adaround": [[214, 3, 1, "", "apply_adaround"]], "aimet_torch.amp.mixed_precision_algo": [[232, 0, 1, "", "EvalCallbackFactory"]], "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory": [[232, 2, 1, "", "sqnr"]], "aimet_torch.amp.quantizer_groups": [[232, 0, 1, "", "QuantizerGroup"]], "aimet_torch.amp.quantizer_groups.QuantizerGroup": [[232, 2, 1, "", "get_active_quantizers"], [232, 2, 1, "", "get_candidate"], [232, 2, 1, "", "get_input_quantizer_modules"], [232, 2, 1, "", "set_quantizers_to_candidate"], [232, 2, 1, "", "to_list"]], "aimet_torch.batch_norm_fold": [[221, 3, 1, "", "fold_all_batch_norms"]], "aimet_torch.bn_reestimation": [[220, 3, 1, "", "reestimate_bn_stats"]], "aimet_torch.cross_layer_equalization": [[222, 3, 1, "", "equalize_model"]], "aimet_torch.layer_output_utils": [[217, 0, 1, "", "LayerOutputUtil"], [217, 0, 1, "", "NamingScheme"]], "aimet_torch.layer_output_utils.LayerOutputUtil": [[217, 2, 1, "", "generate_layer_outputs"]], "aimet_torch.layer_output_utils.NamingScheme": [[217, 1, 1, "", "ONNX"], [217, 1, 1, "", "PYTORCH"], [217, 1, 1, "", "TORCHSCRIPT"]], "aimet_torch.mixed_precision": [[232, 3, 1, "", "choose_mixed_precision"]], "aimet_torch.model_preparer": [[172, 3, 1, "", "prepare_model"]], "aimet_torch.model_validator.model_validator": [[173, 0, 1, "", "ModelValidator"]], "aimet_torch.model_validator.model_validator.ModelValidator": [[173, 2, 1, "", "add_check"], [173, 2, 1, "", "validate_model"]], "aimet_torch.nn": [[30, 0, 1, "", "QuantizationMixin"], [31, 0, 1, "", "QuantizedAdaptiveAvgPool1d"], [32, 0, 1, "", "QuantizedAdaptiveAvgPool2d"], [33, 0, 1, "", "QuantizedAdaptiveAvgPool3d"], [34, 0, 1, "", "QuantizedAdaptiveMaxPool1d"], [35, 0, 1, "", "QuantizedAdaptiveMaxPool2d"], [36, 0, 1, "", "QuantizedAdaptiveMaxPool3d"], [37, 0, 1, "", "QuantizedAlphaDropout"], [38, 0, 1, "", "QuantizedAvgPool1d"], [39, 0, 1, "", "QuantizedAvgPool2d"], [40, 0, 1, "", "QuantizedAvgPool3d"], [41, 0, 1, "", "QuantizedBCELoss"], [42, 0, 1, "", "QuantizedBCEWithLogitsLoss"], [43, 0, 1, "", "QuantizedBatchNorm1d"], [44, 0, 1, "", "QuantizedBatchNorm2d"], [45, 0, 1, "", "QuantizedBatchNorm3d"], [46, 0, 1, "", "QuantizedBilinear"], [47, 0, 1, "", "QuantizedCELU"], [48, 0, 1, "", "QuantizedCTCLoss"], [49, 0, 1, "", "QuantizedChannelShuffle"], [50, 0, 1, "", "QuantizedCircularPad1d"], [51, 0, 1, "", "QuantizedCircularPad2d"], [52, 0, 1, "", "QuantizedCircularPad3d"], [53, 0, 1, "", "QuantizedConstantPad1d"], [54, 0, 1, "", "QuantizedConstantPad2d"], [55, 0, 1, "", "QuantizedConstantPad3d"], [56, 0, 1, "", "QuantizedConv1d"], [57, 0, 1, "", "QuantizedConv2d"], [58, 0, 1, "", "QuantizedConv3d"], [59, 0, 1, "", "QuantizedConvTranspose1d"], [60, 0, 1, "", "QuantizedConvTranspose2d"], [61, 0, 1, "", "QuantizedConvTranspose3d"], [62, 0, 1, "", "QuantizedCosineEmbeddingLoss"], [63, 0, 1, "", "QuantizedCosineSimilarity"], [64, 0, 1, "", "QuantizedCrossEntropyLoss"], [65, 0, 1, "", "QuantizedDropout"], [66, 0, 1, "", "QuantizedDropout1d"], [67, 0, 1, "", "QuantizedDropout2d"], [68, 0, 1, "", "QuantizedDropout3d"], [69, 0, 1, "", "QuantizedELU"], [70, 0, 1, "", "QuantizedEmbedding"], [71, 0, 1, "", "QuantizedEmbeddingBag"], [72, 0, 1, "", "QuantizedFeatureAlphaDropout"], [73, 0, 1, "", "QuantizedFlatten"], [74, 0, 1, "", "QuantizedFold"], [75, 0, 1, "", "QuantizedFractionalMaxPool2d"], [76, 0, 1, "", "QuantizedFractionalMaxPool3d"], [77, 0, 1, "", "QuantizedGELU"], [78, 0, 1, "", "QuantizedGLU"], [79, 0, 1, "", "QuantizedGRU"], [80, 0, 1, "", "QuantizedGRUCell"], [81, 0, 1, "", "QuantizedGaussianNLLLoss"], [82, 0, 1, "", "QuantizedGroupNorm"], [83, 0, 1, "", "QuantizedHardshrink"], [84, 0, 1, "", "QuantizedHardsigmoid"], [85, 0, 1, "", "QuantizedHardswish"], [86, 0, 1, "", "QuantizedHardtanh"], [87, 0, 1, "", "QuantizedHingeEmbeddingLoss"], [88, 0, 1, "", "QuantizedHuberLoss"], [89, 0, 1, "", "QuantizedInstanceNorm1d"], [90, 0, 1, "", "QuantizedInstanceNorm2d"], [91, 0, 1, "", "QuantizedInstanceNorm3d"], [92, 0, 1, "", "QuantizedKLDivLoss"], [93, 0, 1, "", "QuantizedL1Loss"], [94, 0, 1, "", "QuantizedLPPool1d"], [95, 0, 1, "", "QuantizedLPPool2d"], [96, 0, 1, "", "QuantizedLSTM"], [97, 0, 1, "", "QuantizedLSTMCell"], [98, 0, 1, "", "QuantizedLayerNorm"], [99, 0, 1, "", "QuantizedLeakyReLU"], [100, 0, 1, "", "QuantizedLinear"], [101, 0, 1, "", "QuantizedLocalResponseNorm"], [102, 0, 1, "", "QuantizedLogSigmoid"], [103, 0, 1, "", "QuantizedLogSoftmax"], [104, 0, 1, "", "QuantizedMSELoss"], [105, 0, 1, "", "QuantizedMarginRankingLoss"], [106, 0, 1, "", "QuantizedMaxPool1d"], [107, 0, 1, "", "QuantizedMaxPool2d"], [108, 0, 1, "", "QuantizedMaxPool3d"], [109, 0, 1, "", "QuantizedMaxUnpool1d"], [110, 0, 1, "", "QuantizedMaxUnpool2d"], [111, 0, 1, "", "QuantizedMaxUnpool3d"], [112, 0, 1, "", "QuantizedMish"], [113, 0, 1, "", "QuantizedMultiLabelMarginLoss"], [114, 0, 1, "", "QuantizedMultiLabelSoftMarginLoss"], [115, 0, 1, "", "QuantizedMultiMarginLoss"], [116, 0, 1, "", "QuantizedNLLLoss"], [117, 0, 1, "", "QuantizedNLLLoss2d"], [118, 0, 1, "", "QuantizedPReLU"], [119, 0, 1, "", "QuantizedPairwiseDistance"], [120, 0, 1, "", "QuantizedPixelShuffle"], [121, 0, 1, "", "QuantizedPixelUnshuffle"], [122, 0, 1, "", "QuantizedPoissonNLLLoss"], [123, 0, 1, "", "QuantizedRNN"], [124, 0, 1, "", "QuantizedRNNCell"], [125, 0, 1, "", "QuantizedRReLU"], [126, 0, 1, "", "QuantizedReLU"], [127, 0, 1, "", "QuantizedReLU6"], [128, 0, 1, "", "QuantizedReflectionPad1d"], [129, 0, 1, "", "QuantizedReflectionPad2d"], [130, 0, 1, "", "QuantizedReflectionPad3d"], [131, 0, 1, "", "QuantizedReplicationPad1d"], [132, 0, 1, "", "QuantizedReplicationPad2d"], [133, 0, 1, "", "QuantizedReplicationPad3d"], [134, 0, 1, "", "QuantizedSELU"], [135, 0, 1, "", "QuantizedSiLU"], [136, 0, 1, "", "QuantizedSigmoid"], [137, 0, 1, "", "QuantizedSmoothL1Loss"], [138, 0, 1, "", "QuantizedSoftMarginLoss"], [139, 0, 1, "", "QuantizedSoftmax"], [140, 0, 1, "", "QuantizedSoftmax2d"], [141, 0, 1, "", "QuantizedSoftmin"], [142, 0, 1, "", "QuantizedSoftplus"], [143, 0, 1, "", "QuantizedSoftshrink"], [144, 0, 1, "", "QuantizedSoftsign"], [145, 0, 1, "", "QuantizedTanh"], [146, 0, 1, "", "QuantizedTanhshrink"], [147, 0, 1, "", "QuantizedThreshold"], [148, 0, 1, "", "QuantizedTripletMarginLoss"], [149, 0, 1, "", "QuantizedTripletMarginWithDistanceLoss"], [150, 0, 1, "", "QuantizedUnflatten"], [151, 0, 1, "", "QuantizedUnfold"], [152, 0, 1, "", "QuantizedUpsample"], [153, 0, 1, "", "QuantizedUpsamplingBilinear2d"], [154, 0, 1, "", "QuantizedUpsamplingNearest2d"], [155, 0, 1, "", "QuantizedZeroPad1d"], [156, 0, 1, "", "QuantizedZeroPad2d"], [157, 0, 1, "", "QuantizedZeroPad3d"]], "aimet_torch.nn.QuantizationMixin": [[30, 2, 1, "", "compute_encodings"], [30, 2, 1, "", "forward"], [30, 2, 1, "", "from_module"], [30, 2, 1, "", "get_default_kernel"], [30, 2, 1, "", "get_kernel"], [30, 2, 1, "", "implements"], [30, 1, 1, "", "input_quantizers"], [30, 1, 1, "", "output_quantizers"], [30, 1, 1, "", "param_quantizers"], [30, 2, 1, "", "set_default_kernel"], [30, 2, 1, "", "set_kernel"], [30, 2, 1, "", "wrap"]], "aimet_torch.nn.QuantizedLinear": [[100, 2, 1, "", "forward"]], "aimet_torch.peft": [[176, 0, 1, "", "AdapterMetaData"], [176, 0, 1, "", "PeftQuantUtils"], [176, 2, 1, "", "replace_lora_layers_with_quantizable_layers"], [176, 2, 1, "", "track_lora_meta_data"]], "aimet_torch.peft.PeftQuantUtils": [[176, 2, 1, "", "disable_lora_adapters"], [176, 2, 1, "", "enable_adapter_and_load_weights"], [176, 2, 1, "", "export_adapter_weights"], [176, 2, 1, "", "freeze_base_model"], [176, 2, 1, "", "freeze_base_model_activation_quantizers"], [176, 2, 1, "", "freeze_base_model_param_quantizers"], [176, 2, 1, "", "get_fp_lora_layer"], [176, 2, 1, "", "get_quantized_lora_layer"], [176, 2, 1, "", "quantize_lora_scale_with_fixed_range"], [176, 2, 1, "", "set_bitwidth_for_lora_adapters"]], "aimet_torch.quant_analyzer": [[218, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.quant_analyzer.QuantAnalyzer": [[218, 2, 1, "", "analyze"], [218, 2, 1, "", "check_model_sensitivity_to_quantization"], [218, 2, 1, "", "export_per_layer_encoding_min_max_range"], [218, 2, 1, "", "export_per_layer_mse_loss"], [218, 2, 1, "", "export_per_layer_stats_histogram"], [218, 2, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [218, 2, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.quantization": [[158, 0, 1, "", "DequantizedTensor"], [159, 0, 1, "", "QuantizedTensor"], [160, 0, 1, "", "QuantizedTensorBase"]], "aimet_torch.quantization.DequantizedTensor": [[158, 2, 1, "", "dequantize"], [158, 2, 1, "", "quantize"], [158, 2, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensor": [[159, 2, 1, "", "dequantize"], [159, 2, 1, "", "quantize"], [159, 2, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensorBase": [[160, 2, 1, "", "clone"], [160, 2, 1, "", "dequantize"], [160, 2, 1, "", "detach"], [160, 2, 1, "", "new_empty"], [160, 2, 1, "", "quantize"], [160, 2, 1, "", "quantized_repr"]], "aimet_torch.quantization.affine": [[161, 0, 1, "", "Quantize"], [162, 0, 1, "", "QuantizeDequantize"], [163, 3, 1, "", "dequantize"], [164, 3, 1, "", "quantize"], [165, 3, 1, "", "quantize_dequantize"]], "aimet_torch.quantization.affine.Quantize": [[161, 2, 1, "", "forward"]], "aimet_torch.quantization.affine.QuantizeDequantize": [[162, 2, 1, "", "forward"]], "aimet_torch.quantization.float": [[166, 0, 1, "", "FloatQuantizeDequantize"]], "aimet_torch.quantization.float.FloatQuantizeDequantize": [[166, 4, 1, "", "bitwidth"], [166, 2, 1, "", "compute_encodings"], [166, 2, 1, "", "forward"], [166, 2, 1, "", "get_encodings"], [166, 2, 1, "", "get_extra_state"], [166, 2, 1, "", "is_bfloat16"], [166, 2, 1, "", "is_float16"], [166, 2, 1, "", "load_state_dict"], [166, 2, 1, "", "set_extra_state"]], "aimet_torch.seq_mse": [[238, 0, 1, "", "SeqMseParams"], [238, 3, 1, "", "apply_seq_mse"]], "aimet_torch.seq_mse.SeqMseParams": [[238, 2, 1, "", "forward_fn"], [238, 2, 1, "", "get_loss_fn"]], "aimet_torch.v1.adaround.adaround_weight": [[181, 0, 1, "", "AdaroundParameters"]], "aimet_torch.v1.adaround.adaround_weight.Adaround": [[181, 3, 1, "", "apply_adaround"]], "aimet_torch.v1.mixed_precision": [[182, 3, 1, "", "choose_mixed_precision"]], "aimet_torch.v1.quant_analyzer": [[184, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.v1.quant_analyzer.QuantAnalyzer": [[184, 2, 1, "", "analyze"], [184, 2, 1, "", "check_model_sensitivity_to_quantization"], [184, 2, 1, "", "export_per_layer_encoding_min_max_range"], [184, 2, 1, "", "export_per_layer_mse_loss"], [184, 2, 1, "", "export_per_layer_stats_histogram"], [184, 2, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [184, 2, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.v1.quantsim": [[185, 0, 1, "", "QuantizationSimModel"], [185, 2, 1, "", "load_checkpoint"], [185, 2, 1, "", "save_checkpoint"]], "aimet_torch.v1.quantsim.QuantizationSimModel": [[185, 2, 1, "", "compute_encodings"], [185, 2, 1, "", "export"]], "aimet_torch.v1.seq_mse": [[186, 0, 1, "", "SeqMseParams"], [186, 3, 1, "", "apply_seq_mse"]], "aimet_torch.v1.seq_mse.SeqMseParams": [[186, 2, 1, "", "forward_fn"], [186, 2, 1, "", "get_loss_fn"]], "aimet_torch.v2.mixed_precision": [[234, 0, 1, "", "MixedPrecisionConfigurator"]], "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator": [[234, 2, 1, "", "apply"], [234, 2, 1, "", "set_model_input_precision"], [234, 2, 1, "", "set_model_output_precision"], [234, 2, 1, "", "set_precision"]], "aimet_torch.v2.quantsim.config_utils": [[170, 3, 1, "", "set_activation_quantizers_to_float"], [170, 3, 1, "", "set_blockwise_quantization_for_weights"], [170, 3, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_torch.v2.visualization_tools": [[216, 3, 1, "", "visualize_stats"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:function", "4": "py:property"}, "terms": {"": [2, 13, 21, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 166, 170, 172, 174, 175, 177, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 238, 239, 243, 245, 247, 248, 249, 251, 253, 254, 257, 258], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259], "00": [164, 165, 203, 204, 205, 221, 222], "000": [214, 248], "0000": [158, 165, 178], "0000e": [164, 165], "001": [188, 206, 220], "0014807": 241, "00183112e": 221, "00215936e": 221, "0030": 178, "0032": 178, "0034": 178, "00347728e": 222, "0035": 178, "0036": [162, 178], "0037": 178, "0038": 178, "0039": [162, 178], "0059": 178, "0063": 178, "0064": 178, "0068": 178, "0069": 178, "0073": 178, "0074": 178, "0078": 178, "00_224": [214, 221, 222], "01": [24, 164, 165, 181, 192, 194, 208, 214, 219, 221, 222], "0115": 162, "0117": 178, "0142": 160, "01457286e": [221, 222], "0156": 178, "0158": 162, "0176": 162, "0195": 178, "02": [164, 165, 221, 222], "02078857e": [221, 222], "0234": 178, "0235": 219, "026354755942277083": 241, "02635476": 241, "0273": 178, "0278355": 241, "02887694e": 222, "0293162": 241, "0295": 162, "03": [221, 222], "0312": 178, "0352": 178, "03798249e": 221, "0386": 162, "0391": 178, "04": [221, 222, 241, 244], "04025269e": 221, "0406616e": 222, "0424": 162, "0428": 220, "0430": 178, "0449": 244, "0469": 178, "0471": 162, "04721": 202, "05": [164, 165, 176, 221, 222], "0500e": [164, 165], "0508": 178, "05270951": 241, "0541903": 241, "0549": 162, "05549544e": [221, 222], "0564": 162, "0639": 162, "0667": 165, "0680": 162, "0769": 244, "0784": 162, "07906426": 241, "08": [164, 165], "080545": 241, "0819": 162, "0820258": 241, "0859": 166, "0861": 244, "08742931e": [221, 222], "0882": 160, "0889": 166, "0891": 166, "09": 232, "09111059e": 221, "0947": 166, "09685047e": [221, 222], "0x7f127685a598": 173, "0x7f9dd9bd90d0": 173, "0x7ff5703eff28": 173, "0x7ff577373598": 173, "1": [10, 18, 21, 23, 24, 25, 29, 30, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 222, 223, 225, 226, 227, 229, 230, 234, 235, 236, 237, 241, 242, 243, 244, 245, 248, 259], "10": [18, 21, 29, 30, 158, 161, 162, 164, 172, 173, 175, 176, 178, 179, 185, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 209, 211, 212, 214, 220, 223, 225, 226, 227, 229, 232, 241, 242, 243, 244, 245, 246, 249, 251, 253], "100": [26, 171, 182, 195, 209, 220, 239, 241, 244], "1000": [160, 177, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 223, 227, 229, 246], "10000": [188, 189, 193, 201, 206, 207], "1000e": [164, 165], "102": [178, 244], "1024": [196, 214, 232, 246], "103": [161, 178], "104": 244, "105": 244, "1050": 244, "10541902": 241, "10569119e": [221, 222], "106": 161, "1060": 162, "1068997": 241, "107": 178, "10708203e": [221, 222], "108": 178, "109": 161, "10k": [24, 181, 214], "11": [159, 160, 164, 176, 178, 205, 241, 242, 243, 253], "110": [161, 178], "111": [161, 178], "11176670e": 222, "112": [214, 221, 222], "1128": 162, "1155": 244, "116": 244, "1176": 162, "118": 178, "119": [178, 244], "12": [164, 178, 241, 242, 243, 244, 245], "12039044e": 222, "121": 244, "122": 161, "1232": 162, "127": [159, 160, 178, 179, 244, 246, 249], "128": [25, 159, 160, 170, 172, 174, 178, 179, 182, 183, 196, 198, 199, 214, 219, 221, 222, 232, 241, 244, 245, 246, 249], "129": 161, "13": [164, 178, 244, 259], "1307": 162, "131": 161, "13177378": 241, "1333": 165, "1398": 226, "14": [164, 178, 244, 253, 259], "1406": 226, "141": 161, "143": 161, "144": 161, "145": 161, "1458": 244, "146": 161, "15": [164, 165, 178, 195, 196, 198, 199, 209, 211, 212, 220, 226, 249, 253], "150": 161, "1500e": [164, 165], "152": 161, "15259957e": 222, "153": 159, "155": 161, "15717569e": 221, "15812853": 241, "15e": [203, 205], "15k": [24, 181, 214], "16": [13, 30, 161, 166, 172, 174, 175, 176, 178, 179, 182, 185, 188, 192, 195, 206, 210, 214, 219, 227, 232, 236, 237, 241, 244, 245, 246, 249, 258, 259], "1619": 244, "162": 161, "16245179e": [221, 222], "1647": 162, "16839484e": 222, "16966406e": 222, "17": [161, 178, 222, 259], "1709": 162, "172": 161, "1727": 166, "1729": 166, "1741": 162, "178": 161, "17871511e": 222, "179": 161, "18": [178, 188, 189, 190, 191, 244, 259], "181": 161, "18136823e": 221, "18448329": 241, "186": 161, "18673885e": 221, "187": 161, "188": 161, "1889": 162, "19": [161, 178, 221, 222, 259], "1906": 202, "19186290e": [221, 222], "192": 161, "1921e": [164, 165], "194": 161, "1943": 226, "1945": 160, "1955": 226, "1977": 162, "19778645e": 221, "1_all": 243, "1e": [21, 176, 196, 197, 220, 221, 222, 246, 249], "1k": [214, 219, 220, 232, 238, 246], "1m": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 196, 215, 216, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 248, 251, 252, 255, 256, 257, 259], "20": [21, 24, 160, 180, 181, 186, 194, 195, 196, 197, 198, 199, 209, 211, 212, 214, 220, 221, 222, 227, 236, 237, 238, 249, 259], "200": [21, 171, 196, 197, 208], "2000": [24, 159, 165, 181, 189, 193, 194, 201, 207, 208, 210, 214], "20000": [21, 196, 197], "2000e": [164, 165], "2012": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "2014": 226, "2016": 226, "2017": 226, "2019": [190, 202, 210], "203": 161, "20433941e": [221, 222], "2048": [214, 219, 220, 249], "205": 159, "2068": 244, "207": 161, "20k": 196, "21": [160, 221, 222, 259], "21066449e": 221, "21083805": 241, "2118": 162, "2123188": 241, "21250950e": 221, "2137995": 241, "216": 161, "218": 161, "2196": 162, "22": [178, 221, 222, 241, 244, 259], "2205": 160, "2212": 162, "2217": 244, "22219264e": [221, 222], "224": [179, 188, 189, 190, 191, 192, 195, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 227, 232, 234, 238, 244, 246, 249], "225": [208, 214, 219, 232, 246], "22583652e": 221, "226": 161, "2260": 160, "2265": 162, "229": [208, 214, 219, 232, 246], "23": [159, 160, 259], "23011987e": [221, 222], "2315": 244, "23156421e": [221, 222], "2353": 162, "2355": 162, "2363": [162, 244], "237": 161, "23719281": 241, "238": 161, "24": 259, "240": 178, "2401543": 241, "241": 178, "242": 178, "24257803e": 221, "243": 178, "2431": 244, "244": 178, "245": 178, "2458": 162, "2459": 244, "246": 178, "247": 178, "248": 178, "249": 178, "25": [178, 259], "250": 178, "2500e": [164, 165], "251": 178, "252": 178, "253": 178, "254": 178, "2546": 162, "255": [158, 161, 178, 179, 246, 249], "256": [178, 192, 206, 214, 218, 219, 232, 246], "2568": 162, "2592": 173, "26": [159, 178, 244, 259], "26179108e": 221, "26354757": 241, "2650282": 241, "2667": 165, "27": [244, 259], "27415752e": 222, "2771": 162, "28": [159, 160, 201, 223, 227, 229, 244, 259], "28238320e": 222, "288": [214, 222], "28990233": 241, "29": [178, 259], "291383": 241, "2921": 160, "2930528e": 222, "29590677e": [221, 222], "2b": 224, "2d": [201, 223, 226, 230, 245], "3": [10, 13, 23, 25, 29, 158, 160, 164, 165, 169, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 185, 186, 196, 222, 223, 224, 227, 229, 230, 234, 236, 241, 242, 243, 244, 245], "30": [161, 178, 244, 259], "300": 206, "3000": [159, 196], "30122258e": [221, 222], "3038": 162, "30402938e": 222, "31": [24, 177, 179, 181, 184, 185, 214, 218, 244, 246, 249, 259], "31080866e": 221, "312": 159, "3137": 162, "31625706": 241, "32": [21, 161, 172, 173, 178, 179, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 218, 219, 220, 221, 222, 232, 238, 239, 244, 246, 247, 249, 251, 254, 259], "32141271e": 221, "3216": 162, "33": [161, 203, 204, 205, 244, 259], "3333": 165, "33731920e": [221, 222], "34": 259, "34215236e": 222, "34261182": 241, "3451": 162, "3467390e": 222, "34694423e": 222, "347054": 241, "3470540046691895": 241, "35": [179, 244, 246, 249, 259], "350m": [236, 237], "35139937e": 222, "36": 161, "3610": 244, "36896658": 241, "37": [160, 161, 178], "3734087606114667": 241, "37757687e": 222, "38": [159, 160, 226], "38100997e": [221, 222], "3861": 244, "39": 158, "39502389e": [221, 222], "3992": 162, "3d": 245, "4": [10, 23, 24, 25, 159, 160, 164, 165, 170, 171, 172, 176, 177, 178, 179, 181, 183, 184, 185, 191, 196, 200, 203, 204, 205, 208, 213, 221, 222, 223, 225, 227, 229, 230, 236, 237, 242, 243, 244, 245, 247, 253], "40": [159, 160], "4000": [158, 165], "406": [208, 214, 219, 232, 246], "41": 158, "41059163e": 222, "4157": 162, "41715762e": [221, 222], "42": [178, 244], "42083430e": 221, "4216761": 241, "4231569": 241, "4246376": 241, "42477691e": 221, "43": [178, 244], "4392": 162, "44408584e": [221, 222], "44632760e": 222, "4475": 162, "44803086": 241, "4495116": 241, "4499": 244, "44993666e": 222, "4549": 162, "455": [241, 244], "456": [208, 214, 219, 232, 246], "4585028e": 222, "46642041e": 222, "4667": 165, "4694": 162, "4706": 162, "47438562": 241, "4758663": 241, "4784": 162, "48": [178, 244], "48045555e": 222, "48399768e": [221, 222], "485": [208, 214, 219, 232, 246], "4863": 162, "49": [161, 178, 244], "49024737e": [221, 222], "4d": 245, "4f": [219, 220, 246, 249], "5": [160, 161, 162, 164, 165, 166, 171, 172, 175, 176, 178, 189, 190, 191, 192, 193, 196, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 214, 220, 221, 222, 223, 224, 227, 229, 232, 241, 242, 243, 244, 245], "50": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 224, 227, 232, 244], "500": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 208, 210, 211, 212, 213, 214, 218, 223, 232, 246, 248], "5000": [194, 208], "50000": [192, 219, 227, 232, 246], "5000e": [164, 165], "5006": 228, "50074035": 241, "5022211": 241, "51": 158, "512": [236, 237], "51446089e": [221, 222], "51547194e": [221, 222], "5157": 244, "51876003e": 221, "52": [158, 244], "521": 158, "5220": 162, "5255": 162, "52709514": 241, "52912678e": [221, 222], "52974629e": 221, "5301": 244, "5307": 244, "5333": [162, 165], "53403008e": [221, 222], "53976866e": [221, 222], "54": 178, "54620111e": [221, 222], "55": [161, 178, 244], "55344987": 241, "5540": 162, "5549306": 241, "55578518e": 222, "56": 244, "56632766e": 221, "5695": 162, "57": [159, 160, 178], "57021021e": 222, "57980466": 241, "57984132e": [221, 222], "58": 244, "5856506e": 222, "5876": 220, "5897": 162, "59": [161, 178, 244], "5962": 244, "59643137e": 221, "5e": [204, 205, 209, 211, 212], "6": [10, 21, 23, 160, 164, 165, 172, 176, 178, 179, 185, 195, 196, 197, 198, 199, 205, 207, 210, 211, 212, 221, 222, 232, 242, 243, 245, 246, 249, 253], "60": 178, "6000": [158, 159, 160, 165], "6039": 162, "6054": 162, "6061594": 241, "60713138e": [221, 222], "6079": 162, "6091": 244, "61": 178, "61087702e": 221, "6177": 162, "6196": 162, "62": 178, "6213797e": 222, "6247": 162, "62498877e": [221, 222], "63": [161, 244], "63172388e": 221, "6325141": 241, "6327": 244, "6340": 244, "64": [21, 161, 170, 178, 179, 201, 214, 218, 219, 232, 241, 244, 245, 246, 249, 251], "6431": 162, "64579314e": [221, 222], "65": [224, 244], "65535": 244, "6583": 249, "6588689": 241, "66": [161, 203, 204, 205, 224, 244], "6603496": 241, "6667": 165, "6695": 162, "67278278e": [221, 222], "67416465e": 222, "67510852e": [221, 222], "67677957e": [221, 222], "68": [158, 244], "68016": 249, "68522364": 241, "6867044": 241, "69": 244, "6910": 249, "69716495e": 222, "7": [160, 164, 165, 166, 176, 178, 179, 204, 205, 207, 209, 210, 211, 212, 221, 222, 230, 242, 243, 246, 249, 253], "70": 178, "7013": 246, "70130579e": 222, "70838": 249, "71": 160, "7115784": 241, "7164": 219, "71659231e": [221, 222], "7173": 246, "72": 244, "72468403e": 222, "73242160e": 221, "7333": 165, "73793316": 241, "74": 161, "74478185e": 221, "7466": 244, "75": [224, 244], "75162792e": 222, "75700430e": [221, 222], "76": 178, "76428795": 241, "77": [178, 244], "77213307e": 221, "7741": 162, "7765": 162, "7788": 244, "7793": 244, "78": 244, "7894": 162, "79": 244, "7932": 162, "8": [13, 24, 25, 30, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 227, 229, 230, 232, 234, 238, 239, 241, 242, 243, 244, 245, 246, 249], "80": [161, 227, 244], "8000": [162, 165], "80053532e": 221, "8078": 162, "81": 244, "81699747": 241, "81760912e": 221, "8188": 244, "81884710e": 221, "8229": 162, "83": [161, 178, 244], "83640555e": 222, "8366": 244, "83861901e": [221, 222], "84": 178, "8405": 244, "8433522": 241, "8442": 244, "85": 244, "86": [161, 244], "8606": 244, "864": [214, 221, 222], "8667": 165, "86945379e": 221, "8706": 162, "8711877": 241, "87471542e": [221, 222], "87630311e": [221, 222], "87656835e": 221, "8796": 162, "88": 244, "88260233e": [221, 222], "8836": 162, "88373709e": 222, "89": [161, 244], "89074164e": 222, "89249423e": [221, 222], "89348674e": 221, "8984": 166, "8994": 166, "8998": 166, "8bit": 253, "9": [158, 164, 165, 172, 176, 178, 203, 204, 205, 206, 207, 210, 211, 212, 213, 220, 221, 222, 227, 232, 242, 243, 253], "90": [232, 244], "90229788e": [221, 222], "9054": 244, "91": [178, 244], "9150": 244, "9157": 162, "9176": 162, "92": 178, "9216": 172, "92511864e": [221, 222], "93": [178, 244], "93232973e": [221, 222], "9333": 165, "93787616e": 221, "94": [161, 178], "9487": 162, "94877124": 241, "9490": 162, "95": 178, "95088911e": [221, 222], "95260113e": 221, "9570": 178, "95997976e": [221, 222], "96": [178, 244], "9609": 178, "96155685e": 221, "9648": 178, "9688": 178, "97": 158, "9700": 162, "9714": 244, "9727": 178, "97294299e": [221, 222], "9766": 178, "9805": 178, "9826": 244, "9844": 178, "9883": 178, "99": 244, "9904": 244, "9922": 178, "9961": [162, 178], "A": [24, 25, 27, 28, 29, 170, 174, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 225, 226, 227, 229, 232, 234, 236, 239, 245, 246, 247, 248, 249, 257], "And": [188, 201, 206, 257], "As": [30, 188, 190, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 218, 219, 224, 225, 232, 242, 245, 252], "At": [224, 228], "But": [172, 188, 195, 196, 200, 201, 206, 209, 213, 226, 234], "By": [18, 29, 175, 176, 179, 195, 206, 207, 209, 210, 211, 212, 214, 223, 226, 227, 229, 246, 248, 249], "For": [9, 10, 21, 23, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 172, 173, 175, 176, 177, 178, 179, 184, 185, 187, 188, 192, 195, 196, 197, 200, 201, 206, 209, 213, 214, 217, 218, 219, 222, 223, 224, 225, 226, 232, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258], "If": [18, 21, 24, 25, 29, 30, 100, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 232, 234, 236, 238, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 258], "In": [21, 30, 160, 171, 172, 173, 175, 179, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 224, 225, 226, 228, 230, 232, 233, 236, 237, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257], "It": [1, 2, 9, 10, 21, 171, 172, 179, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 214, 215, 218, 219, 223, 225, 230, 232, 238, 243, 246, 247, 249, 253], "Its": 230, "NOT": [25, 183, 201, 219], "No": [173, 221, 257], "Not": [176, 177, 184, 187, 188, 195, 200, 201, 209, 213, 218, 220, 225, 238, 245, 249], "ONE": 241, "OR": 171, "Of": [198, 199, 201, 203, 204, 205, 211, 212], "On": [188, 201, 206], "One": [189, 190, 191, 192, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 218, 248], "Or": [172, 185, 217, 218, 226], "Such": 172, "That": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 230], "The": [7, 10, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258], "Then": [9, 10, 23, 177, 179, 184, 185, 211, 212, 218, 226, 246, 249], "There": [169, 171, 173, 185, 188, 189, 192, 193, 195, 196, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 217, 218, 219, 249, 257, 258], "These": [25, 171, 173, 175, 183, 185, 188, 190, 194, 196, 201, 206, 208, 210, 214, 218, 219, 223, 224, 232, 236, 237, 243, 248, 249, 250, 254], "To": [13, 21, 30, 171, 174, 175, 176, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 220, 221, 222, 225, 227, 228, 232, 234, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 254, 257, 258], "With": [158, 197, 200, 213, 241, 249], "_": [21, 30, 161, 162, 165, 168, 175, 177, 178, 179, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 232, 236, 238, 240, 241, 245, 246, 247, 248, 249, 253, 256, 257, 258], "__________________________________________________________________________________________________": [214, 221, 222], "__getitem__": 208, "__init__": [21, 25, 172, 173, 175, 183, 189, 197, 208, 214, 219, 232, 246, 251, 252, 253], "__iter__": [189, 214, 219, 232, 246], "__len__": [189, 208], "__next__": [189, 214, 219, 232, 246], "__quant_init__": [30, 175], "__torch_function__": 172, "__version__": 243, "_batch_index": 219, "_create_sampled_data_load": 208, "_current_iter": [214, 219, 232, 246], "_data": [214, 219, 232, 246], "_dataset": 208, "_default_forward_fn": [25, 183, 219], "_get_unlabled_data_load": 218, "_is_encoding_frozen": 171, "_iter": 189, "_max": 166, "_module_to_wrap": 171, "_not_specifi": [179, 246, 249], "_quantizationsimmodelinterfac": [177, 182, 184, 185, 218], "_quantschemepair": [25, 183, 219], "_remove_input_quant": 171, "_remove_output_quant": 171, "_remove_param_quant": 171, "_step": [164, 165], "_tie_quant": 253, "_torch_data_load": 189, "_unlabel": [214, 219, 232, 246], "ab": 202, "abil": [253, 258], "abl": [21, 25, 158, 159, 160, 172, 173, 183, 189, 190, 191, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 219], "about": [158, 189, 190, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 222, 240, 244, 245, 247, 258], "abov": [172, 174, 188, 192, 200, 201, 203, 204, 205, 206, 213, 218, 223, 226, 227, 228, 229, 230, 234, 242, 243, 245, 248, 249], "absolut": [10, 23, 161, 162, 179, 185, 223, 227, 229, 232, 242, 246, 249], "absolute_path_to_workspac": [187, 242], "absorpt": [190, 202, 210], "abstract": [30, 160, 175], "acc": [194, 195, 196, 200, 218, 219], "acc_top1": 219, "acccuraci": 192, "acceler": [191, 196, 198, 199, 211, 212, 223, 226, 227, 229, 239, 253], "accept": [225, 232, 253, 254, 257, 258], "access": [171, 196, 206, 207, 210, 211, 212], "accord": [169, 179, 217, 246, 249], "accordingli": 253, "account": [225, 253, 254], "accumul": [224, 226, 227, 229, 231], "accur": [196, 214, 221], "accuraci": [24, 25, 29, 176, 181, 182, 183, 195, 196, 200, 208, 209, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 238, 239, 240, 245, 246, 248, 249, 253, 254], "achiev": [178, 189, 193, 201, 207, 224, 233, 234, 239, 257, 258], "acronym": 240, "across": [172, 176, 218, 222, 231, 239, 241, 248], "act": [174, 177, 182, 184, 188, 218, 232], "act_bw": 210, "action": [218, 230], "activ": [21, 168, 170, 172, 174, 175, 176, 177, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258], "activation_bitwidth": [214, 246, 247, 249], "activation_encod": 247, "activations_pdf": [200, 213, 218], "actual": [188, 192, 195, 197, 206, 209, 215, 218], "acuraci": [192, 232], "ad": [173, 176, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 235, 246, 247, 250, 253], "ada_model": [189, 193, 201, 207], "ada_round_data": [193, 201], "ada_rounded_model": 214, "adam": [194, 195, 196, 198, 199, 200, 218], "adamw": [236, 237], "adapater_name_to_meta_data": 176, "adapt": [24, 26, 176, 180, 181, 186, 187, 195, 201, 209, 218, 219, 220, 235, 236, 237, 238, 239, 253], "adapter1": 176, "adapter1_weight": 176, "adapter_weights_path": 176, "adaptermetadata": 176, "adaptiveavgpool1d": 31, "adaptiveavgpool2d": 32, "adaptiveavgpool3d": 33, "adaptivemaxpool1d": 34, "adaptivemaxpool2d": 35, "adaptivemaxpool3d": 36, "adaptiveround": 253, "adaround": [6, 19, 25, 167, 171, 183, 187, 194, 208, 214, 218, 219, 239, 253, 254], "adaround_data_load": [208, 219], "adaround_dataset": 194, "adaround_dataset_s": [194, 208, 219], "adaround_param": [25, 183, 194, 208, 219], "adaround_weight": [24, 171, 181, 189, 193, 194, 201, 207, 208, 214, 219], "adarounded_model": 214, "adaroundparamet": [24, 25, 181, 183, 189, 193, 194, 201, 207, 208, 214, 219], "add": [21, 172, 173, 175, 176, 185, 191, 195, 198, 199, 203, 204, 205, 211, 212, 230, 247, 248, 250, 251, 252, 253, 257, 258], "add_check": 173, "add_lora_to_r": 237, "addit": [30, 178, 179, 185, 188, 195, 196, 197, 200, 201, 206, 209, 213, 220, 245, 246, 247, 249, 250, 253, 256], "address": [228, 254], "adequ": 257, "adher": 258, "adjac": [188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 221, 222, 231, 239, 250], "adjust": [10, 23, 168, 179, 185, 202, 210, 214, 216, 223, 224, 231, 236, 237, 245, 246, 249, 254], "admin": 187, "advanc": [178, 239, 253], "advantag": 238, "affect": [24, 181, 214, 239, 245, 250, 258], "affin": [30, 158, 159, 160, 161, 162, 163, 164, 165, 170, 175, 176, 221, 222, 236, 244, 245], "affine_q": 171, "affine_qdq": 171, "affine_quant": 171, "affinequant": [166, 171], "after": [166, 172, 173, 175, 177, 178, 184, 185, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 221, 222, 224, 226, 228, 239, 249, 253, 254], "again": [190, 201, 202, 203, 204, 205, 210, 232, 249, 258], "against": [177, 184, 198, 199, 201, 209, 211, 212, 218, 223], "aggress": 239, "agre": 258, "ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "aim": [195, 203, 204, 205, 209, 258], "aimet": [6, 18, 19, 21, 29, 30, 171, 172, 173, 175, 176, 178, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 238, 239, 241, 245, 246, 247, 249, 251, 252, 253, 254, 256, 258], "aimet_cl": 202, "aimet_common": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "aimet_common_def": 227, "aimet_export_artifact": 217, "aimet_exported_model": 256, "aimet_exported_model_path": 256, "aimet_onnx": [188, 189, 190, 191, 214, 217, 218, 219, 221, 222, 232, 241, 243, 246, 247], "aimet_spatial_svd": 227, "aimet_tensorflow": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 214, 217, 218, 219, 220, 221, 222, 227, 232, 241, 243, 246, 247, 249], "aimet_tensorflow_def": 227, "aimet_torch": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 188, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 249, 253], "aimet_vari": 242, "algo": [182, 232], "algorithm": [18, 29, 182, 223, 224, 225, 226, 227, 229, 230, 247, 254], "alia": [179, 185, 246, 249], "aliasbackward0": [158, 159, 160, 161, 162, 178, 244], "align": [250, 253], "all": [9, 21, 27, 30, 100, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 222, 223, 225, 226, 227, 229, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 257], "all_q_modul": 171, "all_quant_wrapp": 171, "allclos": 172, "allow": [18, 21, 25, 29, 158, 159, 160, 170, 172, 182, 183, 188, 192, 194, 196, 206, 208, 215, 219, 223, 226, 227, 228, 229, 231, 232, 233, 245, 247, 252, 253, 254], "allow_custom_downsample_op": [29, 203, 205, 223], "allow_overwrit": [171, 214, 237, 246, 249], "allowed_accuracy_drop": [25, 182, 183, 188, 192, 194, 206, 208, 219, 232], "alon": [176, 248], "along": [159, 176, 178, 232, 248], "alpha": [176, 232], "alphadropout": 37, "alreadi": [28, 30, 178, 179, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 222, 236, 242, 246, 249, 254], "also": [24, 160, 172, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 218, 221, 223, 226, 230, 232, 234, 241, 243, 247, 250, 252, 253, 256, 257], "alter": [189, 193, 201, 207], "altern": [9, 177, 184, 188, 192, 203, 204, 205, 206, 218, 243, 245], "alwai": [225, 236, 237], "am": [177, 184, 218], "among": [24, 25, 181, 183, 214, 219, 257], "amount": [200, 213, 232, 238], "amp": [13, 25, 167, 174, 182, 183, 187, 219, 232, 233, 253], "amp_search_algo": [182, 188, 206], "ampsearchalgo": [182, 188, 206], "an": [21, 25, 29, 30, 158, 159, 160, 166, 168, 170, 171, 172, 173, 175, 178, 179, 182, 183, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 229, 230, 232, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "analys": [200, 213, 218], "analysi": [18, 29, 177, 182, 184, 188, 192, 196, 203, 204, 205, 206, 223, 226, 227, 229, 253], "analyt": 228, "analyz": [9, 18, 29, 161, 162, 175, 177, 184, 187, 194, 208, 219, 223, 227, 228, 229, 231, 234, 241, 253], "anchor": [148, 149], "andrea": 226, "andrei": 226, "andrew": 226, "ani": [21, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 172, 173, 174, 179, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 223, 227, 229, 232, 234, 236, 238, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 257], "anneal": [24, 181, 214], "anoth": [176, 179, 185, 196, 229, 230, 239, 246, 247, 249, 250], "any_nam": 242, "any_tag": 242, "anyth": [182, 188, 192, 200, 206, 213], "api": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 168, 169, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 228, 236, 237, 239, 242, 247, 251, 252, 253, 256], "appear": [29, 172, 173, 223, 227, 229], "append": 242, "appli": [2, 9, 25, 30, 100, 161, 162, 163, 164, 165, 170, 173, 174, 175, 180, 183, 186, 187, 188, 195, 196, 203, 204, 205, 206, 208, 209, 214, 218, 219, 221, 222, 226, 228, 231, 232, 236, 238, 239, 240, 241, 245, 246, 248, 249, 250, 253, 254, 257, 258], "applic": [182, 188, 189, 192, 193, 194, 198, 199, 200, 201, 202, 206, 207, 210, 214, 218, 219, 220, 221, 222, 227, 232, 246, 249, 256, 258], "apply_adaround": [24, 181, 189, 193, 201, 207, 214], "apply_seq_ms": [171, 180, 186, 238], "approach": [174, 234, 236, 248], "appropri": [24, 175, 179, 181, 182, 185, 188, 192, 195, 196, 200, 201, 206, 209, 213, 214, 225, 232, 236, 237, 241, 246, 248, 249, 254], "approx": 248, "approxim": [218, 224, 238, 248, 258], "apt": [241, 243], "ar": [10, 13, 18, 21, 23, 24, 25, 29, 30, 100, 161, 162, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258], "arang": [164, 165, 172, 178], "arbitrari": 245, "architectur": [197, 239, 241, 243, 253], "archiv": 243, "area": [218, 231], "arg": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 170, 174, 175, 179, 197, 232, 234, 245, 246, 249, 253], "argmax": [214, 219, 232, 246, 249], "argument": [2, 13, 24, 25, 30, 166, 170, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 200, 213, 214, 217, 218, 219, 232, 238, 245, 246, 247, 249, 256], "around": [196, 201, 218], "arrai": [170, 189, 245, 247], "arrang": 228, "art": [188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213], "arthmet": [21, 197], "artifact": [174, 196, 233, 234, 242, 253, 256, 257], "arxiv": 202, "asic": 239, "ask": [30, 188, 192, 195, 196, 200, 206, 209, 213], "assert": [171, 172, 178, 197, 206], "assert_array_equ": 197, "assess": 225, "assign": [30, 161, 162, 166, 175, 176, 198, 199, 232, 242, 245], "associ": [25, 30, 160, 173, 174, 175, 178, 182, 183, 200, 213, 219, 232, 256], "assum": [25, 170, 183, 219, 225, 243, 245], "astyp": [218, 219], "asym": [180, 186, 238], "asymmetr": [161, 162, 178, 248, 250], "att": [21, 197], "attempt": 222, "attent": [21, 196, 197], "attention_mask": [236, 237], "attn_output": [21, 197], "attribut": [13, 21, 30, 171, 172, 174, 175, 176, 178, 182, 201, 218, 232], "augment": 228, "auto": [18, 29, 188, 192, 203, 204, 205, 206, 223, 227, 229, 232, 233, 247], "auto_param": [203, 204, 205, 223, 227, 229], "auto_qu": [194, 208, 219], "auto_quant_v2": [19, 219], "autoconfig": [236, 237], "autograd": [158, 159, 160], "autom": [172, 206, 207, 210, 211, 212, 213, 239, 252], "automat": [18, 25, 29, 174, 183, 187, 194, 208, 218, 223, 224, 226, 227, 229, 239, 242, 243, 245, 253], "automodelforcausallm": [236, 237], "automodeparam": [18, 29, 203, 204, 205, 223, 227, 229], "autoqu": [6, 25, 167, 183, 187, 219, 239, 253], "autoquantwithautomixedprecis": [25, 183, 219], "autotoken": [236, 237], "avail": [172, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 218, 238, 241, 250, 253, 254, 255, 256], "avgpool1d": 38, "avgpool2d": [39, 234], "avgpool3d": 40, "avoid": [9, 177, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 214, 218, 224, 239, 251, 252, 253], "awai": 201, "awar": [30, 187, 214, 220, 226, 231, 238, 239, 248, 254, 258], "axi": [178, 200, 213, 214, 218, 219, 232, 246, 247, 248], "b": [30, 161, 162, 163, 164, 165, 176, 178, 192, 227, 232, 245], "b_": [161, 162, 163, 164, 165], "b_0": [161, 162, 163, 164, 165], "b_1": [161, 162, 163, 164, 165, 245], "b_2": 245, "b_d": [161, 162, 163, 164, 165], "b_n": 245, "back": [2, 13, 158, 159, 174, 177, 182, 184, 218, 232, 248, 249, 250], "backend": [179, 185, 195, 233, 246, 249, 256, 257], "backpropag": [158, 159, 160], "backslash": 253, "backward": [167, 220, 221, 236, 237, 246, 249, 253], "bad": 21, "balanc": [226, 239, 258], "bandwidth": 224, "base": [10, 23, 30, 160, 161, 162, 164, 165, 166, 171, 175, 176, 177, 178, 179, 182, 184, 185, 188, 189, 192, 193, 194, 195, 201, 206, 207, 208, 209, 218, 223, 224, 225, 228, 232, 233, 235, 237, 238, 241, 243, 245, 246, 249, 253, 256, 257], "base_encod": 176, "base_model": 176, "baselin": [182, 195, 196, 208, 225, 226, 232, 249], "bash": 242, "basi": [201, 253], "basic": [188, 192, 195, 196, 206, 209, 232, 245, 249, 253, 256], "batch": [24, 25, 26, 166, 174, 180, 181, 182, 183, 186, 192, 194, 195, 203, 204, 205, 209, 214, 218, 219, 222, 227, 232, 236, 237, 238, 239, 246, 249, 253], "batch_cntr": [188, 189, 190, 191, 193, 198, 199, 201, 202, 207, 209, 210, 211, 212, 213, 219], "batch_data": [214, 219, 232, 246], "batch_id": [236, 237], "batch_norm": [27, 221], "batch_norm_fold": [6, 19, 167, 188, 189, 190, 191, 192, 193, 195, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 220, 221, 232, 249], "batch_siz": [24, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 227, 232, 236, 237, 238, 246, 249], "batchnorm": [21, 25, 26, 183, 187, 188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 214, 219, 220, 221, 222, 230, 253], "batchnorm1d": [27, 43, 221], "batchnorm2d": [27, 44, 173, 221, 222], "batchnorm3d": 45, "batchnrom": 209, "bc": 190, "bc_param": 210, "bceloss": 41, "bcewithlogitsloss": 42, "becaus": [21, 172, 197, 209, 245, 257], "becom": 253, "becuas": [21, 197, 217], "been": [21, 30, 158, 168, 173, 194, 195, 196, 201, 208, 216, 230, 236, 239, 243, 244, 247, 248, 253, 256], "befor": [1, 2, 9, 10, 30, 168, 171, 175, 178, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 226, 232, 235, 236, 237, 246, 248, 249, 251, 253, 257], "begin": [21, 161, 162, 163, 164, 165, 172, 173, 197, 240], "behav": [30, 100, 175, 253, 254], "behavior": [171, 172, 175, 188, 201, 206, 207, 210, 211, 212, 221, 240, 248, 250, 253, 257], "behind": 257, "being": [29, 171, 172, 173, 177, 184, 218, 220, 223, 227, 229, 245, 247, 251, 252, 253], "below": [21, 30, 161, 162, 164, 165, 171, 174, 175, 176, 178, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 223, 225, 226, 228, 232, 234, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254], "benefici": [188, 192, 195, 196, 200, 201, 206, 213], "benefit": [233, 245, 247, 248], "bert": 254, "besid": 245, "bespok": 236, "best": [25, 174, 183, 194, 201, 208, 219, 224, 226, 231, 234, 241, 248], "beta": [24, 181, 214, 253], "better": [189, 193, 198, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 219, 226, 245, 249, 257], "between": [18, 24, 29, 169, 171, 174, 175, 177, 181, 182, 184, 188, 201, 206, 214, 215, 217, 218, 223, 227, 229, 231, 232, 238, 239, 245, 248, 250, 258], "bfloat16": 166, "bia": [30, 166, 171, 172, 173, 175, 176, 179, 190, 195, 202, 221, 222, 223, 244, 246, 249, 250, 253], "bias": [188, 190, 202, 206, 210, 221], "bias_correct": 210, "bilinear": 46, "billion": [257, 258], "bin": [176, 242, 243, 256], "binari": [182, 188, 206, 256], "binary_classifi": 21, "binary_fil": 256, "binary_file_nam": 256, "bit": [24, 166, 170, 177, 178, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 231, 233, 236, 239, 241, 244, 245, 247, 248, 253, 254, 257, 258], "bitop": 182, "bitwidth": [24, 25, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 192, 193, 201, 206, 207, 214, 218, 219, 222, 232, 233, 236, 239, 241, 245, 246, 247, 248, 249, 257], "biwidth": [189, 193, 201, 207], "blankevoort": 226, "block": [25, 161, 162, 163, 164, 165, 170, 171, 183, 196, 219, 236, 237, 242, 247, 248, 253], "block_group": [170, 245], "block_siz": [161, 162, 163, 164, 165, 170, 178, 245, 247], "blockwis": [170, 178, 247, 248, 253], "bn": [26, 27, 188, 189, 190, 191, 193, 195, 198, 199, 201, 202, 206, 207, 210, 211, 212, 218, 220, 221, 231, 239, 253], "bn1": [21, 173], "bn2": 21, "bn_conv1": [214, 221, 222], "bn_num_batch": 220, "bn_reestim": [167, 195, 209, 220], "bnf": [214, 220, 221, 222], "bokeh": 232, "bool": [25, 29, 161, 162, 164, 165, 166, 170, 172, 173, 174, 176, 179, 182, 183, 185, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 219, 223, 227, 229, 232, 234, 245, 246, 247, 249], "boolean": [30, 174, 234], "both": [21, 164, 165, 171, 172, 175, 177, 184, 188, 192, 199, 205, 206, 211, 212, 218, 221, 226, 227, 228, 230, 232, 235, 238, 241, 244, 246, 248, 249, 250, 254, 256, 258], "bottleneck": 254, "box": 253, "bq": [170, 245, 253], "branch": [172, 187, 250], "break": [188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 207, 209, 210, 211, 212, 213, 219, 227, 232, 236, 237, 246, 249, 253], "bridg": 233, "british": 226, "broken": [235, 247], "browser": 187, "bruteforc": [188, 206], "buffer": 166, "bug": [247, 253], "bugfix": 253, "build": [21, 171, 197, 243], "built": [30, 174, 175, 182, 195, 196, 232, 241], "bw": [25, 170, 174, 176, 179, 182, 183, 185, 219, 232, 245, 246, 247, 249, 252], "bw_output": 252, "c": [178, 224, 243], "c_": 178, "cach": [25, 182, 183, 188, 192, 206, 219, 232, 243, 253], "cache_id": [25, 183, 219], "calcul": [10, 23, 25, 175, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 218, 219, 225, 232, 235, 236, 246, 248, 249, 253], "calculate_and_fuse_encodings_into_weight": 236, "calibr": [10, 161, 162, 168, 175, 177, 179, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 215, 216, 232, 233, 236, 238, 239, 244, 245, 248, 253, 254, 257], "calibration_batch": [232, 249], "calibration_callback": [236, 237], "calibration_data_load": [175, 246], "calibration_data_s": 246, "calibration_dataset": [214, 220, 246, 249], "calibration_dataset_s": [194, 208, 219], "call": [2, 9, 13, 21, 25, 30, 100, 158, 159, 160, 166, 172, 174, 175, 177, 178, 182, 183, 184, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 218, 219, 223, 227, 229, 232, 234, 245, 246, 251, 253, 256, 257, 258], "call_funct": 172, "callabl": [2, 13, 24, 25, 26, 29, 30, 170, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 186, 214, 218, 219, 220, 223, 227, 229, 232, 238, 245, 246, 249], "callback": [29, 174, 177, 182, 184, 185, 192, 194, 196, 198, 199, 200, 203, 204, 205, 213, 219, 223, 227, 229, 232, 236, 238, 248, 249], "callbackfunc": [2, 13, 174, 177, 182, 184, 188, 192, 200, 206, 213, 218, 232], "callbak": [188, 206], "can": [7, 9, 10, 20, 21, 23, 24, 27, 28, 158, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258], "candid": [13, 18, 25, 29, 174, 180, 182, 183, 186, 188, 192, 206, 219, 223, 225, 226, 227, 229, 232, 238, 253], "cannot": [161, 162, 172, 173, 188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212], "capabl": [175, 228, 241, 244], "captur": [169, 172, 179, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 215, 217, 246, 249], "card": [241, 244], "care": 226, "carefulli": 239, "carri": [158, 159, 160], "case": [164, 165, 170, 171, 172, 173, 175, 176, 196, 197, 200, 213, 214, 218, 225, 234, 235, 244, 245, 250, 252, 253, 258], "cast": 166, "cat": [178, 243], "categor": [192, 193, 198, 199, 201, 214, 219, 220, 227, 232, 246, 249], "categorical_crossentropi": [198, 199], "categoricalaccuraci": [194, 195, 200, 214, 218, 219, 220, 246, 249], "categoricalcrossentropi": [194, 195, 200, 214, 218, 219, 220, 246, 249], "caus": [21, 203, 204, 205, 226, 250, 254], "caution": 214, "cd": 187, "cdot": [161, 162, 163, 164, 165], "ceil": [24, 181, 214, 219, 232, 246], "cell": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "celu": 47, "center": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "center_crop": [192, 232], "centercrop": [206, 208, 214, 219, 232, 246], "certain": [172, 177, 184, 206, 207, 210, 211, 212, 213, 218, 226, 232, 234, 247, 250, 252, 253], "chain": [236, 237], "challeng": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "chang": [160, 168, 171, 172, 176, 178, 179, 182, 188, 189, 190, 191, 192, 195, 196, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 220, 221, 222, 226, 230, 232, 233, 234, 238, 246, 247, 249, 250, 252, 253, 257], "channel": [18, 29, 170, 175, 176, 177, 184, 187, 188, 189, 190, 191, 202, 204, 206, 207, 209, 210, 211, 212, 213, 218, 219, 220, 221, 222, 224, 225, 227, 229, 230, 231, 239, 245, 247, 248, 250, 253, 254], "channel_index": [177, 184, 218], "channel_index_0": [200, 213], "channel_index_1": [200, 213], "channel_index_n": [200, 213], "channel_prun": [29, 203, 205, 223, 227, 229], "channel_pruning_auto_mod": 223, "channel_pruning_manual_mod": 223, "channelpruningparamet": [29, 203, 205, 223, 227, 229], "channelshuffl": 49, "characterist": [188, 206, 209, 213], "chart": [222, 254], "check": [21, 25, 172, 173, 178, 183, 188, 192, 195, 196, 200, 206, 209, 213, 215, 217, 219, 242, 252], "check_model_sensitivity_to_quant": [177, 184, 218], "checker": [173, 253], "checkpoint": [180, 185, 186, 238], "checkpoints_config": [180, 186, 238], "chipset": 257, "choic": [200, 201, 213, 218, 226, 241, 242, 247, 248], "choos": [185, 188, 192, 203, 204, 205, 206, 214, 217, 223, 224, 226, 232, 239, 243, 250, 253], "choose_fast_mixed_precis": 192, "choose_mixed_precis": [174, 182, 188, 192, 206, 232], "chosen": [187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 242], "chunk": 248, "cin": 178, "circularpad1d": 50, "circularpad2d": 51, "circularpad3d": 52, "cl": [30, 190, 202, 210, 253], "clamp": [161, 162, 164, 165, 166, 248], "class": [2, 10, 13, 18, 21, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 245, 246, 249, 250, 251, 252], "class_nam": [192, 197, 227, 232], "classif": [21, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 226, 238, 239], "classifi": 21, "classmethod": 30, "cle": [28, 187, 214, 218, 219, 222, 253, 254], "cle_applied_model": [202, 222], "clean": 232, "clean_start": [182, 188, 192, 206, 232], "clear_sess": 195, "clearli": 253, "clip": [195, 221, 248, 250], "clone": [160, 187, 196], "clone_lay": 196, "close": [224, 248], "closer": [189, 193, 201, 207], "cloud": [239, 242, 257], "cmp_re": 232, "cnn": 239, "cnt": [192, 227, 232], "code": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 222, 241, 242, 244, 245], "codelinaro": 242, "collate_fn": [236, 237], "collect": [25, 168, 177, 183, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 215, 216, 218, 219, 225, 239], "color": 230, "column": 225, "com": [187, 241, 242, 243], "combin": [172, 182, 188, 192, 206, 219, 224, 226, 239, 242, 245, 253], "come": [226, 233, 249], "command": [187, 228, 241, 242, 243, 244, 256], "common": [171, 176, 178, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 242, 243, 245, 253, 254], "commonli": [24, 178, 181, 214, 239], "comp": [18, 29, 223, 227, 229], "comp_stat": [203, 204], "compar": [172, 182, 188, 192, 195, 196, 197, 200, 206, 209, 213, 218, 233, 239, 249, 257], "comparison": [189, 190, 191, 207, 210, 211, 212, 215, 217], "compat": [167, 170, 192, 195, 196, 232, 241, 244, 245, 246, 252, 253], "compil": [194, 195, 196, 198, 199, 200, 214, 218, 219, 220, 246, 249, 253, 258], "complet": [182, 188, 192, 203, 204, 205, 206, 227, 232, 243, 254, 256], "complex": [185, 196, 218, 234], "compli": [206, 207, 210, 211, 212, 213], "complic": 253, "compon": [171, 178, 246, 253], "compos": [174, 206, 208, 214, 219, 232, 234, 244, 246], "compress": [19, 167, 187, 230, 239, 240, 247, 253], "compress_model": [29, 203, 204, 205, 223, 227, 228, 229], "compress_schem": [29, 203, 204, 205, 223, 227, 229], "compressed_bw": 247, "compressed_model": [203, 204, 223, 227, 229], "compressionschem": [29, 203, 204, 205, 223, 227, 229], "compressionstat": [29, 223, 227, 229], "compressor": [29, 223, 227, 229], "compris": [188, 192, 206, 225], "compromis": [203, 204, 205], "compuat": [25, 183, 219], "comput": [10, 23, 25, 29, 30, 100, 166, 176, 177, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 217, 218, 219, 221, 223, 226, 227, 228, 229, 230, 232, 236, 237, 238, 239, 241, 243, 244, 245, 247, 248, 253, 257, 258], "computation": 228, "compute_encod": [30, 159, 160, 161, 162, 166, 168, 171, 174, 175, 178, 179, 180, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 214, 216, 220, 232, 234, 236, 237, 238, 244, 246, 249], "computeencod": 241, "concat": 253, "concatenated_exampl": [236, 237], "concept": 171, "concis": 247, "concret": 172, "concrete_arg": [25, 172, 183, 219], "condit": [172, 173, 220], "confer": 226, "config": [174, 177, 179, 180, 182, 184, 185, 186, 188, 201, 206, 218, 220, 234, 236, 237, 238, 246, 249, 250, 253], "config_fil": [25, 177, 179, 183, 184, 185, 195, 200, 201, 213, 214, 218, 219, 220, 234, 238, 244, 246, 249], "config_util": [167, 245], "configr": 176, "configur": [18, 24, 25, 29, 166, 174, 176, 177, 178, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 202, 206, 207, 209, 210, 211, 212, 214, 218, 219, 223, 227, 229, 234, 236, 237, 244, 245, 246, 247, 249, 253], "confirm": 244, "conflict": [174, 234], "conform": [246, 258], "conjunct": 248, "connect": [214, 221, 222, 223, 226, 229, 239], "connectedgraph": [173, 253], "consecut": [176, 190, 202, 210, 222], "consid": [196, 203, 205, 227, 229, 254, 258], "consist": [169, 170, 171, 188, 206, 217, 225, 232, 245, 248], "consol": 215, "constant": [172, 191, 198, 211, 212, 225], "constantpad2d": [53, 54], "constantpad3d": 55, "constrain": [239, 245], "constraint": 247, "construct": [217, 242, 243, 253], "constructor": [169, 172, 217, 252], "consum": [194, 208, 219, 226, 233, 247], "contain": [29, 30, 158, 166, 168, 172, 173, 174, 175, 177, 182, 184, 189, 190, 191, 193, 194, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 216, 218, 222, 223, 227, 229, 232, 239, 240, 241, 244, 246, 247, 248, 249, 250, 256, 257], "container_nam": 242, "content": 239, "context": [30, 175, 256, 258], "contigu": [236, 237, 253], "continu": [173, 182, 185, 188, 206, 232, 236, 242, 243, 253, 254], "contrast": [21, 171, 201], "contribut": [218, 232, 241, 254], "control": [25, 172, 175, 178, 183, 219, 248], "conv": [24, 27, 170, 172, 181, 190, 195, 202, 210, 214, 221, 222, 227, 229, 230, 234, 245, 250, 253], "conv1": [21, 172, 173, 179, 195, 203, 204, 205, 214, 221, 222, 223, 227, 229, 246, 249, 252], "conv1_relu": [214, 221, 222], "conv1d": [27, 56, 221, 253], "conv2": [21, 170, 172, 195, 223, 227, 229, 245, 252], "conv2d": [21, 27, 30, 57, 170, 171, 172, 173, 175, 179, 195, 196, 201, 214, 221, 222, 223, 226, 230, 245, 246, 249, 253], "conv2d_lay": 201, "conv2dnormactiv": [221, 222, 244], "conv3d": 58, "conv_1": [21, 197, 245], "conv_2": [21, 197], "conv_weight": 221, "conv_weight_arrai": 221, "conv_weight_nam": 221, "conveni": [242, 257], "convent": [250, 253], "converg": [239, 249], "convers": [252, 253], "convert": [21, 158, 171, 172, 174, 179, 182, 192, 206, 214, 219, 221, 222, 239, 246, 249, 251, 256, 258], "convert_to_pb": 196, "convinplacelinear": 176, "convolut": [21, 170, 188, 189, 190, 191, 193, 197, 198, 199, 201, 202, 203, 205, 206, 207, 210, 211, 212, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 239, 245, 254], "convtranspose1d": [59, 253], "convtranspose2d": [27, 60, 221], "convtranspose3d": 61, "copi": [160, 166, 185, 187, 189, 206, 207, 210, 211, 212, 236, 237, 242, 248], "copy_": 171, "corp": 232, "correct": [25, 183, 190, 201, 202, 208, 213, 219, 232, 234, 239, 246, 249, 258], "correct_bia": 210, "correct_predict": [214, 219, 232, 246], "correctli": [244, 253], "correl": [188, 206, 232], "correspond": [24, 27, 166, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 194, 201, 208, 214, 217, 218, 221, 223, 230, 231, 232, 238, 241, 242, 243, 245, 246, 248, 249], "cosineembeddingloss": 62, "cosinesimilar": 63, "cost": [18, 29, 203, 205, 223, 225, 226, 227, 229, 231, 233, 248, 249], "cost_metr": [29, 203, 204, 205, 223, 227, 229], "costmetr": [29, 203, 204, 205, 223, 227, 229], "could": [171, 185, 188, 189, 190, 191, 193, 195, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 218, 230, 247, 252], "count_param": 197, "counter": [195, 209], "counterpart": 175, "cours": [198, 199, 201, 203, 204, 205, 211, 212], "cout": 178, "cover": [188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 248], "cp": [223, 224, 225, 230], "cp310": [241, 242, 243], "cp_comp_stat": 205, "cpu": [28, 172, 179, 185, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 221, 222, 232, 234, 238, 239, 241, 242, 244, 246, 249, 253], "cpuexecutionprovid": [188, 189, 190, 191], "creat": [10, 21, 25, 29, 30, 166, 168, 172, 174, 175, 176, 178, 182, 183, 185, 187, 194, 196, 200, 203, 204, 205, 208, 213, 214, 216, 217, 219, 220, 223, 226, 227, 229, 233, 234, 236, 238, 239, 244, 248, 249, 253, 256, 257, 258], "critic": 192, "crop_length": [192, 232], "cropped_imag": [192, 232], "cross": [25, 28, 183, 187, 214, 218, 219, 254], "cross_layer_equ": [6, 19, 167, 190, 202, 210, 222], "crossentropyloss": [64, 220, 236, 237, 249], "ctcloss": 48, "ctivations_pdf": [177, 184, 218], "cu118": [241, 243], "cu121": [241, 242, 243], "cuda": [188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 232, 234, 236, 237, 238, 241, 243, 244, 246, 249, 253], "cudaexecutionprovid": [188, 189, 190, 191], "cudnn": [241, 244], "cudnn_conv_algo_search": [188, 189, 190, 191], "cumul": [194, 208], "current": [13, 18, 21, 29, 30, 160, 166, 173, 174, 182, 195, 196, 197, 206, 213, 223, 227, 229, 232, 233, 253, 259], "curv": [182, 188, 192, 206, 225, 232], "custom": [21, 30, 172, 175, 188, 194, 196, 208, 239, 242, 247, 248, 249, 253, 254], "custom_function_not_to_be_trac": 172, "customdataload": [214, 219, 232, 246], "custommodel": 172, "custommodul": 172, "cycl": 257, "d": [161, 162, 163, 164, 165, 247], "dangl": [246, 249], "dark": [188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213], "data": [18, 24, 25, 26, 29, 158, 159, 160, 168, 171, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 223, 227, 229, 231, 232, 236, 237, 238, 239, 245, 246, 248, 249, 253, 254], "data_load": [24, 25, 29, 168, 174, 180, 181, 182, 183, 186, 188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 219, 220, 223, 232, 238, 246, 249], "data_loader_wrapp": 192, "data_set": [193, 201, 214], "data_typ": [25, 171, 179, 183, 185, 219, 246, 249], "datacent": 242, "dataload": [24, 25, 26, 174, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 232, 236, 237, 238, 246, 249], "dataloader_wrapp": [192, 232], "dataloadermnist": 223, "dataparallel": 249, "dataset": [25, 26, 177, 179, 182, 183, 184, 187, 196, 214, 218, 219, 220, 227, 232, 236, 237, 238, 244, 246, 248, 249, 257], "dataset_dir": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 232], "dataset_train": [198, 199], "dataset_valid": [198, 199], "datatyp": [25, 183, 219, 247], "de": [178, 248], "deb": 243, "debian": [241, 243], "debug": [171, 192, 215, 217, 247, 253], "decai": 226, "decid": [180, 186, 188, 189, 190, 191, 192, 193, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 228, 232, 238, 242], "decim": [203, 204, 205, 223, 227, 229], "decis": 258, "declar": 30, "decode_predict": [192, 227, 232], "decompos": [226, 227, 229], "decomposit": [204, 205, 226, 227, 229], "decompress": [170, 245], "decompressed_bw": [170, 245], "decor": 30, "decreas": 239, "dedic": 239, "deem": 257, "deep": [221, 226, 233, 239], "deepcopi": 189, "def": [2, 10, 13, 18, 21, 23, 29, 30, 171, 172, 173, 174, 179, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 223, 227, 229, 232, 236, 237, 238, 244, 246, 249, 251, 252], "default": [18, 24, 25, 29, 30, 160, 161, 162, 164, 165, 166, 168, 172, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 234, 238, 239, 243, 244, 246, 247, 248, 249, 253], "default_activation_bw": [188, 189, 190, 191, 214, 218, 232, 246], "default_beta_rang": [24, 181, 214], "default_bitwidth": 232, "default_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "default_config_fil": [24, 181, 214], "default_config_per_channel": [195, 250], "default_data_col": [236, 237], "default_data_typ": [179, 185, 246, 249], "default_forward_fn": [180, 186, 238], "default_num_iter": [24, 181, 189, 193, 201, 207, 208, 214], "default_output_bw": [177, 179, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 218, 220, 232, 234, 236, 237, 238, 244, 246, 249], "default_param_bw": [24, 177, 179, 181, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 218, 220, 232, 234, 236, 237, 238, 244, 246, 249], "default_quant_schem": [24, 181, 189, 193, 201, 207, 214], "default_reg_param": [24, 181, 214], "default_warm_start": [24, 181, 214], "defin": [21, 30, 172, 173, 175, 178, 182, 192, 197, 200, 201, 203, 204, 205, 207, 210, 211, 212, 213, 218, 223, 227, 229, 232, 242, 246, 247, 248, 250, 251, 252], "definit": [2, 13, 29, 30, 169, 171, 172, 174, 176, 182, 185, 188, 192, 195, 196, 200, 201, 206, 207, 210, 211, 212, 213, 217, 223, 227, 229, 232, 246, 248, 251, 252], "degrad": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 257, 258], "degre": [227, 229], "deleg": 178, "delet": [182, 188, 192, 206, 218], "deliber": [188, 192, 200, 201, 206, 213], "delta": [21, 177, 184, 196, 197, 218, 241, 248], "demand": 239, "demonstr": [187, 200, 213], "denot": [227, 230, 247], "dens": [21, 195, 196, 197, 251, 253], "depend": [158, 159, 160, 172, 187, 201, 224, 241, 242, 243, 250, 253], "deploi": [248, 255, 257], "deploy": [239, 240, 255, 256, 258], "deprec": [179, 246, 249, 253], "depth": [214, 220, 222, 253, 254], "depthwis": 253, "depthwise_conv2d": 222, "depthwiseconv2d": 222, "dequant": [158, 159, 160, 162, 165, 166, 178, 239, 241, 253, 257, 258], "dequantizedtensor": [159, 160, 162, 178, 244], "deriv": [161, 162, 164, 165, 178, 189, 192, 206, 214, 232, 248], "descend": 166, "describ": [166, 171, 187, 201, 226, 228, 232, 241, 242, 243, 244, 245, 247, 248, 250, 254, 255, 257, 258], "descript": [175, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 247, 248], "design": [173, 188, 192, 197, 200, 201, 206, 213, 214, 239, 245], "desir": [9, 160, 177, 178, 179, 184, 185, 188, 192, 203, 204, 205, 206, 218, 224, 226, 227, 232, 233, 246, 249, 254, 256, 258], "detach": 160, "detail": [25, 172, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 223, 225, 228, 234, 240, 242, 243, 245, 247, 248, 254, 256, 258], "detect": 226, "determin": [166, 170, 175, 177, 184, 185, 188, 196, 206, 208, 218, 219, 231, 236, 237, 238, 239, 245, 246, 247, 249], "determinist": 172, "dev": [242, 243], "develop": [168, 216, 239, 242, 243, 257], "devic": [24, 25, 160, 172, 176, 179, 181, 182, 183, 185, 188, 189, 190, 191, 195, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 232, 234, 236, 237, 238, 239, 240, 244, 246, 248, 249, 255, 256, 257, 258], "diagnost": 254, "diagram": [196, 236, 237], "dict": [18, 25, 29, 166, 169, 172, 174, 175, 176, 177, 182, 183, 184, 185, 217, 218, 219, 223, 227, 229, 232, 234, 247, 252], "dictat": 257, "dictionari": [18, 29, 166, 177, 179, 184, 185, 194, 195, 197, 218, 223, 225, 226, 227, 229, 246, 249, 250], "dicuss": 197, "did": [201, 242], "didn": 209, "diff": 253, "differ": [18, 29, 171, 172, 176, 188, 192, 195, 196, 201, 203, 204, 205, 206, 211, 212, 222, 223, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 239, 243, 245, 247, 248, 254, 256, 258], "dim": [170, 178, 206, 245], "dimens": [170, 175, 227, 229, 245, 247, 248, 254], "dir": [195, 200, 201, 202, 243], "dir_path": [169, 217], "direct": [217, 221, 232, 240, 245, 247, 248, 253, 257, 258], "directli": [195, 209, 218, 234, 236, 248, 257], "directori": [18, 25, 29, 169, 176, 177, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 242, 243, 246, 249, 256], "directrori": 232, "disabl": [171, 175, 176, 177, 179, 180, 184, 185, 186, 192, 203, 205, 218, 221, 225, 226, 238, 246, 248, 249, 250], "disable_lora_adapt": 176, "discard": 218, "disciplin": 214, "discuss": [187, 192, 203, 204, 205, 214], "disk": [169, 217], "displai": [187, 192, 196, 216, 228], "display_comp_ratio_plot": 228, "display_eval_scor": 228, "dist": [242, 243], "distinct": 173, "distort": 248, "distribut": [18, 29, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 222, 223, 227, 229, 239, 248, 253, 254], "divbackward0": 178, "diverg": 239, "divid": [224, 245, 249], "divis": [178, 239, 245], "dlc": 256, "dlc_path": 256, "dlf": 239, "do": [21, 24, 172, 173, 176, 179, 181, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 221, 226, 232, 234, 236, 242, 243, 244, 246, 248, 249, 257, 258], "do_constant_fold": [188, 189, 190, 191, 221], "do_not_trace_m": 172, "doc": [172, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 242, 253], "docker": 240, "docker_container_nam": 242, "docker_image_nam": 242, "docker_run_command": 242, "dockerfil": 242, "docstr": 245, "document": [176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 206, 207, 208, 209, 210, 211, 212, 213, 217, 221, 228, 232, 241, 245, 247, 248, 253, 256, 257, 258], "doe": [21, 30, 172, 182, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 216, 218, 223, 225, 227, 229, 238, 248, 249, 252, 253, 254, 257, 258], "doesn": [30, 188, 189, 190, 191, 193, 194, 202, 203, 204, 205, 206, 207, 210, 211, 212, 246, 249, 257], "doesnt": [174, 234], "don": [30, 172, 176, 192, 195, 196, 200, 201, 213, 218, 236, 237], "done": [161, 162, 178, 192, 197, 201, 209, 226, 250, 251, 253], "down": [201, 235, 247], "download": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 240, 241, 243], "download_url": [242, 243], "downsampl": [203, 205], "downstream": [230, 247, 253], "dpkg": 243, "dq_output": 30, "drastic": [225, 258], "drawback": 248, "driver": [227, 241, 244], "drop": [25, 175, 182, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 218, 219, 224, 226, 231, 232, 248, 249, 254], "dropout": [21, 65, 196, 197], "dropout1": [21, 197], "dropout1d": 66, "dropout2": [21, 197], "dropout2d": 67, "dropout3d": 68, "dtype": [158, 159, 160, 166, 170, 171, 172, 174, 176, 234, 236, 237, 245, 247, 253], "due": [21, 173, 253], "dummi": [24, 25, 27, 28, 169, 173, 177, 179, 181, 182, 183, 184, 185, 188, 200, 206, 213, 214, 217, 218, 219, 221, 222, 236, 237, 246, 249], "dummy_attention_mask": [236, 237], "dummy_data": 218, "dummy_input": [24, 25, 27, 28, 168, 169, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 232, 234, 236, 237, 238, 244, 245, 246, 249, 252], "dummy_input_dict": 217, "dummy_input_id": [236, 237], "dump": [195, 253], "duplic": [160, 172], "dure": [10, 18, 21, 23, 24, 25, 29, 30, 166, 168, 175, 179, 181, 182, 183, 185, 189, 191, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216, 219, 223, 226, 227, 228, 229, 232, 239, 240, 246, 248, 249, 250, 253, 258], "dynam": [166, 172, 239, 248, 253], "dynamic_ax": [188, 189, 190, 191, 214, 219, 221, 232, 246], "e": [179, 185, 188, 192, 195, 200, 201, 206, 209, 213, 218, 231, 232, 238, 246, 247, 249], "each": [21, 24, 30, 168, 173, 175, 177, 178, 181, 182, 184, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 232, 234, 239, 245, 246, 247, 248, 250, 254, 256], "earli": 182, "easi": [234, 253, 257], "easier": 171, "easili": [178, 223, 227, 229], "ed": 214, "edg": [239, 240, 257], "edit": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 247], "effect": [24, 26, 175, 176, 181, 191, 196, 198, 199, 211, 212, 214, 218, 220, 231, 239, 257, 258], "effici": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "efficientnetb4": 253, "effort": [25, 174, 183, 194, 208, 219, 234, 257, 258], "eights_pdf": [177, 184, 218], "either": [18, 29, 170, 174, 176, 178, 188, 193, 201, 203, 204, 205, 206, 223, 227, 229, 230, 232, 234, 242, 245, 252], "element": 247, "elementari": 196, "elementwis": [172, 175, 253], "elimin": [218, 221, 239, 248], "els": [172, 173, 182, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 227, 232, 234, 238, 244, 246, 249], "elu": 69, "embed": [21, 70, 172, 179, 185, 196, 197, 226, 246, 249, 253, 254], "embed_dim": [21, 196, 197], "embedding_lay": [21, 197], "embeddingbag": 71, "embodi": 239, "empir": [194, 208], "emploi": [239, 240], "empti": 250, "emul": [240, 248], "enabl": [13, 25, 29, 166, 171, 174, 176, 177, 180, 182, 183, 184, 186, 192, 199, 201, 203, 205, 206, 212, 217, 219, 220, 221, 223, 227, 228, 229, 231, 232, 238, 239, 245, 248, 250, 253, 256, 257], "enable_adapter_and_load_weight": 176, "enable_convert_op_reduct": [13, 174, 182, 192, 206, 232], "enable_onnx_check": [179, 185, 246, 249], "enable_per_layer_mse_loss": [200, 213, 218], "enbl": 245, "enc": 30, "enc_typ": 247, "encapsul": [2, 13, 174, 177, 182, 184, 218, 232], "encod": [10, 23, 24, 25, 30, 158, 159, 160, 161, 162, 166, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 207, 208, 210, 211, 212, 214, 215, 217, 219, 231, 234, 235, 236, 237, 238, 239, 241, 245, 249, 253, 256, 257], "encoding_analyz": [161, 162, 166], "encoding_path": [189, 193, 194, 201, 207, 208, 214, 219], "encoding_vers": [245, 247], "encodinganalyz": [161, 162, 166], "encodinganalyzerforpython": 241, "encodingbas": [158, 159, 166], "encodingtyp": 247, "encount": [30, 196], "encourag": [21, 172, 251, 252], "end": [161, 162, 163, 164, 165, 172, 173, 187, 195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 214, 219, 226, 232, 238, 240, 246, 257], "end_beta": [24, 181, 214], "end_idx": 219, "enforc": 166, "engin": [217, 221, 232, 240, 242, 245, 247, 248, 253, 257, 258], "enhanc": [176, 177, 184, 200, 213, 218, 246, 248, 253], "enough": [192, 203, 204, 205, 214, 258], "ensur": [175, 201, 217, 220, 225, 232, 236, 237, 243, 244, 253, 254, 258], "enter": [30, 175, 219], "entir": [176, 177, 178, 184, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 223, 226, 227, 229, 248], "entireti": [21, 201], "entri": [25, 179, 183, 185, 219, 246, 247, 249, 250], "entrypoint": 242, "enum": [24, 29, 169, 179, 181, 182, 185, 188, 192, 195, 196, 206, 209, 214, 217, 223, 227, 229, 246, 247, 249], "enumer": [10, 18, 23, 29, 169, 179, 185, 197, 217, 223, 227, 229, 232, 236, 237, 246, 249], "environ": [187, 188, 192, 194, 195, 198, 199, 206, 213, 232, 239, 241, 243], "envsetup": [242, 243], "ep": [221, 222], "epoch": [189, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 220, 223, 226, 227, 229, 236, 237, 249], "epsilon": [21, 196, 197, 253], "equal": [25, 28, 159, 160, 170, 178, 183, 187, 193, 197, 214, 218, 219, 224, 225, 245, 248, 254], "equalize_model": [28, 190, 202, 210, 222], "equat": [161, 162, 163, 164, 165, 245, 248], "equival": [25, 30, 164, 165, 166, 170, 174, 179, 182, 183, 185, 188, 201, 206, 207, 210, 211, 212, 213, 219, 232, 245, 246, 249, 252, 256], "erorr": 192, "error": [21, 25, 30, 172, 178, 179, 183, 192, 215, 219, 232, 234, 239, 246, 248, 249, 254], "especi": [188, 201, 206, 236, 239, 249, 254, 257], "essenti": [188, 192, 195, 196, 206, 209], "estim": [187, 248, 253, 257], "esults_dir": [177, 184, 218], "etc": [188, 192, 195, 196, 201, 206, 224, 239, 242, 247, 253], "eval": [18, 25, 29, 172, 174, 177, 180, 182, 183, 184, 186, 188, 189, 190, 191, 192, 195, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 234, 238, 244, 246, 249], "eval_callback": [25, 29, 177, 183, 184, 194, 195, 200, 203, 204, 205, 208, 213, 218, 219, 223, 227, 229, 232], "eval_callback_factori": [188, 206], "eval_callback_fn": 218, "eval_callback_for_phase1": [182, 188, 206], "eval_callback_for_phase2": [182, 188, 206], "eval_callback_for_phase_1": 232, "eval_callback_for_phase_2": 232, "eval_callback_phase1": 192, "eval_callback_phase2": 192, "eval_data_load": [214, 219, 232, 246], "eval_data_s": 246, "eval_dataset": [194, 195, 214, 218, 219, 220, 246, 249], "eval_dataset_s": [194, 195, 208, 219], "eval_func": [192, 200, 227, 232], "eval_iter": [29, 203, 204, 205, 223, 227, 229], "eval_scor": [18, 29, 177, 184, 218, 223, 227, 229], "evalcallbackfactori": [174, 182, 188, 206, 232], "evalfunct": 227, "evalu": [25, 29, 174, 177, 182, 183, 184, 187, 194, 196, 208, 214, 219, 220, 223, 225, 226, 227, 228, 229, 232, 238, 244, 248, 258], "evaluate_accuraci": 206, "evaluate_model": [223, 227, 229], "even": [30, 178, 188, 192, 195, 196, 201, 206, 232, 233, 234], "evenli": 245, "eventu": 234, "everi": [24, 169, 177, 178, 181, 184, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 217, 218, 225, 226, 248, 249], "evlauat": 192, "exactli": [30, 100, 166, 175, 200, 213, 248], "examin": 172, "exampl": [18, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 173, 174, 175, 176, 178, 179, 180, 186, 196, 197, 208, 214, 216, 217, 218, 219, 221, 222, 224, 230, 234, 236, 237, 238, 239, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 258], "exce": [168, 216], "exceed": [168, 216], "except": [21, 180, 186, 188, 189, 190, 191, 197, 200, 213, 214, 219, 221, 222, 232, 234, 238, 245, 246, 249], "exchang": 239, "exclud": [25, 172, 173, 177, 180, 183, 184, 186, 218, 219, 238, 247, 253], "excluded_lay": 247, "exclus": [166, 170, 245], "execut": [25, 172, 179, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 219, 221, 228, 243, 244, 246, 249], "exercis": [188, 195, 200, 201, 206, 209, 213], "exist": [30, 100, 166, 175, 179, 185, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 232, 245, 246, 249, 257], "exist_ok": [188, 189, 192, 193, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "exit": [25, 30, 175, 182, 183, 219], "expand": [245, 253], "expand_dim": 219, "expanded_conv_depthwis": [214, 222], "expans": [226, 245], "expect": [24, 25, 29, 168, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 195, 203, 204, 205, 206, 209, 214, 216, 218, 219, 223, 226, 227, 229, 232, 234, 238, 246, 249, 251], "experi": [18, 29, 170, 189, 193, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 223, 226, 227, 229, 241, 245, 258], "experienc": 241, "experiment": [226, 245, 253], "experss": [21, 197], "expert": [194, 208], "explain": [188, 192, 195, 196, 200, 206, 209, 213, 223, 226, 253], "explan": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 240], "explicitli": [25, 183, 219, 230], "expon": [166, 170, 245], "exponent_bit": [166, 170, 245], "export": [10, 23, 25, 169, 171, 174, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 202, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 226, 232, 233, 234, 238, 242, 243, 247, 252, 253, 256], "export_adapter_weight": 176, "export_model": [176, 179, 185, 246, 249], "export_param": [188, 189, 190, 191], "export_per_layer_encoding_min_max_rang": [177, 184, 218], "export_per_layer_mse_loss": [177, 184, 218], "export_per_layer_stats_histogram": [177, 184, 218], "export_to_torchscript": [179, 185, 246, 249], "exported_model": 245, "expos": [172, 214, 218], "express": [18, 29, 223, 227, 229, 236, 237], "extend": [171, 253], "extens": [167, 175, 187, 242, 243, 256], "extra": [166, 175, 253], "extract": [189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 239, 246], "extrem": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 248], "ey": 218, "f": [172, 173, 178, 195, 208, 214, 219, 220, 221, 222, 232, 241, 242, 243, 246, 249], "f0": 224, "facebook": [236, 237, 239], "facilit": 240, "fact": 236, "factor": [195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 224, 226, 245], "factori": [174, 182, 232], "fail": [172, 173, 174, 179, 188, 189, 190, 191, 214, 219, 221, 222, 232, 234, 246, 249, 253], "fair": 239, "fairli": [192, 195, 196, 200, 201, 213], "fake": [162, 165, 166, 174, 182, 188, 189, 190, 191, 193, 195, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 212, 232, 246, 253], "fakequ": [179, 185, 246, 249], "fall": [203, 204, 205, 225, 250, 258], "fallback": 256, "fals": [18, 21, 25, 29, 30, 158, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 219, 221, 222, 223, 227, 229, 232, 234, 236, 237, 241, 244, 245, 246, 247, 249, 250], "famili": [234, 239], "familiar": 187, "far": [195, 209], "farther": [189, 193, 207], "fashion": 201, "fast": [13, 232], "faster": [188, 194, 195, 201, 206, 208, 232, 253], "fc": [226, 229], "fc1": 172, "fc2": 172, "featur": [21, 168, 171, 172, 173, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 219, 221, 222, 226, 228, 232, 234, 239, 244, 248, 251, 252, 253, 254], "featurealphadropout": 72, "feed": [21, 196, 197, 248], "feel": [195, 196, 209, 234], "feez": [180, 186, 238], "few": [188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 220, 224], "fewer": [226, 257], "ff_dim": [21, 196, 197], "ffn": [21, 197], "ffn_output": [21, 197], "field": [166, 182, 188, 206, 247], "figur": [214, 219, 222, 223, 225, 227, 228, 229, 230, 248, 254], "file": [18, 24, 25, 29, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 194, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 223, 227, 229, 234, 238, 241, 242, 243, 245, 246, 247, 248, 249, 253, 256, 257], "file_path": [185, 214, 219, 221, 222, 232, 246], "filenam": [24, 176, 179, 181, 185, 188, 189, 190, 191, 214, 220, 238, 246, 249], "filename_prefix": [24, 176, 179, 181, 185, 188, 189, 192, 193, 195, 201, 202, 206, 207, 208, 209, 210, 211, 212, 214, 220, 232, 238, 246, 249], "filename_prefix_encod": [176, 179, 185, 246, 249], "fill": [25, 179, 183, 185, 219, 246, 249], "filter": [21, 201, 239], "final": [21, 29, 173, 180, 186, 188, 192, 195, 196, 200, 206, 209, 213, 218, 223, 224, 225, 227, 229, 232, 236, 237, 238, 243, 245, 249, 254, 257], "find": [173, 174, 180, 182, 185, 186, 188, 189, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 218, 225, 233, 234, 238, 248, 249, 258], "find_pkg_url_str": [242, 243], "fine": [29, 176, 185, 189, 190, 191, 193, 194, 196, 198, 199, 202, 207, 208, 210, 211, 212, 223, 224, 227, 229, 240, 249, 257, 258], "finer": [166, 178, 245], "finess": 258, "finetun": [189, 190, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 211, 212], "finetuned_accuraci": [209, 211, 212], "finetuned_accuracy_bn_reestim": 209, "finetuned_model": [203, 204], "finish": [198, 199, 211, 212], "first": [21, 24, 172, 175, 178, 180, 181, 186, 195, 196, 197, 200, 201, 203, 204, 205, 209, 213, 214, 222, 226, 227, 238, 242, 253, 254, 257], "fit": [18, 29, 195, 196, 198, 199, 209, 220, 223, 225, 227, 229, 249, 257], "five": [190, 210], "fix": [173, 188, 189, 190, 191, 232, 247, 248, 253], "flag": [25, 168, 171, 172, 173, 174, 179, 182, 183, 185, 188, 192, 206, 216, 219, 232, 234, 246, 249], "flatten": [73, 172, 195, 236, 237, 247], "flexibl": [167, 188, 206], "float": [24, 25, 29, 30, 158, 159, 166, 170, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 227, 229, 232, 233, 239, 240, 245, 246, 247, 248, 249, 253, 254, 257, 258], "float16": [166, 170, 171, 245], "float32": [218, 219], "float_fallback": 256, "floatencod": 166, "floatquant": [166, 171], "floatquantizedequant": 171, "flow": [25, 172, 183, 219, 248, 254], "fo": 201, "focu": 209, "fold": [25, 27, 74, 183, 192, 214, 218, 219, 220, 222, 232, 239, 253], "fold_all_batch_norm": [27, 192, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 221, 232, 249], "fold_all_batch_norms_to_scal": [195, 209, 220], "fold_all_batch_norms_to_weight": [188, 189, 190, 191, 221], "folded_model": 221, "folder": [200, 213, 218], "follow": [6, 7, 10, 19, 20, 21, 23, 30, 100, 169, 171, 172, 173, 174, 175, 176, 177, 179, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "footprint": 239, "forall_": [161, 162, 163, 164, 165], "forc": [188, 189, 190, 191, 203, 204, 205, 206, 207, 210, 211, 212, 213], "form": [21, 189, 200, 213], "formal": 245, "format": [24, 160, 176, 177, 179, 181, 184, 185, 214, 218, 219, 232, 238, 239, 240, 245, 246, 248, 249, 251, 253, 256, 257], "former": 252, "forward": [21, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 166, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 195, 196, 197, 198, 199, 200, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 232, 236, 237, 238, 242, 246, 249, 252, 253, 254, 258], "forward_fn": [24, 25, 26, 174, 180, 181, 182, 183, 186, 188, 189, 195, 206, 209, 214, 219, 220, 232, 238], "forward_one_batch": [188, 206], "forward_pass": [214, 232, 236, 237, 238, 244], "forward_pass_arg": 246, "forward_pass_call_back": [192, 232], "forward_pass_callback": [177, 179, 182, 184, 185, 188, 189, 190, 191, 193, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 218, 232, 246, 249], "forward_pass_callback_arg": [179, 185, 188, 189, 190, 191, 192, 193, 195, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 214, 232, 246, 249], "forward_pass_callback_fn": 218, "found": [171, 197, 248, 249], "four": [219, 248], "fp16": [174, 234, 253, 257], "fp32": [169, 174, 176, 177, 180, 182, 184, 186, 195, 196, 213, 217, 218, 232, 238, 239, 247, 248, 249, 253, 256, 257, 258], "fp32_acccuraci": 192, "fp32_layer_output": 217, "fp32_layer_output_util": 217, "fp_qdq": 171, "fp_quantiz": 171, "frac": [161, 162, 163, 164, 165, 166, 178, 248], "fraction": [232, 258], "fractionalmaxpool2d": 75, "fractionalmaxpool3d": 76, "framework": [0, 187, 217, 221, 239, 240, 241, 242, 243, 244, 246, 248, 250, 256, 258], "free": [190, 195, 196, 202, 209, 210, 234], "freez": [171, 176, 189, 193, 201, 207, 238], "freeze_base_model": 176, "freeze_base_model_activation_quant": 176, "freeze_base_model_param_quant": 176, "freeze_encod": 171, "fresh": 241, "friendli": [167, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 219, 257], "from": [21, 24, 25, 26, 30, 159, 160, 161, 162, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 256, 258], "from_modul": 30, "from_pretrain": [236, 237], "from_tensor_slic": 218, "front": [25, 182, 183, 188, 192, 206, 219], "frozen": [201, 236, 237], "full": [188, 189, 190, 191, 192, 193, 195, 198, 199, 202, 206, 207, 209, 210, 211, 212, 227, 232, 233, 239, 251, 252], "fulli": [167, 226, 229, 246, 247, 253], "func": [2, 13, 174, 177, 182, 184, 218, 232], "func_callback_arg": [2, 13, 174, 177, 182, 184, 188, 206, 218, 232], "func_wrapp": [192, 227, 232], "function": [2, 6, 13, 18, 19, 21, 24, 25, 26, 29, 30, 158, 159, 160, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 192, 193, 196, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 232, 236, 237, 238, 239, 245, 246, 248, 249, 251, 252, 253, 256, 258], "function_nam": [203, 204, 205], "functional_callback": 196, "functional_model": [195, 196, 197], "functional_model_weight_ord": 197, "functional_op": 173, "fundament": 171, "furhter": [194, 208], "furo": 253, "further": [158, 161, 162, 163, 164, 165, 172, 178, 205, 223, 226, 248, 258], "furthermor": 21, "fuse": [195, 236, 248, 250], "fuse_bn_into_conv": 221, "fusion": 239, "futur": [168, 216], "fx": [25, 172, 183, 219], "g": [185, 188, 192, 195, 200, 201, 206, 209, 213, 218, 232, 242, 247], "gain": [189, 193, 198, 199, 201, 202, 203, 204, 205, 207, 210, 211, 212, 214, 223, 224, 226, 258], "gap": 233, "gather": 246, "gaussiannllloss": 81, "gave": 219, "gelu": 77, "gemm": [195, 250], "gener": [7, 20, 30, 161, 162, 163, 164, 165, 169, 176, 178, 182, 187, 188, 192, 196, 206, 208, 214, 218, 220, 221, 222, 226, 232, 234, 236, 237, 238, 239, 244, 245, 247, 248, 249, 250, 253, 254, 256, 257], "generate_calibration_callback": [236, 237], "generate_layer_output": [169, 217], "get": [18, 29, 166, 172, 174, 176, 182, 188, 189, 190, 191, 192, 195, 196, 197, 200, 217, 226, 227, 229, 232, 233, 234, 237, 238, 241, 243], "get_active_quant": [174, 182, 232], "get_available_provid": [188, 189, 190, 191], "get_calibration_and_eval_data_load": 246, "get_candid": [174, 182, 232], "get_data_loader_wrapp": [192, 232], "get_default_kernel": 30, "get_devic": 208, "get_encod": 166, "get_eval_func": [192, 227, 232], "get_extra_st": 166, "get_fp_lora_lay": 176, "get_input": [188, 189, 190, 191, 214, 219, 232, 246], "get_input_quantizer_modul": [174, 182, 232], "get_kernel": 30, "get_loss_fn": [180, 186, 238], "get_model": [192, 251], "get_offset": 178, "get_original_models_weights_in_functional_model_ord": 197, "get_path_for_per_channel_config": [214, 219, 220, 234, 238, 244, 246], "get_peft_model": 176, "get_pre_processed_input": 217, "get_quant_scheme_candid": [25, 183, 219], "get_quantized_lora_lay": 176, "get_scal": [160, 178], "get_subclass_model_with_functional_lay": 21, "get_text_classificaiton_model": 21, "get_top5_acc": 192, "get_val_dataload": [188, 189, 190, 191, 203, 205, 206, 207, 209, 210, 211, 212, 213], "get_val_dataset": [193, 194, 195, 200, 201, 202], "get_weight": [197, 221, 222], "git": [187, 242], "github": [187, 241, 242, 243], "give": [192, 196, 200, 201, 203, 204, 205, 213, 214, 218, 222, 226, 232, 253, 255], "given": [24, 25, 26, 28, 29, 30, 168, 174, 175, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 219, 220, 222, 223, 225, 226, 227, 229, 232, 238, 246, 249, 258], "global": [238, 239, 254], "globalaveragepooling1d": [21, 196, 197], "glu": 78, "gnu": 243, "gnupg2": 243, "go": [21, 188, 192, 195, 196, 200, 201, 206, 209, 213, 253], "goal": [25, 183, 188, 206, 218, 219, 257], "good": [21, 176, 195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 226, 234, 258], "googl": 239, "got": [27, 172, 221], "gpu": [203, 204, 205, 207, 209, 210, 211, 212, 213, 217, 223, 227, 229, 239, 241, 242, 243, 244, 253], "grad_fn": [158, 159, 160, 161, 162, 178, 244], "gradient": [158, 159, 160, 236, 237, 246, 249, 253], "grant": 187, "granular": [18, 29, 196, 203, 204, 205, 223, 226, 227, 229, 245, 254], "granularli": 245, "graph": [21, 24, 25, 160, 172, 179, 181, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 221, 222, 227, 228, 232, 234, 246, 247, 248, 249, 253, 256, 257], "graphmodul": 172, "greater": [18, 29, 223, 224, 225, 227, 229, 245], "greedi": [18, 29, 223, 226, 227, 228, 229], "greedili": [188, 192, 206], "greedy_param": [203, 204, 205, 223, 227, 229], "greedy_select_param": [18, 29, 203, 204, 205, 223, 227], "greedymixedprecisionalgo": [13, 174, 182, 192, 206, 232], "greedyselectionparamet": [18, 29, 203, 204, 205, 223, 227, 229], "green": 230, "grep": 242, "grid": [178, 180, 186, 238, 245, 248], "group": [2, 13, 170, 174, 182, 188, 206, 242, 245, 248, 250, 253], "groupedblockquantizedequant": 245, "groupnorm": 82, "gru": [79, 253], "grucel": 80, "guarante": 21, "guid": [187, 188, 192, 194, 206, 207, 208, 210, 211, 212, 213, 214, 232, 235, 242, 246, 253, 257], "guidebook": 226, "guidelin": [172, 206, 207, 210, 211, 212, 213, 214, 246, 249], "h": [187, 229, 230, 243], "h5": [217, 256], "ha": [21, 24, 25, 30, 158, 171, 172, 173, 176, 179, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 224, 225, 228, 230, 234, 235, 238, 239, 244, 245, 246, 248, 249, 253, 257], "had": [251, 252], "half": 224, "hand": [188, 206], "handl": [25, 26, 183, 219, 220, 241, 244, 245, 248, 253], "hard": 172, "hardshrink": 83, "hardsigmoid": 84, "hardswish": 85, "hardtanh": 86, "hardwar": [179, 185, 239, 240, 246, 248, 249, 257], "hat": 248, "have": [9, 21, 30, 168, 169, 170, 171, 172, 173, 177, 178, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 226, 232, 234, 236, 239, 243, 245, 246, 247, 249, 253, 254, 256, 258], "hba": [190, 202, 210], "he": 226, "head": [21, 196, 197], "heavi": [168, 216, 228], "height": [188, 189, 190, 191, 196, 206, 207, 209, 210, 211, 212, 213, 219, 221, 222, 227, 229, 230], "held": [30, 175, 211, 212], "help": [171, 173, 174, 176, 179, 185, 190, 200, 202, 210, 213, 218, 225, 226, 232, 233, 234, 245, 246, 249, 250, 254, 257, 258], "helper": [174, 178, 182, 195, 209, 232, 236], "hen": [25, 183, 219], "here": [24, 171, 176, 178, 181, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 222, 227, 236, 237, 249, 250, 257, 258], "heterogen": 257, "heurist": [194, 208], "hidden": [21, 196, 197], "hide": 234, "high": [28, 171, 182, 189, 190, 191, 193, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 222, 224, 225, 231, 232, 235, 239, 240, 253], "higher": [24, 181, 182, 188, 192, 203, 204, 205, 206, 214, 223, 225, 227, 229, 231, 232, 233, 245, 248, 249, 254, 257], "highest": [25, 183, 219, 225], "highlight": 228, "hingeembeddingloss": 87, "histogram": [177, 184, 200, 213, 215, 248, 253], "histogram_freq": 196, "histori": [195, 196, 198, 199], "hold": [158, 159, 160, 175, 220, 234, 250, 254], "home": 242, "honor": [223, 227, 229], "hood": 171, "hook": 248, "hope": [188, 192, 195, 196, 201, 206, 209], "hopefulli": 197, "host": [228, 242, 244, 253], "hostnam": 242, "hotspot": [177, 184, 218, 231], "how": [173, 175, 176, 178, 179, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 226, 227, 229, 232, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 253, 254, 255, 258], "howev": [21, 171, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 223, 227, 229, 235, 241, 245, 248, 251, 253, 257, 258], "html": [168, 172, 177, 184, 187, 200, 213, 215, 216, 218, 241, 242, 243, 253], "htp": 256, "htp_v66": [179, 185, 246, 249], "htp_v68": [179, 185, 246, 249], "htp_v69": [179, 185, 246, 249], "htp_v73": [179, 185, 246, 249], "htp_v75": [179, 185, 246, 249], "htp_v79": [179, 185, 246, 249], "htp_v81": [179, 185, 246, 249], "http": [172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 241, 242, 243], "hub": [217, 221, 232, 240, 245, 247, 248, 253, 257, 258], "huberloss": 88, "huggingfac": [176, 236, 237], "hx": [79, 80, 96, 97, 123, 124], "hxwx5": 230, "hxwx8": 230, "hyper": [189, 193, 195, 196, 198, 199, 202, 203, 204, 205, 207, 209, 210, 211, 212, 220, 249, 257], "hyperparamet": 249, "i": [1, 2, 9, 10, 18, 21, 24, 25, 28, 29, 30, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "i_": [161, 162, 163, 164, 165], "i_0": [161, 162, 163, 164, 165], "i_d": [161, 162, 163, 164, 165], "iccv": [190, 202, 210, 226], "id": [25, 183, 219, 228, 236, 237, 242], "ideal": [192, 200, 201, 213, 253], "idempot": 160, "ident": [197, 221, 251, 252], "identifi": [170, 173, 187, 215, 218, 223, 230, 231, 232, 242, 243, 245, 248, 253, 254, 257], "ie": 234, "ieee": [166, 226], "ignor": [18, 29, 172, 182, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 223, 227, 229, 246, 258], "ignore_quant_ops_list": [24, 181, 214], "illustr": [201, 203, 204, 205, 214, 223, 225, 227, 228, 229, 230, 248, 257], "ilsvrc": [214, 219, 232, 246], "ilsvrc2012": [188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "imag": [177, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 232, 238, 239, 241, 243, 246, 249], "image_bw": 252, "image_dataset": 218, "image_dataset_from_directori": [192, 193, 198, 199, 201, 214, 219, 220, 227, 232, 246, 249], "image_height": [193, 201], "image_net_config": [188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213], "image_net_data_load": [188, 189, 190, 191, 203, 205, 207, 209, 210, 211, 212, 213], "image_net_dataset": [193, 194, 195, 200, 201, 202], "image_net_evalu": [188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "image_net_train": [203, 204, 205, 209, 210, 211, 212], "image_rgb": 252, "image_s": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 227, 232, 246, 249], "image_width": [193, 201], "imageclassificationevalu": 238, "imagefold": [206, 208, 246], "imagenet": [187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 227, 232, 238, 246, 249], "imagenet_dataset": [208, 214, 219, 220, 246, 249], "imagenet_dir": [198, 199], "imagenetdataload": [188, 189, 190, 191, 200, 203, 205, 207, 209, 210, 211, 212, 213], "imagenetdatapipelin": [188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "imagenetdataset": [193, 194, 195, 200, 201, 202], "imagenetevalu": [188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "imagenettrain": [203, 204, 205, 209, 210, 211, 212], "images_dir": 209, "images_mean": 206, "images_std": 206, "imagin": 201, "imdb": 196, "img": [192, 227, 232], "img_height": [192, 232], "img_width": [192, 232], "immedi": [190, 194, 202, 208, 210], "impact": [188, 201, 206, 225, 239, 254], "implement": [30, 169, 178, 187, 188, 206, 217, 218, 219, 236, 237, 253, 254, 257, 258], "impli": [188, 206, 232], "import": [21, 24, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 175, 176, 178, 179, 181, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 251], "impos": 245, "improv": [189, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 221, 224, 226, 231, 233, 243, 245, 249, 253, 254, 255, 258], "in1": 234, "in2": 234, "in_channel": [170, 245], "in_eval_mod": 208, "in_featur": [30, 171, 175], "in_plac": [179, 185, 236, 237, 246, 249], "inc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "includ": [25, 168, 182, 183, 216, 218, 219, 221, 222, 225, 228, 239, 240, 241, 243, 247, 248, 249, 250, 253, 258], "include_top": [192, 193, 201, 202], "incompat": [195, 196], "incorrect": [174, 234, 253], "incorrectli": [253, 258], "increas": [18, 29, 188, 201, 206, 223, 225, 227, 229, 231, 248], "increment": 258, "incur": 218, "independ": [172, 239, 254], "index": [175, 177, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 253], "index_0": [200, 213], "index_1": [200, 213], "index_n": [200, 213], "indic": [18, 29, 109, 110, 111, 174, 175, 178, 179, 194, 201, 206, 208, 223, 224, 227, 229, 230, 234, 246, 247, 249], "indirect": [188, 206, 232], "individu": [177, 184, 218, 225, 240, 250], "induc": 248, "infer": [24, 25, 181, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 224, 227, 232, 234, 238, 239, 245, 246, 248, 249, 253, 258], "inferencesess": [188, 189, 190, 191, 217, 218, 219, 246], "influenc": 248, "info": [173, 192, 253], "inform": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 173, 182, 188, 192, 206, 209, 240, 244, 245, 247, 253], "inherit": [21, 30, 100, 175], "init": [176, 221, 222], "initi": [10, 23, 161, 162, 166, 175, 178, 179, 185, 188, 189, 193, 199, 200, 201, 206, 207, 211, 212, 213, 214, 221, 222, 246], "initial_accuraci": [208, 219], "initializd": 175, "inner": 254, "innov": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "inp_data": 227, "inp_symmetri": [180, 186, 238], "inplac": [166, 173, 221, 222], "input": [18, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 209, 213, 214, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 232, 236, 237, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256], "input1": [46, 62, 105], "input2": [46, 62, 105], "input_": [161, 162, 163, 164, 165], "input_1": [214, 221, 222], "input_batch": 217, "input_channel": [170, 245], "input_data": [188, 189, 190, 191, 206, 207, 209, 210, 211, 212, 213, 219, 246], "input_dim": [21, 196, 197], "input_dlc": 256, "input_id": [236, 237], "input_inst": [169, 217], "input_lay": [21, 197], "input_length": 48, "input_list": 256, "input_nam": [179, 185, 188, 189, 190, 191, 214, 219, 221, 232, 246, 249], "input_network": 256, "input_op_nam": [18, 227], "input_q": 178, "input_qdq": 178, "input_qtzr": 30, "input_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 179, 182, 232, 244, 246, 249], "input_shap": [27, 28, 29, 172, 188, 189, 190, 191, 192, 193, 197, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 218, 219, 221, 222, 223, 227, 229, 232, 234, 246, 251], "input_tensor": [21, 172, 192, 193, 201, 202], "inputlay": [214, 221, 222], "inputs_batch": [188, 189, 190, 191, 206, 207, 209, 210, 211, 212, 213, 246], "insert": [172, 188, 189, 190, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 246, 248, 257], "insid": [21, 30, 172, 175, 196, 197, 227, 234], "insight": [228, 254], "inspect": [196, 226], "instabl": [195, 209], "instal": [187, 198, 199, 202, 208, 210, 211, 212, 228, 239, 253, 257], "instanc": [30, 169, 172, 173, 185, 217, 228, 258], "instancenorm1d": 89, "instancenorm2d": 90, "instancenorm3d": 91, "instanti": [176, 178, 188, 200, 201, 206, 209, 213, 228, 232, 236, 237, 244, 245, 247, 250, 252], "instead": [166, 172, 173, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 227, 230, 245, 247, 251, 252, 253], "instruct": [187, 240, 241, 242, 243, 245, 249, 253, 256, 258], "int": [13, 24, 25, 26, 29, 59, 60, 61, 109, 110, 111, 161, 162, 163, 164, 165, 166, 170, 171, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 192, 194, 195, 200, 203, 204, 205, 206, 208, 214, 218, 219, 220, 223, 227, 229, 232, 236, 237, 238, 245, 246, 247, 248, 249], "int16": [174, 188, 192, 206, 219, 232, 234, 248, 257, 258], "int32": [236, 237, 247], "int4": [174, 219, 234, 253, 257], "int8": [159, 160, 174, 188, 189, 190, 191, 192, 201, 206, 207, 210, 211, 212, 219, 232, 234, 239, 248, 249, 257, 258], "int_multipli": 30, "intact": 232, "integ": [164, 165, 170, 178, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 218, 232, 236, 239, 245, 247, 257, 258], "integr": [25, 176, 183, 219], "intel": [241, 244], "intellig": 226, "intend": [187, 218, 223, 227, 229, 234, 239, 247], "inter": 215, "interact": [168, 171, 239], "intercept": 248, "interchang": 245, "interest": [9, 177, 184, 218], "interfac": [167, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 241, 253], "intermedi": [25, 169, 179, 182, 183, 185, 188, 192, 206, 215, 217, 219, 232, 239, 246, 249, 253], "intern": [21, 25, 171, 183, 185, 189, 193, 196, 197, 201, 207, 219, 226, 250], "interpol": [188, 206, 225], "interpret": [245, 246, 249], "introduc": [175, 222, 232, 248, 250, 253], "invalid": [172, 245], "invoc": [203, 204, 205], "invok": [175, 177, 179, 184, 185, 201, 218, 226, 228, 246, 249], "involv": [171, 182, 188, 192, 206, 220, 232, 235, 236, 237, 254, 258], "io": [174, 234], "ip": 187, "ipynb": 187, "is_avail": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 232, 234, 238, 244, 249], "is_bfloat16": 166, "is_float16": 166, "is_initi": [30, 161, 162, 166, 175, 178], "is_input_quant": [195, 250], "is_leaf_modul": 172, "is_output_quant": [195, 250], "is_quant": [195, 250], "is_sym": 247, "is_symmetr": [195, 241, 247, 250], "is_train": [188, 189, 190, 191, 192, 203, 205, 207, 209, 210, 211, 212, 213, 232], "is_unsigned_symmetr": 171, "isinst": [170, 236, 237, 245], "isol": 248, "issu": [21, 173, 215, 217, 220, 228, 234, 253, 254, 258], "item": [166, 197, 200, 213, 232, 236, 237, 246, 249, 256], "iter": [24, 25, 29, 181, 183, 188, 189, 190, 191, 192, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 218, 219, 223, 227, 229, 232, 246], "itertool": [236, 237], "its": [21, 30, 100, 158, 166, 174, 175, 182, 187, 188, 189, 190, 191, 193, 194, 195, 197, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 218, 223, 227, 230, 234, 236, 237, 239, 240, 245, 248, 250, 258], "itself": [200, 209, 213, 217, 226, 227], "j_": [161, 162, 163, 164, 165], "j_0": [161, 162, 163, 164, 165], "j_d": [161, 162, 163, 164, 165], "jaderberg": 226, "jan": 226, "jenkin": 242, "jian": 226, "jianhua": 226, "jit": [236, 237, 252], "job": [195, 196, 198, 199, 203, 204, 205, 209, 211, 212, 256], "join": [189, 193, 198, 199, 201, 206, 207, 208, 214, 219, 221, 222, 223, 227, 229, 232, 246], "jointli": [199, 211, 212], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 200, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "jupyt": [187, 240, 253], "just": [188, 192, 195, 196, 200, 201, 206, 211, 212, 213, 230, 248, 253], "k": [178, 208, 229, 236, 237], "kaim": 226, "kd": 253, "keep": [172, 191, 198, 232, 233, 250, 258], "kei": [166, 174, 189, 190, 191, 193, 197, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 234, 236, 237, 243, 247], "kept": [246, 249, 254], "kera": [18, 21, 187, 192, 193, 194, 198, 199, 200, 201, 202, 214, 217, 218, 219, 220, 221, 222, 227, 232, 240, 246, 249, 251, 253], "kernel": [30, 201, 223, 227, 229, 245, 253], "kernel_s": [21, 172, 173, 179, 201, 221, 222, 244, 246, 249], "key_dim": [21, 196, 197], "keyring_1": 243, "keyword": [30, 173], "kill": 242, "kl": 239, "kldivloss": 92, "know": [30, 188, 195, 196, 201, 206, 209], "knowledg": 247, "known": [173, 248], "kullback": 239, "kuzmin": 226, "kwarg": [21, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 173, 174, 175, 179, 197, 232, 246, 249, 253], "l1": [180, 186, 234, 238], "l1loss": 93, "l2": 234, "lab": [239, 257], "label": [188, 192, 193, 194, 195, 198, 199, 201, 206, 208, 214, 218, 219, 220, 227, 232, 236, 237, 246, 249], "label_dataset": 218, "label_mod": [192, 193, 198, 199, 201, 214, 219, 220, 227, 232, 246, 249], "labeled_data": 219, "labeled_data_load": 219, "lambda": [25, 170, 174, 182, 183, 192, 193, 194, 195, 196, 197, 201, 214, 218, 219, 220, 232, 245, 246, 249, 253], "laptop": [239, 240], "larg": [176, 192, 224, 226, 227, 229, 231, 235, 249, 258], "larger": [227, 229, 245], "last": 232, "lastli": 246, "latenc": [224, 233, 253, 258], "later": [185, 188, 195, 196, 200, 201, 209, 213, 241, 244, 253], "latest": [174, 234, 241, 242, 243, 244, 253], "launch": 187, "layer": [7, 18, 20, 21, 24, 25, 27, 28, 29, 30, 100, 168, 169, 170, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 192, 196, 203, 204, 205, 214, 216, 219, 220, 221, 223, 224, 227, 228, 229, 230, 233, 236, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258], "layer1": [200, 213], "layer2": [200, 213], "layer_nam": [177, 184, 218], "layer_output_util": [6, 19, 167, 217], "layern": [200, 213], "layernorm": [21, 98, 196, 197, 253], "layernorm1": [21, 197], "layernorm2": [21, 197], "layeroutpututil": [169, 217], "layers_to_exclud": 173, "layout": [160, 172], "lceil": [161, 162, 164, 165, 166, 248], "lead": [202, 210, 214, 218, 254], "leaf": [172, 174, 253], "leakyrelu": 99, "learn": [10, 23, 171, 179, 185, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 221, 222, 226, 233, 235, 236, 237, 238, 239, 243, 246, 249, 253, 258], "learnabl": [161, 162], "learnedgrid": 253, "learnedgridquant": 171, "learning_r": [203, 204, 205, 209, 211, 212, 220, 249], "learning_rate_schedul": [203, 204, 205, 209, 211, 212], "least": [182, 189, 193, 207], "leav": [214, 237], "left": [161, 162, 163, 164, 165, 166, 178, 188, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 225, 230, 232, 235, 245, 248], "legaci": [241, 253], "leibler": 239, "len": [24, 172, 181, 189, 192, 196, 206, 208, 214, 219, 227, 232, 236, 237, 246, 249], "length": [170, 175, 245, 247], "leq": [161, 162, 163, 164, 165], "less": [192, 206, 223, 225, 232, 233, 239, 245, 248, 250, 257], "lesser": [188, 206], "let": [172, 188, 192, 195, 196, 201, 206, 257], "level": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 25, 26, 27, 28, 29, 170, 171, 172, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 189, 191, 192, 193, 196, 198, 199, 203, 204, 205, 207, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 232, 233, 234, 235, 238, 240, 245, 246, 248, 249, 253, 254], "lfloor": [161, 162, 163, 164, 165, 166], "lib": [242, 243], "libjpeg": 243, "liblapack": 241, "libpymo": [171, 241], "libqnnhtp": 256, "libqnnmodeldlc": 256, "librari": [176, 239, 242, 243, 256], "lie": 245, "light": [188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213], "lightweight": 235, "like": [21, 171, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 226, 231, 232, 233, 240, 247, 248, 250, 256, 257], "limit": [188, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 253], "line": [242, 243, 256], "linear": [24, 27, 30, 100, 170, 171, 172, 173, 175, 176, 181, 214, 220, 221, 222, 223, 231, 245, 253], "linear1": [170, 245], "linear_1": 245, "link": [187, 243], "linux": [241, 243], "list": [18, 24, 25, 27, 28, 29, 59, 60, 61, 109, 110, 111, 164, 165, 166, 169, 170, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 186, 188, 192, 195, 197, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 225, 227, 229, 234, 236, 237, 238, 242, 243, 245, 247, 250, 258], "list_of_module_comp_ratio_pair": [18, 29, 223, 227, 229], "listen": 228, "lite": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "liter": [174, 234], "littl": [171, 189, 193, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 226, 258], "llm": [253, 257], "ln": 243, "load": [172, 173, 176, 185, 188, 189, 190, 191, 196, 214, 219, 220, 221, 222, 223, 226, 227, 229, 232, 236, 237, 238, 239, 246, 249, 253, 256, 257], "load_adapt": [236, 237], "load_checkpoint": 185, "load_data": 196, "load_dataset": [214, 219, 220, 232, 236, 237, 238, 246], "load_encod": [214, 246, 249], "load_encodings_to_sim": 217, "load_model": [188, 189, 190, 191, 214, 217, 219, 221, 222, 232, 246], "load_state_dict": 166, "loader": [24, 25, 26, 174, 180, 181, 182, 183, 186, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 232, 238, 246, 249], "local": [187, 228, 238, 241, 242, 243], "localresponsenorm": 101, "locat": [188, 192, 195, 200, 201, 206, 209, 213, 242, 258], "log": [173, 174, 192, 195, 196, 198, 199, 218, 232, 234], "log_2": 166, "log_dir": [195, 196, 198, 199], "log_fil": [174, 234], "log_input": 122, "log_prob": 48, "logdir": 196, "logger": 173, "logic": [30, 100, 175, 182, 188, 189, 190, 191, 203, 204, 205, 206, 207, 210, 211, 212, 213, 253], "logit": [206, 208, 232, 236, 237, 249], "logsigmoid": 102, "logsoftmax": 103, "long": 236, "longer": [171, 179, 203, 204, 205, 241, 245, 246, 247, 249, 257], "look": [21, 188, 192, 195, 196, 197, 200, 201, 206, 213, 240, 247, 256], "lookup": 197, "loop": [172, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 249, 254], "lora": [176, 239, 253], "lora_a": [176, 236, 237], "lora_a_lay": 237, "lora_add_lay": 237, "lora_alpha": 176, "lora_b": [176, 236, 237], "lora_b_lay": 237, "lora_config": 176, "lora_dropout": 176, "lora_modul": 176, "lora_mul_lay": 237, "lora_weights_after_adaptation_for_adapter1": 176, "loraconfig": 176, "loralay": [236, 237], "lose": 230, "loss": [24, 158, 177, 180, 181, 184, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 207, 210, 211, 212, 214, 219, 220, 226, 233, 236, 237, 238, 240, 246, 248, 249, 253], "loss_fn": [180, 186, 195, 220, 236, 237, 238, 249], "lost": [248, 258], "low": [171, 178, 201, 203, 205, 210, 226, 231, 235, 239, 246, 247, 253], "lower": [24, 181, 188, 192, 201, 206, 214, 222, 225, 232, 233, 239, 245, 254, 257], "lowest": 223, "lpbq": [170, 245, 247, 253], "lppool1d": 94, "lppool2d": 95, "lr": [220, 249], "lstm": [96, 253], "lstmcell": 97, "lsvrc": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "lt": 241, "m": [187, 196, 229, 241, 242, 243, 244], "mac": [29, 188, 203, 204, 205, 206, 223, 224, 226, 227, 229, 231, 232], "machin": [226, 235, 239, 241, 242, 243, 253, 258], "made": [172, 174, 206, 207, 210, 211, 212, 234, 239, 250, 253], "magnitud": 223, "mai": [21, 25, 30, 158, 159, 160, 168, 171, 172, 175, 176, 182, 183, 188, 190, 192, 195, 196, 200, 201, 202, 206, 209, 210, 213, 216, 218, 219, 222, 226, 245, 247, 253, 258], "main": [220, 250], "maintain": [189, 193, 207, 219, 225, 226, 239], "major": [226, 247], "make": [174, 175, 195, 196, 197, 201, 209, 234, 239, 250, 251, 252, 253, 257, 258], "makedir": [188, 189, 192, 193, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "man": 243, "manag": [241, 244, 257], "mandatori": 217, "manditori": 21, "mani": [172, 188, 192, 195, 196, 200, 201, 203, 204, 205, 206, 213, 214, 224, 253], "manner": [25, 183, 219, 222], "mantissa": [166, 170, 245], "mantissa_bit": [166, 170, 245], "manual": [18, 29, 161, 162, 171, 174, 203, 204, 205, 219, 223, 226, 227, 229, 241, 247, 253], "manual_param": [223, 227, 229], "manual_se": 206, "manualmodeparam": [18, 29, 223, 227, 229], "manylinux_2_34_x86_64": [241, 243], "map": [30, 159, 164, 165, 173, 175, 176, 192, 193, 194, 195, 197, 201, 214, 218, 219, 220, 225, 232, 236, 237, 239, 246, 247, 248, 249, 250, 253], "map_loc": 217, "marginrankingloss": 105, "marku": 226, "mask": 30, "maskedadd": 30, "match": [166, 179, 185, 197, 218, 223, 226, 227, 229, 230, 245, 246, 249, 250, 253, 254], "math": [214, 219, 232, 246, 258], "mathemat": [178, 188, 201, 206, 239, 252], "matmul": 253, "matmul_8": 173, "matric": 236, "matrix": 201, "matter": [30, 213], "max": [161, 162, 166, 168, 171, 176, 177, 184, 191, 198, 199, 201, 215, 216, 226, 241, 246, 247, 253, 256, 257], "max_epoch": [203, 204, 205, 209, 211, 212], "max_iter": [236, 237], "maximum": [10, 23, 25, 164, 165, 166, 179, 182, 183, 185, 188, 192, 193, 194, 195, 200, 201, 202, 206, 213, 219, 246, 248, 249], "maxlen": [21, 196, 197], "maxpool1d": 106, "maxpool2d": 107, "maxpool3d": 108, "maxpooling2d": 195, "maxunpool1d": 109, "maxunpool2d": 110, "maxunpool3d": 111, "mdoel": 220, "mean": [26, 175, 188, 192, 195, 196, 197, 200, 201, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 219, 220, 232, 246, 248, 250], "meaning": 192, "measur": [29, 177, 182, 184, 188, 203, 204, 205, 206, 218, 223, 227, 229, 232, 239, 258], "mechan": [172, 178, 214, 234], "meet": [25, 182, 183, 188, 192, 206, 219, 224, 225, 232, 258], "member": 250, "memori": [29, 160, 176, 203, 204, 205, 223, 224, 226, 227, 229, 230, 231, 233, 239, 253, 258], "memory_format": 160, "merg": 239, "messag": 192, "met": [182, 188, 192, 206], "meta": 176, "meta_data": 176, "metapackag": 187, "method": [25, 30, 100, 160, 169, 171, 172, 174, 175, 179, 182, 183, 185, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 219, 225, 226, 231, 232, 234, 236, 238, 239, 246, 248, 249, 254], "methodologi": 258, "metric": [29, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 218, 219, 220, 223, 227, 229, 232, 238, 246, 248, 249, 258], "mha": [196, 253], "middl": 258, "might": [182, 188, 189, 192, 193, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 218, 243, 247, 253, 254, 258], "migrat": [167, 246, 253], "mimic": 257, "mimick": 171, "min": [161, 162, 168, 171, 176, 177, 184, 191, 198, 199, 201, 215, 216, 241, 247, 253, 256, 257], "min_max": 253, "min_max_rang": [200, 213, 218], "minim": [10, 23, 179, 180, 185, 186, 188, 191, 192, 198, 199, 206, 211, 212, 222, 231, 232, 233, 238, 239, 240, 246, 248, 249], "minima": 238, "minimum": [10, 23, 164, 165, 172, 179, 185, 200, 213, 238, 246, 248, 249, 253], "minmaxencodinganalyz": 166, "minor": [247, 253], "miou": [188, 206], "mish": 112, "mismatch": [178, 201, 215, 217], "miss": [21, 166, 173, 256], "missing_kei": 166, "mix": [2, 25, 174, 182, 183, 187, 219, 251, 253, 258], "mixed_precis": [6, 19, 167, 188, 192, 206, 232, 234], "mixed_precision_algo": [174, 182, 188, 192, 206, 232], "mixed_preision_quant_model": 232, "mixedprecisionconfigur": [174, 234], "mixin": [30, 175], "mkdir": 187, "ml": [191, 196, 198, 199, 211, 212, 226], "mmp": 233, "mmp_log": [174, 234], "mnist": [223, 227, 229], "mnist_after_bn_re_estimation_qat_range_learn": 195, "mnist_torch_model": 223, "mnist_trained_on_gpu": [223, 227, 229], "mnt": 242, "mobil": [239, 240], "mobilenet": [214, 220, 238, 239], "mobilenet_v2": [214, 219, 220, 221, 222, 232, 234, 238, 244, 246, 249], "mobilenet_v2_weight": [214, 219, 221, 222, 232, 238, 246], "mobilenetv2": [214, 219, 220, 221, 222, 244, 246, 249], "mobilenetv2_1": [214, 221, 222], "mode": [18, 25, 29, 172, 179, 183, 185, 203, 204, 205, 219, 223, 227, 229, 246, 250, 253], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 250, 253, 255, 256, 257, 259], "model_after_qat": [196, 198, 199], "model_id": [236, 237], "model_input": [173, 195], "model_or_pipelin": [214, 238], "model_output": 195, "model_prepar": [19, 167, 197, 206, 207, 209, 210, 211, 212, 213, 218, 221, 222, 253], "model_prepare_requir": [25, 183, 219], "model_preparer_elementwise_add_exampl": 172, "model_preparer_functional_exampl": 172, "model_preparer_reused_exampl": 172, "model_preparer_subclassed_model_with_functional_lay": 21, "model_preparer_two_subclassed_lay": 21, "model_torch": 217, "model_transform": 172, "model_valid": 167, "model_weights_in_correct_ord": 197, "modelcompressor": [29, 203, 204, 205, 223, 227, 229], "modeling_opt": [236, 237], "modelprepar": [21, 172, 197, 206, 207, 210, 211, 212, 213], "modelvalid": 173, "modelwithelementwiseaddop": 172, "modelwithfunctionallinear": 173, "modelwithfunctionalrelu": 172, "modelwithnontorchfunct": 172, "modelwithoutfunctionallinear": 173, "modelwithoutreusednod": 173, "modelwithreusednod": 173, "modelwithreusedrelu": 172, "modif": [206, 207, 210, 211, 212], "modifi": [172, 176, 179, 185, 188, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 219, 221, 222, 230, 232, 236, 237, 243, 246, 248, 249, 253, 257, 258], "modul": [18, 24, 25, 26, 27, 28, 29, 30, 100, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 230, 232, 234, 236, 237, 238, 244, 245, 246, 249, 251, 252, 253, 258], "module_cl": 30, "module_classes_to_exclud": 172, "module_nam": [236, 237], "module_to_exclud": 172, "modulecompratiopair": [18, 29, 223, 227, 229], "moduledict": [30, 171, 175, 179, 244, 246, 249], "modulelist": [30, 171, 175, 179, 244, 246, 249], "modules_to_exclud": [25, 172, 180, 183, 186, 219, 238], "modules_to_ignor": [18, 29, 177, 184, 203, 204, 205, 218, 223, 227, 229], "momentum": [220, 221, 222], "monitor": 218, "monoton": [18, 29, 223, 225, 227, 229], "more": [18, 24, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 171, 173, 175, 181, 182, 185, 188, 192, 195, 196, 197, 200, 201, 206, 209, 213, 214, 218, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 239, 248, 250, 253, 254, 256, 257, 258], "most": [178, 196, 219, 239, 241, 242, 248, 250], "move": [187, 249], "movi": 196, "mp": [174, 234], "mp_configur": 234, "mse": [11, 171, 177, 180, 184, 186, 218, 248, 253], "mseloss": 104, "much": [203, 204, 205, 230, 258], "mul": 176, "mul_scal": 237, "multi": [196, 253], "multigpu": 253, "multiheadattent": [21, 196, 197, 253], "multilabelmarginloss": 113, "multilabelsoftmarginloss": 114, "multimarginloss": 115, "multipl": [18, 25, 27, 28, 29, 160, 169, 172, 173, 174, 175, 179, 183, 185, 200, 213, 217, 219, 221, 222, 223, 226, 227, 229, 234, 243, 245, 246, 248, 249, 253], "multipli": [175, 188, 206, 224, 226, 227, 229, 231], "must": [160, 166, 170, 173, 175, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 218, 219, 220, 224, 230, 238, 245, 246, 250, 257], "mutual": [166, 170, 245], "my_functional_model": 21, "myfunctionalmodel": 21, "n": [177, 178, 184, 218, 229, 245], "nagel": 226, "name": [18, 21, 30, 168, 169, 174, 175, 176, 177, 179, 182, 184, 185, 188, 189, 190, 191, 195, 197, 200, 213, 214, 216, 217, 218, 219, 221, 222, 227, 228, 232, 234, 236, 237, 242, 243, 246, 247, 248, 249, 253, 256], "name_": [177, 184, 200, 213, 218], "name_to_module_dict": 176, "name_to_quantizer_dict": [174, 182, 232], "named_modul": [236, 237], "named_paramet": 236, "namedtupl": 166, "namespac": [167, 171, 181, 182, 183, 184, 185, 186], "naming_schem": [169, 217], "namingschem": [169, 217], "nativ": [175, 242], "navig": 187, "na\u00efv": 231, "nconv": 221, "ndarrai": [197, 214, 219, 232, 246], "nearest": [25, 183, 185, 189, 192, 193, 196, 198, 199, 201, 202, 207, 210, 214, 219], "necessari": [158, 159, 160, 179, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 218, 221, 223, 227, 228, 229, 246, 249, 258], "necessarili": [188, 192, 206, 232], "necessit": 241, "need": [9, 21, 24, 29, 169, 174, 176, 177, 181, 184, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 227, 229, 232, 233, 234, 238, 239, 241, 243, 245, 247, 248, 249, 250, 251, 253, 256, 257, 258], "neg": [148, 149, 164, 165, 188, 195, 196, 201, 206], "negat": [189, 193, 207], "net": [187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 256], "network": [21, 175, 194, 196, 197, 201, 208, 224, 225, 226, 228, 239, 244, 248, 249, 253, 254], "neural": [188, 194, 201, 206, 208, 224, 226, 239, 248, 249, 254], "neuron": 239, "new": [160, 161, 162, 171, 172, 176, 185, 193, 197, 198, 199, 201, 202, 206, 213, 232, 234, 235, 236, 240, 241, 245, 251, 252, 253], "new_empti": 160, "next": [176, 188, 190, 192, 195, 196, 201, 206, 209, 214, 222, 243, 244, 246, 248, 253, 254], "next_conv_weight": 222, "nfolded_model": 221, "night": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "nllloss": 116, "nllloss2d": 117, "nmodel": [221, 222], "nn": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 170, 171, 172, 173, 174, 179, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 223, 227, 229, 232, 234, 236, 237, 238, 244, 245, 246, 249, 252, 253, 258], "nncf": 239, "nnext": 222, "no_grad": [173, 179, 206, 207, 208, 210, 211, 212, 213, 214, 232, 236, 237, 238, 244, 246, 249], "node": [25, 172, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 219, 221, 222, 238, 239, 246, 249, 252, 253, 257, 258], "noffset": 178, "nois": [10, 23, 179, 185, 218, 222, 246, 249, 250, 257], "noisi": [195, 209], "non": [172, 174, 180, 186, 194, 208, 228, 238, 248, 253, 256, 257], "none": [2, 13, 18, 24, 25, 26, 27, 28, 29, 30, 59, 60, 61, 71, 79, 80, 96, 97, 100, 109, 110, 111, 123, 124, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 232, 234, 238, 241, 242, 243, 244, 245, 246, 249], "norm": [192, 202, 214, 218, 222, 232, 253], "normal": [208, 214, 218, 219, 221, 232, 239, 246, 253], "notabl": 247, "note": [21, 25, 171, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 219, 223, 227, 228, 229, 232, 234, 238, 241, 242, 243, 245, 246, 249], "note1": [188, 206, 209, 213], "note2": [188, 206, 209, 213], "notebook": [189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 253], "noth": [18, 29, 223, 227, 229, 258], "notic": [168, 216, 253], "notimplementederror": 30, "now": [21, 172, 173, 178, 179, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 221, 222, 232, 246, 247, 249, 253], "np": [21, 192, 197, 214, 218, 219, 227, 232, 241, 246], "nprepared_model": [221, 222], "nprev": 222, "nscale": 178, "num": [164, 165], "num_batch": [24, 26, 180, 181, 186, 189, 190, 193, 194, 195, 200, 201, 207, 208, 209, 210, 213, 214, 218, 219, 220, 238, 246], "num_bias_correct_sampl": 210, "num_calibration_sampl": [214, 219, 220, 232, 246, 249], "num_candid": [180, 186, 238], "num_channel": 247, "num_class": 218, "num_comp_ratio_candid": [18, 29, 203, 204, 205, 223, 227, 229], "num_epoch": 220, "num_eval_sampl": [219, 232, 246], "num_head": [21, 196, 197], "num_iter": [192, 227, 232], "num_of_sampl": 219, "num_quant_sampl": 210, "num_reconstruction_sampl": [29, 203, 205, 223], "num_sampl": [174, 182, 194, 195, 206, 208, 214, 218, 232], "num_samples_for_phase_1": [25, 183, 219], "num_samples_for_phase_2": [25, 183, 219], "num_step": [164, 165], "num_word": 196, "num_work": [188, 189, 190, 191, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 238], "number": [18, 21, 24, 25, 26, 29, 30, 164, 165, 166, 170, 172, 174, 175, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 235, 238, 239, 242, 245, 247, 248, 249, 253, 257, 258], "numer": [169, 217], "numpi": [188, 189, 190, 191, 197, 214, 218, 219, 227, 232, 241, 246], "numpy_help": [221, 222], "nvidia": [239, 241, 242, 243, 244], "o": [188, 189, 192, 193, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 219, 221, 222, 223, 227, 229, 232, 241, 246], "object": [9, 25, 30, 158, 159, 160, 166, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 194, 195, 200, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 223, 227, 229, 232, 233, 234, 238, 240, 245, 246, 248, 249, 257, 258], "observ": [30, 166, 175, 179, 201, 209, 218, 226, 246, 248, 249], "obtain": [169, 218, 224, 247, 256], "obvious": [223, 227, 229], "occur": [168, 216, 247], "occurr": [177, 184, 218, 223], "oct": 226, "off": [24, 181, 188, 192, 206, 214, 220, 232, 258], "offer": [9, 177, 184, 194, 208, 215, 218, 219, 241], "offset": [30, 71, 161, 162, 163, 164, 165, 177, 178, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 218, 241, 244, 246, 247, 248, 249, 253, 256, 257], "offset_": [161, 162, 163, 164, 165], "often": [219, 221, 222, 226], "older": [234, 241], "omit": [225, 242, 250], "onc": [30, 160, 173, 176, 178, 191, 196, 198, 199, 203, 204, 205, 210, 211, 212, 223, 226, 234, 249, 251, 252, 256, 257, 258], "one": [24, 25, 27, 172, 173, 174, 176, 178, 179, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 219, 221, 223, 226, 227, 228, 229, 234, 236, 237, 241, 242, 243, 244, 245, 246, 247, 249, 253, 257], "ones": [244, 248], "ones_lik": [161, 162], "onli": [9, 13, 158, 159, 160, 164, 165, 168, 170, 171, 172, 174, 175, 177, 178, 179, 182, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 226, 227, 228, 230, 232, 234, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258], "onnx": [0, 1, 2, 6, 9, 10, 25, 169, 174, 179, 183, 185, 187, 214, 216, 217, 218, 219, 220, 221, 222, 232, 234, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 256, 257, 258], "onnx_export_arg": [25, 169, 179, 183, 185, 217, 219, 246, 249], "onnx_file_nam": 252, "onnx_model": 218, "onnx_util": 217, "onnxexportapiarg": [25, 169, 179, 183, 185, 217, 219, 246, 249], "onnxruntim": [188, 189, 190, 191, 217, 218, 219, 243, 246, 253], "onnxruntime_v": 243, "onnxsim": [188, 189, 190, 191, 214, 217, 218, 219, 221, 222, 232, 246], "onto": 257, "op": [18, 24, 25, 173, 179, 181, 182, 183, 185, 188, 189, 190, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 219, 227, 246, 248, 249, 250, 253, 256], "op_list": [195, 250], "op_typ": [182, 188, 195, 206, 250], "op_type_map": 173, "open": [195, 239], "oper": [18, 21, 30, 171, 172, 173, 175, 188, 191, 192, 197, 198, 199, 206, 211, 212, 217, 222, 227, 231, 232, 238, 239, 244, 246, 248, 249, 250, 252, 253, 254, 257, 258], "oppos": [190, 202, 210], "opset": 253, "opset_vers": [179, 185, 246, 249], "opt": [192, 236, 237], "optim": [10, 23, 24, 25, 29, 166, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 226, 228, 232, 236, 237, 238, 239, 240, 243, 246, 248, 249, 253, 257, 258], "optimized_accuraci": [208, 219], "option": [18, 24, 25, 26, 29, 30, 161, 162, 163, 164, 165, 166, 170, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 223, 227, 229, 232, 238, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 256], "optlearnedpositionalembed": [236, 237], "optmiz": [188, 206], "orang": 230, "order": [30, 100, 173, 175, 189, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 211, 212, 213, 215, 223, 234, 245, 249, 250, 251, 252, 256, 257], "org": [172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 241, 242, 243], "org_top1": 232, "organ": [239, 255], "origin": [18, 29, 30, 167, 171, 172, 175, 180, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 217, 218, 223, 224, 225, 227, 228, 229, 231, 232, 238, 239, 248, 253, 258], "original_model": 197, "original_model_weight": 197, "ort": [188, 189, 190, 191, 219, 246], "oscil": 220, "other": [160, 170, 171, 172, 174, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 225, 234, 235, 236, 237, 240, 241, 244, 245, 248, 252, 253, 254, 255], "otherwis": [161, 162, 164, 165, 170, 173, 176, 179, 185, 189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 222, 245, 246, 247, 249, 254, 258], "our": [176, 195, 196, 209], "out": [21, 161, 162, 163, 164, 165, 166, 172, 176, 177, 178, 179, 184, 185, 197, 218, 241, 244, 246, 249, 253], "out1": [21, 197, 234], "out2": 234, "out3": 234, "out_": [161, 162, 163, 164, 165], "out_channel": [170, 245], "out_featur": [30, 171, 175], "outlier": [218, 248], "outlin": [224, 235], "output": [7, 18, 20, 21, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 238, 239, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256], "output_bw": [25, 176, 183, 219], "output_dim": [21, 196, 197], "output_dir": 256, "output_dir_path": 256, "output_dlc": 256, "output_encod": 30, "output_nam": [179, 185, 188, 189, 190, 191, 214, 219, 221, 232, 246, 249], "output_op_nam": [18, 227], "output_path": 256, "output_qtzr": 30, "output_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 179, 182, 232, 244, 246, 249], "output_s": [59, 60, 61, 109, 110, 111], "output_shap": 197, "outsid": 250, "over": [25, 164, 165, 175, 178, 183, 219, 223, 225, 226, 227, 229, 231, 232, 248], "overal": [224, 225, 254], "overfit": 238, "overhead": [192, 203, 205, 206, 248], "overlin": [162, 165], "overload": [164, 165, 179, 246, 249], "overrid": [25, 160, 172, 179, 183, 185, 206, 207, 210, 211, 212, 219, 246, 249], "overridden": [30, 175, 250], "overtax": 258, "overview": [171, 255], "overwri": [246, 249], "overwriiten": [246, 249], "overwritten": [171, 237], "own": [218, 219, 257], "p": [188, 206, 242], "p1": 234, "p2": 234, "packag": [167, 187, 243, 244, 253], "pad": [21, 172, 173, 179, 195, 221, 222, 244, 246, 249], "pad_sequ": 196, "page": [224, 240, 241, 242, 243, 244, 245, 248, 258], "pair": [18, 27, 29, 221, 223, 227, 229], "pairwisedist": 119, "parallel": 249, "param": [18, 24, 29, 30, 100, 173, 174, 175, 176, 177, 180, 181, 182, 184, 186, 188, 189, 190, 191, 193, 194, 195, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 218, 221, 222, 223, 227, 229, 232, 233, 234, 236, 238, 245, 247, 257], "param_bitwidth": [214, 246, 247, 249], "param_bw": [25, 176, 183, 219], "param_bw_override_list": [24, 181, 214], "param_encod": [171, 247], "param_nam": [177, 184, 218], "param_name_": [177, 184, 200, 213, 218], "param_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 175, 176, 179, 244, 245, 246, 249], "paramet": [1, 2, 11, 12, 13, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 229, 231, 232, 234, 236, 237, 238, 239, 245, 246, 247, 250, 253, 256, 257, 258], "parameter_quant": [174, 182, 232], "parent": [30, 100, 175, 232, 253], "pareto": [25, 182, 183, 188, 192, 206, 219], "pareto_front": 219, "pareto_front_list": [188, 206, 232], "pars": [24, 179, 181, 185, 214, 246, 249], "part": [21, 177, 184, 218, 226, 245, 257], "partial": [25, 172, 183, 219, 246, 249], "particular": [170, 173, 188, 192, 206, 232, 245, 250], "pass": [2, 9, 10, 13, 21, 23, 24, 25, 26, 30, 100, 166, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 227, 228, 232, 234, 236, 237, 238, 239, 245, 246, 248, 249, 252, 253, 254, 256, 258], "pass_calibration_data": [188, 189, 190, 191, 193, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 220, 246, 249], "passwd": 242, "past": [187, 253], "patch": 247, "path": [18, 24, 25, 29, 168, 172, 174, 176, 177, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 242, 243, 246, 249, 256], "path_to_imagenet": [232, 246, 249], "pathlik": [246, 249], "pattern": [226, 253], "pb": 256, "pcq": [177, 184, 218], "pcq_quantsim_config": 201, "pdf": [177, 184, 218, 253], "peft": [167, 236, 237, 253], "peft_model_id": [236, 237], "peft_util": 176, "peftquantutil": 176, "pendyam": 226, "per": [18, 29, 169, 170, 175, 176, 177, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 220, 221, 222, 223, 227, 228, 229, 231, 232, 238, 239, 247, 248, 249, 250, 253], "per_block": 247, "per_block_int_scal": 247, "per_channel": 247, "per_channel_quant": [175, 195, 201, 247, 250], "per_layer_mse_loss": [200, 213, 218], "per_layer_quant_dis": [200, 213, 218], "per_layer_quant_en": [200, 213, 218], "per_sample_weight": 71, "per_tensor": 247, "percentag": [189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 239], "percentil": [10, 23, 179, 185, 246, 249], "perform": [24, 25, 26, 28, 30, 100, 161, 162, 166, 175, 176, 177, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 253, 255, 257, 258], "perform_per_layer_analysis_by_disabling_quant_wrapp": [177, 184, 218], "perform_per_layer_analysis_by_enabling_quant_wrapp": [177, 184, 218], "perhap": [188, 195, 200, 201, 206, 209, 213], "period": [24, 181, 214], "persist": 166, "person": 239, "perspect": [188, 201, 206], "phase": [13, 25, 174, 182, 183, 188, 192, 206, 219, 226], "phase1": [182, 188, 206], "phase1_optim": [182, 188, 206], "phase2": 182, "phase2_revers": 182, "phone": [239, 240], "php": [187, 188, 192, 195, 200, 201, 206, 209, 213], "pick": [21, 182, 188, 192, 206, 224, 225], "pickl": [18, 29, 223, 227, 229], "pictur": [189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "piec": [21, 172], "pillow": 243, "pin": 253, "pin_memori": [160, 172, 206], "pink": 230, "pinpoint": 218, "pip": [187, 228, 241, 242, 243, 244, 253], "pip3": 243, "pipelin": [25, 183, 196, 198, 199, 217, 219, 248, 253, 254, 257], "pitr": 226, "pixelshuffl": 120, "pixelunshuffl": 121, "place": [24, 28, 179, 181, 182, 185, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 222, 232, 246, 249, 250, 253], "place_model": [236, 237], "placehold": [236, 237], "placement": [188, 189, 190, 191, 203, 204, 205, 206, 207, 210, 211, 212, 213, 253], "plai": 201, "plan": [242, 257], "platform": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 218, 239, 240, 241], "pleas": [167, 171, 173, 176, 179, 185, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 209, 213, 218, 223, 227, 229, 241, 246, 249, 253, 256], "plot": [168, 182, 188, 192, 200, 206, 213, 216, 218, 232], "pmatrix": [161, 162, 163, 164, 165], "point": [21, 30, 158, 159, 170, 171, 176, 177, 182, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 218, 221, 222, 232, 233, 239, 240, 245, 247, 248, 253, 254, 257, 258], "pointer": [192, 195, 196, 200, 201, 213], "poissonnllloss": 122, "pool": [192, 193, 195, 201, 202], "pop": 197, "popul": 247, "popular": 235, "port": [228, 242, 253], "port_id": 242, "portabl": 239, "pos_emb": [21, 197], "posit": [21, 148, 149, 164, 165, 195, 196, 197], "possibl": [21, 25, 173, 179, 182, 183, 185, 188, 192, 194, 197, 206, 208, 218, 219, 221, 225, 245, 246, 249, 250, 251, 252, 254, 258], "post": [25, 183, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 218, 219, 222, 226, 231, 239, 240, 246, 247, 248, 249, 253, 258], "post1": 243, "post_training_percentil": [10, 23, 179, 185, 246, 249], "post_training_tf": [10, 23, 24, 168, 177, 179, 181, 184, 185, 188, 192, 193, 195, 196, 198, 201, 202, 206, 209, 210, 214, 216, 218, 219, 246, 247, 249, 253], "post_training_tf_enhanc": [10, 23, 24, 25, 177, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 195, 196, 200, 206, 207, 209, 210, 211, 213, 214, 218, 219, 246, 247, 249], "potenti": [195, 209, 228], "power": [233, 239, 247, 253, 254], "pp": 226, "practic": [188, 192, 194, 195, 196, 200, 201, 203, 204, 205, 206, 208, 213, 226], "pre": [187, 215, 217, 218, 221, 223, 226, 231, 238, 241, 249, 253], "preced": [220, 230, 231], "precis": [2, 25, 161, 162, 163, 164, 165, 166, 174, 182, 183, 187, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 207, 209, 210, 211, 212, 213, 219, 239, 247, 253, 254], "precomput": [236, 246], "precursor": 221, "pred": [192, 206, 227, 232], "pred_label": [214, 219, 232, 246], "pred_prob": [214, 219, 232, 246], "predefin": [194, 208], "predict": [192, 200, 217, 218, 227, 232, 239, 246], "prefac": 243, "prefer": [167, 171, 241, 245, 257], "prefix": [24, 175, 176, 179, 181, 185, 214, 246, 249], "prelu": [118, 253], "prepar": [21, 25, 172, 176, 183, 194, 219, 221, 222, 232, 241, 251, 252, 253, 255, 258], "prepare_model": [21, 172, 197, 206, 207, 209, 210, 211, 212, 213, 218, 221, 222], "prepared_model": [172, 218, 221, 222], "prepend": [175, 187], "preprocess": [192, 193, 196, 198, 199, 201, 214, 219, 220, 227, 232, 246, 249], "preprocess_input": [192, 193, 198, 199, 201, 202, 214, 219, 220, 227, 232, 246, 249], "prerequisit": 228, "presenc": 249, "present": [169, 171, 173, 176, 197, 209, 217, 245, 247], "preserv": [166, 172, 214], "preserve_format": 160, "preset": 232, "pretrain": [188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 232, 234, 246, 248, 249], "pretti": [223, 227, 229], "prev": 222, "prev_conv_weight": 222, "prevent": [171, 172, 223, 237, 253], "previou": [18, 29, 178, 182, 188, 192, 206, 210, 223, 224, 227, 229, 239, 241, 242, 254, 256], "primari": 240, "print": [30, 164, 165, 171, 172, 173, 175, 178, 179, 188, 189, 190, 191, 195, 196, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 221, 222, 223, 227, 229, 232, 241, 243, 244, 246, 249], "prior": [182, 188, 192, 206, 207, 210, 211, 212, 247, 253], "privileg": [187, 243], "probabl": 239, "problem": [172, 241, 253, 254, 258], "problemat": [172, 254], "proce": [25, 183, 219, 221, 243, 258], "procedur": [190, 202, 203, 205, 210, 225, 228, 241, 243, 246, 253], "proceed": [188, 189, 190, 191, 214, 219, 221, 222, 232, 246], "process": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 217, 219, 221, 223, 225, 226, 227, 234, 239, 243, 245, 246, 248, 257], "processor": [239, 241, 244], "produc": [25, 158, 159, 168, 172, 183, 188, 200, 201, 206, 213, 215, 216, 218, 219, 225, 232, 239, 247, 248], "product": [224, 239, 240], "profil": [174, 232, 256], "progbar": [193, 198, 199, 201, 202], "progbar_stat_upd": [193, 198, 199, 201, 202], "progress": 228, "project": 239, "prone": [219, 234], "pronounc": 233, "propag": [230, 234, 253], "propagate_encod": [25, 179, 183, 185, 219, 246, 249], "proper": 253, "properli": [161, 162, 217, 253], "properti": [166, 171], "provid": [6, 19, 21, 24, 25, 30, 166, 171, 173, 176, 177, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 224, 225, 226, 227, 228, 232, 234, 236, 238, 239, 245, 246, 247, 248, 249, 254, 255, 256, 257, 258], "proxi": 172, "prune": [29, 187, 204, 224, 225, 227, 229, 230, 231, 239, 253], "pt": 176, "pt_model": [188, 189, 190, 191, 214, 219, 221, 222, 232, 246], "pth": [176, 179, 185, 217, 223, 227, 229, 246, 249], "ptq": [25, 183, 194, 208, 218, 219, 222, 226, 231, 239, 248, 249, 253, 257, 258], "public": [167, 246, 253], "publish": 253, "pure": 252, "purpos": [188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 239], "put": [182, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "pypi": [242, 243], "python": [21, 239, 241, 242, 243, 244, 253], "python3": [187, 241, 242, 243, 244, 253], "pythonpath": [187, 217], "pytorch": [0, 25, 167, 169, 172, 173, 175, 178, 179, 180, 183, 185, 186, 187, 193, 194, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 256, 258], "q": [30, 158, 159, 160, 161, 162, 164, 165, 166, 171, 175, 178, 236, 237, 244, 248], "q_": 248, "q_modul": 171, "q_output": 30, "qadd": 175, "qairt": 256, "qat": [24, 181, 187, 188, 191, 196, 201, 206, 214, 220, 236, 237, 239, 248, 253, 254, 257, 258], "qat2": 253, "qc": 253, "qc_quantize_op": 253, "qcquantizewrapp": [171, 253], "qdo": 239, "qdq": [162, 166, 236, 257, 258], "qlinear": [30, 171, 175], "qmax": [161, 162, 164, 165, 178, 179, 244, 246, 249], "qmin": [161, 162, 164, 165, 178, 179, 244, 246, 249], "qmodul": 171, "qmul": 175, "qmult": 30, "qnn": [201, 202, 233, 253, 256, 257], "qol": 253, "qsim": 195, "qtzr": [178, 236], "quad": [161, 162, 163, 164, 165], "qualcomm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259], "qualiti": [188, 206], "quant": [9, 10, 23, 24, 25, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 212, 214, 218, 219, 232, 238, 246, 249, 253], "quant_analyz": [6, 19, 167, 171, 200, 213, 218], "quant_analyzer_result": 218, "quant_dequ": 158, "quant_schem": [25, 168, 177, 179, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 238, 241, 244, 246, 247, 249], "quant_sim": 234, "quant_sim_model": 185, "quant_stats_visu": [168, 216], "quant_wrapp": 171, "quantanalyz": [9, 171, 177, 184, 215, 253], "quantiz": [2, 6, 10, 13, 19, 21, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 194, 197, 203, 204, 205, 208, 214, 216, 217, 220, 221, 222, 224, 226, 228, 232, 233, 234, 237, 238, 239, 241, 244, 246, 250, 252, 253], "quantizablemultiheadattent": 253, "quantizaion": 231, "quantization_overrid": 256, "quantization_tf": 241, "quantizationdatatyp": [25, 171, 174, 179, 182, 183, 185, 188, 192, 206, 219, 232, 246, 249], "quantizationmixin": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 236, 237], "quantizationmod": 241, "quantizationsim": [188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "quantizationsimmodel": [9, 25, 30, 168, 170, 171, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 232, 234, 236, 238, 244, 245, 246, 247, 248, 249, 250, 253, 256], "quantizationsimmodelv1": 171, "quantizationsimmodelv2": 171, "quantize_lora_scale_with_fixed_rang": 176, "quantized_": [214, 238], "quantized_callback": [195, 196, 198, 199], "quantized_dlc": 256, "quantized_linear": 30, "quantized_mobilenet_v2": [214, 220, 246, 249], "quantized_mobilenetv2": 249, "quantized_model": [179, 246, 249], "quantized_repr": [30, 158, 159, 160], "quantizedadd": 175, "quantizedconv2d": [171, 175, 179, 244, 245, 246, 249], "quantizedequant": [158, 171, 175, 176, 178, 179, 236, 241, 244, 245, 246, 249], "quantizedlinear": [30, 171, 175, 245], "quantizedmaskedadd": 30, "quantizedmultipli": [30, 175], "quantizedoptlearnedpositionalembed": [236, 237], "quantizedrelu": 171, "quantizedsoftmax": 175, "quantizedtensor": [30, 158, 160, 161, 178], "quantizer_arg": 247, "quantizer_group": [174, 182, 232], "quantizerbas": [30, 175, 178, 237], "quantizergroup": [25, 174, 182, 183, 219, 232], "quantparam": 210, "quantschem": [10, 23, 24, 25, 168, 177, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 232, 238, 244, 246, 249, 253], "quantsim": [6, 19, 24, 167, 168, 169, 171, 174, 176, 177, 181, 184, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 232, 233, 234, 236, 237, 238, 239, 240, 244, 245, 247, 249, 253, 257, 258], "quantsim_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "quantsim_layer_output": 217, "quantsim_layer_output_util": 217, "quantsimmodel": 238, "quatiz": 257, "quic": [187, 239, 241, 242, 243], "quick": [178, 197, 201, 203, 205, 241, 246], "quickli": [188, 192, 200, 201, 206, 213, 240, 244], "qwa": 253, "r": [176, 177, 182, 184, 201, 218, 232], "radic": 258, "rais": [21, 30, 166, 197, 214, 219, 232, 246], "rand": [173, 206, 207, 209, 210, 211, 212, 213, 217, 218], "randn": [30, 159, 160, 161, 162, 172, 173, 175, 179, 188, 189, 190, 191, 208, 214, 218, 219, 220, 221, 222, 232, 234, 238, 241, 244, 246, 249], "random": [21, 197, 208, 218, 219, 223, 232, 241, 244], "random_input": [21, 197], "random_split": 246, "randperm": 206, "rang": [21, 164, 165, 168, 172, 177, 178, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 201, 202, 206, 207, 208, 209, 210, 211, 214, 215, 216, 220, 222, 225, 231, 232, 236, 237, 239, 246, 248, 249, 253, 254], "rank": [18, 29, 176, 227, 229, 231, 235], "rank_select": 229, "rank_select_schem": [29, 229], "rankselectschem": [29, 223, 227, 229], "rare": 253, "rate": [21, 195, 196, 197, 198, 199, 203, 204, 205, 209, 211, 212, 226, 249], "rather": [172, 195, 209, 238, 250], "ratio": [18, 29, 203, 204, 205, 223, 224, 227, 229], "raw": [236, 237], "rceil": [164, 165], "re": [178, 180, 182, 186, 187, 188, 197, 206, 232, 238, 253, 258], "re_estimation_dataset": 195, "re_estimation_dataset_s": 195, "reach": [194, 208, 219], "read": 218, "reader": [188, 195, 200, 201, 206, 209, 213], "readi": [178, 179, 185, 188, 189, 190, 191, 192, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 246, 249, 254, 257], "readili": [188, 192, 195, 200, 201, 206, 209, 213], "real": [158, 159, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 228, 232, 244], "realiz": [174, 234], "realli": [188, 195, 200, 201, 209, 213], "reason": [173, 189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 258], "recalcul": [195, 209], "receiv": 172, "recent": [242, 257], "recip": 253, "recogn": [173, 248], "recommend": [1, 2, 9, 10, 21, 24, 178, 181, 188, 189, 190, 191, 192, 193, 194, 197, 201, 207, 208, 214, 218, 220, 221, 222, 224, 232, 241, 242, 244, 245, 246, 254, 257, 258], "recomput": [176, 253], "reconstruct": [24, 181, 203, 205, 214], "record": [177, 184, 218], "recov": [190, 202, 203, 204, 205, 210, 253, 254, 257, 258], "recoveri": 258, "recurr": 253, "recurs": 253, "redefin": 173, "redesign": 253, "reduc": [175, 176, 188, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 220, 222, 226, 230, 231, 233, 239, 245, 248, 253, 254], "reduct": [203, 204, 205, 224, 258], "redund": [221, 226], "reestim": [26, 195, 220], "reestimate_bn_stat": [26, 195, 209, 220], "ref": 243, "refer": [169, 171, 176, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 217, 232, 238, 245, 246, 247, 249, 256], "reflect": [198, 199, 211, 212, 248], "reflectionpad1d": 128, "reflectionpad2d": 129, "reflectionpad3d": 130, "regard": [182, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213], "regist": [30, 166, 188, 236, 237, 253], "regress": 223, "regular": [13, 24, 30, 178, 179, 181, 185, 188, 196, 214, 232, 246, 249], "rel": [18, 29, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 223, 224, 227, 229, 232, 254], "relat": [171, 223, 227, 229, 240, 248], "relationship": 245, "releas": [187, 241, 242, 243], "release_tag": [187, 242, 243], "relev": [203, 204, 205, 233, 257], "reli": [171, 188, 189, 190, 191, 192, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "reload": 210, "relu": [21, 126, 171, 172, 173, 195, 196, 197, 214, 221, 222, 230, 250, 251, 252, 253], "relu1": [21, 173, 252], "relu2": [21, 173, 251, 252], "relu6": [127, 221, 222], "remain": [171, 180, 186, 214, 238, 253], "remov": [25, 26, 172, 183, 197, 219, 220, 221, 223, 230, 237, 239, 242, 246, 247, 248, 249, 253], "remove_all_quant": 237, "remove_column": [236, 237], "reorder": 197, "reorgan": 253, "repeat": [176, 201, 223, 258], "repeatedli": 257, "replac": [171, 172, 175, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 236, 243, 245, 248, 249, 253], "replace_lora_layers_with_quantizable_lay": [176, 236, 237], "replaced_module_typ": 176, "replicationpad1d": 131, "replicationpad2d": 132, "replicationpad3d": 133, "repo": [242, 243], "report": [234, 253, 258], "repositori": [187, 242, 243], "repres": [21, 25, 158, 159, 160, 166, 174, 175, 176, 177, 179, 182, 183, 184, 185, 200, 213, 218, 219, 223, 225, 227, 229, 232, 234, 239, 244, 246, 247, 248, 249, 252, 256], "represent": [158, 159, 160, 166, 178, 197, 239, 248, 253, 256], "reqs_deb_common": 243, "reqs_deb_onnx_common": 243, "reqs_deb_onnx_gpu": 243, "reqs_deb_tf_gpu": 243, "reqs_deb_torch_common": 243, "reqs_deb_torch_gpu": 243, "requant": 221, "request": 234, "requir": [21, 29, 30, 169, 171, 172, 176, 178, 179, 185, 188, 189, 192, 197, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 226, 227, 228, 229, 232, 234, 236, 238, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258], "requires_grad": [159, 160, 172, 246, 249], "requires_grad_": [171, 236, 237], "rerun": 173, "resblock": 21, "research": 239, "resembl": 21, "resid": [242, 253], "residu": 223, "resiz": [206, 214, 219, 232, 246], "resnet": [179, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 224, 227, 232, 246, 249], "resnet18": [179, 188, 189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 246, 249], "resnet18_after_adaround": 189, "resnet18_after_cle_bc": [207, 208, 210], "resnet18_after_qat": [209, 211, 212], "resnet18_mixed_precis": [188, 206], "resnet50": [192, 193, 194, 198, 199, 200, 201, 202, 218, 227, 232], "resnet50_after_adaround": 193, "resnet50_after_amp": 192, "resnet50_after_cl": 202, "resnet50_pcq_adaround": 201, "resolv": [173, 253], "resort": 254, "resourc": [188, 195, 196, 197, 201, 206, 209, 239, 258], "respecit": [188, 206], "respect": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 178, 180, 186, 198, 199, 218, 232, 238, 251, 253], "respond": [200, 213], "respons": [182, 188, 192, 206, 226, 239, 258], "ressembl": 197, "rest": [193, 198, 199, 201, 202, 253, 254], "restor": [185, 203, 204, 205, 248, 253, 254, 257], "restrict": 245, "resu": 21, "result": [21, 25, 30, 158, 159, 160, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 226, 227, 229, 232, 236, 237, 238, 245, 246, 248, 249, 250], "results_dir": [25, 177, 182, 183, 184, 188, 192, 200, 206, 213, 218, 219, 232], "retain": [232, 239], "retest": 258, "retrain": [239, 252, 257], "retriev": 30, "retrieve_context": 256, "retuern": 232, "return": [21, 24, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 225, 227, 229, 232, 236, 237, 238, 245, 246, 248, 249, 251, 252], "return_dict": [236, 237], "reus": [172, 173, 188, 206, 251, 252], "reveal": 254, "revert": 254, "review": 196, "revis": 247, "revisit": 224, "rework": 247, "rewrit": 173, "rfloor": [161, 162, 163, 164, 165, 166, 248], "rgb": [214, 219, 232, 246, 252], "rgb_output": 252, "right": [161, 162, 163, 164, 165, 166, 175, 178, 188, 192, 194, 196, 206, 208, 230, 232, 245, 248], "rm": 242, "rmsnorm": 253, "rnn": [123, 253], "rnncell": 124, "ro": 242, "robust": [238, 253, 257], "root": [206, 208, 242, 243, 253], "rough": [188, 206], "roughli": [25, 174, 182, 183, 219, 232], "round": [18, 24, 25, 29, 181, 183, 185, 187, 201, 218, 219, 227, 229, 239, 248, 253], "round_mod": 210, "round_nearest": 241, "rounding_mod": [25, 179, 183, 185, 192, 193, 196, 198, 199, 201, 202, 219, 246, 249], "roundingmod": 241, "routin": [188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 246], "rrelu": 125, "rtype": [158, 159, 160, 174, 182, 232], "rule": [232, 234, 245, 250, 257], "run": [9, 18, 21, 25, 26, 29, 161, 162, 171, 172, 173, 174, 175, 177, 178, 179, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 223, 226, 227, 228, 229, 232, 233, 234, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 256, 257, 258], "run_forward_pass": [179, 246, 249], "run_infer": [25, 183, 208, 219], "runnabl": 257, "runtim": [30, 178, 179, 185, 188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 217, 218, 221, 223, 224, 226, 227, 229, 232, 239, 240, 242, 245, 246, 247, 249, 253, 255, 256, 257, 258], "runtimeerror": [166, 179, 246, 249], "s_1": 245, "s_2": 245, "s_n": 245, "safe": 160, "safetensor": 176, "sai": [172, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 224, 232, 234], "sake": [190, 210, 217], "same": [9, 21, 25, 30, 100, 158, 159, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 217, 218, 219, 222, 231, 234, 235, 245, 246, 249, 250], "sampl": [25, 168, 174, 175, 177, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 218, 219, 221, 222, 223, 227, 232, 236, 237, 238, 244, 246, 248, 253], "sampled_dataset": [194, 195, 200], "sandeep": 226, "saniti": 178, "satisfactori": [214, 220, 238, 254, 258], "satisfi": [172, 174, 189, 194, 208, 219, 234, 245], "saurabh": 226, "save": [18, 24, 25, 29, 168, 169, 176, 177, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 227, 229, 232, 238, 246, 248, 249, 256, 257], "save_checkpoint": 185, "save_dir": 217, "save_path": [168, 216], "saved_eval_scores_dict": [18, 29, 223, 227, 229], "saw": 201, "scalar": [177, 184, 218, 253], "scale": [30, 159, 160, 161, 162, 163, 164, 165, 166, 176, 178, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 218, 222, 231, 239, 241, 244, 245, 246, 247, 248, 249, 253, 256, 257], "scale_": [161, 162, 163, 164, 165, 178], "scale_max": 176, "scale_min": 176, "scenario": [189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 207, 210, 211, 212, 213, 230], "scene": 257, "schedul": [203, 204, 205, 209, 211, 212, 249], "schema": 253, "scheme": [10, 23, 24, 25, 29, 169, 177, 179, 181, 183, 184, 185, 188, 192, 195, 196, 200, 203, 204, 205, 206, 209, 213, 214, 217, 218, 219, 223, 226, 227, 229, 239, 246, 249, 253], "scope": 172, "score": [18, 25, 29, 177, 182, 183, 184, 188, 189, 190, 191, 192, 194, 195, 208, 209, 218, 219, 223, 225, 226, 227, 228, 229], "script": [209, 242, 243], "sdk": [188, 201, 206, 240, 257], "search": [10, 23, 25, 179, 180, 182, 183, 185, 186, 188, 195, 196, 198, 199, 203, 204, 205, 206, 209, 211, 212, 219, 231, 232, 238, 246, 249, 250, 253, 257], "searcher": 226, "sec": [188, 192, 201, 206, 232], "second": [21, 24, 175, 179, 180, 181, 186, 200, 213, 214, 221, 222, 232, 238, 245, 246, 249], "section": [173, 182, 188, 195, 206, 208, 236, 237, 242, 243, 245, 248, 250, 255, 258], "see": [18, 21, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 226, 227, 228, 229, 240, 241, 244, 245, 246, 248, 250, 253, 254, 258], "seed": 223, "seem": 226, "seen": [200, 213, 218], "select": [10, 18, 23, 25, 29, 179, 183, 185, 188, 192, 206, 218, 219, 224, 227, 228, 229, 230, 236, 237, 239, 241, 242, 243, 246, 248, 249, 250, 256], "select_param": [29, 229], "self": [21, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 172, 173, 189, 197, 208, 214, 219, 232, 246, 251, 252], "selu": 134, "sens": 175, "sensit": [177, 182, 184, 188, 190, 192, 202, 206, 210, 215, 220, 225, 231, 233, 248, 253, 257, 258], "sentiment": 196, "separ": [21, 24, 171, 172, 173, 179, 181, 185, 192, 214, 218, 220, 246, 249, 253, 254], "separableconv2d": 253, "seq": 238, "seq_length": [236, 237], "seq_ms": [6, 167, 171, 238], "seqms": [231, 238], "seqmseparam": [180, 186, 238], "sequanti": 197, "sequenc": [179, 194, 196, 208, 214, 219, 231, 246, 249, 250], "sequenti": [11, 21, 171, 180, 186, 195, 196, 197, 221, 222, 244, 250, 251, 253, 254], "seri": [25, 174, 179, 183, 185, 194, 208, 219, 234, 246, 249, 256], "serial": 256, "serializetostr": [188, 189, 190, 191, 217], "serv": [175, 214, 218, 219, 228], "servic": 234, "sess": [188, 189, 190, 191, 227], "session": [188, 189, 190, 191, 214, 217, 218, 219, 232, 246], "set": [13, 18, 25, 29, 30, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 218, 219, 220, 223, 224, 225, 226, 227, 229, 232, 233, 235, 236, 237, 239, 242, 243, 245, 247, 248, 249, 250, 254, 257, 258], "set_activation_quantizers_to_float": [170, 245], "set_adaround_param": [25, 183, 194, 208, 219], "set_and_freeze_param_encod": [189, 193, 201, 207, 214], "set_bitwidth_for_lora_adapt": 176, "set_blockwise_quantization_for_weight": [170, 245], "set_default_kernel": 30, "set_export_param": [25, 183, 219], "set_extra_st": 166, "set_grouped_blockwise_quantization_for_weight": [6, 170, 245], "set_kernel": 30, "set_mixed_precision_param": [25, 183, 219], "set_model_input_precis": [174, 234], "set_model_output_precis": [174, 234], "set_model_preparer_param": [25, 183, 219], "set_precis": [174, 234], "set_quant_scheme_candid": [25, 183, 219], "set_quantizers_to_candid": [174, 182, 232], "set_rang": [158, 159], "set_transform": [214, 219, 232, 246], "set_verbos": [192, 232], "settabl": 248, "setup": [171, 221, 232, 241, 244], "sever": [173, 175, 218, 224, 238, 251, 252, 253], "sgd": [220, 246, 249], "sh": [242, 243], "shall": 247, "shape": [21, 27, 28, 29, 158, 159, 160, 161, 162, 166, 170, 171, 172, 173, 175, 176, 178, 179, 188, 189, 190, 191, 195, 196, 197, 201, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 221, 222, 223, 227, 229, 232, 236, 244, 245, 246, 249, 251], "share": [173, 175], "sharp": 226, "sharpli": [203, 204, 205, 258], "shell": 242, "shift": [202, 210], "shift_label": [236, 237], "shift_logit": [236, 237], "should": [18, 21, 29, 30, 100, 160, 167, 169, 171, 172, 175, 176, 177, 179, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 223, 224, 227, 229, 238, 241, 244, 245, 246, 247, 249, 251, 252, 256, 258], "shouldn": 178, "show": [173, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 222, 225, 245, 254], "showcas": [200, 213], "showin": 219, "shown": [171, 176, 200, 213, 218, 230, 241, 242, 244, 252, 254], "shuffl": [192, 193, 198, 199, 201, 214, 219, 220, 223, 227, 232, 246, 249], "side": 230, "sigmoid": [21, 136, 172], "sign": [164, 165, 171, 178, 248], "signatur": [29, 30, 164, 165, 179, 189, 203, 204, 205, 218, 219, 223, 227, 229, 246, 249], "signific": [214, 254], "significantli": 253, "silu": 135, "sim": [168, 170, 171, 174, 176, 177, 179, 180, 182, 184, 185, 186, 192, 195, 196, 201, 208, 214, 216, 218, 219, 220, 232, 234, 237, 238, 244, 245, 246, 247, 249], "sim1": 171, "sim2": 171, "sim_model": [193, 198, 199, 200, 201, 202, 207, 209, 210, 211, 212, 213], "simd": 243, "similar": [176, 178, 222, 239, 241, 244, 245, 248], "similarli": [188, 192, 200, 201, 206, 209, 213, 254, 258], "simpl": [172, 192, 195, 196, 200, 201, 213, 218, 223, 227, 229], "simpler": 171, "simpli": [172, 177, 184, 185, 188, 192, 195, 196, 201, 206, 209, 218], "simplic": 217, "simplif": [222, 246], "simplifi": [1, 2, 9, 10, 171, 214, 217, 218, 219, 221, 222, 232, 246, 256], "simuat": [189, 190, 193, 198, 199, 201, 202, 207, 210, 211, 212], "simul": [166, 170, 175, 176, 179, 185, 187, 195, 196, 203, 204, 205, 213, 214, 215, 216, 217, 220, 221, 232, 233, 238, 239, 245, 246, 247, 249, 250, 252, 253, 258], "sinc": [176, 179, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 224, 232, 238, 245, 246, 248, 249], "singl": [25, 169, 172, 174, 182, 183, 200, 201, 213, 217, 218, 219, 223, 225, 226, 227, 229, 232, 245, 247, 248, 253], "singular": [204, 205, 226, 227, 229], "situat": 218, "six": 250, "size": [21, 160, 161, 162, 163, 164, 165, 170, 173, 175, 178, 189, 193, 194, 195, 196, 197, 201, 207, 214, 227, 229, 232, 233, 239, 245, 246, 247, 257, 258], "skew": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212], "skip": [24, 25, 180, 181, 183, 186, 190, 202, 210, 214, 219, 220, 223, 236, 238, 242, 246, 249], "skipped_optim": 221, "slight": 201, "slightli": [188, 206, 235], "slim": 253, "slow": 226, "small": [179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 220, 235, 238, 246, 249], "smaller": [24, 181, 182, 188, 201, 206, 214, 226, 227, 229, 232, 254, 257], "smoothl1loss": 137, "snapdragon": [188, 201, 206], "snippet": [172, 188, 206, 244, 245], "snpe": [201, 202, 253], "so": [24, 171, 172, 173, 175, 179, 181, 185, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 218, 221, 222, 223, 225, 227, 229, 236, 237, 239, 243, 246, 249, 256, 258], "softmarginloss": 138, "softmax": [21, 139, 175, 196, 197, 206], "softmax2d": 140, "softmin": 141, "softplu": [142, 172], "softshrink": 143, "softsign": 144, "softwar": [239, 240, 253], "sole": 218, "solut": [192, 206, 225, 232, 249, 254], "some": [18, 21, 29, 171, 172, 175, 178, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 222, 223, 225, 227, 229, 230, 232, 236, 237, 248, 254, 257, 258], "someth": [185, 218, 226], "sometim": [188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 206, 207, 210, 211, 212, 218, 223, 226, 258], "somewher": 258, "soon": 219, "sort": 197, "sourc": [2, 10, 13, 18, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 214, 216, 217, 218, 219, 220, 222, 223, 227, 229, 232, 234, 238, 239, 242, 243, 245, 246, 249, 254], "space": [29, 223, 227, 229, 232, 248], "spars": 253, "sparse_categorical_crossentropi": 196, "spatial": [18, 29, 187, 223, 224, 225, 229, 231, 253], "spatial_svd": [29, 204, 205, 223, 227, 229], "spatial_svd_auto_mod": 227, "spatial_svd_manual_mod": 227, "spatialsvdparamet": [18, 29, 204, 205, 223, 227, 229], "special": [25, 172, 183, 219, 239], "specif": [9, 21, 25, 29, 30, 170, 173, 175, 177, 179, 183, 184, 185, 188, 189, 192, 193, 195, 197, 201, 206, 207, 209, 218, 219, 223, 227, 229, 235, 245, 246, 248, 249, 250, 253, 256, 258], "specifi": [24, 29, 161, 162, 163, 164, 165, 166, 174, 177, 179, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 232, 234, 242, 245, 246, 247, 249, 250], "speed": [18, 29, 176, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 221, 223, 226, 227, 229, 249, 253], "speedup": [180, 186, 188, 201, 206, 238], "split": [180, 186, 214, 219, 220, 232, 236, 237, 238, 245, 246, 248, 249], "sqnr": [25, 174, 180, 182, 183, 186, 188, 192, 206, 219, 232, 238, 248], "sqrt": 172, "squar": [215, 248], "squeez": [195, 206], "ssvd": 224, "ssvd_comp_stat": 205, "ssvd_compressed_model": 205, "ssvd_cp_compressed_model": 205, "ssvd_cp_finetuned_model": 205, "ssvd_finetuned_model": 205, "stabl": [172, 195, 209, 214], "stack": [214, 219, 232, 246], "stand": 253, "standalon": [214, 253], "standard": [166, 172, 175, 191, 196, 198, 199, 211, 212, 239], "start": [21, 24, 164, 165, 172, 173, 181, 182, 187, 188, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 211, 212, 213, 214, 219, 224, 232, 241, 246, 248, 250, 258], "start_beta": [24, 181, 214], "start_i": [192, 232], "start_x": [192, 232], "stat": [26, 168, 216, 220, 223, 227, 229], "statatist": 209, "state": [166, 180, 186, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 232, 238], "state_dict": 166, "stateless": 252, "statement": 172, "static": [21, 29, 172, 173, 223, 227, 229], "static_patch_count": 21, "staticgridperchannelquant": 171, "staticgridquant": 171, "staticgridquantwrapp": 171, "staticmethod": [172, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "statist": [26, 29, 161, 162, 166, 168, 175, 177, 179, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 215, 216, 220, 223, 227, 229, 231, 246, 249], "std": [206, 208, 214, 219, 232, 246], "step": [164, 165, 172, 174, 176, 177, 180, 184, 186, 187, 188, 190, 191, 192, 194, 195, 196, 200, 201, 206, 209, 213, 223, 224, 225, 226, 233, 234, 235, 236, 237, 241, 242, 243, 244, 248, 254, 255, 256, 257], "still": [167, 171, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 241, 245, 251, 254, 258], "stochast": 185, "stop": [24, 181, 214, 219], "stopiter": [214, 219, 232, 246], "storag": [245, 248], "store": [24, 159, 174, 176, 179, 181, 185, 188, 192, 206, 214, 233, 234, 245, 246, 249], "str": [18, 24, 25, 166, 168, 169, 172, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 197, 214, 216, 217, 218, 219, 227, 232, 234, 238, 246, 249, 252], "str_idx": 219, "straightforward": 258, "strategi": 258, "stream": [214, 219, 220, 238], "strict": [166, 174, 234, 246, 248, 249, 250], "strict_symmetr": [195, 241, 250], "strict_valid": [25, 183, 219], "strictli": 166, "stride": [160, 172, 173, 179, 221, 222, 244, 246, 249], "strike": 226, "string": [174, 234, 242, 247, 250], "strongli": [21, 172, 178, 189, 193, 201, 207], "structur": [25, 172, 175, 183, 200, 205, 213, 219, 226, 234, 239], "style": 201, "sub": [200, 213], "subbackward0": 178, "subclass": [21, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 178, 195, 196, 246, 251, 253], "subdirectori": [188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "subfold": [188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "sublay": 173, "submit": 256, "submodul": [21, 252], "subpackag": [30, 253], "subsequ": [158, 188, 190, 201, 202, 206, 214, 219, 221, 222, 239, 250, 253], "subset": [177, 179, 184, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 220, 230, 234, 245, 246, 249], "subsetrandomsampl": 208, "subsidiari": 240, "substanti": 247, "substep": 242, "substitut": 246, "success": [194, 208], "successfulli": [179, 217, 246, 249], "sudo": [187, 243], "suffic": [189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212], "suffici": [218, 246, 248, 249, 257], "suffix": 242, "suggest": [185, 203, 205, 225, 226, 258], "suit": [194, 208, 219, 236, 239], "suitabl": 239, "sum": [192, 206, 208, 214, 219, 227, 232, 246, 249], "summari": [196, 214, 221, 222, 226, 253], "sun": 226, "super": [21, 30, 172, 173, 197, 214, 219, 232, 246, 253], "supergroup": [195, 248, 253], "suppli": 245, "support": [13, 21, 24, 29, 30, 172, 173, 174, 177, 179, 180, 181, 182, 184, 185, 186, 188, 192, 195, 196, 197, 206, 209, 211, 212, 214, 216, 218, 220, 221, 223, 224, 226, 227, 229, 231, 232, 238, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 258], "supported_kernel": [182, 188, 206], "supported_kernel_op": [174, 182, 232], "suppos": [182, 188, 192, 206], "svd": [18, 29, 187, 223, 224, 225, 231, 253], "switch": 245, "symbol": [21, 172], "symbolic_trac": [25, 172, 183, 219], "symfp": [180, 186, 238], "symmetr": [30, 158, 159, 160, 161, 162, 170, 171, 175, 176, 178, 179, 197, 236, 244, 245, 246, 247, 248, 249, 250, 253], "symmetri": [171, 180, 186, 238], "symqt": [180, 186, 238], "sync": 249, "syntax": 247, "systemat": 239, "t": [25, 30, 172, 176, 178, 179, 180, 182, 183, 186, 188, 192, 195, 196, 200, 201, 206, 209, 213, 218, 219, 232, 236, 237, 238, 242, 246, 249, 250, 257], "tabl": [168, 187, 216, 228, 242, 247], "tag": [187, 242, 243], "take": [25, 29, 30, 170, 173, 174, 178, 179, 182, 183, 188, 192, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 209, 213, 214, 219, 220, 223, 225, 226, 227, 229, 230, 232, 234, 245, 246, 249, 253, 254, 257], "taken": [21, 230], "tanh": 145, "tanhshrink": 146, "tap": [177, 184, 218], "tar": [29, 229], "target": [10, 18, 21, 23, 29, 41, 42, 48, 62, 64, 81, 87, 88, 92, 93, 104, 105, 113, 114, 115, 116, 117, 122, 137, 138, 176, 179, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 219, 221, 223, 224, 225, 226, 227, 229, 232, 238, 239, 246, 247, 248, 249, 253, 254, 258], "target_comp_ratio": [18, 29, 203, 204, 205, 223, 227, 229], "target_data": [188, 189, 190, 191, 206, 207, 209, 210, 211, 212, 213], "target_length": 48, "target_modul": 176, "task": [188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 228, 239, 247], "taxonomi": 226, "tbd": [216, 238], "teach": 187, "techiqu": 210, "techniqu": [25, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 218, 219, 221, 222, 223, 224, 227, 229, 232, 233, 235, 236, 239, 240, 245, 248, 249, 253, 254, 257, 258], "technologi": [239, 240], "tell": 201, "temporari": [214, 219, 221, 222, 232, 246], "temporarili": [171, 237], "tend": 214, "tensor": [10, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 190, 197, 200, 201, 202, 206, 210, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 227, 229, 232, 234, 236, 237, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254], "tensor_nam": 247, "tensor_quant": 171, "tensorboard": [195, 196, 198, 199], "tensorflow": [0, 19, 187, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 213, 214, 216, 217, 218, 219, 220, 221, 222, 227, 232, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 253, 256, 257, 258], "tensorquantizationsimforpython": 241, "term": [179, 227, 229, 239, 240, 245, 246, 249], "termin": 187, "test": [177, 184, 195, 196, 197, 218, 236, 237, 243, 257, 258], "test_dataload": [236, 237], "test_dataset": [236, 237], "text": [21, 161, 162, 163, 164, 165, 197, 236, 237], "textclassif": 197, "tf": [21, 177, 184, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 209, 213, 217, 218, 219, 227, 232, 242, 246, 251, 253], "tf_cpp_min_log_level": [192, 194, 195, 198, 199, 232], "tf_dataset": [193, 201, 202], "tf_enhanc": [188, 192, 195, 196, 206, 209], "tfencod": 171, "tflite": [188, 201, 206], "tfoplambda": [21, 197, 253], "than": [18, 24, 29, 171, 172, 173, 181, 182, 185, 188, 189, 193, 195, 196, 206, 207, 209, 214, 223, 224, 227, 229, 232, 234, 238, 245, 249, 250, 253, 257], "thei": [172, 173, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 228, 232, 235, 236, 237, 245, 248, 251, 254, 257], "them": [21, 25, 166, 171, 172, 173, 175, 176, 183, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 226, 234, 239, 246], "theme": 253, "thereaft": 232, "therebi": [188, 206, 233], "therefor": [176, 182, 188, 192, 195, 196, 197, 206, 221, 224, 232], "theta_": [161, 162], "thi": [9, 18, 21, 24, 25, 29, 30, 100, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "thing": [189, 190, 191, 193, 194, 201, 202, 203, 204, 205, 207, 210, 211, 212, 256], "those": [9, 177, 184, 197, 218, 234, 236, 250, 257], "though": [30, 178, 188, 192, 195, 196, 201, 206, 233, 245, 250, 258], "three": [172, 188, 203, 204, 205, 206, 224, 257], "threshold": [147, 168, 216, 219], "through": [21, 160, 171, 172, 174, 175, 177, 182, 184, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 214, 218, 222, 232, 234, 236, 237, 246, 248, 249, 258], "throughout": [239, 250], "throw": [30, 178, 179, 246, 249], "thrown": [246, 249], "thu": [158, 159, 160], "tijmen": 226, "till": [182, 188, 192, 206], "time": [18, 29, 160, 172, 173, 192, 194, 200, 208, 210, 213, 214, 218, 219, 223, 226, 227, 228, 229, 232, 234, 245, 249, 257], "tmp": [25, 177, 183, 184, 195, 200, 213, 214, 218, 219, 220, 221, 222, 232, 246, 249], "tmp_dir": 176, "tmpdir": 176, "to_arrai": [221, 222], "to_list": [174, 182, 232], "todo": [174, 234], "togeth": [201, 232], "toi": 218, "token": [21, 196, 197, 236, 237, 254], "token_and_position_embed": 197, "token_emb": [21, 197], "tokenandpositionembed": [21, 197], "tokenized_dummy_text": [236, 237], "toler": [194, 208, 219, 224], "tolist": 206, "too": [203, 205, 245], "tool": [177, 184, 197, 218, 222, 230, 233, 239, 245, 253, 255, 256, 258], "toolkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "top": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 25, 26, 27, 28, 29, 170, 174, 177, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 227, 228, 229, 232, 234, 238, 245, 246, 249], "top1": [192, 208, 227, 232], "top1_accuraci": 206, "top5": 192, "topk": [206, 208], "torch": [25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 187, 188, 189, 190, 191, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 242, 243, 244, 245, 246, 249, 252, 253, 258], "torch_stabl": [241, 242, 243], "torchscript": [25, 169, 179, 183, 185, 217, 219, 239, 246, 249], "torchvis": [179, 188, 189, 190, 191, 193, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 232, 234, 238, 244, 246, 249], "total": [192, 197, 225, 227, 232, 236, 237, 246, 248], "total_length": [236, 237], "total_sampl": [214, 219, 232, 246], "totensor": [206, 208, 214, 219, 232, 246], "touch": 21, "toward": 254, "tpu": 239, "tqdm": [206, 208, 219, 232, 236, 237, 246, 249], "trace": [21, 25, 168, 172, 183, 216, 219, 252], "traceabl": [172, 236, 237, 252], "traceback": 172, "traceerror": 172, "tracer": 172, "track": [176, 200, 213, 218], "track_lora_meta_data": 176, "track_meta_data": 176, "track_running_stat": [221, 222], "trade": [24, 181, 188, 192, 206, 214, 232], "tradeoff": [188, 192, 206, 232, 239, 258], "train": [10, 21, 23, 25, 26, 29, 177, 179, 183, 184, 185, 187, 188, 192, 197, 206, 208, 214, 215, 217, 218, 219, 220, 222, 223, 226, 227, 229, 231, 232, 235, 238, 239, 240, 246, 248, 253, 254, 258], "train_dataload": [179, 236, 237, 246, 249], "train_dataset": [195, 236, 237], "train_dataset_s": 195, "train_flag": [29, 223, 227, 229], "train_load": [209, 223], "train_model": [29, 223, 227, 229], "train_one_epoch": [236, 237], "trainabl": [199, 212, 235, 236, 237], "trainer": [29, 187, 203, 204, 205, 209, 211, 212, 223, 227, 229], "training_range_learning_with_tf_enhanced_init": [10, 23, 179, 185, 246, 249], "training_range_learning_with_tf_init": [10, 23, 179, 185, 195, 199, 209, 212, 220, 238, 244, 246, 249], "trainingmod": [188, 191], "transact": 226, "transform": [21, 172, 197, 206, 207, 208, 210, 211, 212, 213, 214, 219, 232, 236, 237, 245, 246, 253], "transformer_block": [21, 197], "transformerblock": [21, 197], "transit": 232, "translat": 201, "transpos": 178, "trap": 238, "travers": 234, "tri": [203, 204, 205, 226], "tripletmarginloss": 148, "tripletmarginwithdistanceloss": 149, "triumph": 234, "true": [13, 18, 25, 29, 30, 159, 160, 161, 162, 166, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 188, 189, 190, 191, 192, 193, 195, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 241, 244, 245, 246, 247, 249, 250], "true_quant": [236, 237], "truli": 172, "try": [18, 29, 188, 189, 190, 191, 192, 201, 203, 204, 205, 206, 214, 219, 221, 222, 223, 224, 226, 227, 229, 232, 246, 254, 257], "tune": [29, 176, 185, 189, 190, 191, 193, 194, 196, 198, 199, 202, 207, 208, 210, 211, 212, 223, 224, 227, 229, 240, 249, 257, 258], "tuner": 236, "tupl": [24, 25, 27, 28, 29, 97, 161, 162, 163, 164, 165, 169, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 192, 200, 206, 213, 214, 217, 218, 219, 221, 222, 223, 227, 229, 232, 234, 245, 246, 249, 252], "turn": 250, "tweak": 176, "twice": 21, "two": [13, 21, 29, 171, 172, 173, 174, 182, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 218, 225, 226, 227, 229, 232, 234, 239, 245, 248, 249, 256, 257], "txt": [174, 234, 243, 256], "type": [24, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 192, 194, 195, 197, 200, 203, 204, 205, 206, 208, 211, 212, 214, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 232, 238, 239, 242, 244, 245, 246, 249, 250, 253, 256, 257], "typeerror": 172, "typic": [21, 30, 175, 188, 189, 193, 194, 195, 196, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 224, 239, 245, 248, 257, 258], "u": [196, 201, 242], "ubuntu": [241, 242, 244], "ubuntu22": 253, "ubuntu2204": 243, "uint16": 247, "uint32": 247, "uint8": [158, 247], "unaccept": 258, "unchang": [180, 186, 238, 246, 249], "uncompress": 224, "under": [168, 171, 182, 188, 206, 216, 218, 220, 250, 254], "undergo": 239, "underli": [30, 178, 254], "understand": [171, 178, 188, 192, 195, 196, 197, 200, 201, 206, 209, 213], "undo": [26, 220], "uneven": 254, "unexpect": 166, "unexpected_kei": 166, "unflatten": 150, "unfold": 151, "unid": [25, 183, 219], "uniniti": [214, 238], "uninstal": 243, "unintuit": [25, 183, 219], "union": [18, 24, 25, 27, 28, 29, 169, 170, 173, 174, 177, 179, 181, 182, 183, 184, 185, 214, 217, 218, 219, 221, 222, 223, 227, 229, 234, 245, 246, 249], "uniqu": [201, 242], "unit": 239, "unknown": 224, "unlabel": [25, 183, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 219, 232, 246], "unlabeled_data": 219, "unlabeled_data_load": [214, 218, 219, 232], "unlabeled_dataset": [194, 195, 200, 214, 218, 219, 220], "unlabeled_dataset_iter": 218, "unlabeled_imagenet_data_load": 208, "unlabeled_imagenet_dataset": 208, "unlabeleddatasetwrapp": [194, 208], "unlabelled_data_load": 219, "unless": [25, 30, 179, 183, 185, 219, 230, 242, 246, 249, 258], "unlik": [166, 209, 221], "unmodifi": [225, 235], "unnecessari": [188, 201, 206, 221, 230, 253], "unrol": [172, 253], "unsign": [248, 250], "unsigned_symmetr": [195, 241, 250], "unsimplifi": [188, 189, 190, 191, 214, 219, 221, 222, 232, 246], "unsqueez": [236, 237], "until": [25, 161, 162, 179, 183, 194, 208, 219, 220, 246, 249], "untouch": [246, 249], "unus": 242, "unwrap": 197, "up": [18, 21, 24, 29, 174, 176, 181, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 220, 223, 226, 227, 229, 230, 232, 234, 239, 249, 250, 257], "updat": [166, 187, 189, 191, 193, 197, 198, 199, 201, 202, 207, 208, 210, 211, 212, 220, 228, 237, 243, 247, 248, 249, 253], "updatestat": 241, "upgrad": [167, 243, 253], "upon": [26, 30, 175, 220, 256], "upsampl": 152, "upsamplingbilinear2d": 153, "upsamplingnearest2d": 154, "upstream": [223, 230], "upto": [188, 195, 200, 201, 206, 209, 213, 232], "url": [29, 187, 223, 227, 228, 229, 242, 243], "us": [1, 2, 7, 9, 10, 18, 20, 21, 23, 24, 25, 26, 29, 30, 158, 159, 161, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "usabl": 247, "usag": [173, 176, 178, 239, 247, 253, 256], "use_all_amp_candid": [182, 188, 206], "use_cach": [236, 237], "use_cuda": [29, 188, 189, 190, 191, 192, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 217, 223, 227, 229, 241], "use_embedded_encod": [179, 185, 246, 249], "use_monotonic_fit": [18, 29, 223, 227, 229], "use_safetensor": 176, "use_strict_symmetr": 171, "use_symmetric_encod": 171, "user": [21, 24, 25, 29, 30, 167, 171, 172, 174, 178, 179, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 221, 223, 226, 227, 229, 232, 234, 241, 242, 243, 246, 247, 249, 251, 252, 253], "userflow": [180, 186, 238], "usr": [242, 243], "usual": [220, 226, 248, 249, 258], "util": [9, 21, 171, 173, 176, 177, 184, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 232, 234, 236, 237, 238, 244, 245, 246, 249, 253], "v": [24, 181, 182, 188, 192, 200, 206, 213, 214, 232, 242, 245, 248, 258], "v1": [171, 192, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 232, 236, 237, 241, 253], "v2": [30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 174, 179, 216, 234, 236, 237, 245, 246, 249, 253], "val": [188, 189, 190, 191, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "val_dataset": 200, "val_transform": 208, "valid": [173, 177, 182, 184, 188, 192, 195, 196, 198, 199, 200, 201, 206, 208, 209, 213, 214, 218, 219, 223, 227, 229, 232, 238, 245, 246, 247, 253], "validate_example_model": 173, "validate_for_missing_modul": 173, "validate_for_reused_modul": 173, "validate_model": 173, "validation_check": 173, "validation_d": [192, 227, 232], "validation_data": [195, 196, 198, 199], "valu": [10, 18, 23, 24, 29, 30, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 174, 176, 177, 179, 181, 182, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 217, 218, 222, 223, 224, 225, 226, 227, 229, 232, 234, 239, 241, 244, 245, 246, 247, 248, 249, 250, 253], "value_qtzr": 30, "vanilla": 196, "var": [26, 81, 220], "vari": [182, 224, 232], "variabl": [18, 21, 29, 161, 162, 172, 187, 223, 225, 227, 229, 242, 243], "varianc": [195, 209, 222], "variant": [239, 241, 243, 244, 253], "variant_str": 242, "varieti": 222, "varint": 242, "variou": [29, 174, 182, 194, 200, 208, 213, 223, 226, 227, 229, 231, 232, 242, 248, 253, 254], "vector": [189, 193, 201, 207, 253], "vedaldi": 226, "venic": 226, "ver": 253, "verbos": 192, "veri": [189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 210, 211, 212, 213, 218, 224, 226, 232], "verifi": [21, 172, 207, 210, 211, 212], "versa": [176, 188, 192, 206, 225, 232, 248, 254], "version": [30, 100, 168, 171, 172, 175, 179, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 236, 237, 239, 242, 243, 244, 246, 248, 249, 253, 258], "via": [21, 25, 183, 219, 224, 239, 241, 248, 253, 256], "vice": [176, 188, 192, 206, 225, 232, 248, 254], "view": [168, 173, 178, 215, 216, 228, 232, 236, 237, 240, 241], "view_a": 208, "viewabl": 187, "vision": 226, "visit": 243, "visual": [29, 196, 200, 213, 218, 223, 226, 227, 229, 232, 242, 253], "visualization_tool": [167, 216], "visualization_url": [29, 223, 227, 229], "visualize_stat": [168, 216], "visualizecompress": 228, "vocab_s": [21, 196, 197, 236, 237], "vol": 226, "volum": 230, "w": [177, 182, 184, 195, 218, 219, 229, 230, 232, 242, 246, 253], "w16a16": 253, "w4a16": 253, "w4a8": [219, 253, 257, 258], "w4fp16": 253, "w8a16": [219, 246, 257, 258], "w8a8": [219, 249, 257, 258], "wa": [18, 29, 158, 176, 178, 188, 189, 192, 193, 195, 196, 197, 201, 203, 205, 206, 207, 209, 217, 223, 226, 227, 229, 232, 234, 247, 253], "wai": [171, 178, 180, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 212, 213, 217, 238, 246, 257], "want": [30, 169, 172, 182, 185, 188, 192, 195, 196, 200, 201, 206, 213, 217, 236, 237, 241, 242, 243, 258], "warm": [24, 181, 214], "warn": 173, "we": [21, 169, 171, 172, 173, 175, 176, 178, 182, 188, 189, 192, 193, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 209, 213, 214, 217, 219, 221, 222, 224, 226, 227, 232, 233, 236, 237, 242, 245, 246, 254, 257, 258], "websit": [224, 240], "websocket": 228, "weight": [21, 24, 27, 29, 30, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 231, 232, 234, 235, 237, 238, 239, 244, 245, 246, 248, 249, 250, 253, 257, 258], "weight_bw": 210, "weight_decai": 220, "weight_info": 197, "weight_nam": 197, "weight_q": 178, "weight_qdq": 178, "weight_svd": [29, 223, 227, 229], "weight_svd_auto_mod": 229, "weight_svd_manual_mod": 229, "weights_in_correct_ord": 197, "weights_pdf": [200, 213, 218], "weightsvdparamet": [29, 223, 227, 229], "well": [158, 173, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 210, 211, 212, 213, 214, 218, 226, 232], "were": [176, 194, 201, 208, 217, 224, 230, 247, 250, 253], "weren": 172, "wget": 243, "what": [197, 228, 257], "whatev": 242, "wheel": [242, 243], "wheel_file_nam": [242, 243], "when": [18, 21, 25, 29, 30, 166, 172, 175, 177, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 223, 226, 227, 228, 229, 230, 232, 233, 234, 238, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "whenev": 252, "where": [24, 29, 161, 162, 163, 164, 165, 166, 172, 176, 178, 179, 181, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 220, 221, 223, 225, 227, 228, 229, 230, 232, 239, 242, 243, 246, 247, 248, 249, 252, 253, 256], "wherea": [178, 182, 188, 206], "wherein": [169, 217], "whether": [25, 166, 172, 173, 174, 183, 188, 189, 190, 191, 193, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 217, 219, 225, 234, 246, 249], "which": [18, 21, 24, 25, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 238, 239, 241, 245, 246, 247, 248, 250, 253, 256, 257], "while": [29, 166, 175, 176, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 223, 225, 227, 229, 235, 247, 248, 254, 257, 258], "whl": [241, 242, 243], "who": 247, "whole": [194, 195, 245, 248], "whose": [168, 169, 170, 172, 216, 217, 245, 250, 256], "why": [188, 201, 206, 254], "wide": [221, 222, 239], "width": [177, 184, 188, 189, 190, 191, 201, 206, 207, 209, 210, 211, 212, 213, 218, 219, 221, 222, 227, 229, 230, 231, 233, 245, 247, 248, 254, 257, 258], "wikitext": [236, 237], "wildcard": 178, "wise": [177, 180, 184, 186, 218, 220, 238, 239, 253, 254], "wiseconv2d": [214, 222], "wish": [214, 219, 221, 222, 232, 234, 246], "within": [30, 158, 159, 160, 175, 196, 218, 224, 239, 242, 248, 253, 257], "without": [25, 158, 160, 166, 168, 176, 179, 183, 185, 189, 193, 194, 196, 198, 199, 201, 202, 207, 208, 210, 211, 212, 216, 219, 230, 238, 242, 246, 249, 257, 258], "won": [25, 172, 180, 183, 186, 219, 238, 250], "word": [160, 196], "work": [171, 173, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 222, 226, 235, 245, 253, 258], "workaround": 172, "workflow": [224, 231, 235, 256, 257], "workspac": [187, 242], "world": 244, "wors": 226, "worth": 178, "would": [21, 171, 174, 188, 192, 195, 200, 201, 206, 209, 213, 227, 234, 236, 250, 253], "wq": 253, "wrap": [30, 171, 172, 196, 200, 213], "wrap_linear": 171, "wrapped_module_nam": [177, 184, 218], "wrapper": [177, 184, 192, 196, 206, 207, 210, 211, 212, 218, 223, 227, 229, 232, 253], "write": [174, 189, 190, 191, 193, 198, 199, 202, 207, 210, 211, 212, 234, 245, 246, 249], "written": [179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 246, 249], "wsl2": 253, "www": 187, "x": [21, 158, 159, 160, 166, 167, 172, 173, 175, 188, 189, 190, 191, 192, 193, 196, 197, 200, 201, 206, 207, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 224, 227, 232, 241, 244, 246, 247, 248, 249, 251, 252, 253], "x1": [63, 119, 172], "x2": [63, 119, 172, 251, 252], "x86": [241, 243, 244], "x86_64": [241, 243], "x_": 248, "x_c": 166, "x_dq": 159, "x_q": [159, 160], "x_qdq": 158, "x_train": 196, "x_val": 196, "xarg": 243, "xiangyu": 226, "xx": 247, "y": [172, 192, 193, 200, 201, 213, 214, 218, 219, 220, 232, 243, 246, 249], "y_train": 196, "y_val": 196, "ybelkada": [236, 237], "ye": [226, 243], "yet": [188, 192, 195, 196, 201, 206], "yield": [24, 25, 26, 174, 180, 181, 182, 183, 186, 195, 209, 214, 218, 219, 220, 224, 232, 238, 248, 249, 254], "yihui": 226, "you": [9, 18, 25, 29, 30, 167, 171, 172, 177, 178, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 232, 234, 236, 238, 241, 242, 243, 245, 246, 248, 249, 250, 253, 254, 256, 257, 258], "your": [9, 25, 30, 167, 171, 172, 173, 177, 183, 184, 187, 188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 224, 226, 228, 231, 236, 241, 243, 246, 248, 249, 257, 258], "your_imagenet_validation_data_path": [214, 219, 220, 246, 249], "yy": 247, "zero": [24, 176, 181, 214, 244, 248, 253], "zero_grad": [220, 236, 237, 249], "zeropad1d": 155, "zeropad2d": 156, "zeropad3d": 157, "zhang": 226, "zip": [192, 218, 227, 232], "zisserman": 226, "zou": 226, "zz": 247, "\u00aa": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00b2": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00b3": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00b5": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00b9": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00ba": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00bc": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00bd": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u00be": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u03c9": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u210e": 227, "\u215b": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u215c": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u215d": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\u215e": [217, 221, 232, 240, 245, 247, 248, 253, 256, 257, 258], "\ud835\udc58": [227, 229], "\ud835\udc5a": 227, "\ud835\udc5b": 227, "\ud835\udc64": 227}, "titles": ["AIMET API", "aimet_onnx.adaround", "aimet_onnx.mixed_precision", "aimet_onnx.auto_quant_v2", "aimet_onnx.batch_norm_fold", "aimet_onnx.cross_layer_equalization", "aimet_onnx API", "aimet_onnx.layer_output_utils", "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", "aimet_onnx.quant_analyzer", "aimet_onnx.quantsim", "aimet_onnx.seq_mse", "aimet_tensorflow.adaround", "aimet_tensorflow.mixed_precision", "aimet_tensorflow.auto_quant_v2", "aimet_tensorflow.keras.bn_reestimation", "aimet_tensorflow.batch_norm_fold", "aimet_tensorflow.cross_layer_equalization", "aimet_tensorflow.compress", "aimet_tensorflow API", "aimet_tensorflow.layer_output_utils", "aimet_tensorflow.model_preparer", "aimet_tensorflow.quant_analyzer", "aimet_tensorflow.quantsim", "aimet_torch.adaround", "aimet_torch.auto_quant", "aimet_torch.bn_reestimation", "aimet_torch.batch_norm_fold", "aimet_torch.cross_layer_equalization", "aimet_torch.compress", "QuantizationMixin", "QuantizedAdaptiveAvgPool1d", "QuantizedAdaptiveAvgPool2d", "QuantizedAdaptiveAvgPool3d", "QuantizedAdaptiveMaxPool1d", "QuantizedAdaptiveMaxPool2d", "QuantizedAdaptiveMaxPool3d", "QuantizedAlphaDropout", "QuantizedAvgPool1d", "QuantizedAvgPool2d", "QuantizedAvgPool3d", "QuantizedBCELoss", "QuantizedBCEWithLogitsLoss", "QuantizedBatchNorm1d", "QuantizedBatchNorm2d", "QuantizedBatchNorm3d", "QuantizedBilinear", "QuantizedCELU", "QuantizedCTCLoss", "QuantizedChannelShuffle", "QuantizedCircularPad1d", "QuantizedCircularPad2d", "QuantizedCircularPad3d", "QuantizedConstantPad1d", "QuantizedConstantPad2d", "QuantizedConstantPad3d", "QuantizedConv1d", "QuantizedConv2d", "QuantizedConv3d", "QuantizedConvTranspose1d", "QuantizedConvTranspose2d", "QuantizedConvTranspose3d", "QuantizedCosineEmbeddingLoss", "QuantizedCosineSimilarity", "QuantizedCrossEntropyLoss", "QuantizedDropout", "QuantizedDropout1d", "QuantizedDropout2d", "QuantizedDropout3d", "QuantizedELU", "QuantizedEmbedding", "QuantizedEmbeddingBag", "QuantizedFeatureAlphaDropout", "QuantizedFlatten", "QuantizedFold", "QuantizedFractionalMaxPool2d", "QuantizedFractionalMaxPool3d", "QuantizedGELU", "QuantizedGLU", "QuantizedGRU", "QuantizedGRUCell", "QuantizedGaussianNLLLoss", "QuantizedGroupNorm", "QuantizedHardshrink", "QuantizedHardsigmoid", "QuantizedHardswish", "QuantizedHardtanh", "QuantizedHingeEmbeddingLoss", "QuantizedHuberLoss", "QuantizedInstanceNorm1d", "QuantizedInstanceNorm2d", "QuantizedInstanceNorm3d", "QuantizedKLDivLoss", "QuantizedL1Loss", "QuantizedLPPool1d", "QuantizedLPPool2d", "QuantizedLSTM", "QuantizedLSTMCell", "QuantizedLayerNorm", "QuantizedLeakyReLU", "QuantizedLinear", "QuantizedLocalResponseNorm", "QuantizedLogSigmoid", "QuantizedLogSoftmax", "QuantizedMSELoss", "QuantizedMarginRankingLoss", "QuantizedMaxPool1d", "QuantizedMaxPool2d", "QuantizedMaxPool3d", "QuantizedMaxUnpool1d", "QuantizedMaxUnpool2d", "QuantizedMaxUnpool3d", "QuantizedMish", "QuantizedMultiLabelMarginLoss", "QuantizedMultiLabelSoftMarginLoss", "QuantizedMultiMarginLoss", "QuantizedNLLLoss", "QuantizedNLLLoss2d", "QuantizedPReLU", "QuantizedPairwiseDistance", "QuantizedPixelShuffle", "QuantizedPixelUnshuffle", "QuantizedPoissonNLLLoss", "QuantizedRNN", "QuantizedRNNCell", "QuantizedRReLU", "QuantizedReLU", "QuantizedReLU6", "QuantizedReflectionPad1d", "QuantizedReflectionPad2d", "QuantizedReflectionPad3d", "QuantizedReplicationPad1d", "QuantizedReplicationPad2d", "QuantizedReplicationPad3d", "QuantizedSELU", "QuantizedSiLU", "QuantizedSigmoid", "QuantizedSmoothL1Loss", "QuantizedSoftMarginLoss", "QuantizedSoftmax", "QuantizedSoftmax2d", "QuantizedSoftmin", "QuantizedSoftplus", "QuantizedSoftshrink", "QuantizedSoftsign", "QuantizedTanh", "QuantizedTanhshrink", "QuantizedThreshold", "QuantizedTripletMarginLoss", "QuantizedTripletMarginWithDistanceLoss", "QuantizedUnflatten", "QuantizedUnfold", "QuantizedUpsample", "QuantizedUpsamplingBilinear2d", "QuantizedUpsamplingNearest2d", "QuantizedZeroPad1d", "QuantizedZeroPad2d", "QuantizedZeroPad3d", "DequantizedTensor", "QuantizedTensor", "QuantizedTensorBase", "Quantize", "QuantizeDequantize", "dequantize", "quantize", "quantize_dequantize", "FloatQuantizeDequantize", "aimet_torch API", "aimet_torch.visualization_tools", "aimet_torch.layer_output_utils", "aimet_torch.quantsim.config_utils", "Migration guide", "aimet_torch.model_preparer", "aimet_torch.model_validator", "aimet_torch.mixed_precision", "aimet_torch.nn", "aimet_torch.peft", "aimet_torch.quant_analyzer", "aimet_torch.quantization", "aimet_torch.quantsim", "aimet_torch.seq_mse", "aimet_torch.v1.adaround", "aimet_torch.v1.mixed_precision", "aimet_torch.v1.auto_quant", "aimet_torch.v1.quant_analyzer", "aimet_torch.v1.quantsim", "aimet_torch.v1.seq_mse", "Examples", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "Cross-Layer Equalization", "Quantization simulation", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Quantization-Aware Training with a Keras Transformer Model", "Keras Model Preparer", "Quantization-aware training", "Quantization-Aware training with range learning", "Quant Analyzer", "Quantsim and Adaround - Per Channel Quantization (PCQ)", "Cross-Layer Equalization with QuantSim", "Model compression using channel pruning", "Model compression using spatial SVD", "Model compression using spatial SVD and channel pruning", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Cross-Layer Equalization and Bias Correction", "Quantization-aware training", "Quantization-aware training with range learning", "Quant Analyzer", "Adaptive rounding", "Analysis tools", "Interactive visualization", "Layer output generation", "Quantization analyzer", "Automatic quantization", "Batch norm re-estimation", "Batch norm folding", "Cross-layer equalization", "Channel pruning", "Compression features Guidebook", "Greedy compression ratio selection", "Compression", "Spatial SVD", "AIMET visualization", "Weight SVD", "Winnowing", "Optimization techniques", "Automatic mixed precision", "Mixed precision", "Manual mixed precision", "Quantized LoRa", "QW-LoRa", "QWA-LoRa", "Sequential MSE", "Glossary", "AIMET Documentation", "Installation", "AIMET installation in Docker", "AIMET manual installation and setup", "Quick Start (PyTorch)", "Per-block quantization", "Calibration", "Encoding Format Specification", "Quantization simulation guide", "Quantization-aware training", "Runtime configuration", "TensorFlow model guidelines", "PyTorch model guidelines", "Release notes", "Quantization debugging guidelines", "Quantization user guide", "On-target inference", "AIMET features", "Quantization workflow", "AIMET documentation versions"], "titleterms": {"0": [192, 247, 253], "1": [171, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 232, 238, 246, 247, 249, 250, 253, 254, 258], "13": 253, "16": 253, "17": 253, "18": 253, "19": 253, "2": [171, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 232, 238, 246, 247, 249, 250, 253, 254, 258], "20": 253, "21": 253, "22": 253, "23": 253, "24": 253, "25": 253, "26": 253, "27": 253, "28": 253, "29": 253, "3": [187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 232, 238, 246, 247, 249, 250, 254, 258], "30": 253, "31": 253, "32": 253, "33": 253, "34": 253, "35": 253, "4": [188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 214, 217, 218, 219, 220, 232, 238, 246, 249, 250, 254, 258], "5": [194, 195, 209, 218, 219, 238, 246, 249, 250, 253, 254], "6": [218, 219, 247, 254], "7": [219, 254], "8": 254, "For": [189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212], "On": [255, 256], "accuraci": [188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 257, 258], "activ": [218, 254], "adapt": [189, 193, 207, 214, 231], "adaround": [1, 12, 24, 181, 189, 193, 201, 207], "affin": [171, 178], "ai": 256, "aimet": [0, 228, 240, 242, 243, 244, 248, 255, 257, 259], "aimet_onnx": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "aimet_tensorflow": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "aimet_torch": [0, 24, 25, 26, 27, 28, 29, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "algorithm": [188, 192, 206, 232], "also": 248, "altern": 241, "amp": [188, 192, 206], "an": [188, 189, 190, 191, 242], "analysi": [200, 213, 215, 218, 231, 232, 254], "analyz": [200, 213, 215, 218], "api": [0, 6, 19, 21, 167, 172, 173, 175, 176, 178, 188, 192, 206, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 238, 240, 245, 246, 249, 257], "appli": [189, 190, 193, 194, 200, 201, 202, 207, 210, 213, 234], "arg": 247, "auto_qu": [25, 183], "auto_quant_v2": [3, 14], "automat": [188, 192, 206, 219, 231, 232, 233], "autoqu": [194, 208], "awar": [195, 196, 198, 199, 209, 211, 212, 249, 257], "base": [234, 236], "baselin": [188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212], "batch": [188, 189, 190, 191, 193, 198, 199, 201, 202, 206, 207, 210, 211, 212, 220, 221, 231], "batch_norm_fold": [4, 16, 27], "batchnorm": [195, 209], "bc": 210, "between": 197, "bia": 210, "bit": 232, "block": [178, 245], "blockwis": 245, "bn_reestim": [15, 26], "bokeh": 228, "brows": 187, "build": [241, 242], "calibr": [218, 237, 246, 249], "call": [188, 192, 206, 248], "callback": [188, 195, 206, 218, 237, 246], "case": [226, 232], "channel": [178, 201, 203, 205, 223, 226], "check": 254, "choos": [241, 242], "cle": [190, 202, 210], "code": [21, 171, 172, 187, 223, 227, 229, 232], "compil": 256, "complementari": 214, "compress": [18, 29, 203, 204, 205, 223, 224, 225, 226, 227, 228, 229, 231], "comput": [175, 188, 192, 206, 246, 249], "confid": 254, "config_util": 170, "configur": [175, 248, 250], "constant": [194, 195, 208], "contain": 242, "context": [214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238], "convers": 256, "convert": [188, 189, 190, 191, 197, 232], "correct": 210, "cp": 226, "creat": [188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 218, 232, 237, 246], "cross": [190, 202, 210, 222, 231], "cross_layer_equ": [5, 17, 28], "data": 247, "dataset": [188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "debug": [254, 255], "default": 250, "defin": [188, 194, 195, 206, 208], "definit": [10, 23], "deploi": 258, "deploy": 257, "dequant": 163, "dequantizedtensor": 158, "descript": 218, "design": 228, "determin": [189, 190, 191, 193, 194, 198, 199, 201, 202, 207, 210, 211, 212, 248], "dictionari": 247, "differ": 197, "direct": 256, "disabl": [200, 213], "discuss": 197, "docker": [241, 242], "document": [240, 259], "download": [187, 242], "enabl": [200, 213, 218], "encod": [175, 188, 192, 200, 206, 213, 218, 246, 247, 248], "engin": 256, "enum": [10, 23], "environ": 242, "equal": [190, 202, 210, 222, 231], "error": 218, "estim": [195, 209, 220, 231], "evalu": [188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 218, 246, 249], "exampl": [21, 171, 172, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 223, 227, 229, 232, 240, 244], "execut": [220, 222, 245, 256], "explor": 225, "export": [195, 209, 245, 246, 248, 249, 257], "fake": 192, "faq": 226, "fast": 192, "featur": [224, 240, 255, 257], "file": 250, "find": [192, 232], "fine": [203, 204, 205, 226], "fix": 254, "float": 171, "floatquantizedequant": 166, "flow": [176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "fold": [188, 189, 190, 191, 193, 195, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 221, 231], "format": 247, "fp16": 258, "fp32": [188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 254], "from": [171, 241], "front": 232, "function": [188, 194, 195, 197, 206, 208], "gener": [215, 217, 258], "get": [193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212], "glossari": [239, 240], "gpu": 249, "granular": 248, "greedi": 225, "group": 232, "guid": [171, 240, 248, 255], "guidebook": 224, "guidelin": [251, 252, 254, 255, 258], "helper": [194, 208], "histogram": 218, "host": 241, "how": [171, 225, 230, 248, 250], "hub": 256, "hyper": 214, "i": [188, 192, 200, 201, 206, 209, 213], "imag": 242, "import": [217, 218], "improv": 257, "individu": 254, "infer": [255, 256, 257], "inform": [189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212], "initi": 249, "input": [217, 234], "insert": 192, "instal": [240, 241, 242, 243, 244], "instanti": [189, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212], "interact": [215, 216], "kera": [15, 195, 196, 197], "layer": [188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 215, 217, 218, 222, 225, 226, 231, 232, 234, 254], "layer_output_util": [7, 20, 169], "leaf": 234, "learn": [199, 212], "learnedgrid": 171, "level": 247, "librari": 218, "limit": [21, 172, 197], "list": 232, "load": [192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217], "lora": [231, 235, 236, 237], "loss": [200, 213, 218], "low": 245, "manual": [233, 234, 243], "max": [200, 213, 218, 248], "mean": 218, "method": 192, "migrat": 171, "min": [200, 213, 218, 248], "mix": [188, 192, 206, 231, 232, 233, 234, 257], "mixed_precis": [2, 13, 174, 182], "mmp": 234, "mode": 249, "model": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 226, 234, 236, 245, 246, 249, 251, 252, 254, 258], "model_input": 250, "model_output": 250, "model_prepar": [21, 172], "model_valid": 173, "modifi": 250, "modul": [171, 175], "more": [189, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212], "move": 171, "mse": [200, 213, 231, 238], "multi": 249, "next": [189, 193, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 258], "nn": 175, "nois": 248, "non": 234, "norm": [190, 210, 220, 221, 231], "normal": [188, 189, 191, 193, 198, 199, 201, 202, 206, 207, 211, 212], "note": [226, 240, 253], "notebook": [187, 188, 192, 200, 201, 206, 209, 213, 240], "obtain": 217, "old": 241, "onnx": [188, 189, 190, 191], "op": [192, 232], "optim": 231, "option": [226, 234], "origin": 197, "output": [215, 217, 234], "overal": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "overhead": 232, "overview": [225, 226, 228, 230, 248, 250], "packag": [241, 242], "param": 250, "paramet": [188, 192, 206, 214, 248, 249], "pareto": 232, "path": 257, "pcq": 201, "pdf": [200, 213], "peft": 176, "per": [178, 200, 201, 213, 218, 225, 226, 245, 254], "perform": [195, 198, 199, 209, 211, 212, 232, 254], "phase": 232, "pipelin": [188, 189, 190, 191, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213], "platform": 244, "post": 257, "power": 245, "prebuilt": 242, "precis": [188, 192, 206, 231, 232, 233, 234, 257, 258], "prepar": [195, 197, 218], "prerequisit": [214, 218, 219, 220, 238, 241, 242, 243, 246, 249], "pretrain": [194, 200, 208], "procedur": [219, 221, 223, 238, 258], "process": 171, "profil": 234, "prune": [203, 205, 223, 226], "ptq": 236, "pypi": 241, "pytorch": [188, 189, 190, 191, 244, 252], "qat": [195, 198, 199, 209, 211, 212, 249], "qualcomm": 256, "quant": [200, 213], "quant_analyz": [9, 22, 177, 184], "quantanalyz": [200, 213, 218], "quantiz": [161, 164, 171, 175, 178, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 213, 215, 218, 219, 231, 235, 236, 240, 245, 247, 248, 249, 254, 255, 256, 257, 258], "quantizationmixin": 30, "quantizationsim": 195, "quantizationsimmodel": 237, "quantize_dequant": 165, "quantizedadaptiveavgpool1d": 31, "quantizedadaptiveavgpool2d": 32, "quantizedadaptiveavgpool3d": 33, "quantizedadaptivemaxpool1d": 34, "quantizedadaptivemaxpool2d": 35, "quantizedadaptivemaxpool3d": 36, "quantizedalphadropout": 37, "quantizedavgpool1d": 38, "quantizedavgpool2d": 39, "quantizedavgpool3d": 40, "quantizedbatchnorm1d": 43, "quantizedbatchnorm2d": 44, "quantizedbatchnorm3d": 45, "quantizedbceloss": 41, "quantizedbcewithlogitsloss": 42, "quantizedbilinear": 46, "quantizedcelu": 47, "quantizedchannelshuffl": 49, "quantizedcircularpad1d": 50, "quantizedcircularpad2d": 51, "quantizedcircularpad3d": 52, "quantizedconstantpad1d": 53, "quantizedconstantpad2d": 54, "quantizedconstantpad3d": 55, "quantizedconv1d": 56, "quantizedconv2d": 57, "quantizedconv3d": 58, "quantizedconvtranspose1d": 59, "quantizedconvtranspose2d": 60, "quantizedconvtranspose3d": 61, "quantizedcosineembeddingloss": 62, "quantizedcosinesimilar": 63, "quantizedcrossentropyloss": 64, "quantizedctcloss": 48, "quantizeddropout": 65, "quantizeddropout1d": 66, "quantizeddropout2d": 67, "quantizeddropout3d": 68, "quantizedelu": 69, "quantizedembed": 70, "quantizedembeddingbag": 71, "quantizedequant": 162, "quantizedfeaturealphadropout": 72, "quantizedflatten": 73, "quantizedfold": 74, "quantizedfractionalmaxpool2d": 75, "quantizedfractionalmaxpool3d": 76, "quantizedgaussiannllloss": 81, "quantizedgelu": 77, "quantizedglu": 78, "quantizedgroupnorm": 82, "quantizedgru": 79, "quantizedgrucel": 80, "quantizedhardshrink": 83, "quantizedhardsigmoid": 84, "quantizedhardswish": 85, "quantizedhardtanh": 86, "quantizedhingeembeddingloss": 87, "quantizedhuberloss": 88, "quantizedinstancenorm1d": 89, "quantizedinstancenorm2d": 90, "quantizedinstancenorm3d": 91, "quantizedkldivloss": 92, "quantizedl1loss": 93, "quantizedlayernorm": 98, "quantizedleakyrelu": 99, "quantizedlinear": 100, "quantizedlocalresponsenorm": 101, "quantizedlogsigmoid": 102, "quantizedlogsoftmax": 103, "quantizedlppool1d": 94, "quantizedlppool2d": 95, "quantizedlstm": 96, "quantizedlstmcel": 97, "quantizedmarginrankingloss": 105, "quantizedmaxpool1d": 106, "quantizedmaxpool2d": 107, "quantizedmaxpool3d": 108, "quantizedmaxunpool1d": 109, "quantizedmaxunpool2d": 110, "quantizedmaxunpool3d": 111, "quantizedmish": 112, "quantizedmseloss": 104, "quantizedmultilabelmarginloss": 113, "quantizedmultilabelsoftmarginloss": 114, "quantizedmultimarginloss": 115, "quantizednllloss": 116, "quantizednllloss2d": 117, "quantizedpairwisedist": 119, "quantizedpixelshuffl": 120, "quantizedpixelunshuffl": 121, "quantizedpoissonnllloss": 122, "quantizedprelu": 118, "quantizedreflectionpad1d": 128, "quantizedreflectionpad2d": 129, "quantizedreflectionpad3d": 130, "quantizedrelu": 126, "quantizedrelu6": 127, "quantizedreplicationpad1d": 131, "quantizedreplicationpad2d": 132, "quantizedreplicationpad3d": 133, "quantizedrnn": 123, "quantizedrnncel": 124, "quantizedrrelu": 125, "quantizedselu": 134, "quantizedsigmoid": 136, "quantizedsilu": 135, "quantizedsmoothl1loss": 137, "quantizedsoftmarginloss": 138, "quantizedsoftmax": 139, "quantizedsoftmax2d": 140, "quantizedsoftmin": 141, "quantizedsoftplu": 142, "quantizedsoftshrink": 143, "quantizedsoftsign": 144, "quantizedtanh": 145, "quantizedtanhshrink": 146, "quantizedtensor": 159, "quantizedtensorbas": 160, "quantizedthreshold": 147, "quantizedtripletmarginloss": 148, "quantizedtripletmarginwithdistanceloss": 149, "quantizedunflatten": 150, "quantizedunfold": 151, "quantizedupsampl": 152, "quantizedupsamplingbilinear2d": 153, "quantizedupsamplingnearest2d": 154, "quantizedzeropad1d": 155, "quantizedzeropad2d": 156, "quantizedzeropad3d": 157, "quantsim": [8, 10, 23, 170, 179, 185, 201, 202, 246, 248], "quantwrapp": 171, "quick": [240, 244], "qw": [235, 236], "qwa": [235, 237], "rang": [199, 200, 212, 213, 218], "rank": 226, "ratio": [225, 226, 228], "re": [195, 209, 220, 231], "recommend": 249, "reconstruct": 223, "reduc": [232, 258], "reestim": 209, "refer": [175, 178, 226, 240], "regular": 192, "relat": 187, "releas": [240, 253], "restor": 258, "round": [189, 193, 207, 214, 226, 231], "run": [187, 188, 192, 206, 208, 218, 237, 244], "runtim": [248, 250], "scheme": 248, "score": [193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212], "scratch": 241, "sdk": 256, "select": [223, 225, 226], "sensit": [218, 232, 254], "seq_ms": [11, 180, 186], "sequenti": [231, 238], "server": [187, 228], "session": 228, "set": 234, "set_grouped_blockwise_quantization_for_weight": 8, "setup": [214, 220, 222, 223, 227, 229, 234, 236, 237, 238, 242, 243, 249], "show": 197, "signal": 248, "sim": [188, 189, 190, 191, 193, 198, 199, 202, 206, 207, 209, 210, 211, 212], "similar": 197, "simplifi": [188, 189, 190, 191], "simul": [188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 240, 248, 257], "sourc": 241, "spatial": [204, 205, 226, 227], "specif": 247, "squar": 218, "start": [228, 240, 242, 244], "staticgrid": 171, "statist": [200, 209, 213, 218], "step": [189, 193, 198, 199, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 217, 218, 219, 220, 221, 232, 238, 246, 249, 258], "structur": [247, 250], "subclass": 197, "summari": [192, 195, 197, 201, 209], "supergroup": 250, "support": [249, 257], "svd": [204, 205, 226, 227, 229], "target": [255, 256, 257], "techniqu": [210, 214, 226, 231], "tensorflow": 251, "test": 244, "tf": 248, "thi": [188, 192, 200, 201, 206, 209, 213], "tool": [168, 215, 231, 257], "top": 247, "train": [189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 236, 237, 249, 257], "transform": 196, "try": 258, "tune": [203, 204, 205, 226], "type": [234, 247], "updat": 236, "us": [171, 203, 204, 205, 223, 226, 227, 229, 232], "user": [176, 240, 255], "v": 171, "v1": [167, 181, 182, 183, 184, 185, 186], "valid": [189, 190, 191, 193, 194, 202, 203, 204, 205, 207, 210, 211, 212], "variant": 242, "verifi": [241, 244, 258], "version": [241, 247, 259], "visual": [168, 215, 216, 228, 254], "visualization_tool": 168, "w16a16": 258, "weight": [218, 223, 226, 229, 236, 254], "what": [188, 192, 200, 201, 206, 209, 213], "width": 232, "winnow": [223, 230], "work": [225, 230, 248], "workflow": [214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 232, 234, 236, 237, 238, 246, 248, 249, 254, 255, 258], "wrapper": [200, 213], "x": 171, "your": 242}})