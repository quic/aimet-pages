Search.setIndex({"alltitles": {"1) Find layer groups": [[224, "find-layer-groups"]], "1. Creating a Keras model with subclass layers": [[244, "1.-Creating-a-Keras-model-with-subclass-layers"]], "1. Define Constants and Helper functions": [[255, "1.-Define-Constants-and-Helper-functions"]], "1. Example evaluation and training pipeline": [[247, "1.-Example-evaluation-and-training-pipeline"], [248, "1.-Example-evaluation-and-training-pipeline"], [256, "1.-Example-evaluation-and-training-pipeline"], [260, "1.-Example-evaluation-and-training-pipeline"]], "1. Example evaluation pipeline": [[235, "1.-Example-evaluation-pipeline"], [253, "1.-Example-evaluation-pipeline"]], "1. FP32 confidence checks": [[232, "fp32-confidence-checks"]], "1. Instantiate the example evaluation and training datasets": [[245, "1.-Instantiate-the-example-evaluation-and-training-datasets"], [246, "1.-Instantiate-the-example-evaluation-and-training-datasets"]], "1. Instantiate the example evaluation and training pipeline": [[242, "1.-Instantiate-the-example-evaluation-and-training-pipeline"]], "1. Instantiate the example evaluation method": [[239, "1.-Instantiate-the-example-evaluation-method"]], "1. Instantiate the example training and validation pipeline": [[236, "1.-Instantiate-the-example-training-and-validation-pipeline"], [237, "1.-Instantiate-the-example-training-and-validation-pipeline"], [238, "1.-Instantiate-the-example-training-and-validation-pipeline"], [240, "1.-Instantiate-the-example-training-and-validation-pipeline"], [241, "1.-Instantiate-the-example-training-and-validation-pipeline"], [249, "1.-Instantiate-the-example-training-and-validation-pipeline"], [250, "1.-Instantiate-the-example-training-and-validation-pipeline"], [251, "1.-Instantiate-the-example-training-and-validation-pipeline"], [252, "1.-Instantiate-the-example-training-and-validation-pipeline"], [254, "1.-Instantiate-the-example-training-and-validation-pipeline"], [257, "1.-Instantiate-the-example-training-and-validation-pipeline"], [258, "1.-Instantiate-the-example-training-and-validation-pipeline"], [259, "1.-Instantiate-the-example-training-and-validation-pipeline"]], "1. Run the notebook server": [[234, "run-the-notebook-server"]], "1. Sensitivity to weight and activation quantization": [[212, "sensitivity-to-weight-and-activation-quantization"]], "1. Versioning": [[222, "versioning"]], "1. defaults": [[229, "defaults"]], "1.13.0": [[208, "id41"]], "1.16.0": [[208, "id40"]], "1.16.1": [[208, "id39"]], "1.16.2": [[208, "id38"]], "1.17.0": [[208, "id37"]], "1.18.0": [[208, "id36"]], "1.19.1": [[208, "id35"]], "1.20.0": [[208, "id34"]], "1.21.0": [[208, "id33"]], "1.22.0": [[208, "id32"]], "1.22.1": [[208, "id31"]], "1.22.2": [[208, "id30"]], "1.23.0": [[208, "id29"]], "1.24.0": [[208, "id28"]], "1.25.0": [[208, "id27"]], "1.26.0": [[208, "id26"]], "1.27.0": [[208, "id25"]], "1.28.0": [[208, "id24"]], "1.29.0": [[208, "id23"]], "1.30.0": [[208, "id22"]], "1.31.0": [[208, "id21"]], "1.32.0": [[208, "id20"]], "1.33.0": [[208, "id19"]], "1.33.5": [[208, "id18"]], "1.34.0": [[208, "id17"]], "1.35.0": [[208, "id16"]], "1.35.1": [[208, "id15"]], "2) Perform sensitivity analysis (Phase 1)": [[224, "perform-sensitivity-analysis-phase-1"]], "2. Convert an FP32 PyTorch model to ONNX, simplify & then evaluate baseline FP32 accuracy": [[235, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [236, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [237, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [238, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"]], "2. Converting the Keras model with subclass layers to a Keras model with functional layers": [[244, "2.-Converting-the-Keras-model-with-subclass-layers-to-a-Keras-model-with-functional-layers"]], "2. Create the model in Keras": [[242, "2.-Create-the-model-in-Keras"]], "2. Define Constants and Datasets Prepare": [[242, "2.-Define-Constants-and-Datasets-Prepare"]], "2. Download the example notebooks and related code": [[234, "download-the-example-notebooks-and-related-code"]], "2. Load FP32 model": [[256, "2.-Load-FP32-model"]], "2. Load a pretrained FP32 model": [[241, "2.-Load-a-pretrained-FP32-model"], [247, "2.-Load-a-pretrained-FP32-model"], [255, "2.-Load-a-pretrained-FP32-model"]], "2. Load the FP32 model and evaluate the model to find the baseline FP32 accuracy": [[239, "2.-Load-the-FP32-model-and-evaluate-the-model-to-find-the-baseline-FP32-accuracy"]], "2. Load the model": [[260, "2.-Load-the-model"]], "2. Load the model and evaluate to get a baseline FP32 accuracy score": [[240, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [245, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [246, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [248, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [249, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [250, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [251, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [252, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [253, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [254, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [257, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [258, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [259, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"]], "2. Per-layer quantizer enablement": [[212, "per-layer-quantizer-enablement"]], "2. Version 0.6.1": [[222, "version-0-6-1"]], "2. Weights or activations quantization": [[232, "weights-or-activations-quantization"]], "2. params": [[229, "params"]], "2.0.0": [[208, "id14"]], "2.1. Encoding specification": [[222, "encoding-specification"]], "2.1.0": [[208, "id13"]], "2.2.0": [[208, "id12"]], "2.3.0": [[208, "id11"]], "2.4.0": [[208, "id10"]], "2.5.0": [[208, "id9"]], "2.6.0": [[208, "id8"]], "2.7.0": [[208, "id7"]], "2.8.0": [[208, "id3"]], "2.9.0": [[208, "id1"]], "3) Create a Pareto-front list (Phase 2)": [[224, "create-a-pareto-front-list-phase-2"]], "3. Apply QuantAnalyzer to the model": [[247, "3.-Apply-QuantAnalyzer-to-the-model"], [260, "3.-Apply-QuantAnalyzer-to-the-model"]], "3. Compress the model and fine-tune": [[250, "3.-Compress-the-model-and-fine-tune"], [251, "3.-Compress-the-model-and-fine-tune"], [252, "3.-Compress-the-model-and-fine-tune"]], "3. Create a quantization simulation model": [[235, "3.-Create-a-quantization-simulation-model"], [253, "3.-Create-a-quantization-simulation-model"]], "3. Create a quantization simulation model and Perform QAT": [[256, "3.-Create-a-quantization-simulation-model-and-Perform-QAT"]], "3. Create a quantization simulation model and determine quantized accuracy": [[236, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [237, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [238, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [240, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [245, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [246, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [248, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [249, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [254, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [257, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [258, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [259, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"]], "3. Determine the baseline FP32 accuracy": [[241, "3.-Determine-the-baseline-FP32-accuracy"]], "3. Fixing weight quantization": [[232, "fixing-weight-quantization"]], "3. Per-layer encodings min-max range": [[212, "per-layer-encodings-min-max-range"]], "3. Run AutoQuant": [[255, "3.-Run-AutoQuant"]], "3. Run the notebooks": [[234, "run-the-notebooks"]], "3. Showing similarities and differences between the original and converted models": [[244, "3.-Showing-similarities-and-differences-between-the-original-and-converted-models"]], "3. Train and evaluate the model": [[242, "3.-Train-and-evaluate-the-model"]], "3. Version 1.0.0": [[222, "version-1-0-0"]], "3. supergroups": [[229, "supergroups"]], "3.1. Encoding specification": [[222, "id1"]], "3.Create a quantization simulation model (with fake quantization ops inserted)": [[239, "3.Create-a-quantization-simulation-model-(with-fake-quantization-ops-inserted)"]], "4) Reduce Bit-width Convert Op Overhead (Phase 3)": [[224, "reduce-bit-width-convert-op-overhead-phase-3"]], "4. Apply Adaround": [[236, "4.-Apply-Adaround"], [240, "4.-Apply-Adaround"], [248, "4.-Apply-Adaround"], [254, "4.-Apply-Adaround"]], "4. Apply CLE": [[237, "4.-Apply-CLE"], [249, "4.-Apply-CLE"]], "4. Apply CLE and BC": [[257, "4.-Apply-CLE-and-BC"]], "4. Create a QuantizationSim Model": [[242, "4.-Create-a-QuantizationSim-Model"]], "4. Define constants and helper functions": [[241, "4.-Define-constants-and-helper-functions"]], "4. Discussing the limitations of the Keras Model Preparer": [[244, "4.-Discussing-the-limitations-of-the-Keras-Model-Preparer"]], "4. Fixing activation quantization": [[232, "fixing-activation-quantization"]], "4. Per-layer statistics histogram": [[212, "per-layer-statistics-histogram"]], "4. Perform BatchNorm Reestimation": [[256, "4.-Perform-BatchNorm-Reestimation"]], "4. Perform QAT": [[245, "4.-Perform-QAT"], [246, "4.-Perform-QAT"], [258, "4.-Perform-QAT"], [259, "4.-Perform-QAT"]], "4. Run AMP algorithm on the quantized model": [[235, "4.-Run-AMP-algorithm-on-the-quantized-model"], [239, "4.-Run-AMP-algorithm-on-the-quantized-model"], [253, "4.-Run-AMP-algorithm-on-the-quantized-model"]], "4. model_input": [[229, "model-input"]], "5. Apply AutoQuant": [[241, "5.-Apply-AutoQuant"]], "5. Export Model": [[242, "5.-Export-Model"], [256, "5.-Export-Model"]], "5. Per-layer mean-square-error loss": [[212, "per-layer-mean-square-error-loss"]], "5. Perform QAT": [[242, "5.-Perform-QAT"]], "5. Performing per-layer analysis": [[232, "performing-per-layer-analysis"]], "5. model_output": [[229, "model-output"]], "6. Visualizing sensitive layers": [[232, "visualizing-sensitive-layers"]], "7. Fixing individual quantizers": [[232, "fixing-individual-quantizers"]], "8. Quantize the model": [[232, "quantize-the-model"]], "AIMET API": [[0, null]], "AIMET Documentation": [[191, null]], "AIMET documentation versions": [[267, null]], "AIMET features": [[264, "aimet-features"], [265, null]], "AIMET visualization": [[219, null]], "API": [[20, "api"], [172, "api"], [173, "api"], [178, "api"], [196, "api"], [197, "api"], [198, "api"], [199, "api"], [200, "api"], [201, "api"], [203, "api"], [207, "api"], [210, "api"], [211, "api"], [212, "api"], [213, "api"], [214, "api"], [218, "api"], [220, "api"], [224, "api"], [226, "api"], [227, "api"], [228, "api"]], "API Call for Regular AMP": [[239, "API-Call-for-Regular-AMP"]], "API Reference": [[191, "api-reference"]], "API reference": [[175, "api-reference"], [180, "api-reference"]], "Accuracy improvement tools": [[265, "accuracy-improvement-tools"]], "AdaScale": [[197, null], [202, "adascale"]], "Adaptive Rounding (AdaRound)": [[236, null], [240, null], [254, null]], "Adaptive rounding": [[196, null], [202, "adaptive-rounding"]], "Affine quantizers": [[180, "affine-quantizers"]], "Alternative packages": [[194, "alternative-packages"]], "Analysis descriptions": [[212, "analysis-descriptions"]], "Analysis tools": [[209, null], [223, "analysis-tools"]], "Apply the profile": [[226, "apply-the-profile"]], "AutoQuant": [[241, null], [255, null]], "Automatic Mixed-Precision (AMP)": [[235, null], [239, null], [253, null]], "Automatic mixed precision": [[224, null], [225, "automatic-mixed-precision"]], "Automatic quantization": [[198, null], [202, "automatic-quantization"]], "Batch norm folding": [[200, null], [202, "batch-norm-folding"]], "Batch norm re-estimation": [[199, null], [202, "batch-norm-re-estimation"]], "Bias Correction": [[257, "Bias-Correction"]], "Blockwise Quantization": [[223, "blockwise-quantization"]], "Browse the notebooks": [[234, "browse-the-notebooks"]], "Build AIMET documentation": [[193, "build-aimet-documentation"]], "Build AIMET wheel and run unit tests": [[193, "build-aimet-wheel-and-run-unit-tests"], [193, "id2"]], "Build and run docker container locally": [[193, "build-and-run-docker-container-locally"]], "Building from source": [[193, null], [194, "building-from-source"]], "CLE": [[257, "CLE"]], "Calibration": [[227, null]], "Calibration Callback": [[206, "calibration-callback"]], "Call AMP API": [[235, "Call-AMP-API"], [253, "Call-AMP-API"]], "Channel pruning": [[214, null]], "Channel pruning (CP)": [[217, "channel-pruning-cp"]], "Channel selection": [[214, "channel-selection"]], "Choose and install a package": [[194, "choose-and-install-a-package"]], "Code Examples": [[20, "code-examples"], [171, "code-examples"], [172, "code-examples"]], "Code example": [[214, "code-example"], [218, "code-example"], [220, "code-example"], [224, "code-example"]], "Compilation": [[261, "compilation"]], "Compile and install pip package dependencies": [[193, "compile-and-install-pip-package-dependencies"]], "Complementary techniques": [[196, "complementary-techniques"]], "Compressing using Spatial SVD": [[218, "compressing-using-spatial-svd"]], "Compression": [[217, null], [219, "compression"], [223, "compression"]], "Compression features Guidebook": [[215, null]], "Compression ratio selection": [[216, "compression-ratio-selection"], [217, "compression-ratio-selection"]], "Compression using Channel Pruning": [[214, "compression-using-channel-pruning"]], "Compression using Weight SVD": [[220, "compression-using-weight-svd"]], "Compute Encodings": [[235, "Compute-Encodings"], [239, "Compute-Encodings"], [253, "Compute-Encodings"]], "Computing encodings": [[175, "computing-encodings"]], "Conda environment": [[193, "conda-environment"]], "Configuration": [[175, "configuration"]], "Configuration file structure": [[229, "configuration-file-structure"]], "Context": [[196, "context"], [197, "context"], [198, "context"], [199, "context"], [200, "context"], [201, "context"], [203, "context"], [205, "context"], [206, "context"], [207, "context"], [210, "context"], [211, "context"], [212, "context"], [214, "context"], [218, "context"], [220, "context"], [224, "context"], [226, "context"]], "Conversion": [[261, "conversion"]], "Create Quantization Sim Model": [[235, "Create-Quantization-Sim-Model"], [253, "Create-Quantization-Sim-Model"], [256, "Create-Quantization-Sim-Model"]], "Create QuantizationSimModel": [[206, "create-quantizationsimmodel"]], "Create a new conda environment with Python 3.10": [[193, "create-a-new-conda-environment-with-python-3-10"]], "Create the Quantization Sim Model": [[237, "Create-the-Quantization-Sim-Model"], [238, "Create-the-Quantization-Sim-Model"], [240, "Create-the-Quantization-Sim-Model"], [245, "Create-the-Quantization-Sim-Model"], [246, "Create-the-Quantization-Sim-Model"], [249, "Create-the-Quantization-Sim-Model"], [254, "Create-the-Quantization-Sim-Model"], [257, "Create-the-Quantization-Sim-Model"], [258, "Create-the-Quantization-Sim-Model"], [259, "Create-the-Quantization-Sim-Model"]], "Cross-Layer Equalization": [[237, null]], "Cross-Layer Equalization and Bias Correction": [[257, null]], "Cross-Layer Equalization with QuantSim": [[249, null]], "Cross-layer equalization": [[201, null], [202, "cross-layer-equalization"]], "Data type": [[222, "id5"]], "Dataset": [[235, "Dataset"], [236, "Dataset"], [237, "Dataset"], [238, "Dataset"], [239, "Dataset"], [240, "Dataset"], [241, "Dataset"], [242, "Dataset"], [245, "Dataset"], [246, "Dataset"], [247, "Dataset"], [248, "Dataset"], [249, "Dataset"], [250, "Dataset"], [251, "Dataset"], [252, "Dataset"], [253, "Dataset"], [254, "Dataset"], [255, "Dataset"], [256, "Dataset"], [257, "Dataset"], [258, "Dataset"], [259, "Dataset"], [260, "Dataset"]], "Debugging guidelines": [[264, "debugging-guidelines"]], "Debugging workflow": [[232, "debugging-workflow"]], "Define callback functions for AMP": [[235, "Define-callback-functions-for-AMP"], [253, "Define-callback-functions-for-AMP"]], "Deployment paths": [[265, "deployment-paths"]], "DequantizedTensor": [[158, null]], "Design": [[219, "design"]], "Determine quantization parameters (encodings)": [[263, "determine-quantization-parameters-encodings"]], "Docker environment": [[193, "docker-environment"]], "Encoding Format Specification": [[222, null]], "Encoding dictionary structure": [[222, "id3"]], "Encoding min/max ranges": [[247, "Encoding-min/max-ranges"], [260, "Encoding-min/max-ranges"]], "Encoding type": [[222, "id4"]], "Enum Definition": [[22, "enum-definition"]], "Example Notebooks": [[191, "example-notebooks"], [234, null]], "Executing per-block quantization": [[213, "executing-per-block-quantization"]], "Execution": [[199, "execution"], [201, "execution"], [261, "execution"]], "Export API": [[265, "export-api"]], "Export tools": [[265, "export-tools"]], "Exported Encodings": [[263, "exported-encodings"]], "Exporting blockwise-quantized models": [[213, "exporting-blockwise-quantized-models"]], "External resources": [[189, null]], "FAQs": [[217, "faqs"]], "Fast AMP (AMP 2.0)": [[239, "Fast-AMP-(AMP-2.0)"]], "FloatQuantizeDequantize": [[166, null]], "Fold Batch Norm layers": [[237, "Fold-Batch-Norm-layers"], [257, "Fold-Batch-Norm-layers"]], "Fold Batch Normalization layers": [[235, "Fold-Batch-Normalization-layers"], [238, "Fold-Batch-Normalization-layers"], [240, "Fold-Batch-Normalization-layers"], [245, "Fold-Batch-Normalization-layers"], [246, "Fold-Batch-Normalization-layers"], [248, "Fold-Batch-Normalization-layers"], [249, "Fold-Batch-Normalization-layers"], [253, "Fold-Batch-Normalization-layers"], [254, "Fold-Batch-Normalization-layers"], [258, "Fold-Batch-Normalization-layers"], [259, "Fold-Batch-Normalization-layers"]], "Fold BatchNorm Layers": [[242, "Fold-BatchNorm-Layers"], [256, "Fold-BatchNorm-Layers"]], "For more information": [[236, "For-more-information"], [237, "For-more-information"], [238, "For-more-information"], [240, "For-more-information"], [241, "For-more-information"], [245, "For-more-information"], [246, "For-more-information"], [249, "For-more-information"], [250, "For-more-information"], [251, "For-more-information"], [252, "For-more-information"], [254, "For-more-information"], [255, "For-more-information"], [257, "For-more-information"], [258, "For-more-information"], [259, "For-more-information"]], "General guidelines": [[262, "general-guidelines"], [266, "general-guidelines"]], "Get Started": [[192, "get-started"]], "Glossary": [[190, null], [191, "glossary"]], "Greedy compression ratio selection": [[216, null]], "How it works": [[216, "how-it-works"]], "How quantization simulation works": [[263, "how-quantization-simulation-works"]], "How to modify configuration file": [[229, "how-to-modify-configuration-file"]], "How to use aimet_torch 1.x": [[171, "how-to-use-aimet-torch-1-x"]], "How winnowing works": [[221, "how-winnowing-works"]], "Hyper parameters": [[196, "hyper-parameters"]], "Installation": [[194, null]], "Installing AIMET": [[195, "installing-aimet"]], "Interactive visualization": [[209, "interactive-visualization"], [210, null]], "Keras Model Preparer": [[244, null]], "Layer output generation": [[209, "layer-output-generation"], [211, null]], "Limitations": [[20, "limitations"], [172, "limitations"]], "LoRa Training": [[205, "lora-training"]], "Low power blockwise quantization": [[213, "low-power-blockwise-quantization"]], "MMP API options": [[226, "mmp-api-options"]], "Manual mixed precision": [[225, "manual-mixed-precision"], [226, null]], "Migration Process": [[171, "migration-process"]], "Migration guide": [[171, null]], "Min-Max (also called \u201cTF\u201d in AIMET)": [[263, "min-max-also-called-tf-in-aimet"]], "Mixed Precision Algorithm": [[224, "mixed-precision-algorithm"]], "Mixed precision": [[225, null], [265, "mixed-precision"]], "Model compression": [[217, "model-compression"]], "Model compression using channel pruning": [[250, null]], "Model compression using spatial SVD": [[251, null]], "Model compression using spatial SVD and channel pruning": [[252, null]], "Model guidelines": [[231, "model-guidelines"]], "Moving from QuantWrapper to Quantized Modules": [[171, "moving-from-quantwrapper-to-quantized-modules"]], "Moving from StaticGrid and LearnedGrid Quantizer to Affine and Float Quantizer": [[171, "moving-from-staticgrid-and-learnedgrid-quantizer-to-affine-and-float-quantizer"]], "Multi-GPU support": [[228, "multi-gpu-support"]], "NOTE": [[217, null]], "NVIDIA CUDA support": [[193, "nvidia-cuda-support"]], "Next steps": [[236, "Next-steps"], [240, "Next-steps"], [245, "Next-steps"], [246, "Next-steps"], [249, "Next-steps"], [250, "Next-steps"], [251, "Next-steps"], [252, "Next-steps"], [254, "Next-steps"], [255, "Next-steps"], [257, "Next-steps"], [258, "Next-steps"], [259, "Next-steps"]], "Next: deploying the model": [[262, "next-deploying-the-model"], [266, "next-deploying-the-model"]], "Old versions": [[194, "old-versions"]], "OmniQuant": [[202, "omniquant"], [203, null]], "On-target inference": [[261, null], [264, "on-target-inference"]], "Optional techniques": [[217, "optional-techniques"]], "Overall flow": [[235, "Overall-flow"], [236, "Overall-flow"], [237, "Overall-flow"], [238, "Overall-flow"], [239, "Overall-flow"], [240, "Overall-flow"], [241, "Overall-flow"], [242, "Overall-flow"], [243, "Overall-flow"], [244, "Overall-flow"], [245, "Overall-flow"], [246, "Overall-flow"], [247, "Overall-flow"], [248, "Overall-flow"], [249, "Overall-flow"], [250, "Overall-flow"], [251, "Overall-flow"], [252, "Overall-flow"], [253, "Overall-flow"], [254, "Overall-flow"], [255, "Overall-flow"], [256, "Overall-flow"], [257, "Overall-flow"], [258, "Overall-flow"], [259, "Overall-flow"], [260, "Overall-flow"]], "Overview": [[191, "overview"], [216, "overview"], [217, "overview"], [219, "overview"], [221, "overview"], [229, "overview"], [263, "overview"]], "PDF of statistics": [[247, "PDF-of-statistics"], [260, "PDF-of-statistics"]], "PTQ": [[205, "ptq"]], "Parameters for AMP algorithm": [[235, "Parameters-for-AMP-algorithm"], [239, "Parameters-for-AMP-algorithm"], [253, "Parameters-for-AMP-algorithm"]], "Per-block quantization": [[180, "per-block-quantization"], [213, null]], "Per-channel quantization": [[180, "per-channel-quantization"]], "Per-layer MSE loss": [[247, "Per-layer-MSE-loss"], [260, "Per-layer-MSE-loss"]], "Per-layer analysis by enabling/disabling quantization wrappers": [[247, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"], [260, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"]], "Per-layer exploration": [[216, "per-layer-exploration"]], "Per-layer fine-tuning": [[217, "per-layer-fine-tuning"]], "Perform QAT": [[256, "Perform-QAT"]], "Post Training Quantization": [[223, "post-training-quantization"]], "Post Training Quantization Techniques": [[191, "post-training-quantization-techniques"], [202, null]], "Post-training quantization": [[265, "post-training-quantization"]], "Prepare the evaluation callback function": [[242, "Prepare-the-evaluation-callback-function"]], "Prerequisites": [[194, "prerequisites"], [196, "prerequisites"], [197, "prerequisites"], [198, "prerequisites"], [199, "prerequisites"], [203, "prerequisites"], [207, "prerequisites"], [212, "prerequisites"], [227, "prerequisites"], [228, "prerequisites"]], "Procedure": [[197, "procedure"], [198, "procedure"], [200, "procedure"], [203, "procedure"], [207, "procedure"], [214, "procedure"], [262, "procedure"], [266, "procedure"]], "PyPI": [[194, "pypi"]], "PyTorch model guidelines": [[231, null]], "QAT modes": [[228, "qat-modes"]], "QAT recommendations": [[228, "qat-recommendations"]], "QW-LoRa": [[204, "qw-lora"], [205, null]], "QWA-LoRa": [[204, "qwa-lora"], [206, null]], "Qualcomm\u00ae AI Engine Direct SDK": [[261, "qualcommreg-ai-engine-direct-sdk"]], "Qualcomm\u00ae AI hub": [[261, "qualcommreg-ai-hub"]], "Quant Analyzer": [[247, null], [260, null]], "QuantSim workflow": [[263, "quantsim-workflow"]], "Quantization": [[261, "quantization"]], "Quantization Aware Training": [[223, "quantization-aware-training"]], "Quantization analyzer": [[209, "quantization-analyzer"], [212, null]], "Quantization debugging guidelines": [[232, null]], "Quantization granularity": [[263, "quantization-granularity"]], "Quantization schemes": [[263, "quantization-schemes"]], "Quantization simulation": [[238, null], [265, "quantization-simulation"]], "Quantization simulation guide": [[263, null]], "Quantization user guide": [[264, null]], "Quantization workflow": [[262, null], [264, "quantization-workflow"], [266, null]], "Quantization-Aware Training with BatchNorm Re-estimation": [[242, null], [256, null]], "Quantization-Aware Training with a Keras Transformer Model": [[243, null]], "Quantization-Aware training with range learning": [[246, null]], "Quantization-aware training": [[228, null], [245, null], [258, null], [265, "quantization-aware-training"]], "Quantization-aware training with range learning": [[259, null]], "QuantizationMixin": [[30, null]], "Quantize": [[161, null]], "Quantize a small model quickly with AIMET": [[195, "quantize-a-small-model-quickly-with-aimet"]], "Quantize and Update Base Model Weights": [[205, "quantize-and-update-base-model-weights"]], "QuantizeDequantize": [[162, null]], "Quantized LoRa": [[202, "quantized-lora"], [204, null]], "Quantized modules": [[175, "quantized-modules"]], "QuantizedAdaptiveAvgPool1d": [[31, null]], "QuantizedAdaptiveAvgPool2d": [[32, null]], "QuantizedAdaptiveAvgPool3d": [[33, null]], "QuantizedAdaptiveMaxPool1d": [[34, null]], "QuantizedAdaptiveMaxPool2d": [[35, null]], "QuantizedAdaptiveMaxPool3d": [[36, null]], "QuantizedAlphaDropout": [[37, null]], "QuantizedAvgPool1d": [[38, null]], "QuantizedAvgPool2d": [[39, null]], "QuantizedAvgPool3d": [[40, null]], "QuantizedBCELoss": [[41, null]], "QuantizedBCEWithLogitsLoss": [[42, null]], "QuantizedBatchNorm1d": [[43, null]], "QuantizedBatchNorm2d": [[44, null]], "QuantizedBatchNorm3d": [[45, null]], "QuantizedBilinear": [[46, null]], "QuantizedCELU": [[47, null]], "QuantizedCTCLoss": [[48, null]], "QuantizedChannelShuffle": [[49, null]], "QuantizedCircularPad1d": [[50, null]], "QuantizedCircularPad2d": [[51, null]], "QuantizedCircularPad3d": [[52, null]], "QuantizedConstantPad1d": [[53, null]], "QuantizedConstantPad2d": [[54, null]], "QuantizedConstantPad3d": [[55, null]], "QuantizedConv1d": [[56, null]], "QuantizedConv2d": [[57, null]], "QuantizedConv3d": [[58, null]], "QuantizedConvTranspose1d": [[59, null]], "QuantizedConvTranspose2d": [[60, null]], "QuantizedConvTranspose3d": [[61, null]], "QuantizedCosineEmbeddingLoss": [[62, null]], "QuantizedCosineSimilarity": [[63, null]], "QuantizedCrossEntropyLoss": [[64, null]], "QuantizedDropout": [[65, null]], "QuantizedDropout1d": [[66, null]], "QuantizedDropout2d": [[67, null]], "QuantizedDropout3d": [[68, null]], "QuantizedELU": [[69, null]], "QuantizedEmbedding": [[70, null]], "QuantizedEmbeddingBag": [[71, null]], "QuantizedFeatureAlphaDropout": [[72, null]], "QuantizedFlatten": [[73, null]], "QuantizedFold": [[74, null]], "QuantizedFractionalMaxPool2d": [[75, null]], "QuantizedFractionalMaxPool3d": [[76, null]], "QuantizedGELU": [[77, null]], "QuantizedGLU": [[78, null]], "QuantizedGRU": [[79, null]], "QuantizedGRUCell": [[80, null]], "QuantizedGaussianNLLLoss": [[81, null]], "QuantizedGroupNorm": [[82, null]], "QuantizedHardshrink": [[83, null]], "QuantizedHardsigmoid": [[84, null]], "QuantizedHardswish": [[85, null]], "QuantizedHardtanh": [[86, null]], "QuantizedHingeEmbeddingLoss": [[87, null]], "QuantizedHuberLoss": [[88, null]], "QuantizedInstanceNorm1d": [[89, null]], "QuantizedInstanceNorm2d": [[90, null]], "QuantizedInstanceNorm3d": [[91, null]], "QuantizedKLDivLoss": [[92, null]], "QuantizedL1Loss": [[93, null]], "QuantizedLPPool1d": [[94, null]], "QuantizedLPPool2d": [[95, null]], "QuantizedLSTM": [[96, null]], "QuantizedLSTMCell": [[97, null]], "QuantizedLayerNorm": [[98, null]], "QuantizedLeakyReLU": [[99, null]], "QuantizedLinear": [[100, null]], "QuantizedLocalResponseNorm": [[101, null]], "QuantizedLogSigmoid": [[102, null]], "QuantizedLogSoftmax": [[103, null]], "QuantizedMSELoss": [[104, null]], "QuantizedMarginRankingLoss": [[105, null]], "QuantizedMaxPool1d": [[106, null]], "QuantizedMaxPool2d": [[107, null]], "QuantizedMaxPool3d": [[108, null]], "QuantizedMaxUnpool1d": [[109, null]], "QuantizedMaxUnpool2d": [[110, null]], "QuantizedMaxUnpool3d": [[111, null]], "QuantizedMish": [[112, null]], "QuantizedMultiLabelMarginLoss": [[113, null]], "QuantizedMultiLabelSoftMarginLoss": [[114, null]], "QuantizedMultiMarginLoss": [[115, null]], "QuantizedNLLLoss": [[116, null]], "QuantizedNLLLoss2d": [[117, null]], "QuantizedPReLU": [[118, null]], "QuantizedPairwiseDistance": [[119, null]], "QuantizedPixelShuffle": [[120, null]], "QuantizedPixelUnshuffle": [[121, null]], "QuantizedPoissonNLLLoss": [[122, null]], "QuantizedRNN": [[123, null]], "QuantizedRNNCell": [[124, null]], "QuantizedRReLU": [[125, null]], "QuantizedReLU": [[126, null]], "QuantizedReLU6": [[127, null]], "QuantizedReflectionPad1d": [[128, null]], "QuantizedReflectionPad2d": [[129, null]], "QuantizedReflectionPad3d": [[130, null]], "QuantizedReplicationPad1d": [[131, null]], "QuantizedReplicationPad2d": [[132, null]], "QuantizedReplicationPad3d": [[133, null]], "QuantizedSELU": [[134, null]], "QuantizedSiLU": [[135, null]], "QuantizedSigmoid": [[136, null]], "QuantizedSmoothL1Loss": [[137, null]], "QuantizedSoftMarginLoss": [[138, null]], "QuantizedSoftmax": [[139, null]], "QuantizedSoftmax2d": [[140, null]], "QuantizedSoftmin": [[141, null]], "QuantizedSoftplus": [[142, null]], "QuantizedSoftshrink": [[143, null]], "QuantizedSoftsign": [[144, null]], "QuantizedTanh": [[145, null]], "QuantizedTanhshrink": [[146, null]], "QuantizedTensor": [[159, null]], "QuantizedTensorBase": [[160, null]], "QuantizedThreshold": [[147, null]], "QuantizedTripletMarginLoss": [[148, null]], "QuantizedTripletMarginWithDistanceLoss": [[149, null]], "QuantizedUnflatten": [[150, null]], "QuantizedUnfold": [[151, null]], "QuantizedUpsample": [[152, null]], "QuantizedUpsamplingBilinear2d": [[153, null]], "QuantizedUpsamplingNearest2d": [[154, null]], "QuantizedZeroPad1d": [[155, null]], "QuantizedZeroPad2d": [[156, null]], "QuantizedZeroPad3d": [[157, null]], "Quantizer Args structure": [[222, "id6"]], "Quantizers": [[180, "quantizers"]], "Quantsim and Adaround - Per Channel Quantization (PCQ)": [[248, null]], "Quick Start": [[195, null]], "Rank Rounding": [[217, "rank-rounding"]], "Re-estimate BatchNorm Statistics": [[256, "Re-estimate-BatchNorm-Statistics"]], "References": [[217, "references"]], "Regular AMP": [[239, "Regular-AMP"]], "Release Notes": [[191, "release-notes"]], "Release notes": [[208, null]], "Run QWA-LoRa": [[206, "run-qwa-lora"]], "Running the notebooks": [[234, "running-the-notebooks"]], "Runtime configuration": [[229, null], [263, "runtime-configuration"]], "Sequential MSE": [[202, "sequential-mse"], [207, null]], "Set environment variables to build desired AIMET wheel": [[193, "set-environment-variables-to-build-desired-aimet-wheel"], [193, "id1"]], "Set model input precision": [[226, "set-model-input-precision"]], "Set model output precision": [[226, "set-model-output-precision"]], "Set precision based on layer type": [[226, "set-precision-based-on-layer-type"]], "Set precision of a leaf layer": [[226, "set-precision-of-a-leaf-layer"]], "Set precision of a non-leaf layer": [[226, "set-precision-of-a-non-leaf-layer"]], "Setup": [[196, "setup"], [197, "setup"], [199, "setup"], [201, "setup"], [203, "setup"], [205, "setup"], [206, "setup"], [207, "setup"], [214, "setup"], [218, "setup"], [220, "setup"], [226, "setup"]], "Signal-to-Quantization-Noise": [[263, "signal-to-quantization-noise"]], "Simulate quantization noise": [[263, "simulate-quantization-noise"]], "Spatial SVD": [[217, "spatial-svd"], [218, null]], "Starting a Bokeh server session": [[219, "starting-a-bokeh-server-session"]], "Step 1": [[196, "step-1"], [197, "step-1"], [198, "step-1"], [199, "step-1"], [200, "step-1"], [203, "step-1"], [207, "step-1"], [224, "step-1"]], "Step 1 Importing libraries": [[212, "step-1-importing-libraries"]], "Step 1: Creating a QuantSim model": [[227, "step-1-creating-a-quantsim-model"]], "Step 1: Importing the API": [[211, "step-1-importing-the-api"]], "Step 1: Setup": [[228, "step-1-setup"]], "Step 1: Trying FP16 precision (no quantization)": [[262, "step-1-trying-fp16-precision-no-quantization"], [266, "step-1-trying-fp16-precision-no-quantization"]], "Step 2": [[196, "step-2"], [197, "step-2"], [198, "step-2"], [199, "step-2"], [200, "step-2"], [203, "step-2"], [207, "step-2"], [224, "step-2"]], "Step 2 Preparing calibration callback": [[212, "step-2-preparing-calibration-callback"]], "Step 2: Computing the initial quantization parameters": [[228, "step-2-computing-the-initial-quantization-parameters"]], "Step 2: Creating a calibration callback": [[227, "step-2-creating-a-calibration-callback"]], "Step 2: Loading a model": [[211, "step-2-loading-a-model"]], "Step 2: Verifying W16A16 quantization": [[262, "step-2-verifying-w16a16-quantization"], [266, "step-2-verifying-w16a16-quantization"]], "Step 3": [[196, "step-3"], [197, "step-3"], [198, "step-3"], [199, "step-3"], [200, "step-3"], [203, "step-3"], [207, "step-3"]], "Step 3 Preparing evaluation callback": [[212, "step-3-preparing-evaluation-callback"]], "Step 3. Reducing precision": [[262, "step-3-reducing-precision"], [266, "step-3-reducing-precision"]], "Step 3: Calibrate the quantized model": [[228, "step-3-calibrate-the-quantized-model"]], "Step 3: Computing encodings": [[227, "step-3-computing-encodings"]], "Step 3: Obtaining inputs": [[211, "step-3-obtaining-inputs"]], "Step 4": [[196, "step-4"], [197, "step-4"], [198, "step-4"], [199, "step-4"], [203, "step-4"], [207, "step-4"]], "Step 4 Preparing model": [[212, "step-4-preparing-model"]], "Step 4. Restoring accuracy": [[262, "step-4-restoring-accuracy"], [266, "step-4-restoring-accuracy"]], "Step 4: Evaluating the model": [[228, "step-4-evaluating-the-model"]], "Step 4: Evaluation": [[227, "step-4-evaluation"]], "Step 4: Generating layer outputs": [[211, "step-4-generating-layer-outputs"]], "Step 5": [[197, "step-5"], [198, "step-5"], [203, "step-5"], [207, "step-5"]], "Step 5 Creating QuantAnalyzer": [[212, "step-5-creating-quantanalyzer"]], "Step 5: Exporting the model": [[227, "step-5-exporting-the-model"], [228, "step-5-exporting-the-model"]], "Step 6": [[198, "step-6"]], "Step 6 Running the analysis": [[212, "step-6-running-the-analysis"]], "Step 7": [[198, "step-7"]], "Summary": [[239, "Summary"], [242, "Summary"], [244, "Summary"], [248, "Summary"], [256, "Summary"]], "Supported platform": [[192, "supported-platform"]], "Supported precisions for on-target inference": [[265, "supported-precisions-for-on-target-inference"]], "Techniques": [[191, "techniques"], [223, null], [257, "Techniques"]], "TensorFlow model guidelines": [[230, null]], "Terminology": [[178, "terminology"]], "Tested platform": [[195, "tested-platform"]], "Top level structure": [[222, "id2"]], "Training Callback": [[206, "training-callback"]], "Tutorials": [[191, "tutorials"], [233, null]], "Use Case": [[217, "use-case"]], "Use Cases": [[224, "use-cases"]], "User flow": [[178, "user-flow"]], "Verifying the installation": [[194, "verifying-the-installation"], [195, "verifying-the-installation"]], "Visualization Tools": [[168, "visualization-tools"]], "Visualizing compression ratios": [[219, "visualizing-compression-ratios"]], "Weight SVD": [[217, "weight-svd"], [220, null]], "Weight reconstruction": [[214, "weight-reconstruction"]], "What is AIMET?": [[192, null]], "What this notebook is not": [[235, "What-this-notebook-is-not"], [239, "What-this-notebook-is-not"], [247, "What-this-notebook-is-not"], [248, "What-this-notebook-is-not"], [253, "What-this-notebook-is-not"], [256, "What-this-notebook-is-not"], [260, "What-this-notebook-is-not"]], "Winnowing": [[214, "winnowing"], [221, null], [221, "id1"]], "Workflow": [[196, "workflow"], [196, "id2"], [197, "workflow"], [198, "workflow"], [199, "workflow"], [200, "workflow"], [201, "workflow"], [203, "workflow"], [205, "workflow"], [206, "workflow"], [207, "workflow"], [210, "workflow"], [211, "workflow"], [212, "workflow"], [214, "workflow"], [218, "workflow"], [220, "workflow"], [224, "workflow"], [226, "workflow"], [227, "workflow"], [228, "workflow"]], "aimet_onnx API": [[5, null]], "aimet_onnx.apply_adaround": [[1, null]], "aimet_onnx.apply_seq_mse": [[10, null]], "aimet_onnx.batch_norm_fold": [[3, null]], "aimet_onnx.cross_layer_equalization": [[4, null]], "aimet_onnx.layer_output_utils": [[6, null]], "aimet_onnx.mixed_precision": [[2, null]], "aimet_onnx.quant_analyzer": [[8, null]], "aimet_onnx.quantsim": [[9, null]], "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights": [[7, null]], "aimet_tensorflow API": [[18, null]], "aimet_tensorflow.adaround": [[11, null]], "aimet_tensorflow.auto_quant_v2": [[13, null]], "aimet_tensorflow.batch_norm_fold": [[15, null]], "aimet_tensorflow.compress": [[17, null]], "aimet_tensorflow.cross_layer_equalization": [[16, null]], "aimet_tensorflow.keras.bn_reestimation": [[14, null]], "aimet_tensorflow.layer_output_utils": [[19, null]], "aimet_tensorflow.mixed_precision": [[12, null]], "aimet_tensorflow.model_preparer": [[20, null]], "aimet_tensorflow.quant_analyzer": [[21, null]], "aimet_tensorflow.quantsim": [[22, null]], "aimet_torch": [[167, "aimet-torch"]], "aimet_torch 1.x vs aimet_torch 2": [[171, "aimet-torch-1-x-vs-aimet-torch-2"]], "aimet_torch API": [[167, null]], "aimet_torch.adaround": [[23, null]], "aimet_torch.auto_quant": [[25, null]], "aimet_torch.batch_norm_fold": [[27, null]], "aimet_torch.bn_reestimation": [[26, null]], "aimet_torch.compress": [[29, null]], "aimet_torch.cross_layer_equalization": [[28, null]], "aimet_torch.experimental.adascale": [[24, null]], "aimet_torch.experimental.omniquant": [[176, null]], "aimet_torch.layer_output_utils": [[169, null]], "aimet_torch.mixed_precision": [[174, null]], "aimet_torch.model_preparer": [[172, null]], "aimet_torch.model_validator": [[173, null]], "aimet_torch.nn": [[175, null]], "aimet_torch.onnx.export (beta)": [[177, null]], "aimet_torch.peft": [[178, null]], "aimet_torch.quant_analyzer": [[179, null]], "aimet_torch.quantization": [[180, null]], "aimet_torch.quantsim": [[181, null]], "aimet_torch.quantsim.config_utils": [[170, null]], "aimet_torch.seq_mse": [[182, null]], "aimet_torch.v1": [[167, "aimet-torch-v1"]], "aimet_torch.v1.adaround": [[183, null]], "aimet_torch.v1.auto_quant": [[185, null]], "aimet_torch.v1.mixed_precision": [[184, null]], "aimet_torch.v1.quant_analyzer": [[186, null]], "aimet_torch.v1.quantsim": [[187, null]], "aimet_torch.v1.seq_mse": [[188, null]], "aimet_torch.visualization_tools": [[168, null]], "dequantize": [[163, null]], "quantize": [[164, null]], "quantize_dequantize": [[165, null]]}, "docnames": ["apiref/index", "apiref/onnx/adaround", "apiref/onnx/amp", "apiref/onnx/bnf", "apiref/onnx/cle", "apiref/onnx/index", "apiref/onnx/layer_output_generation", "apiref/onnx/lpbq", "apiref/onnx/quant_analyzer", "apiref/onnx/quantsim", "apiref/onnx/seq_mse", "apiref/tensorflow/adaround", "apiref/tensorflow/amp", "apiref/tensorflow/autoquant", "apiref/tensorflow/bn", "apiref/tensorflow/bnf", "apiref/tensorflow/cle", "apiref/tensorflow/compress", "apiref/tensorflow/index", "apiref/tensorflow/layer_output_generation", "apiref/tensorflow/model_preparer", "apiref/tensorflow/quant_analyzer", "apiref/tensorflow/quantsim", "apiref/torch/adaround", "apiref/torch/adascale", "apiref/torch/autoquant", "apiref/torch/bn", "apiref/torch/bnf", "apiref/torch/cle", "apiref/torch/compress", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d", "apiref/torch/generated/aimet_torch.nn.QuantizedELU", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten", "apiref/torch/generated/aimet_torch.nn.QuantizedFold", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMish", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize", "apiref/torch/index", "apiref/torch/interactive_visualization", "apiref/torch/layer_output_generation", "apiref/torch/lpbq", "apiref/torch/migration_guide", "apiref/torch/model_preparer", "apiref/torch/model_validator", "apiref/torch/mp", "apiref/torch/nn", "apiref/torch/omniquant", "apiref/torch/onnx", "apiref/torch/peft_lora", "apiref/torch/quant_analyzer", "apiref/torch/quantization", "apiref/torch/quantsim", "apiref/torch/seq_mse", "apiref/torch/v1/adaround", "apiref/torch/v1/amp", "apiref/torch/v1/autoquant", "apiref/torch/v1/quant_analyzer", "apiref/torch/v1/quantsim", "apiref/torch/v1/seq_mse", "external/index", "glossary", "index", "overview/index", "overview/install/build_from_source", "overview/install/index", "overview/install/quick-start", "ptq_techniques/adaround", "ptq_techniques/adascale", "ptq_techniques/autoquant", "ptq_techniques/bn", "ptq_techniques/bnf", "ptq_techniques/cle", "ptq_techniques/index", "ptq_techniques/omniquant", "ptq_techniques/quantized LoRa/index", "ptq_techniques/quantized LoRa/qw_lora", "ptq_techniques/quantized LoRa/qwa_lora", "ptq_techniques/seq_mse", "release_notes", "techniques/analysis tools/index", "techniques/analysis tools/interactive_visualization", "techniques/analysis tools/layer_output_generation", "techniques/analysis tools/quant_analyzer", "techniques/blockwise", "techniques/compression/channel_pruning", "techniques/compression/feature_guidebook", "techniques/compression/greedy_compression_ratio_selection", "techniques/compression/index", "techniques/compression/spatial_svd", "techniques/compression/visualization_compression", "techniques/compression/weight_svd", "techniques/compression/winnowing", "techniques/encoding_spec", "techniques/index", "techniques/mixed precision/amp", "techniques/mixed precision/index", "techniques/mixed precision/mmp", "techniques/ptq", "techniques/qat", "techniques/runtime_config", "techniques/tensorflow/model_guidelines", "techniques/torch/model_guidelines", "tutorials/debugging_guidelines", "tutorials/index", "tutorials/notebooks", "tutorials/notebooks/onnx/quantization/AMP", "tutorials/notebooks/onnx/quantization/adaround", "tutorials/notebooks/onnx/quantization/cle", "tutorials/notebooks/onnx/quantization/quantsim", "tutorials/notebooks/tensorflow/quantization/keras/KerasAMP", "tutorials/notebooks/tensorflow/quantization/keras/adaround", "tutorials/notebooks/tensorflow/quantization/keras/autoquant", "tutorials/notebooks/tensorflow/quantization/keras/bn_reestimation", "tutorials/notebooks/tensorflow/quantization/keras/keras_transformer_qat", "tutorials/notebooks/tensorflow/quantization/keras/model_preparer", "tutorials/notebooks/tensorflow/quantization/keras/qat", "tutorials/notebooks/tensorflow/quantization/keras/qat_range_learning", "tutorials/notebooks/tensorflow/quantization/keras/quant_analyzer", "tutorials/notebooks/tensorflow/quantization/keras/quantsim_adaround_pcq", "tutorials/notebooks/tensorflow/quantization/keras/quantsim_cle", "tutorials/notebooks/torch/compression/channel_pruning", "tutorials/notebooks/torch/compression/spatial_svd", "tutorials/notebooks/torch/compression/spatial_svd_channel_pruning", "tutorials/notebooks/torch/quantization/AMP", "tutorials/notebooks/torch/quantization/adaround", "tutorials/notebooks/torch/quantization/autoquant", "tutorials/notebooks/torch/quantization/bn_reestimation", "tutorials/notebooks/torch/quantization/cle_bc", "tutorials/notebooks/torch/quantization/qat", "tutorials/notebooks/torch/quantization/qat_range_learning", "tutorials/notebooks/torch/quantization/quant_analyzer", "tutorials/on_target_inference", "tutorials/quantization_workflow", "tutorials/quantsim", "userguide/index", "userguide/quantization_tools", "userguide/quantization_workflow", "versions"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["apiref/index.rst", "apiref/onnx/adaround.rst", "apiref/onnx/amp.rst", "apiref/onnx/bnf.rst", "apiref/onnx/cle.rst", "apiref/onnx/index.rst", "apiref/onnx/layer_output_generation.rst", "apiref/onnx/lpbq.rst", "apiref/onnx/quant_analyzer.rst", "apiref/onnx/quantsim.rst", "apiref/onnx/seq_mse.rst", "apiref/tensorflow/adaround.rst", "apiref/tensorflow/amp.rst", "apiref/tensorflow/autoquant.rst", "apiref/tensorflow/bn.rst", "apiref/tensorflow/bnf.rst", "apiref/tensorflow/cle.rst", "apiref/tensorflow/compress.rst", "apiref/tensorflow/index.rst", "apiref/tensorflow/layer_output_generation.rst", "apiref/tensorflow/model_preparer.rst", "apiref/tensorflow/quant_analyzer.rst", "apiref/tensorflow/quantsim.rst", "apiref/torch/adaround.rst", "apiref/torch/adascale.rst", "apiref/torch/autoquant.rst", "apiref/torch/bn.rst", "apiref/torch/bnf.rst", "apiref/torch/cle.rst", "apiref/torch/compress.rst", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d.rst", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase.rst", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize.rst", "apiref/torch/index.rst", "apiref/torch/interactive_visualization.rst", "apiref/torch/layer_output_generation.rst", "apiref/torch/lpbq.rst", "apiref/torch/migration_guide.rst", "apiref/torch/model_preparer.rst", "apiref/torch/model_validator.rst", "apiref/torch/mp.rst", "apiref/torch/nn.rst", "apiref/torch/omniquant.rst", "apiref/torch/onnx.rst", "apiref/torch/peft_lora.rst", "apiref/torch/quant_analyzer.rst", "apiref/torch/quantization.rst", "apiref/torch/quantsim.rst", "apiref/torch/seq_mse.rst", "apiref/torch/v1/adaround.rst", "apiref/torch/v1/amp.rst", "apiref/torch/v1/autoquant.rst", "apiref/torch/v1/quant_analyzer.rst", "apiref/torch/v1/quantsim.rst", "apiref/torch/v1/seq_mse.rst", "external/index.rst", "glossary.rst", "index.rst", "overview/index.rst", "overview/install/build_from_source.rst", "overview/install/index.rst", "overview/install/quick-start.rst", "ptq_techniques/adaround.rst", "ptq_techniques/adascale.rst", "ptq_techniques/autoquant.rst", "ptq_techniques/bn.rst", "ptq_techniques/bnf.rst", "ptq_techniques/cle.rst", "ptq_techniques/index.rst", "ptq_techniques/omniquant.rst", "ptq_techniques/quantized LoRa/index.rst", "ptq_techniques/quantized LoRa/qw_lora.rst", "ptq_techniques/quantized LoRa/qwa_lora.rst", "ptq_techniques/seq_mse.rst", "release_notes.rst", "techniques/analysis tools/index.rst", "techniques/analysis tools/interactive_visualization.rst", "techniques/analysis tools/layer_output_generation.rst", "techniques/analysis tools/quant_analyzer.rst", "techniques/blockwise.rst", "techniques/compression/channel_pruning.rst", "techniques/compression/feature_guidebook.rst", "techniques/compression/greedy_compression_ratio_selection.rst", "techniques/compression/index.rst", "techniques/compression/spatial_svd.rst", "techniques/compression/visualization_compression.rst", "techniques/compression/weight_svd.rst", "techniques/compression/winnowing.rst", "techniques/encoding_spec.rst", "techniques/index.rst", "techniques/mixed precision/amp.rst", "techniques/mixed precision/index.rst", "techniques/mixed precision/mmp.rst", "techniques/ptq.rst", "techniques/qat.rst", "techniques/runtime_config.rst", "techniques/tensorflow/model_guidelines.rst", "techniques/torch/model_guidelines.rst", "tutorials/debugging_guidelines.rst", "tutorials/index.rst", "tutorials/notebooks.rst", "tutorials/notebooks/onnx/quantization/AMP.ipynb", "tutorials/notebooks/onnx/quantization/adaround.ipynb", "tutorials/notebooks/onnx/quantization/cle.ipynb", "tutorials/notebooks/onnx/quantization/quantsim.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/KerasAMP.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/adaround.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/autoquant.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/bn_reestimation.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/keras_transformer_qat.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/model_preparer.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/qat.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/qat_range_learning.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/quant_analyzer.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/quantsim_adaround_pcq.ipynb", "tutorials/notebooks/tensorflow/quantization/keras/quantsim_cle.ipynb", "tutorials/notebooks/torch/compression/channel_pruning.ipynb", "tutorials/notebooks/torch/compression/spatial_svd.ipynb", "tutorials/notebooks/torch/compression/spatial_svd_channel_pruning.ipynb", "tutorials/notebooks/torch/quantization/AMP.ipynb", "tutorials/notebooks/torch/quantization/adaround.ipynb", "tutorials/notebooks/torch/quantization/autoquant.ipynb", "tutorials/notebooks/torch/quantization/bn_reestimation.ipynb", "tutorials/notebooks/torch/quantization/cle_bc.ipynb", "tutorials/notebooks/torch/quantization/qat.ipynb", "tutorials/notebooks/torch/quantization/qat_range_learning.ipynb", "tutorials/notebooks/torch/quantization/quant_analyzer.ipynb", "tutorials/on_target_inference.rst", "tutorials/quantization_workflow.rst", "tutorials/quantsim.rst", "userguide/index.rst", "userguide/quantization_tools.rst", "userguide/quantization_workflow.rst", "versions.rst"], "indexentries": {"accelerator": [[190, "term-Accelerator", true]], "accuracy": [[190, "term-Accuracy", true]], "activation": [[190, "term-Activation", true]], "activation quantization": [[190, "term-Activation-Quantization", true]], "adaround": [[190, "term-AdaRound", true]], "adaroundparameters (class in aimet_tensorflow.keras.adaround_weight)": [[11, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false], [196, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.adaround.adaround_weight)": [[23, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false], [196, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.v1.adaround.adaround_weight)": [[183, "aimet_torch.v1.adaround.adaround_weight.AdaroundParameters", false]], "add_check() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.add_check", false]], "ai model efficiency toolkit": [[190, "term-AI-Model-Efficiency-Toolkit", true]], "aimet": [[190, "term-AIMET", true]], "analyze() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false], [212, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.analyze", false]], "apply() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false], [226, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false]], "apply_adaround() (in module aimet_onnx)": [[1, "aimet_onnx.apply_adaround", false], [196, "aimet_onnx.apply_adaround", false]], "apply_adaround() (in module aimet_tensorflow.keras.adaround_weight.adaround)": [[11, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false], [196, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.adaround.adaround_weight.adaround)": [[23, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false], [196, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.v1.adaround.adaround_weight.adaround)": [[183, "aimet_torch.v1.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adascale() (in module aimet_torch.experimental.adascale)": [[24, "aimet_torch.experimental.adascale.apply_adascale", false], [197, "aimet_torch.experimental.adascale.apply_adascale", false]], "apply_omniquant() (in module aimet_torch.experimental.omniquant)": [[176, "aimet_torch.experimental.omniquant.apply_omniquant", false], [203, "aimet_torch.experimental.omniquant.apply_omniquant", false]], "apply_seq_mse() (in module aimet_onnx)": [[10, "aimet_onnx.apply_seq_mse", false], [207, "aimet_onnx.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.seq_mse)": [[182, "aimet_torch.seq_mse.apply_seq_mse", false], [207, "aimet_torch.seq_mse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.v1.seq_mse)": [[188, "aimet_torch.v1.seq_mse.apply_seq_mse", false]], "auto (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false], [218, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false]], "autoquant": [[190, "term-AutoQuant", true]], "autoquantwithautomixedprecision (class in aimet_tensorflow.keras.auto_quant_v2)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false]], "batch normalization": [[190, "term-Batch-Normalization", true]], "batch normalization folding (bn folding)": [[190, "term-Batch-Normalization-Folding-BN-Folding", true]], "bitwidth (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.bitwidth", false]], "bn": [[190, "term-BN", true]], "callbackfunc (class in aimet_common.defs)": [[2, "aimet_common.defs.CallbackFunc", false], [12, "aimet_common.defs.CallbackFunc", false], [174, "aimet_common.defs.CallbackFunc", false], [184, "aimet_common.defs.CallbackFunc", false], [224, "aimet_common.defs.CallbackFunc", false], [224, "id0", false], [224, "id1", false]], "callbackfunc (class in aimet_common.utils)": [[179, "aimet_common.utils.CallbackFunc", false], [186, "aimet_common.utils.CallbackFunc", false], [212, "aimet_common.utils.CallbackFunc", false]], "check_model_sensitivity_to_quantization() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "check_model_sensitivity_to_quantization() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "choose_fast_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false], [224, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false]], "choose_mixed_precision() (in module aimet_onnx.mixed_precision)": [[2, "aimet_onnx.mixed_precision.choose_mixed_precision", false], [224, "aimet_onnx.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false], [224, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.mixed_precision)": [[174, "aimet_torch.mixed_precision.choose_mixed_precision", false], [224, "aimet_torch.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.v1.mixed_precision)": [[184, "aimet_torch.v1.mixed_precision.choose_mixed_precision", false]], "clone() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.clone", false]], "cnn": [[190, "term-CNN", true]], "compress_model() (aimet_tensorflow.keras.compress.modelcompressor static method)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false], [218, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false]], "compression": [[190, "term-Compression", true]], "compute_encodings() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.compute_encodings", false]], "compute_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.compute_encodings", false]], "compute_encodings() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (in module aimet_onnx)": [[9, "aimet_onnx.compute_encodings", false]], "convolutional layer": [[190, "term-Convolutional-Layer", true]], "convolutional neural network": [[190, "term-Convolutional-Neural-Network", true]], "dequantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.dequantize", false]], "dequantize() (in module aimet_torch.quantization.affine)": [[163, "aimet_torch.quantization.affine.dequantize", false]], "dequantizedtensor (class in aimet_torch.quantization)": [[158, "aimet_torch.quantization.DequantizedTensor", false]], "detach() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.detach", false]], "device": [[190, "term-Device", true]], "dlf": [[190, "term-DLF", true]], "dynamic layer fusion": [[190, "term-Dynamic-Layer-Fusion", true]], "edge device": [[190, "term-Edge-device", true]], "enable_per_layer_mse_loss() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false], [212, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false]], "encoding": [[190, "term-Encoding", true]], "equalize_model() (in module aimet_onnx.cross_layer_equalization)": [[4, "aimet_onnx.cross_layer_equalization.equalize_model", false], [201, "aimet_onnx.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_tensorflow.keras.cross_layer_equalization)": [[16, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false], [201, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_torch.cross_layer_equalization)": [[28, "aimet_torch.cross_layer_equalization.equalize_model", false], [201, "aimet_torch.cross_layer_equalization.equalize_model", false]], "evalcallbackfactory (class in aimet_onnx.amp.mixed_precision_algo)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false], [224, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false]], "evalcallbackfactory (class in aimet_torch.amp.mixed_precision_algo)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [184, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [224, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false]], "exponent_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.exponent_bits", false]], "export() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.export", false]], "export() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.export", false]], "export() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.export", false]], "export() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel.export", false]], "export() (in module aimet_torch.onnx)": [[177, "aimet_torch.onnx.export", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_mse_loss() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_mse_loss() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_stats_histogram() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "export_per_layer_stats_histogram() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "floatquantizedequantize (class in aimet_torch.quantization.float)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize", false]], "fold_all_batch_norms() (in module aimet_tensorflow.keras.batch_norm_fold)": [[15, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false], [200, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms() (in module aimet_torch.batch_norm_fold)": [[27, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false], [200, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms_to_scale() (in module aimet_tensorflow.keras.batch_norm_fold)": [[14, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false], [199, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false]], "fold_all_batch_norms_to_weight() (in module aimet_onnx.batch_norm_fold)": [[3, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false], [200, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false]], "fold_param_quantizers() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.fold_param_quantizers", false]], "forward() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.forward", false]], "forward() (aimet_torch.nn.quantizedlinear method)": [[100, "aimet_torch.nn.QuantizedLinear.forward", false]], "forward() (aimet_torch.quantization.affine.quantize method)": [[161, "aimet_torch.quantization.affine.Quantize.forward", false]], "forward() (aimet_torch.quantization.affine.quantizedequantize method)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize.forward", false]], "forward() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.forward", false]], "forward_fn() (aimet_torch.seq_mse.seqmseparams method)": [[182, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false], [207, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false]], "forward_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams.forward_fn", false]], "fp32": [[190, "term-FP32", true]], "from_encodings() (aimet_torch.quantization.float.floatquantizedequantize class method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.from_encodings", false]], "from_module() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.from_module", false]], "from_str() (aimet_common.defs.quantscheme class method)": [[9, "aimet_common.defs.QuantScheme.from_str", false], [22, "aimet_common.defs.QuantScheme.from_str", false], [181, "aimet_common.defs.QuantScheme.from_str", false], [187, "aimet_common.defs.QuantScheme.from_str", false]], "generate_layer_outputs() (aimet_onnx.layer_output_utils.layeroutpututil method)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [211, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_tensorflow.keras.layer_output_utils.layeroutpututil method)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [211, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_torch.layer_output_utils.layeroutpututil method)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [211, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "get_activation_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false]], "get_active_param_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false]], "get_active_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [224, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [224, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.get_default_kernel", false]], "get_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_encodings", false]], "get_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_extra_state", false]], "get_input_quantizer_modules() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [224, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false]], "get_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.get_kernel", false]], "get_loss_fn() (aimet_torch.seq_mse.seqmseparams method)": [[182, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false], [207, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false]], "get_loss_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams.get_loss_fn", false]], "get_param_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false]], "get_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false]], "greedyselectionparameters (class in aimet_common.defs)": [[17, "aimet_common.defs.GreedySelectionParameters", false], [218, "aimet_common.defs.GreedySelectionParameters", false]], "implements() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.implements", false]], "inference": [[190, "term-Inference", true]], "input_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.input_quantizers", false]], "int8": [[190, "term-INT8", true]], "is_bfloat16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_bfloat16", false]], "is_float16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_float16", false]], "kl divergence": [[190, "term-KL-Divergence", true]], "layer": [[190, "term-Layer", true]], "layer-wise quantization": [[190, "term-Layer-wise-quantization", true]], "layeroutpututil (class in aimet_onnx.layer_output_utils)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil", false], [211, "aimet_onnx.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_tensorflow.keras.layer_output_utils)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false], [211, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil", false], [211, "aimet_torch.layer_output_utils.LayerOutputUtil", false]], "load_checkpoint() (aimet_torch.v1.quantsim method)": [[187, "aimet_torch.v1.quantsim.load_checkpoint", false]], "load_state_dict() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.load_state_dict", false]], "lookup_quantizer() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup static method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false]], "lora mobilenet": [[190, "term-LoRA-MobileNet", true]], "mantissa_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.mantissa_bits", false]], "manual (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false], [218, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false]], "mixedprecisionconfigurator (class in aimet_torch.v2.mixed_precision)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false], [226, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false]], "model": [[190, "term-Model", true]], "modelcompressor (class in aimet_tensorflow.keras.compress)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor", false], [218, "aimet_tensorflow.keras.compress.ModelCompressor", false]], "modelvalidator (class in aimet_torch.model_validator.model_validator)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator", false]], "namingscheme (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.NamingScheme", false], [211, "aimet_torch.layer_output_utils.NamingScheme", false]], "neural network compression framework": [[190, "term-Neural-Network-Compression-Framework", true]], "new_empty() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.new_empty", false]], "nncf": [[190, "term-NNCF", true]], "node": [[190, "term-Node", true]], "normalization": [[190, "term-Normalization", true]], "onnx": [[190, "term-ONNX", true]], "onnx (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false], [211, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false]], "open neural network exchange": [[190, "term-Open-Neural-Network-Exchange", true]], "optimize() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false]], "output_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.output_quantizers", false]], "param_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.param_quantizers", false]], "per-channel quantization": [[190, "term-Per-channel-Quantization", true]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "post-training quantization": [[190, "term-Post-Training-Quantization", true]], "prepare_model() (in module aimet_tensorflow.keras.model_preparer)": [[20, "aimet_tensorflow.keras.model_preparer.prepare_model", false]], "prepare_model() (in module aimet_torch.model_preparer)": [[172, "aimet_torch.model_preparer.prepare_model", false]], "pruning": [[190, "term-Pruning", true]], "ptq": [[190, "term-PTQ", true]], "pytorch": [[190, "term-PyTorch", true]], "pytorch (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false], [211, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false]], "qat": [[190, "term-QAT", true]], "qdo": [[190, "term-QDO", true]], "qualcomm innovation center": [[190, "term-Qualcomm-Innovation-Center", true]], "quantanalyzer (class in aimet_onnx.quant_analyzer)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer", false], [212, "aimet_onnx.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.quant_analyzer)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer", false], [212, "aimet_torch.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.v1.quant_analyzer)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer", false]], "quantization": [[190, "term-Quantization", true]], "quantization simulation": [[190, "term-Quantization-Simulation", true]], "quantization-aware training": [[190, "term-Quantization-Aware-Training", true]], "quantizationmixin (class in aimet_torch.nn)": [[30, "aimet_torch.nn.QuantizationMixin", false]], "quantizationsimmodel (class in aimet_onnx)": [[9, "aimet_onnx.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_tensorflow.keras.quantsim)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch)": [[181, "aimet_torch.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch.v1.quantsim)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel", false]], "quantize (class in aimet_torch.quantization.affine)": [[161, "aimet_torch.quantization.affine.Quantize", false]], "quantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantize", false]], "quantize() (in module aimet_torch.quantization.affine)": [[164, "aimet_torch.quantization.affine.quantize", false]], "quantize_dequantize() (in module aimet_torch.quantization.affine)": [[165, "aimet_torch.quantization.affine.quantize_dequantize", false]], "quantized_repr() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantized_repr", false]], "quantizedadaptiveavgpool1d (class in aimet_torch.nn)": [[31, "aimet_torch.nn.QuantizedAdaptiveAvgPool1d", false]], "quantizedadaptiveavgpool2d (class in aimet_torch.nn)": [[32, "aimet_torch.nn.QuantizedAdaptiveAvgPool2d", false]], "quantizedadaptiveavgpool3d (class in aimet_torch.nn)": [[33, "aimet_torch.nn.QuantizedAdaptiveAvgPool3d", false]], "quantizedadaptivemaxpool1d (class in aimet_torch.nn)": [[34, "aimet_torch.nn.QuantizedAdaptiveMaxPool1d", false]], "quantizedadaptivemaxpool2d (class in aimet_torch.nn)": [[35, "aimet_torch.nn.QuantizedAdaptiveMaxPool2d", false]], "quantizedadaptivemaxpool3d (class in aimet_torch.nn)": [[36, "aimet_torch.nn.QuantizedAdaptiveMaxPool3d", false]], "quantizedalphadropout (class in aimet_torch.nn)": [[37, "aimet_torch.nn.QuantizedAlphaDropout", false]], "quantizedavgpool1d (class in aimet_torch.nn)": [[38, "aimet_torch.nn.QuantizedAvgPool1d", false]], "quantizedavgpool2d (class in aimet_torch.nn)": [[39, "aimet_torch.nn.QuantizedAvgPool2d", false]], "quantizedavgpool3d (class in aimet_torch.nn)": [[40, "aimet_torch.nn.QuantizedAvgPool3d", false]], "quantizedbatchnorm1d (class in aimet_torch.nn)": [[43, "aimet_torch.nn.QuantizedBatchNorm1d", false]], "quantizedbatchnorm2d (class in aimet_torch.nn)": [[44, "aimet_torch.nn.QuantizedBatchNorm2d", false]], "quantizedbatchnorm3d (class in aimet_torch.nn)": [[45, "aimet_torch.nn.QuantizedBatchNorm3d", false]], "quantizedbceloss (class in aimet_torch.nn)": [[41, "aimet_torch.nn.QuantizedBCELoss", false]], "quantizedbcewithlogitsloss (class in aimet_torch.nn)": [[42, "aimet_torch.nn.QuantizedBCEWithLogitsLoss", false]], "quantizedbilinear (class in aimet_torch.nn)": [[46, "aimet_torch.nn.QuantizedBilinear", false]], "quantizedcelu (class in aimet_torch.nn)": [[47, "aimet_torch.nn.QuantizedCELU", false]], "quantizedchannelshuffle (class in aimet_torch.nn)": [[49, "aimet_torch.nn.QuantizedChannelShuffle", false]], "quantizedcircularpad1d (class in aimet_torch.nn)": [[50, "aimet_torch.nn.QuantizedCircularPad1d", false]], "quantizedcircularpad2d (class in aimet_torch.nn)": [[51, "aimet_torch.nn.QuantizedCircularPad2d", false]], "quantizedcircularpad3d (class in aimet_torch.nn)": [[52, "aimet_torch.nn.QuantizedCircularPad3d", false]], "quantizedconstantpad1d (class in aimet_torch.nn)": [[53, "aimet_torch.nn.QuantizedConstantPad1d", false]], "quantizedconstantpad2d (class in aimet_torch.nn)": [[54, "aimet_torch.nn.QuantizedConstantPad2d", false]], "quantizedconstantpad3d (class in aimet_torch.nn)": [[55, "aimet_torch.nn.QuantizedConstantPad3d", false]], "quantizedconv1d (class in aimet_torch.nn)": [[56, "aimet_torch.nn.QuantizedConv1d", false]], "quantizedconv2d (class in aimet_torch.nn)": [[57, "aimet_torch.nn.QuantizedConv2d", false]], "quantizedconv3d (class in aimet_torch.nn)": [[58, "aimet_torch.nn.QuantizedConv3d", false]], "quantizedconvtranspose1d (class in aimet_torch.nn)": [[59, "aimet_torch.nn.QuantizedConvTranspose1d", false]], "quantizedconvtranspose2d (class in aimet_torch.nn)": [[60, "aimet_torch.nn.QuantizedConvTranspose2d", false]], "quantizedconvtranspose3d (class in aimet_torch.nn)": [[61, "aimet_torch.nn.QuantizedConvTranspose3d", false]], "quantizedcosineembeddingloss (class in aimet_torch.nn)": [[62, "aimet_torch.nn.QuantizedCosineEmbeddingLoss", false]], "quantizedcosinesimilarity (class in aimet_torch.nn)": [[63, "aimet_torch.nn.QuantizedCosineSimilarity", false]], "quantizedcrossentropyloss (class in aimet_torch.nn)": [[64, "aimet_torch.nn.QuantizedCrossEntropyLoss", false]], "quantizedctcloss (class in aimet_torch.nn)": [[48, "aimet_torch.nn.QuantizedCTCLoss", false]], "quantizeddropout (class in aimet_torch.nn)": [[65, "aimet_torch.nn.QuantizedDropout", false]], "quantizeddropout1d (class in aimet_torch.nn)": [[66, "aimet_torch.nn.QuantizedDropout1d", false]], "quantizeddropout2d (class in aimet_torch.nn)": [[67, "aimet_torch.nn.QuantizedDropout2d", false]], "quantizeddropout3d (class in aimet_torch.nn)": [[68, "aimet_torch.nn.QuantizedDropout3d", false]], "quantizedelu (class in aimet_torch.nn)": [[69, "aimet_torch.nn.QuantizedELU", false]], "quantizedembedding (class in aimet_torch.nn)": [[70, "aimet_torch.nn.QuantizedEmbedding", false]], "quantizedembeddingbag (class in aimet_torch.nn)": [[71, "aimet_torch.nn.QuantizedEmbeddingBag", false]], "quantizedequantize (class in aimet_torch.quantization.affine)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize", false]], "quantizedfeaturealphadropout (class in aimet_torch.nn)": [[72, "aimet_torch.nn.QuantizedFeatureAlphaDropout", false]], "quantizedflatten (class in aimet_torch.nn)": [[73, "aimet_torch.nn.QuantizedFlatten", false]], "quantizedfold (class in aimet_torch.nn)": [[74, "aimet_torch.nn.QuantizedFold", false]], "quantizedfractionalmaxpool2d (class in aimet_torch.nn)": [[75, "aimet_torch.nn.QuantizedFractionalMaxPool2d", false]], "quantizedfractionalmaxpool3d (class in aimet_torch.nn)": [[76, "aimet_torch.nn.QuantizedFractionalMaxPool3d", false]], "quantizedgaussiannllloss (class in aimet_torch.nn)": [[81, "aimet_torch.nn.QuantizedGaussianNLLLoss", false]], "quantizedgelu (class in aimet_torch.nn)": [[77, "aimet_torch.nn.QuantizedGELU", false]], "quantizedglu (class in aimet_torch.nn)": [[78, "aimet_torch.nn.QuantizedGLU", false]], "quantizedgroupnorm (class in aimet_torch.nn)": [[82, "aimet_torch.nn.QuantizedGroupNorm", false]], "quantizedgru (class in aimet_torch.nn)": [[79, "aimet_torch.nn.QuantizedGRU", false]], "quantizedgrucell (class in aimet_torch.nn)": [[80, "aimet_torch.nn.QuantizedGRUCell", false]], "quantizedhardshrink (class in aimet_torch.nn)": [[83, "aimet_torch.nn.QuantizedHardshrink", false]], "quantizedhardsigmoid (class in aimet_torch.nn)": [[84, "aimet_torch.nn.QuantizedHardsigmoid", false]], "quantizedhardswish (class in aimet_torch.nn)": [[85, "aimet_torch.nn.QuantizedHardswish", false]], "quantizedhardtanh (class in aimet_torch.nn)": [[86, "aimet_torch.nn.QuantizedHardtanh", false]], "quantizedhingeembeddingloss (class in aimet_torch.nn)": [[87, "aimet_torch.nn.QuantizedHingeEmbeddingLoss", false]], "quantizedhuberloss (class in aimet_torch.nn)": [[88, "aimet_torch.nn.QuantizedHuberLoss", false]], "quantizedinstancenorm1d (class in aimet_torch.nn)": [[89, "aimet_torch.nn.QuantizedInstanceNorm1d", false]], "quantizedinstancenorm2d (class in aimet_torch.nn)": [[90, "aimet_torch.nn.QuantizedInstanceNorm2d", false]], "quantizedinstancenorm3d (class in aimet_torch.nn)": [[91, "aimet_torch.nn.QuantizedInstanceNorm3d", false]], "quantizedkldivloss (class in aimet_torch.nn)": [[92, "aimet_torch.nn.QuantizedKLDivLoss", false]], "quantizedl1loss (class in aimet_torch.nn)": [[93, "aimet_torch.nn.QuantizedL1Loss", false]], "quantizedlayernorm (class in aimet_torch.nn)": [[98, "aimet_torch.nn.QuantizedLayerNorm", false]], "quantizedleakyrelu (class in aimet_torch.nn)": [[99, "aimet_torch.nn.QuantizedLeakyReLU", false]], "quantizedlinear (class in aimet_torch.nn)": [[100, "aimet_torch.nn.QuantizedLinear", false]], "quantizedlocalresponsenorm (class in aimet_torch.nn)": [[101, "aimet_torch.nn.QuantizedLocalResponseNorm", false]], "quantizedlogsigmoid (class in aimet_torch.nn)": [[102, "aimet_torch.nn.QuantizedLogSigmoid", false]], "quantizedlogsoftmax (class in aimet_torch.nn)": [[103, "aimet_torch.nn.QuantizedLogSoftmax", false]], "quantizedlppool1d (class in aimet_torch.nn)": [[94, "aimet_torch.nn.QuantizedLPPool1d", false]], "quantizedlppool2d (class in aimet_torch.nn)": [[95, "aimet_torch.nn.QuantizedLPPool2d", false]], "quantizedlstm (class in aimet_torch.nn)": [[96, "aimet_torch.nn.QuantizedLSTM", false]], "quantizedlstmcell (class in aimet_torch.nn)": [[97, "aimet_torch.nn.QuantizedLSTMCell", false]], "quantizedmarginrankingloss (class in aimet_torch.nn)": [[105, "aimet_torch.nn.QuantizedMarginRankingLoss", false]], "quantizedmaxpool1d (class in aimet_torch.nn)": [[106, "aimet_torch.nn.QuantizedMaxPool1d", false]], "quantizedmaxpool2d (class in aimet_torch.nn)": [[107, "aimet_torch.nn.QuantizedMaxPool2d", false]], "quantizedmaxpool3d (class in aimet_torch.nn)": [[108, "aimet_torch.nn.QuantizedMaxPool3d", false]], "quantizedmaxunpool1d (class in aimet_torch.nn)": [[109, "aimet_torch.nn.QuantizedMaxUnpool1d", false]], "quantizedmaxunpool2d (class in aimet_torch.nn)": [[110, "aimet_torch.nn.QuantizedMaxUnpool2d", false]], "quantizedmaxunpool3d (class in aimet_torch.nn)": [[111, "aimet_torch.nn.QuantizedMaxUnpool3d", false]], "quantizedmish (class in aimet_torch.nn)": [[112, "aimet_torch.nn.QuantizedMish", false]], "quantizedmseloss (class in aimet_torch.nn)": [[104, "aimet_torch.nn.QuantizedMSELoss", false]], "quantizedmultilabelmarginloss (class in aimet_torch.nn)": [[113, "aimet_torch.nn.QuantizedMultiLabelMarginLoss", false]], "quantizedmultilabelsoftmarginloss (class in aimet_torch.nn)": [[114, "aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", false]], "quantizedmultimarginloss (class in aimet_torch.nn)": [[115, "aimet_torch.nn.QuantizedMultiMarginLoss", false]], "quantizednllloss (class in aimet_torch.nn)": [[116, "aimet_torch.nn.QuantizedNLLLoss", false]], "quantizednllloss2d (class in aimet_torch.nn)": [[117, "aimet_torch.nn.QuantizedNLLLoss2d", false]], "quantizedpairwisedistance (class in aimet_torch.nn)": [[119, "aimet_torch.nn.QuantizedPairwiseDistance", false]], "quantizedpixelshuffle (class in aimet_torch.nn)": [[120, "aimet_torch.nn.QuantizedPixelShuffle", false]], "quantizedpixelunshuffle (class in aimet_torch.nn)": [[121, "aimet_torch.nn.QuantizedPixelUnshuffle", false]], "quantizedpoissonnllloss (class in aimet_torch.nn)": [[122, "aimet_torch.nn.QuantizedPoissonNLLLoss", false]], "quantizedprelu (class in aimet_torch.nn)": [[118, "aimet_torch.nn.QuantizedPReLU", false]], "quantizedreflectionpad1d (class in aimet_torch.nn)": [[128, "aimet_torch.nn.QuantizedReflectionPad1d", false]], "quantizedreflectionpad2d (class in aimet_torch.nn)": [[129, "aimet_torch.nn.QuantizedReflectionPad2d", false]], "quantizedreflectionpad3d (class in aimet_torch.nn)": [[130, "aimet_torch.nn.QuantizedReflectionPad3d", false]], "quantizedrelu (class in aimet_torch.nn)": [[126, "aimet_torch.nn.QuantizedReLU", false]], "quantizedrelu6 (class in aimet_torch.nn)": [[127, "aimet_torch.nn.QuantizedReLU6", false]], "quantizedreplicationpad1d (class in aimet_torch.nn)": [[131, "aimet_torch.nn.QuantizedReplicationPad1d", false]], "quantizedreplicationpad2d (class in aimet_torch.nn)": [[132, "aimet_torch.nn.QuantizedReplicationPad2d", false]], "quantizedreplicationpad3d (class in aimet_torch.nn)": [[133, "aimet_torch.nn.QuantizedReplicationPad3d", false]], "quantizedrnn (class in aimet_torch.nn)": [[123, "aimet_torch.nn.QuantizedRNN", false]], "quantizedrnncell (class in aimet_torch.nn)": [[124, "aimet_torch.nn.QuantizedRNNCell", false]], "quantizedrrelu (class in aimet_torch.nn)": [[125, "aimet_torch.nn.QuantizedRReLU", false]], "quantizedselu (class in aimet_torch.nn)": [[134, "aimet_torch.nn.QuantizedSELU", false]], "quantizedsigmoid (class in aimet_torch.nn)": [[136, "aimet_torch.nn.QuantizedSigmoid", false]], "quantizedsilu (class in aimet_torch.nn)": [[135, "aimet_torch.nn.QuantizedSiLU", false]], "quantizedsmoothl1loss (class in aimet_torch.nn)": [[137, "aimet_torch.nn.QuantizedSmoothL1Loss", false]], "quantizedsoftmarginloss (class in aimet_torch.nn)": [[138, "aimet_torch.nn.QuantizedSoftMarginLoss", false]], "quantizedsoftmax (class in aimet_torch.nn)": [[139, "aimet_torch.nn.QuantizedSoftmax", false]], "quantizedsoftmax2d (class in aimet_torch.nn)": [[140, "aimet_torch.nn.QuantizedSoftmax2d", false]], "quantizedsoftmin (class in aimet_torch.nn)": [[141, "aimet_torch.nn.QuantizedSoftmin", false]], "quantizedsoftplus (class in aimet_torch.nn)": [[142, "aimet_torch.nn.QuantizedSoftplus", false]], "quantizedsoftshrink (class in aimet_torch.nn)": [[143, "aimet_torch.nn.QuantizedSoftshrink", false]], "quantizedsoftsign (class in aimet_torch.nn)": [[144, "aimet_torch.nn.QuantizedSoftsign", false]], "quantizedtanh (class in aimet_torch.nn)": [[145, "aimet_torch.nn.QuantizedTanh", false]], "quantizedtanhshrink (class in aimet_torch.nn)": [[146, "aimet_torch.nn.QuantizedTanhshrink", false]], "quantizedtensor (class in aimet_torch.quantization)": [[159, "aimet_torch.quantization.QuantizedTensor", false]], "quantizedtensorbase (class in aimet_torch.quantization)": [[160, "aimet_torch.quantization.QuantizedTensorBase", false]], "quantizedthreshold (class in aimet_torch.nn)": [[147, "aimet_torch.nn.QuantizedThreshold", false]], "quantizedtripletmarginloss (class in aimet_torch.nn)": [[148, "aimet_torch.nn.QuantizedTripletMarginLoss", false]], "quantizedtripletmarginwithdistanceloss (class in aimet_torch.nn)": [[149, "aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", false]], "quantizedunflatten (class in aimet_torch.nn)": [[150, "aimet_torch.nn.QuantizedUnflatten", false]], "quantizedunfold (class in aimet_torch.nn)": [[151, "aimet_torch.nn.QuantizedUnfold", false]], "quantizedupsample (class in aimet_torch.nn)": [[152, "aimet_torch.nn.QuantizedUpsample", false]], "quantizedupsamplingbilinear2d (class in aimet_torch.nn)": [[153, "aimet_torch.nn.QuantizedUpsamplingBilinear2d", false]], "quantizedupsamplingnearest2d (class in aimet_torch.nn)": [[154, "aimet_torch.nn.QuantizedUpsamplingNearest2d", false]], "quantizedzeropad1d (class in aimet_torch.nn)": [[155, "aimet_torch.nn.QuantizedZeroPad1d", false]], "quantizedzeropad2d (class in aimet_torch.nn)": [[156, "aimet_torch.nn.QuantizedZeroPad2d", false]], "quantizedzeropad3d (class in aimet_torch.nn)": [[157, "aimet_torch.nn.QuantizedZeroPad3d", false]], "quantizergroup (class in aimet_onnx.amp.quantizer_groups)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_tensorflow.keras.amp.quantizer_groups)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_torch.amp.quantizer_groups)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [224, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false]], "quantscheme (class in aimet_common.defs)": [[9, "aimet_common.defs.QuantScheme", false], [22, "aimet_common.defs.QuantScheme", false], [181, "aimet_common.defs.QuantScheme", false], [187, "aimet_common.defs.QuantScheme", false]], "quantsim": [[190, "term-QuantSim", true]], "quic": [[190, "term-QUIC", true]], "reestimate_bn_stats() (in module aimet_tensorflow.keras.bn_reestimation)": [[14, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false], [199, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false]], "reestimate_bn_stats() (in module aimet_torch.bn_reestimation)": [[26, "aimet_torch.bn_reestimation.reestimate_bn_stats", false], [199, "aimet_torch.bn_reestimation.reestimate_bn_stats", false]], "run_inference() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false]], "save_checkpoint() (aimet_torch.v1.quantsim method)": [[187, "aimet_torch.v1.quantsim.save_checkpoint", false]], "seqmseparams (class in aimet_torch.seq_mse)": [[182, "aimet_torch.seq_mse.SeqMseParams", false], [207, "aimet_torch.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.v1.seq_mse)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams", false]], "set_activation_quantizers_to_float() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_activation_quantizers_to_float", false]], "set_adaround_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false]], "set_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_blockwise_quantization_for_weights", false]], "set_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.set_default_kernel", false]], "set_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.set_extra_state", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_onnx.quantsim)": [[7, "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_grouped_blockwise_quantization_for_weights", false]], "set_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.set_kernel", false]], "set_mixed_precision_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false]], "set_model_input_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false], [226, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false]], "set_model_output_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false], [226, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false]], "set_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false], [226, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false]], "set_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false], [198, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false]], "set_quantizers_to_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [224, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "spatialsvdparameters (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false], [218, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false]], "spatialsvdparameters.automodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false], [218, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false]], "spatialsvdparameters.manualmodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false], [218, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false]], "spatialsvdparameters.mode (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false], [218, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false]], "sqnr() (aimet_onnx.amp.mixed_precision_algo.evalcallbackfactory method)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [224, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "sqnr() (aimet_torch.amp.mixed_precision_algo.evalcallbackfactory method)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [184, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [224, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "target hardware accelerator": [[190, "term-Target-Hardware-Accelerator", true]], "target runtime": [[190, "term-Target-Runtime", true]], "tensorflow": [[190, "term-TensorFlow", true]], "to_list() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false], [224, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false], [224, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [224, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false]], "torchscript": [[190, "term-TorchScript", true]], "torchscript (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false], [211, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false]], "validate_model() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.validate_model", false]], "variant": [[190, "term-Variant", true]], "visualize_stats() (in module aimet_torch.v2.visualization_tools)": [[168, "aimet_torch.v2.visualization_tools.visualize_stats", false], [210, "aimet_torch.v2.visualization_tools.visualize_stats", false]], "weights": [[190, "term-Weights", true]], "wrap() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.wrap", false]]}, "objects": {"aimet_common.defs": [[224, 0, 1, "id1", "CallbackFunc"], [218, 0, 1, "", "GreedySelectionParameters"], [187, 0, 1, "", "QuantScheme"]], "aimet_common.defs.QuantScheme": [[187, 1, 1, "", "from_str"]], "aimet_common.utils": [[212, 0, 1, "", "CallbackFunc"]], "aimet_onnx": [[9, 0, 1, "", "QuantizationSimModel"], [196, 2, 1, "", "apply_adaround"], [207, 2, 1, "", "apply_seq_mse"], [9, 2, 1, "", "compute_encodings"]], "aimet_onnx.QuantizationSimModel": [[9, 1, 1, "", "compute_encodings"], [9, 1, 1, "", "export"]], "aimet_onnx.amp.mixed_precision_algo": [[224, 0, 1, "", "EvalCallbackFactory"]], "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory": [[224, 1, 1, "", "sqnr"]], "aimet_onnx.amp.quantizer_groups": [[224, 0, 1, "", "QuantizerGroup"]], "aimet_onnx.amp.quantizer_groups.QuantizerGroup": [[224, 1, 1, "", "get_activation_quantizers"], [224, 1, 1, "", "get_active_quantizers"], [224, 1, 1, "", "get_candidate"], [224, 1, 1, "", "get_param_quantizers"], [224, 1, 1, "", "set_quantizers_to_candidate"], [224, 1, 1, "", "to_list"]], "aimet_onnx.batch_norm_fold": [[200, 2, 1, "", "fold_all_batch_norms_to_weight"]], "aimet_onnx.cross_layer_equalization": [[201, 2, 1, "", "equalize_model"]], "aimet_onnx.layer_output_utils": [[211, 0, 1, "", "LayerOutputUtil"]], "aimet_onnx.layer_output_utils.LayerOutputUtil": [[211, 1, 1, "", "generate_layer_outputs"]], "aimet_onnx.mixed_precision": [[224, 2, 1, "", "choose_mixed_precision"]], "aimet_onnx.quant_analyzer": [[212, 0, 1, "", "QuantAnalyzer"]], "aimet_onnx.quant_analyzer.QuantAnalyzer": [[212, 1, 1, "", "analyze"], [212, 1, 1, "", "enable_per_layer_mse_loss"]], "aimet_onnx.quantsim": [[7, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_tensorflow.keras.adaround_weight": [[196, 0, 1, "", "AdaroundParameters"]], "aimet_tensorflow.keras.adaround_weight.Adaround": [[196, 2, 1, "", "apply_adaround"]], "aimet_tensorflow.keras.amp.quantizer_groups": [[224, 0, 1, "", "QuantizerGroup"]], "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup": [[224, 1, 1, "", "get_active_param_quantizers"], [224, 1, 1, "", "get_active_quantizers"], [224, 1, 1, "", "get_candidate"], [224, 1, 1, "", "lookup_quantizer"], [224, 1, 1, "", "set_quantizers_to_candidate"], [224, 1, 1, "", "to_list"]], "aimet_tensorflow.keras.auto_quant_v2": [[198, 0, 1, "", "AutoQuantWithAutoMixedPrecision"]], "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision": [[198, 1, 1, "", "get_quant_scheme_candidates"], [198, 1, 1, "", "optimize"], [198, 1, 1, "", "run_inference"], [198, 1, 1, "", "set_adaround_params"], [198, 1, 1, "", "set_mixed_precision_params"], [198, 1, 1, "", "set_quant_scheme_candidates"]], "aimet_tensorflow.keras.batch_norm_fold": [[200, 2, 1, "", "fold_all_batch_norms"], [199, 2, 1, "", "fold_all_batch_norms_to_scale"]], "aimet_tensorflow.keras.bn_reestimation": [[199, 2, 1, "", "reestimate_bn_stats"]], "aimet_tensorflow.keras.compress": [[218, 0, 1, "", "ModelCompressor"]], "aimet_tensorflow.keras.compress.ModelCompressor": [[218, 1, 1, "", "compress_model"]], "aimet_tensorflow.keras.cross_layer_equalization": [[201, 2, 1, "", "equalize_model"]], "aimet_tensorflow.keras.defs": [[218, 0, 1, "", "SpatialSvdParameters"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters": [[218, 0, 1, "", "AutoModeParams"], [218, 0, 1, "", "ManualModeParams"], [218, 0, 1, "", "Mode"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode": [[218, 3, 1, "", "auto"], [218, 3, 1, "", "manual"]], "aimet_tensorflow.keras.layer_output_utils": [[211, 0, 1, "", "LayerOutputUtil"]], "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil": [[211, 1, 1, "", "generate_layer_outputs"]], "aimet_tensorflow.keras.mixed_precision": [[224, 2, 1, "", "choose_fast_mixed_precision"], [224, 2, 1, "", "choose_mixed_precision"]], "aimet_tensorflow.keras.model_preparer": [[20, 2, 1, "", "prepare_model"]], "aimet_tensorflow.keras.quantsim": [[22, 0, 1, "", "QuantizationSimModel"]], "aimet_tensorflow.keras.quantsim.QuantizationSimModel": [[22, 1, 1, "", "compute_encodings"], [22, 1, 1, "", "export"]], "aimet_torch": [[181, 0, 1, "", "QuantizationSimModel"]], "aimet_torch.QuantizationSimModel": [[181, 1, 1, "", "compute_encodings"], [181, 1, 1, "", "export"], [181, 1, 1, "", "fold_param_quantizers"]], "aimet_torch.adaround.adaround_weight": [[196, 0, 1, "", "AdaroundParameters"]], "aimet_torch.adaround.adaround_weight.Adaround": [[196, 2, 1, "", "apply_adaround"]], "aimet_torch.amp.mixed_precision_algo": [[224, 0, 1, "", "EvalCallbackFactory"]], "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory": [[224, 1, 1, "", "sqnr"]], "aimet_torch.amp.quantizer_groups": [[224, 0, 1, "", "QuantizerGroup"]], "aimet_torch.amp.quantizer_groups.QuantizerGroup": [[224, 1, 1, "", "get_active_quantizers"], [224, 1, 1, "", "get_candidate"], [224, 1, 1, "", "get_input_quantizer_modules"], [224, 1, 1, "", "set_quantizers_to_candidate"], [224, 1, 1, "", "to_list"]], "aimet_torch.batch_norm_fold": [[200, 2, 1, "", "fold_all_batch_norms"]], "aimet_torch.bn_reestimation": [[199, 2, 1, "", "reestimate_bn_stats"]], "aimet_torch.cross_layer_equalization": [[201, 2, 1, "", "equalize_model"]], "aimet_torch.experimental.adascale": [[197, 2, 1, "", "apply_adascale"]], "aimet_torch.experimental.omniquant": [[203, 2, 1, "", "apply_omniquant"]], "aimet_torch.layer_output_utils": [[211, 0, 1, "", "LayerOutputUtil"], [211, 0, 1, "", "NamingScheme"]], "aimet_torch.layer_output_utils.LayerOutputUtil": [[211, 1, 1, "", "generate_layer_outputs"]], "aimet_torch.layer_output_utils.NamingScheme": [[211, 3, 1, "", "ONNX"], [211, 3, 1, "", "PYTORCH"], [211, 3, 1, "", "TORCHSCRIPT"]], "aimet_torch.mixed_precision": [[224, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.model_preparer": [[172, 2, 1, "", "prepare_model"]], "aimet_torch.model_validator.model_validator": [[173, 0, 1, "", "ModelValidator"]], "aimet_torch.model_validator.model_validator.ModelValidator": [[173, 1, 1, "", "add_check"], [173, 1, 1, "", "validate_model"]], "aimet_torch.nn": [[30, 0, 1, "", "QuantizationMixin"], [31, 0, 1, "", "QuantizedAdaptiveAvgPool1d"], [32, 0, 1, "", "QuantizedAdaptiveAvgPool2d"], [33, 0, 1, "", "QuantizedAdaptiveAvgPool3d"], [34, 0, 1, "", "QuantizedAdaptiveMaxPool1d"], [35, 0, 1, "", "QuantizedAdaptiveMaxPool2d"], [36, 0, 1, "", "QuantizedAdaptiveMaxPool3d"], [37, 0, 1, "", "QuantizedAlphaDropout"], [38, 0, 1, "", "QuantizedAvgPool1d"], [39, 0, 1, "", "QuantizedAvgPool2d"], [40, 0, 1, "", "QuantizedAvgPool3d"], [41, 0, 1, "", "QuantizedBCELoss"], [42, 0, 1, "", "QuantizedBCEWithLogitsLoss"], [43, 0, 1, "", "QuantizedBatchNorm1d"], [44, 0, 1, "", "QuantizedBatchNorm2d"], [45, 0, 1, "", "QuantizedBatchNorm3d"], [46, 0, 1, "", "QuantizedBilinear"], [47, 0, 1, "", "QuantizedCELU"], [48, 0, 1, "", "QuantizedCTCLoss"], [49, 0, 1, "", "QuantizedChannelShuffle"], [50, 0, 1, "", "QuantizedCircularPad1d"], [51, 0, 1, "", "QuantizedCircularPad2d"], [52, 0, 1, "", "QuantizedCircularPad3d"], [53, 0, 1, "", "QuantizedConstantPad1d"], [54, 0, 1, "", "QuantizedConstantPad2d"], [55, 0, 1, "", "QuantizedConstantPad3d"], [56, 0, 1, "", "QuantizedConv1d"], [57, 0, 1, "", "QuantizedConv2d"], [58, 0, 1, "", "QuantizedConv3d"], [59, 0, 1, "", "QuantizedConvTranspose1d"], [60, 0, 1, "", "QuantizedConvTranspose2d"], [61, 0, 1, "", "QuantizedConvTranspose3d"], [62, 0, 1, "", "QuantizedCosineEmbeddingLoss"], [63, 0, 1, "", "QuantizedCosineSimilarity"], [64, 0, 1, "", "QuantizedCrossEntropyLoss"], [65, 0, 1, "", "QuantizedDropout"], [66, 0, 1, "", "QuantizedDropout1d"], [67, 0, 1, "", "QuantizedDropout2d"], [68, 0, 1, "", "QuantizedDropout3d"], [69, 0, 1, "", "QuantizedELU"], [70, 0, 1, "", "QuantizedEmbedding"], [71, 0, 1, "", "QuantizedEmbeddingBag"], [72, 0, 1, "", "QuantizedFeatureAlphaDropout"], [73, 0, 1, "", "QuantizedFlatten"], [74, 0, 1, "", "QuantizedFold"], [75, 0, 1, "", "QuantizedFractionalMaxPool2d"], [76, 0, 1, "", "QuantizedFractionalMaxPool3d"], [77, 0, 1, "", "QuantizedGELU"], [78, 0, 1, "", "QuantizedGLU"], [79, 0, 1, "", "QuantizedGRU"], [80, 0, 1, "", "QuantizedGRUCell"], [81, 0, 1, "", "QuantizedGaussianNLLLoss"], [82, 0, 1, "", "QuantizedGroupNorm"], [83, 0, 1, "", "QuantizedHardshrink"], [84, 0, 1, "", "QuantizedHardsigmoid"], [85, 0, 1, "", "QuantizedHardswish"], [86, 0, 1, "", "QuantizedHardtanh"], [87, 0, 1, "", "QuantizedHingeEmbeddingLoss"], [88, 0, 1, "", "QuantizedHuberLoss"], [89, 0, 1, "", "QuantizedInstanceNorm1d"], [90, 0, 1, "", "QuantizedInstanceNorm2d"], [91, 0, 1, "", "QuantizedInstanceNorm3d"], [92, 0, 1, "", "QuantizedKLDivLoss"], [93, 0, 1, "", "QuantizedL1Loss"], [94, 0, 1, "", "QuantizedLPPool1d"], [95, 0, 1, "", "QuantizedLPPool2d"], [96, 0, 1, "", "QuantizedLSTM"], [97, 0, 1, "", "QuantizedLSTMCell"], [98, 0, 1, "", "QuantizedLayerNorm"], [99, 0, 1, "", "QuantizedLeakyReLU"], [100, 0, 1, "", "QuantizedLinear"], [101, 0, 1, "", "QuantizedLocalResponseNorm"], [102, 0, 1, "", "QuantizedLogSigmoid"], [103, 0, 1, "", "QuantizedLogSoftmax"], [104, 0, 1, "", "QuantizedMSELoss"], [105, 0, 1, "", "QuantizedMarginRankingLoss"], [106, 0, 1, "", "QuantizedMaxPool1d"], [107, 0, 1, "", "QuantizedMaxPool2d"], [108, 0, 1, "", "QuantizedMaxPool3d"], [109, 0, 1, "", "QuantizedMaxUnpool1d"], [110, 0, 1, "", "QuantizedMaxUnpool2d"], [111, 0, 1, "", "QuantizedMaxUnpool3d"], [112, 0, 1, "", "QuantizedMish"], [113, 0, 1, "", "QuantizedMultiLabelMarginLoss"], [114, 0, 1, "", "QuantizedMultiLabelSoftMarginLoss"], [115, 0, 1, "", "QuantizedMultiMarginLoss"], [116, 0, 1, "", "QuantizedNLLLoss"], [117, 0, 1, "", "QuantizedNLLLoss2d"], [118, 0, 1, "", "QuantizedPReLU"], [119, 0, 1, "", "QuantizedPairwiseDistance"], [120, 0, 1, "", "QuantizedPixelShuffle"], [121, 0, 1, "", "QuantizedPixelUnshuffle"], [122, 0, 1, "", "QuantizedPoissonNLLLoss"], [123, 0, 1, "", "QuantizedRNN"], [124, 0, 1, "", "QuantizedRNNCell"], [125, 0, 1, "", "QuantizedRReLU"], [126, 0, 1, "", "QuantizedReLU"], [127, 0, 1, "", "QuantizedReLU6"], [128, 0, 1, "", "QuantizedReflectionPad1d"], [129, 0, 1, "", "QuantizedReflectionPad2d"], [130, 0, 1, "", "QuantizedReflectionPad3d"], [131, 0, 1, "", "QuantizedReplicationPad1d"], [132, 0, 1, "", "QuantizedReplicationPad2d"], [133, 0, 1, "", "QuantizedReplicationPad3d"], [134, 0, 1, "", "QuantizedSELU"], [135, 0, 1, "", "QuantizedSiLU"], [136, 0, 1, "", "QuantizedSigmoid"], [137, 0, 1, "", "QuantizedSmoothL1Loss"], [138, 0, 1, "", "QuantizedSoftMarginLoss"], [139, 0, 1, "", "QuantizedSoftmax"], [140, 0, 1, "", "QuantizedSoftmax2d"], [141, 0, 1, "", "QuantizedSoftmin"], [142, 0, 1, "", "QuantizedSoftplus"], [143, 0, 1, "", "QuantizedSoftshrink"], [144, 0, 1, "", "QuantizedSoftsign"], [145, 0, 1, "", "QuantizedTanh"], [146, 0, 1, "", "QuantizedTanhshrink"], [147, 0, 1, "", "QuantizedThreshold"], [148, 0, 1, "", "QuantizedTripletMarginLoss"], [149, 0, 1, "", "QuantizedTripletMarginWithDistanceLoss"], [150, 0, 1, "", "QuantizedUnflatten"], [151, 0, 1, "", "QuantizedUnfold"], [152, 0, 1, "", "QuantizedUpsample"], [153, 0, 1, "", "QuantizedUpsamplingBilinear2d"], [154, 0, 1, "", "QuantizedUpsamplingNearest2d"], [155, 0, 1, "", "QuantizedZeroPad1d"], [156, 0, 1, "", "QuantizedZeroPad2d"], [157, 0, 1, "", "QuantizedZeroPad3d"]], "aimet_torch.nn.QuantizationMixin": [[30, 1, 1, "", "compute_encodings"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "from_module"], [30, 1, 1, "", "get_default_kernel"], [30, 1, 1, "", "get_kernel"], [30, 1, 1, "", "implements"], [30, 3, 1, "", "input_quantizers"], [30, 3, 1, "", "output_quantizers"], [30, 3, 1, "", "param_quantizers"], [30, 1, 1, "", "set_default_kernel"], [30, 1, 1, "", "set_kernel"], [30, 1, 1, "", "wrap"]], "aimet_torch.nn.QuantizedLinear": [[100, 1, 1, "", "forward"]], "aimet_torch.onnx": [[177, 2, 1, "", "export"]], "aimet_torch.quant_analyzer": [[212, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.quant_analyzer.QuantAnalyzer": [[212, 1, 1, "", "analyze"], [212, 1, 1, "", "check_model_sensitivity_to_quantization"], [212, 1, 1, "", "export_per_layer_encoding_min_max_range"], [212, 1, 1, "", "export_per_layer_mse_loss"], [212, 1, 1, "", "export_per_layer_stats_histogram"], [212, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [212, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.quantization": [[158, 0, 1, "", "DequantizedTensor"], [159, 0, 1, "", "QuantizedTensor"], [160, 0, 1, "", "QuantizedTensorBase"]], "aimet_torch.quantization.DequantizedTensor": [[158, 1, 1, "", "dequantize"], [158, 1, 1, "", "quantize"], [158, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensor": [[159, 1, 1, "", "dequantize"], [159, 1, 1, "", "quantize"], [159, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensorBase": [[160, 1, 1, "", "clone"], [160, 1, 1, "", "dequantize"], [160, 1, 1, "", "detach"], [160, 1, 1, "", "new_empty"], [160, 1, 1, "", "quantize"], [160, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.affine": [[161, 0, 1, "", "Quantize"], [162, 0, 1, "", "QuantizeDequantize"], [163, 2, 1, "", "dequantize"], [164, 2, 1, "", "quantize"], [165, 2, 1, "", "quantize_dequantize"]], "aimet_torch.quantization.affine.Quantize": [[161, 1, 1, "", "forward"]], "aimet_torch.quantization.affine.QuantizeDequantize": [[162, 1, 1, "", "forward"]], "aimet_torch.quantization.float": [[166, 0, 1, "", "FloatQuantizeDequantize"]], "aimet_torch.quantization.float.FloatQuantizeDequantize": [[166, 4, 1, "", "bitwidth"], [166, 1, 1, "", "compute_encodings"], [166, 4, 1, "", "exponent_bits"], [166, 1, 1, "", "forward"], [166, 1, 1, "", "from_encodings"], [166, 1, 1, "", "get_encodings"], [166, 1, 1, "", "get_extra_state"], [166, 1, 1, "", "is_bfloat16"], [166, 1, 1, "", "is_float16"], [166, 1, 1, "", "load_state_dict"], [166, 4, 1, "", "mantissa_bits"], [166, 1, 1, "", "set_extra_state"]], "aimet_torch.seq_mse": [[207, 0, 1, "", "SeqMseParams"], [207, 2, 1, "", "apply_seq_mse"]], "aimet_torch.seq_mse.SeqMseParams": [[207, 1, 1, "", "forward_fn"], [207, 1, 1, "", "get_loss_fn"]], "aimet_torch.v1.adaround.adaround_weight": [[183, 0, 1, "", "AdaroundParameters"]], "aimet_torch.v1.adaround.adaround_weight.Adaround": [[183, 2, 1, "", "apply_adaround"]], "aimet_torch.v1.mixed_precision": [[184, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.v1.quant_analyzer": [[186, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.v1.quant_analyzer.QuantAnalyzer": [[186, 1, 1, "", "analyze"], [186, 1, 1, "", "check_model_sensitivity_to_quantization"], [186, 1, 1, "", "export_per_layer_encoding_min_max_range"], [186, 1, 1, "", "export_per_layer_mse_loss"], [186, 1, 1, "", "export_per_layer_stats_histogram"], [186, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [186, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.v1.quantsim": [[187, 0, 1, "", "QuantizationSimModel"], [187, 1, 1, "", "load_checkpoint"], [187, 1, 1, "", "save_checkpoint"]], "aimet_torch.v1.quantsim.QuantizationSimModel": [[187, 1, 1, "", "compute_encodings"], [187, 1, 1, "", "export"]], "aimet_torch.v1.seq_mse": [[188, 0, 1, "", "SeqMseParams"], [188, 2, 1, "", "apply_seq_mse"]], "aimet_torch.v1.seq_mse.SeqMseParams": [[188, 1, 1, "", "forward_fn"], [188, 1, 1, "", "get_loss_fn"]], "aimet_torch.v2.mixed_precision": [[226, 0, 1, "", "MixedPrecisionConfigurator"]], "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator": [[226, 1, 1, "", "apply"], [226, 1, 1, "", "set_model_input_precision"], [226, 1, 1, "", "set_model_output_precision"], [226, 1, 1, "", "set_precision"]], "aimet_torch.v2.quantsim.config_utils": [[170, 2, 1, "", "set_activation_quantizers_to_float"], [170, 2, 1, "", "set_blockwise_quantization_for_weights"], [170, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_torch.v2.visualization_tools": [[210, 2, 1, "", "visualize_stats"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute", "4": "py:property"}, "terms": {"": [2, 7, 8, 10, 12, 20, 21, 22, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 166, 170, 172, 174, 175, 179, 182, 184, 185, 186, 187, 188, 190, 193, 195, 196, 197, 198, 201, 203, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 230, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "00": [164, 165, 200, 201, 250, 251, 252], "000": [196, 263], "0000": [158, 165, 177, 180], "0000e": [164, 165], "001": [199, 235, 253], "0014807": 194, "00183112e": 200, "00215936e": 200, "0030": 180, "00317": 197, "0032": 180, "0034": 180, "00347728e": 201, "0035": 180, "0036": [162, 180], "0037": 180, "0038": 180, "0039": [162, 180], "0059": 180, "0063": 180, "0064": 180, "0068": 180, "0069": 180, "0073": 180, "0074": 180, "0078": 180, "00_224": [196, 200, 201], "01": [11, 23, 164, 165, 183, 196, 198, 200, 201, 239, 241, 255], "0115": 162, "0117": 180, "01392324": 195, "0142": 160, "01457286e": [200, 201], "0156": 180, "0158": 162, "01675645": 195, "0176": 162, "0195": 180, "02": [164, 165, 200, 201], "02078857e": [200, 201], "0234": 180, "0235": 198, "026354755942277083": 194, "02635476": 194, "0273": 180, "0278355": 194, "02887694e": 201, "0293162": 194, "0295": 162, "03": [200, 201], "0312": 180, "03513189": 195, "0352": 180, "03658897": 195, "03798249e": 200, "0386": 162, "0391": 180, "04": [192, 194, 195, 200, 201], "04025269e": 200, "0406616e": 201, "0424": 162, "0428": 199, "0430": 180, "0449": 195, "0469": 180, "0471": 162, "04721": 249, "05": [164, 165, 200, 201], "0500e": [164, 165], "0508": 180, "05270951": 194, "0541903": 194, "0549": 162, "05549544e": [200, 201], "0564": 162, "0639": 162, "0667": 165, "0680": 162, "0769": 195, "0784": 162, "07906426": 194, "08": [164, 165], "080545": 194, "0819": 162, "0820258": 194, "0859": 166, "0861": 195, "08742931e": [200, 201], "0882": 160, "0889": 166, "0891": 166, "0897725": 195, "09": 224, "09111059e": 200, "0947": 166, "09685047e": [200, 201], "0x7f127685a598": 173, "0x7f9dd9bd90d0": 173, "0x7ff5703eff28": 173, "0x7ff577373598": 173, "1": [0, 2, 12, 13, 17, 20, 21, 23, 24, 25, 29, 30, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 201, 204, 205, 206, 213, 214, 216, 217, 218, 220, 221, 226, 243, 263, 267], "10": [17, 20, 29, 30, 158, 161, 162, 164, 172, 173, 175, 180, 181, 187, 192, 194, 195, 196, 199, 208, 213, 214, 216, 217, 218, 220, 224, 227, 228, 230, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 256, 258, 259], "100": [2, 12, 14, 26, 171, 184, 190, 194, 199, 224, 242, 256], "1000": [8, 21, 160, 179, 186, 196, 212, 214, 218, 220, 227, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "10000": [1, 11, 196, 235, 236, 237, 238, 240, 248, 253, 254], "1000e": [164, 165], "102": 180, "1024": [196, 224, 227, 243], "103": [161, 180], "1050": 195, "10541902": 194, "10569119e": [200, 201], "106": 161, "1060": 162, "1068997": 194, "107": 180, "10708203e": [200, 201], "108": 180, "109": 161, "10984787": 195, "10k": [1, 23, 183, 196], "11": [159, 160, 164, 180, 193, 194, 208, 252], "110": [161, 180], "111": [161, 180], "11176670e": 201, "112": [196, 200, 201], "1128": 162, "11446196": 195, "1155": 195, "1176": 162, "118": 180, "11899511": 195, "119": 180, "12": [164, 180, 193, 194, 208, 213], "12039044e": 201, "122": 161, "1232": 162, "127": [159, 160, 180, 181, 227, 228], "128": [2, 13, 25, 159, 160, 170, 172, 174, 180, 181, 184, 185, 194, 196, 198, 200, 201, 213, 224, 227, 228, 243, 245, 246], "129": 161, "13": [164, 180, 267], "1307": 162, "131": 161, "13137": [197, 203, 208], "13177378": 194, "1333": 165, "1398": 217, "14": [164, 180, 208, 267], "1406": 217, "141": 161, "143": 161, "144": 161, "145": 161, "1450607": 195, "1458": 195, "146": 161, "1493fe1": 208, "15": [164, 165, 180, 199, 208, 217, 228, 242, 243, 245, 246, 256, 258, 259], "150": 161, "1500": [24, 197], "15000": 196, "1500e": [164, 165], "152": 161, "15259957e": 201, "153": 159, "155": 161, "15717569e": 200, "15812853": 194, "15e": [250, 252], "15k": [1, 23, 183, 196], "16": [2, 12, 22, 30, 161, 166, 172, 174, 175, 177, 178, 180, 181, 184, 187, 195, 196, 197, 198, 203, 205, 206, 213, 218, 224, 227, 228, 235, 239, 242, 253, 257, 262, 266, 267], "1619": 195, "162": 161, "16245179e": [200, 201], "1647": 162, "16839484e": 201, "16966406e": 201, "17": [161, 180, 201, 267], "1709": 162, "172": 161, "1727": 166, "1729": 166, "1741": 162, "178": 161, "17871511e": 201, "179": 161, "18": [180, 235, 236, 237, 238, 267], "181": 161, "18136823e": 200, "18448329": 194, "186": 161, "18673885e": 200, "187": 161, "188": 161, "1889": 162, "19": [161, 180, 194, 200, 201, 267], "1906": 249, "19186290e": [200, 201], "192": 161, "1921e": [164, 165], "194": 161, "1943": 217, "1945": 160, "1955": 217, "1977": 162, "19778645e": 200, "1b": 203, "1e": [20, 199, 200, 201, 227, 228, 243, 244], "1k": [196, 198, 199, 207, 224], "1m": [236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 202, 204, 205, 206, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 230, 231, 233, 243, 261, 263, 264, 265, 267], "20": [10, 11, 20, 23, 160, 177, 182, 183, 188, 196, 199, 200, 201, 205, 206, 207, 218, 228, 241, 242, 243, 244, 245, 246, 256, 258, 259, 267], "200": [20, 171, 243, 244, 255], "2000": [23, 159, 165, 183, 196, 240, 241, 248, 254, 255, 257], "20000": [20, 243, 244], "2000e": [164, 165], "2012": [235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "2014": 217, "2016": 217, "2017": 217, "2019": [237, 249, 257], "203": 161, "20433941e": [200, 201], "2048": [196, 198, 199, 203, 228], "205": 159, "2068": 195, "207": 161, "20722957": 195, "20k": 243, "21": [160, 177, 200, 201, 267], "21066449e": 200, "21083805": 194, "2118": 162, "2123188": 194, "21250950e": 200, "2137995": 194, "216": 161, "218": 161, "2196": 162, "22": [180, 192, 193, 194, 195, 200, 201, 267], "2205": 160, "2212": 162, "2217": 195, "22219264e": [200, 201], "224": [181, 195, 196, 198, 199, 200, 201, 207, 211, 212, 218, 224, 226, 227, 228, 235, 236, 237, 238, 239, 242, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "225": [196, 198, 224, 227, 236, 255], "22583652e": 200, "226": 161, "2260": 160, "2265": 162, "22884297": 195, "229": [196, 198, 224, 227, 236, 255], "23": [159, 160, 267], "23011987e": [200, 201], "2306": 197, "2308": [197, 203, 208], "2315": 195, "23156421e": [200, 201], "2353": 162, "2355": 162, "2363": [162, 195], "237": 161, "23719281": 194, "23799022": 195, "238": 161, "24": 267, "240": 180, "2401543": 194, "241": 180, "242": 180, "24257803e": 200, "243": 180, "2431": 195, "244": 180, "245": 180, "2458": 162, "2459": 195, "246": 180, "24665177": 195, "247": 180, "248": 180, "249": 180, "25": [180, 267], "250": 180, "2500e": [164, 165], "251": 180, "252": 180, "253": 180, "254": 180, "2546": 162, "255": [158, 161, 180, 181, 227, 228], "256": [8, 180, 196, 198, 212, 224, 227, 236, 239, 253], "2568": 162, "2592": 173, "26": [159, 180, 267], "26179108e": 200, "26354757": 194, "2650282": 194, "2667": 165, "27": 267, "27045077": 195, "27415752e": 201, "2771": 162, "28": [159, 160, 214, 218, 220, 248, 267], "28065038": 195, "28238320e": 201, "288": [196, 201], "28990233": 194, "29": [180, 267], "291383": 194, "2921": 160, "2930528e": 201, "29590677e": [200, 201], "2b": 215, "2c8ae88": 208, "2d": [213, 214, 217, 221, 248], "3": [2, 12, 13, 25, 29, 158, 160, 164, 165, 169, 171, 172, 173, 174, 178, 180, 181, 182, 184, 185, 188, 192, 194, 195, 201, 205, 213, 214, 215, 218, 220, 221, 226, 243, 267], "30": [161, 180, 267], "300": 253, "3000": [159, 243], "30122258e": [200, 201], "3038": 162, "30402938e": 201, "31": [8, 11, 21, 23, 179, 181, 183, 186, 187, 196, 212, 227, 228, 267], "31080866e": 200, "312": 159, "3137": 162, "31625706": 194, "32": [20, 161, 172, 173, 180, 181, 187, 190, 196, 197, 198, 199, 200, 201, 207, 212, 222, 224, 227, 228, 230, 232, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 267], "32141271e": 200, "3216": 162, "33": [161, 250, 251, 252, 267], "3333": 165, "33731920e": [200, 201], "34": 267, "34215236e": 201, "34261182": 194, "3451": 162, "3467390e": 201, "34694423e": 201, "347054": 194, "3470540046691895": 194, "35": [181, 227, 228, 267], "350m": [205, 206], "35107604": 195, "35139937e": 201, "35536635": 195, "3576329": 195, "35ad990": 208, "36": 161, "3610": 195, "36678016": 195, "36896658": 194, "37": [160, 161, 180], "3734087606114667": 194, "37757687e": 201, "38": [159, 160, 217], "38100997e": [200, 201], "3851556": 195, "3861": 195, "39": 158, "39502389e": [200, 201], "3992": 162, "3d": 213, "4": [2, 7, 8, 11, 13, 21, 23, 25, 159, 160, 164, 165, 170, 171, 172, 177, 178, 179, 180, 181, 183, 185, 186, 187, 195, 200, 201, 205, 206, 213, 214, 216, 218, 220, 221, 222, 238, 243, 247, 250, 251, 252, 255, 260, 267], "40": [159, 160, 203], "4000": [158, 165], "406": [196, 198, 224, 227, 236, 255], "41": 158, "41059163e": 201, "4132449": 195, "4157": 162, "41715762e": [200, 201], "42": 180, "42083430e": 200, "4216761": 194, "4231569": 194, "4246376": 194, "42477691e": 200, "43": 180, "43178225": 195, "43477735": 195, "4392": 162, "44408584e": [200, 201], "44632760e": 201, "4475": 162, "44803086": 194, "4495116": 194, "4499": 195, "44993666e": 201, "4503196": 195, "45040053": 195, "4549": 162, "455": [192, 194, 195], "456": [196, 198, 224, 227, 236, 255], "4585028e": 201, "4599525": 195, "46642041e": 201, "4667": 165, "46723792": 195, "4677236": 195, "4694": 162, "4706": 162, "47438562": 194, "4758663": 194, "4784": 162, "48": 180, "48045555e": 201, "48399768e": [200, 201], "485": [196, 198, 224, 227, 236, 255], "4863": 162, "49": [161, 180], "49024737e": [200, 201], "4d": 213, "4f": [198, 199, 227, 228], "5": [160, 161, 162, 164, 165, 166, 171, 172, 175, 178, 180, 192, 194, 195, 199, 200, 201, 213, 214, 215, 218, 220, 224, 237, 238, 239, 240, 243, 245, 246, 249, 250, 251, 252, 254, 257, 258, 259, 267], "50": [215, 218, 224, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "500": [196, 212, 214, 224, 227, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 254, 255, 257, 258, 259, 260, 263], "5000": [241, 255], "50000": [196, 218, 224, 227, 236, 239], "5000e": [164, 165], "5006": 219, "50074035": 194, "5022211": 194, "50366503": 195, "5091695": 195, "51": 158, "512": [205, 206], "51446089e": [200, 201], "51547194e": [200, 201], "5157": 195, "51876003e": 200, "52": 158, "521": 158, "5220": 162, "5255": 162, "52709514": 194, "52912678e": [200, 201], "52974629e": 200, "5301": 195, "5307": 195, "5315115": 195, "5317543": 195, "5333": [162, 165], "53403008e": [200, 201], "53976866e": [200, 201], "54": 180, "54620111e": [200, 201], "55": [161, 180], "55344987": 194, "5540": 162, "5549306": 194, "55578518e": 201, "56632766e": 200, "56810045": 195, "5695": 162, "57": [159, 160, 180], "57021021e": 201, "57980466": 194, "57984132e": [200, 201], "5856506e": 201, "5876": 199, "5897": 162, "59": [161, 180], "5962": 195, "59643137e": 200, "5e": [251, 252, 256, 258, 259], "6": [20, 160, 164, 165, 172, 180, 200, 201, 213, 224, 227, 228, 242, 243, 244, 245, 246, 252, 254, 257, 258, 259, 267], "60": 180, "6000": [158, 159, 160, 165], "6039": 162, "6054": 162, "6061594": 194, "60713138e": [200, 201], "6079": 162, "60808927": 195, "6091": 195, "61": 180, "61087702e": 200, "6177": 162, "6196": 162, "62": 180, "6213797e": 201, "62274104": 195, "6247": 162, "62498877e": [200, 201], "63": 161, "63172388e": 200, "6325141": 194, "6327": 195, "6340": 195, "64": [7, 8, 20, 161, 170, 180, 181, 192, 194, 195, 196, 197, 198, 212, 213, 224, 227, 228, 230, 248], "6431": 162, "64579314e": [200, 201], "65": 215, "6583": 228, "6588689": 194, "66": [161, 215, 250, 251, 252], "6603496": 194, "6636515": 208, "6667": 165, "6695": 162, "67278278e": [200, 201], "67416465e": 201, "67510852e": [200, 201], "67677957e": [200, 201], "68": 158, "68016": 228, "68522364": 194, "6867044": 194, "6910": 228, "69716495e": 201, "6998855": 195, "6d1664c": 208, "6d3aa97": 208, "7": [160, 164, 165, 166, 180, 181, 200, 201, 221, 227, 228, 251, 252, 254, 256, 257, 258, 259, 267], "70": 180, "7013": 227, "70130579e": 201, "70838": 228, "71": 160, "7115784": 194, "7164": 198, "71659231e": [200, 201], "7173": 227, "72468403e": 201, "73242160e": 200, "7333": 165, "7336ead": 208, "73793316": 194, "74": 161, "74478185e": 200, "7466": 195, "75": 215, "75162792e": 201, "75700430e": [200, 201], "76": 180, "76428795": 194, "77": 180, "77213307e": 200, "7741": 162, "7765": 162, "7788": 195, "7793": 195, "7894": 162, "7932": 162, "8": [1, 2, 7, 8, 12, 13, 21, 22, 23, 25, 30, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 179, 180, 181, 183, 184, 185, 186, 187, 190, 193, 194, 195, 196, 198, 199, 200, 201, 207, 212, 213, 214, 218, 220, 221, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 267], "80": [161, 218], "800": [176, 203], "8000": [162, 165], "80053532e": 200, "8009871": 208, "8078": 162, "80cd141": 208, "81699747": 194, "81760912e": 200, "8188": 195, "81884710e": 200, "8229": 162, "83": [161, 180], "83640555e": 201, "8366": 195, "836ab1": 208, "83861901e": [200, 201], "84": 180, "8405": 195, "8433522": 194, "8442": 195, "84edcf5": 208, "86": 161, "8606": 195, "864": [196, 200, 201], "8667": 165, "86945379e": 200, "8706": 162, "8711877": 194, "87471542e": [200, 201], "87630311e": [200, 201], "87656835e": 200, "8796": 162, "88260233e": [200, 201], "8836": 162, "88373709e": 201, "88706ef": 208, "89": 161, "89074164e": 201, "89249423e": [200, 201], "89348674e": 200, "8984": 166, "8994": 166, "8998": 166, "8bit": 208, "9": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "90": 224, "90229788e": [200, 201], "9054": 195, "91": 180, "911af75": 208, "9150": 195, "9157": 162, "9176": 162, "92": 180, "9216": 172, "92511864e": [200, 201], "92f63f5": 208, "93": 180, "93232973e": [200, 201], "9333": 165, "93787616e": 200, "94": [161, 180], "9487": 162, "94877124": 194, "9490": 162, "95": 180, "95088911e": [200, 201], "95260113e": 200, "9570": 180, "95997976e": [200, 201], "96": [180, 197], "9609": 180, "96155685e": 200, "9648": 180, "9688": 180, "97": 158, "9700": 162, "9714": 195, "9727": 180, "97294299e": [200, 201], "9766": 180, "9805": 180, "9826": 195, "9844": 180, "9883": 180, "9904": 195, "9922": 180, "9961": [162, 180], "9999": 177, "9a2a407": 208, "A": [2, 3, 8, 9, 12, 13, 14, 15, 17, 21, 22, 23, 25, 27, 28, 29, 170, 174, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 196, 198, 199, 200, 201, 205, 212, 213, 214, 216, 217, 218, 220, 222, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 265], "And": [235, 248, 253, 265], "As": [30, 196, 198, 212, 213, 215, 216, 224, 231, 235, 237, 239, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259], "At": [215, 219], "But": [172, 217, 226, 235, 242, 243, 247, 248, 253, 256, 260], "By": [9, 13, 17, 20, 29, 175, 178, 181, 196, 198, 214, 217, 218, 220, 227, 228, 242, 253, 254, 256, 257, 258, 259, 263], "For": [8, 20, 21, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 172, 173, 175, 177, 178, 179, 180, 186, 191, 192, 194, 195, 196, 198, 201, 208, 211, 212, 213, 214, 215, 216, 217, 222, 224, 227, 229, 230, 231, 234, 235, 239, 242, 243, 244, 247, 248, 253, 256, 260, 262, 263, 265, 266], "If": [2, 8, 9, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 196, 197, 198, 199, 203, 205, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "In": [20, 30, 160, 171, 172, 173, 175, 181, 184, 187, 195, 196, 198, 199, 200, 201, 205, 206, 212, 213, 215, 216, 217, 219, 221, 224, 225, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265], "It": [1, 2, 6, 8, 9, 20, 171, 172, 181, 187, 196, 197, 198, 203, 207, 208, 209, 211, 212, 214, 216, 221, 222, 224, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260], "Its": 221, "NOT": [13, 25, 185, 198, 248], "No": [173, 200, 265], "Not": [8, 21, 179, 186, 197, 199, 203, 207, 212, 213, 216, 228, 234, 235, 242, 247, 248, 256, 260], "ON": 193, "ONE": 194, "OR": 171, "Of": [245, 246, 248, 250, 251, 252, 258, 259], "On": [235, 248, 253], "One": [21, 22, 212, 227, 228, 237, 238, 239, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263], "Or": [22, 172, 187, 211, 212, 217, 227, 228], "Such": 172, "That": [221, 236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259], "The": [1, 2, 4, 6, 7, 8, 9, 10, 12, 14, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 194, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "Then": [8, 179, 186, 212, 217, 258, 259], "There": [169, 171, 173, 187, 198, 211, 212, 228, 235, 236, 239, 240, 242, 243, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 262, 265, 266], "These": [13, 22, 25, 171, 173, 175, 185, 187, 196, 198, 203, 205, 206, 212, 214, 215, 224, 227, 228, 229, 232, 235, 237, 241, 243, 248, 253, 255, 257, 263], "To": [2, 12, 20, 30, 167, 171, 174, 175, 178, 184, 191, 194, 196, 197, 199, 200, 201, 203, 207, 212, 213, 216, 218, 219, 222, 224, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266], "With": [158, 192, 194, 228, 244, 247, 260], "_": [8, 9, 20, 21, 30, 161, 162, 165, 168, 175, 179, 180, 181, 186, 191, 194, 196, 197, 198, 199, 200, 201, 205, 207, 208, 210, 211, 212, 213, 222, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266], "__________________________________________________________________________________________________": [196, 200, 201], "__getitem__": 255, "__init__": [13, 20, 25, 172, 173, 175, 185, 198, 203, 208, 224, 230, 231, 244, 255], "__iter__": [198, 203, 224], "__len__": [8, 203, 212, 255], "__next__": [198, 224], "__quant_init__": [30, 175], "__torch_function__": 172, "__version__": 195, "_batch_index": 198, "_create_sampled_data_load": 255, "_current_iter": 224, "_data": [198, 224], "_dataset": 255, "_default_forward_fn": [13, 25, 185, 198], "_encodingmismatchinfo": 227, "_get_unlabled_data_load": 212, "_int": 208, "_is_encoding_frozen": 171, "_max": 166, "_module_to_wrap": 171, "_not_specifi": [181, 227, 228], "_q": 208, "_quantizationsimmodelinterfac": [179, 184, 186, 187, 212], "_quantschemepair": [13, 25, 185, 198], "_remove_input_quant": 171, "_remove_output_quant": 171, "_remove_param_quant": 171, "_step": [164, 165], "_tie_quant": 208, "_unlabel": 224, "a2adae2": 208, "ab": [197, 203, 249], "abe8782": 208, "abil": [208, 262, 266], "abl": [8, 20, 25, 158, 159, 160, 172, 173, 185, 198, 212, 237, 238, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "about": [158, 189, 191, 196, 201, 213, 222, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 266], "abov": [172, 174, 212, 213, 214, 217, 218, 219, 220, 221, 226, 228, 235, 239, 247, 248, 250, 251, 252, 253, 260, 263], "absolut": [161, 162, 214, 218, 220, 224], "absolute_path_to_workspac": 234, "absorpt": [237, 249, 257], "abstract": [30, 160, 175], "acc": [198, 212, 241, 242, 243, 247], "acc_top1": 198, "acccuraci": 239, "acceler": [181, 190, 208, 214, 217, 218, 220, 238, 243, 245, 246, 258, 259], "accept": [208, 216, 224, 232, 262, 265, 266], "access": [171, 208, 243, 253, 254, 257, 258, 259], "accord": [9, 169, 181, 211, 227, 228], "accordingli": 208, "account": [24, 196, 197, 208, 216, 232], "accumul": [215, 217, 218, 220, 223], "accur": [196, 200, 243], "accuraci": [2, 10, 12, 13, 17, 22, 23, 25, 29, 178, 183, 184, 185, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202, 203, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 227, 228, 232, 233, 242, 243, 247, 255, 256, 260, 263], "achiev": [180, 190, 192, 215, 225, 226, 236, 240, 248, 254, 262, 265, 266], "acronym": 191, "across": [172, 190, 194, 201, 202, 212, 263], "act": [2, 8, 12, 21, 174, 179, 184, 186, 212, 224, 235], "act_bw": 257, "action": [212, 221], "activ": [2, 8, 9, 12, 15, 20, 21, 22, 24, 168, 170, 172, 174, 175, 178, 179, 182, 184, 186, 188, 190, 192, 193, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "activation_bitwidth": [196, 222, 227, 228], "activation_encod": 222, "activation_quant": [2, 224], "activation_typ": [9, 195, 196, 227, 235, 236, 237, 238], "activations_pdf": [212, 247, 260], "actual": [209, 212, 235, 239, 242, 244, 253, 256], "acuraci": [224, 239], "ad": [173, 178, 204, 208, 222, 227, 229, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "ada": 236, "ada_model": [240, 248, 254], "ada_round_data": [240, 248], "ada_rounded_model": 196, "adam": [212, 241, 242, 243, 245, 246, 247], "adamw": [205, 206], "adapt": [23, 26, 178, 182, 183, 188, 190, 198, 199, 203, 204, 205, 206, 207, 208, 212, 234, 242, 248, 256], "adapter1": 178, "adaptiveavgpool1d": 31, "adaptiveavgpool2d": 32, "adaptiveavgpool3d": 33, "adaptivemaxpool1d": 34, "adaptivemaxpool2d": 35, "adaptivemaxpool3d": 36, "adaptiveround": 208, "adaptor": [176, 203], "adaround": [0, 1, 13, 18, 25, 167, 171, 185, 190, 196, 198, 208, 212, 232, 234, 241, 255], "adaround_data_load": [198, 255], "adaround_dataset": 241, "adaround_dataset_s": [198, 241, 255], "adaround_param": [13, 25, 185, 198, 241, 255], "adaround_weight": [11, 23, 171, 183, 196, 198, 240, 241, 248, 254, 255], "adarounded_model": 196, "adaroundparamet": [11, 13, 23, 25, 183, 185, 196, 198, 240, 241, 248, 254, 255], "adascal": [0, 167, 208], "adascale_model_config_dict": 197, "adascale_optim": 197, "adascalemodelconfig": 197, "add": [20, 22, 172, 173, 175, 178, 187, 208, 221, 222, 227, 228, 229, 230, 231, 238, 242, 245, 246, 250, 251, 252, 258, 259, 262, 263, 265, 266], "add_adapt": 178, "add_check": 173, "add_lora_to_r": 206, "addit": [30, 180, 181, 187, 199, 208, 213, 222, 227, 228, 229, 235, 242, 243, 244, 247, 248, 253, 256, 260, 261], "address": [219, 232], "adequ": 265, "adher": [262, 266], "adjac": [190, 200, 201, 202, 229, 235, 236, 237, 238, 240, 245, 246, 248, 249, 253, 254, 257, 258, 259], "adjust": [168, 196, 202, 205, 206, 210, 213, 214, 215, 232, 249, 257], "admin": 234, "advanc": [180, 190, 192, 208, 233], "advantag": 207, "ae981f7": 208, "affect": [23, 183, 190, 196, 213, 229, 262, 266], "affin": [7, 30, 158, 159, 160, 161, 162, 163, 164, 165, 170, 175, 200, 201, 205, 213], "affine_q": 171, "affine_qdq": 171, "affine_quant": 171, "affinequant": [166, 171], "after": [1, 8, 21, 166, 172, 173, 175, 179, 180, 186, 187, 190, 196, 198, 199, 200, 201, 208, 212, 215, 217, 219, 228, 232, 234, 235, 236, 237, 239, 240, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "afterward": [24, 197], "again": [224, 228, 237, 248, 249, 250, 251, 252, 257, 262, 266], "against": [8, 13, 21, 179, 186, 198, 212, 214, 245, 246, 248, 256, 258, 259], "aggress": 190, "agre": [262, 266], "ahead": 233, "ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 262, 263, 264, 265, 266, 267], "aim": [242, 250, 251, 252, 256, 262, 266], "aimet": [5, 17, 18, 20, 29, 30, 167, 171, 172, 173, 175, 178, 180, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266], "aimet_cl": 249, "aimet_common": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "aimet_common_def": 218, "aimet_export_artifact": 211, "aimet_exported_model": 261, "aimet_exported_model_path": 261, "aimet_omniquant_artifact": [176, 203], "aimet_onnx": [0, 194, 195, 196, 200, 201, 207, 208, 211, 212, 222, 224, 227, 235, 236, 237, 238], "aimet_spatial_svd": 218, "aimet_tensorflow": [0, 194, 196, 198, 199, 200, 201, 211, 212, 218, 222, 224, 227, 228, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "aimet_tensorflow_def": 218, "aimet_torch": [0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 220, 222, 224, 226, 227, 228, 235, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "algo": [184, 224], "algorithm": [2, 12, 17, 29, 184, 214, 215, 216, 217, 218, 220, 221, 222, 232], "alia": [9, 22, 181, 187, 227, 228], "aliasbackward0": [158, 159, 160, 161, 162, 177, 180, 195], "align": [208, 227, 229], "all": [0, 2, 3, 7, 8, 9, 12, 14, 15, 20, 21, 22, 27, 30, 100, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181, 182, 184, 186, 187, 188, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 230, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 263, 265], "all_q_modul": 171, "all_quant_wrapp": 171, "allclos": 172, "allow": [2, 12, 13, 17, 20, 22, 25, 29, 158, 159, 160, 170, 172, 177, 184, 185, 198, 208, 209, 213, 214, 217, 218, 219, 220, 222, 224, 225, 227, 228, 231, 232, 235, 239, 241, 243, 253, 255], "allow_custom_downsample_op": [29, 214, 250, 252], "allow_overwrit": [171, 196, 206, 227, 228], "allowed_accuracy_drop": [2, 12, 13, 25, 184, 185, 198, 224, 235, 239, 241, 253, 255], "alon": [178, 263], "along": [159, 178, 180, 224, 263], "alpha": 224, "alphadropout": 37, "alreadi": [28, 30, 180, 181, 187, 201, 205, 208, 227, 228, 232, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "also": [11, 13, 22, 23, 160, 172, 180, 183, 184, 185, 186, 187, 188, 193, 194, 196, 197, 198, 200, 203, 208, 209, 212, 214, 217, 221, 222, 224, 226, 227, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 265], "alter": [240, 248, 254], "altern": [8, 179, 186, 212, 213, 235, 239, 250, 251, 252, 253], "alwai": [205, 206, 208, 216], "am": [8, 21, 179, 186, 212], "among": [13, 23, 25, 183, 185, 196, 198, 265], "amount": [207, 224, 247, 260], "amp": [0, 2, 12, 13, 25, 167, 174, 184, 185, 198, 208, 224, 225, 234], "amp_search_algo": [2, 12, 184, 224, 235, 253], "ampsearchalgo": [2, 12, 184, 224, 235, 253], "an": [8, 12, 13, 17, 20, 22, 25, 29, 30, 158, 159, 160, 166, 168, 170, 171, 172, 173, 175, 180, 181, 185, 187, 190, 193, 196, 198, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 227, 228, 229, 230, 231, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "analys": [212, 247, 260], "analysi": [2, 8, 12, 17, 21, 29, 179, 184, 186, 208, 214, 217, 218, 220, 235, 239, 243, 250, 251, 252, 253], "analyt": 219, "analyz": [8, 17, 21, 29, 161, 162, 175, 179, 186, 194, 198, 202, 208, 214, 218, 219, 220, 226, 234, 241, 255], "analyze_per_layer_sensit": 208, "anchor": [148, 149], "andrea": 217, "andrei": 217, "andrew": 217, "ani": [2, 8, 9, 12, 17, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 172, 173, 174, 179, 181, 183, 184, 185, 186, 187, 194, 196, 197, 198, 199, 205, 207, 208, 212, 213, 214, 218, 220, 224, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265], "anneal": [11, 23, 183, 196], "anoth": [178, 181, 187, 190, 220, 221, 222, 227, 228, 229, 243], "anyth": [2, 12, 184, 224, 235, 239, 247, 253, 260], "api": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 168, 169, 170, 171, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 205, 206, 208, 209, 219, 222, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261], "app": 189, "appear": [17, 29, 172, 173, 214, 218, 220], "appli": [1, 2, 7, 8, 13, 16, 25, 30, 100, 161, 162, 163, 164, 165, 170, 173, 174, 175, 182, 185, 188, 190, 191, 194, 196, 197, 198, 200, 201, 202, 203, 205, 207, 208, 212, 213, 217, 219, 223, 224, 228, 229, 232, 234, 235, 242, 243, 250, 251, 252, 253, 255, 256, 262, 263, 265, 266], "applic": [2, 12, 184, 196, 198, 199, 200, 201, 212, 218, 224, 227, 228, 235, 236, 239, 240, 241, 245, 246, 247, 248, 249, 253, 254, 257, 261, 262, 266], "apply_adaround": [0, 5, 11, 23, 183, 196, 208, 236, 240, 248, 254], "apply_adascal": [24, 197], "apply_omniqu": [176, 203], "apply_seq_ms": [0, 5, 171, 182, 188, 207, 208], "approach": [174, 205, 226, 263], "appropri": [23, 175, 181, 183, 184, 187, 194, 196, 205, 206, 216, 224, 227, 228, 232, 235, 239, 242, 243, 247, 248, 253, 256, 260, 263], "approx": 263, "approxim": [8, 207, 212, 215, 262, 263, 266], "apt": 194, "ar": [2, 8, 9, 11, 12, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 166, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "arang": [164, 165, 172, 180], "arbitrari": 213, "architectur": [190, 194, 208, 244], "area": [212, 223], "aren": 193, "arg": [9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 170, 174, 175, 177, 181, 193, 208, 213, 224, 226, 227, 228, 244], "argmax": [196, 198, 224, 227, 228, 236], "argument": [2, 9, 12, 13, 22, 23, 24, 25, 30, 166, 170, 172, 173, 174, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 193, 196, 197, 198, 203, 207, 211, 212, 213, 222, 224, 227, 228, 241, 242, 247, 260, 261], "around": [192, 193, 208, 212, 243, 248], "arrai": [170, 195, 213, 222], "arrang": 219, "art": [189, 192, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260], "arthmet": [20, 244], "artifact": [9, 174, 178, 208, 225, 226, 227, 243, 261, 265], "arxiv": [197, 203, 208, 249], "asic": 190, "ask": [30, 235, 239, 242, 243, 247, 253, 256, 260], "assert": [171, 172, 180, 227, 244, 253], "assert_array_equ": 244, "assess": 216, "assign": [30, 161, 162, 166, 175, 213, 224, 245, 246], "associ": [2, 12, 13, 15, 25, 30, 160, 173, 174, 175, 180, 181, 184, 185, 198, 200, 224, 247, 260, 261], "assum": [7, 13, 25, 170, 185, 198, 213, 216], "astyp": 212, "asym": [182, 188, 207], "asymmetr": [161, 162, 180, 229, 263], "att": [20, 244], "attempt": 201, "attent": [20, 243, 244], "attention_mask": [203, 205, 206], "attn_output": [20, 244], "attribut": [12, 20, 30, 171, 172, 174, 175, 180, 184, 208, 212, 224, 248], "attributeerror": 208, "augment": 219, "auto": [17, 29, 214, 218, 220, 222, 224, 225, 235, 239, 250, 251, 252, 253], "auto_param": [214, 218, 220, 250, 251, 252], "auto_qu": [198, 241, 255], "auto_quant_v2": [0, 18, 198], "autoconfig": [203, 205, 206], "autograd": [158, 159, 160], "autom": [172, 190, 231, 253, 254, 257, 258, 259, 260], "automat": [13, 17, 25, 29, 174, 185, 190, 208, 212, 213, 214, 215, 217, 218, 220, 223, 234, 241, 255], "automodelforcausallm": [205, 206], "automodeparam": [17, 29, 214, 218, 220, 250, 251, 252], "autoqu": [0, 5, 13, 25, 167, 185, 190, 198, 208, 234], "autoquantwithautomixedprecis": [13, 25, 185, 198], "autotoken": [203, 205, 206], "avail": [172, 177, 182, 183, 184, 185, 186, 187, 188, 193, 194, 207, 208, 212, 229, 232, 235, 236, 237, 238, 239, 242, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 264], "avgpool1d": 38, "avgpool2d": [39, 226], "avgpool3d": 40, "avoid": [8, 22, 179, 186, 187, 190, 196, 208, 212, 215, 227, 228, 230, 231, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260], "awai": 248, "awar": [30, 190, 192, 196, 199, 202, 207, 217, 232, 234, 262, 263, 266], "axi": [180, 196, 198, 212, 222, 224, 227, 236, 247, 260, 263], "b": [30, 161, 162, 163, 164, 165, 180, 213, 218, 224, 239], "b5521f3": 208, "b_": [161, 162, 163, 164, 165], "b_0": [161, 162, 163, 164, 165], "b_1": [161, 162, 163, 164, 165, 213], "b_2": 213, "b_d": [161, 162, 163, 164, 165], "b_n": 213, "back": [2, 12, 158, 159, 174, 179, 184, 186, 212, 224, 228, 229, 263], "backend": [9, 181, 187, 225, 227, 228, 242, 261, 265], "backpropag": [158, 159, 160], "backslash": 208, "backward": [0, 167, 199, 200, 205, 206, 208, 227, 228], "bad": 20, "balanc": [190, 217, 223, 262, 266], "bandwidth": 215, "base": [2, 8, 21, 30, 160, 161, 162, 164, 165, 166, 171, 175, 177, 178, 179, 180, 184, 186, 194, 197, 203, 204, 206, 207, 208, 212, 213, 214, 215, 216, 219, 224, 225, 227, 228, 235, 239, 240, 241, 242, 248, 253, 254, 255, 256, 261, 265], "baselin": [2, 12, 184, 216, 217, 224, 228, 242, 243, 255], "basi": [208, 248], "basic": [208, 213, 224, 228, 235, 239, 242, 243, 253, 256, 261], "batch": [2, 8, 11, 13, 14, 15, 21, 23, 25, 26, 166, 174, 182, 183, 184, 185, 188, 190, 196, 197, 198, 201, 203, 205, 206, 207, 208, 212, 218, 224, 227, 228, 239, 241, 242, 250, 251, 252, 256], "batch_cntr": [198, 235, 237, 238, 240, 245, 246, 248, 249, 254, 256, 257, 258, 259, 260], "batch_data": 224, "batch_id": [203, 205, 206], "batch_norm": [3, 14, 15, 27, 199, 200], "batch_norm_fold": [0, 5, 14, 18, 167, 199, 200, 224, 228, 235, 236, 237, 238, 239, 240, 242, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259], "batch_siz": [23, 183, 196, 197, 198, 199, 200, 203, 205, 206, 207, 212, 218, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "batchnorm": [13, 15, 20, 25, 26, 185, 196, 198, 199, 200, 201, 208, 221, 234, 235, 236, 237, 238, 240, 245, 246, 248, 249, 253, 254, 257, 258, 259], "batchnorm1d": [27, 43, 200], "batchnorm2d": [27, 44, 173, 200, 201], "batchnorm3d": 45, "batchnrom": 256, "bc": 237, "bc_param": 257, "bceloss": 41, "bcewithlogitsloss": 42, "becaus": [20, 172, 213, 236, 244, 256, 265], "becom": 208, "becuas": [20, 211, 244], "been": [0, 20, 30, 158, 167, 168, 173, 190, 195, 205, 208, 210, 221, 222, 241, 242, 243, 248, 255, 261, 263], "befor": [1, 2, 8, 9, 20, 24, 30, 168, 171, 175, 180, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 210, 211, 212, 217, 224, 227, 228, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 265], "begin": [20, 161, 162, 163, 164, 165, 172, 173, 191, 244], "behav": [30, 100, 175, 208, 232], "behavior": [171, 172, 175, 200, 208, 229, 235, 248, 253, 254, 257, 258, 259, 263, 265], "behind": 265, "being": [12, 29, 171, 172, 173, 179, 186, 199, 208, 212, 213, 214, 218, 220, 222, 224, 230, 231], "below": [20, 30, 161, 162, 164, 165, 171, 174, 175, 178, 180, 193, 194, 195, 205, 206, 211, 213, 214, 216, 217, 219, 222, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "benefici": [235, 239, 242, 243, 247, 248, 253, 260], "benefit": [213, 222, 225, 263], "bert": 232, "besid": 213, "bespok": 205, "best": [13, 25, 174, 185, 192, 194, 198, 202, 215, 217, 226, 233, 241, 248, 255, 263], "beta": [0, 11, 23, 167, 183, 196, 197, 208], "better": [198, 213, 217, 228, 236, 240, 245, 246, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 265], "between": [2, 8, 11, 17, 21, 23, 29, 169, 171, 174, 175, 179, 183, 184, 186, 190, 196, 202, 207, 209, 211, 212, 213, 214, 218, 220, 224, 227, 229, 235, 248, 253, 262, 263, 266], "bfloat16": 166, "bia": [30, 166, 171, 172, 173, 175, 177, 178, 181, 200, 201, 208, 214, 227, 228, 229, 237, 242, 249], "bias": [200, 235, 237, 249, 253, 257], "bias_correct": 257, "bilinear": 46, "billion": [262, 265, 266], "bin": [193, 261], "binari": [2, 12, 184, 224, 235, 253, 261], "binary_classifi": 20, "binary_fil": 261, "binary_file_nam": 261, "bit": [1, 2, 8, 12, 21, 23, 166, 170, 177, 179, 180, 183, 184, 186, 190, 192, 194, 195, 196, 205, 208, 212, 213, 222, 223, 225, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "bitop": [2, 12, 184, 224], "bitwidth": [1, 2, 7, 8, 11, 12, 13, 21, 22, 23, 25, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 174, 175, 179, 180, 181, 183, 184, 185, 186, 187, 190, 194, 196, 198, 201, 205, 208, 212, 213, 222, 224, 225, 227, 228, 235, 239, 240, 248, 253, 254, 263, 265], "biwidth": [240, 248, 254], "bkd": [24, 197, 202, 203], "blankevoort": 217, "block": [7, 25, 161, 162, 163, 164, 165, 170, 171, 176, 185, 197, 198, 203, 205, 206, 208, 222, 223, 243, 263], "block_group": [170, 213], "block_siz": [7, 161, 162, 163, 164, 165, 170, 180, 213, 222], "blockwis": [7, 170, 180, 197, 202, 203, 208, 222, 263], "bn": [3, 14, 15, 26, 27, 190, 199, 200, 202, 208, 212, 235, 236, 237, 238, 240, 242, 245, 246, 248, 249, 253, 254, 257, 258, 259], "bn1": [20, 173], "bn2": 20, "bn_conv1": [196, 200, 201], "bn_num_batch": [14, 199], "bn_re_estimation_dataset": [14, 199], "bn_reestim": [0, 167, 199, 242, 256], "bnf": [196, 199, 200, 201], "bokeh": 224, "bool": [2, 9, 12, 13, 17, 22, 25, 29, 161, 162, 164, 165, 166, 170, 172, 173, 174, 177, 181, 184, 185, 187, 198, 213, 214, 218, 220, 222, 224, 226, 227, 228, 250, 251, 252, 254, 256, 257, 258, 259, 260], "boolean": [30, 174, 226], "both": [20, 21, 164, 165, 171, 172, 175, 179, 186, 192, 194, 195, 200, 204, 207, 212, 217, 218, 219, 221, 224, 227, 228, 229, 232, 235, 239, 246, 252, 253, 258, 259, 261, 262, 263, 266], "bottleneck": 232, "box": [208, 233], "bq": [170, 208, 213], "branch": [172, 229, 234], "break": [198, 203, 205, 206, 208, 218, 224, 227, 228, 235, 237, 238, 239, 240, 245, 246, 248, 249, 254, 256, 257, 258, 259, 260], "bridg": 225, "brief": 223, "british": 217, "broken": [204, 222], "browser": 234, "bruteforc": [12, 224, 235, 253], "buffer": 166, "bug": [208, 222], "bugfix": 208, "build": [9, 20, 171, 208, 227, 244], "buildx": 193, "built": [2, 30, 174, 175, 184, 193, 194, 224, 242, 243], "bw": [2, 7, 12, 25, 170, 174, 181, 184, 185, 187, 198, 213, 222, 224, 227, 228, 231], "bw_output": 231, "c": [180, 193, 215], "c_": 180, "cach": [2, 12, 13, 25, 176, 184, 185, 198, 203, 208, 224, 235, 239, 253], "cache_id": [13, 25, 185, 198], "calcul": [2, 12, 21, 22, 25, 175, 184, 185, 187, 198, 204, 205, 208, 212, 216, 224, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 263], "calculate_and_fuse_encodings_into_weight": 205, "calibr": [1, 8, 9, 10, 21, 161, 162, 168, 175, 178, 179, 181, 186, 187, 190, 195, 196, 205, 207, 208, 209, 210, 213, 223, 224, 225, 232, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 263, 265], "calibration_batch": [224, 228], "calibration_callback": [205, 206], "calibration_data": 195, "calibration_data_load": [175, 227], "calibration_data_s": 227, "calibration_dataset": [196, 199, 227, 228], "calibration_dataset_s": [198, 241, 255], "calibration_wrapp": 203, "call": [2, 8, 12, 13, 14, 20, 24, 25, 30, 100, 158, 159, 160, 166, 172, 174, 175, 179, 180, 184, 185, 186, 197, 198, 199, 208, 212, 213, 214, 218, 220, 224, 226, 227, 230, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 262, 265, 266], "call_funct": 172, "callabl": [2, 8, 9, 12, 13, 17, 23, 24, 25, 26, 29, 30, 170, 172, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 188, 196, 197, 198, 199, 203, 207, 212, 213, 214, 218, 220, 224, 227, 228], "callal": [2, 184, 224], "callback": [2, 8, 12, 13, 17, 21, 22, 29, 174, 179, 184, 186, 187, 198, 205, 207, 214, 218, 220, 224, 228, 239, 241, 243, 245, 246, 247, 250, 251, 252, 260, 263], "callbackfunc": [2, 12, 21, 174, 179, 184, 186, 212, 224, 235, 239, 247, 253, 260], "callbak": [235, 253], "can": [2, 6, 8, 9, 10, 11, 12, 19, 20, 22, 23, 27, 28, 158, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 187, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "candid": [2, 10, 12, 13, 17, 25, 29, 174, 182, 184, 185, 188, 197, 198, 203, 207, 208, 214, 216, 217, 218, 220, 224, 235, 239, 253], "cannot": [161, 162, 172, 173, 235, 236, 237, 238, 240, 245, 246, 248, 249, 253, 254, 257, 258, 259], "capabl": [175, 192, 194, 195, 219], "captur": [6, 19, 169, 172, 181, 209, 211, 227, 228, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "card": [192, 194, 195], "care": 217, "carefulli": 190, "carri": [158, 159, 160], "case": [164, 165, 170, 171, 172, 173, 175, 195, 196, 204, 208, 212, 213, 216, 226, 229, 231, 233, 243, 244, 247, 260, 262, 266], "cast": 166, "cat": 180, "catch": 208, "categor": [196, 198, 199, 218, 224, 227, 228, 239, 240, 245, 246, 248], "categorical_crossentropi": [245, 246], "categoricalaccuraci": [196, 198, 199, 212, 227, 228, 241, 242, 247], "categoricalcrossentropi": [196, 198, 199, 212, 227, 228, 241, 242, 247], "caus": [20, 217, 229, 232, 250, 251, 252], "caution": 196, "cbe67a": 208, "cd": [193, 234], "cdot": [161, 162, 163, 164, 165], "ce68e75": 208, "ceil": [23, 183, 196, 198, 224], "cell": [235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "celu": 47, "center": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 261, 262, 263, 264, 265, 266, 267], "center_crop": [224, 239], "centercrop": [196, 198, 224, 227, 236, 253, 255], "certain": [172, 179, 186, 208, 212, 217, 222, 224, 226, 229, 231, 253, 254, 257, 258, 259, 260], "chain": [203, 205, 206], "challeng": [235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "chang": [2, 12, 24, 160, 168, 171, 172, 178, 180, 181, 184, 196, 197, 199, 200, 201, 203, 207, 208, 210, 212, 217, 221, 222, 224, 225, 226, 227, 228, 229, 231, 235, 236, 237, 238, 239, 242, 243, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 265], "channel": [7, 8, 17, 21, 29, 170, 175, 179, 186, 190, 193, 199, 200, 201, 202, 208, 212, 213, 215, 216, 218, 220, 221, 222, 223, 229, 232, 234, 235, 236, 237, 238, 249, 251, 253, 254, 256, 257, 258, 259, 260, 263], "channel_index": [8, 21, 179, 186, 212], "channel_index_0": [247, 260], "channel_index_1": [247, 260], "channel_index_n": [247, 260], "channel_prun": [29, 214, 218, 220, 250, 252], "channel_pruning_auto_mod": 214, "channel_pruning_manual_mod": 214, "channelpruningparamet": [29, 214, 218, 220, 250, 252], "channelshuffl": 49, "characterist": [235, 253, 256, 260], "chart": [201, 232], "check": [20, 25, 172, 173, 180, 185, 191, 195, 198, 208, 209, 211, 231, 235, 239, 242, 243, 247, 253, 256, 260], "check_model_sensitivity_to_quant": [8, 21, 179, 186, 212], "checker": [173, 208], "checkpoint": [182, 187, 188, 207], "checkpoints_config": [182, 188, 207], "chipset": 265, "choic": [194, 212, 217, 222, 247, 248, 260, 263], "choos": [187, 190, 196, 197, 203, 208, 211, 214, 215, 217, 224, 229, 235, 239, 250, 251, 252, 253], "choose_fast_mixed_precis": [12, 224, 239], "choose_mixed_precis": [2, 12, 174, 184, 224, 235, 239, 253], "chose": 178, "chosen": [234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260], "chunk": 263, "ci": 193, "cin": 180, "circularpad1d": 50, "circularpad2d": 51, "circularpad3d": 52, "cl": [30, 208, 237, 249, 257], "clamp": [161, 162, 164, 165, 166, 263], "class": [2, 6, 8, 9, 11, 12, 13, 17, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 196, 198, 200, 201, 203, 205, 206, 207, 211, 212, 213, 214, 218, 220, 224, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "class_nam": [218, 224, 239, 244], "classif": [20, 190, 196, 207, 217, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "classifi": 20, "classmethod": [9, 22, 30, 166, 181, 187, 227, 228], "cle": [4, 16, 28, 196, 198, 201, 208, 212, 232, 234], "cle_applied_model": [201, 249], "clean": [208, 224], "clean_start": [2, 12, 184, 224, 235, 239, 253], "clear_sess": 242, "clearli": 208, "clip": [197, 200, 203, 229, 242, 263], "clone": [160, 234, 243], "clone_lay": 243, "close": [215, 263], "closer": [236, 240, 248, 254], "cloud": [190, 265], "cmake": 193, "cmake_arg": 193, "cmp_re": 224, "cnn": 190, "cnt": [218, 224, 239], "code": [194, 196, 198, 201, 211, 212, 213, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260], "collate_fn": [203, 205, 206], "collect": [1, 8, 10, 21, 25, 168, 179, 185, 186, 189, 190, 196, 198, 207, 209, 210, 212, 216, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 253, 254, 257, 258, 259], "color": 221, "column": 216, "com": [194, 234], "combin": [2, 12, 172, 184, 190, 198, 208, 213, 215, 217, 224, 235, 239, 253], "come": [217, 225, 228], "command": [194, 219, 234, 261], "common": [171, 180, 208, 213, 232, 235, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "commonli": [23, 180, 183, 190, 196], "comp": [17, 29, 214, 218, 220], "comp_stat": [250, 251], "compar": [2, 12, 172, 184, 190, 197, 203, 212, 224, 225, 228, 235, 239, 242, 243, 244, 247, 253, 256, 260, 265], "comparison": [209, 211, 237, 238, 254, 257, 258, 259], "compat": [0, 167, 170, 192, 194, 195, 208, 213, 224, 227, 231, 236, 239, 242, 243], "compil": [9, 192, 196, 198, 199, 208, 212, 227, 228, 241, 242, 243, 245, 246, 247, 262, 266], "complet": [2, 12, 184, 218, 224, 232, 235, 239, 250, 251, 252, 253, 261], "complex": [22, 187, 212, 226, 227, 228, 243], "compli": [253, 254, 257, 258, 259, 260], "complic": 208, "compon": [171, 180, 203, 208, 227], "compos": [174, 196, 198, 224, 226, 227, 236, 253, 255], "compress": [0, 18, 167, 190, 191, 208, 221, 222, 234], "compress_model": [17, 29, 214, 218, 219, 220, 250, 251, 252], "compress_schem": [17, 29, 214, 218, 220, 250, 251, 252], "compressed_bw": 222, "compressed_model": [214, 218, 220, 250, 251], "compressionschem": [17, 29, 214, 218, 220, 250, 251, 252], "compressionstat": [17, 29, 214, 218, 220], "compressor": [17, 29, 214, 218, 220], "compris": [203, 216, 235, 239, 253], "compromis": [250, 251, 252], "compuat": [13, 25, 185, 198], "comput": [2, 8, 9, 12, 13, 21, 22, 24, 25, 29, 30, 100, 166, 178, 179, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 200, 203, 205, 206, 207, 208, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 224, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 262, 263, 265, 266], "computation": 219, "compute_encod": [9, 22, 24, 30, 159, 160, 161, 162, 166, 168, 171, 174, 175, 180, 181, 182, 187, 188, 195, 196, 197, 199, 203, 205, 206, 207, 208, 210, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259], "computeencod": 194, "concat": 208, "concatenated_exampl": [203, 205, 206], "concept": 171, "concis": 222, "concret": 172, "concrete_arg": [25, 172, 185, 198], "concurr": 178, "conda_env_nam": 193, "conda_install_dir": 193, "condit": [172, 173, 199], "confer": 217, "config": [2, 8, 21, 22, 174, 178, 179, 181, 182, 184, 186, 187, 188, 199, 203, 205, 206, 207, 208, 212, 224, 226, 227, 228, 229, 235, 248, 253], "config_fil": [8, 9, 11, 13, 21, 22, 25, 179, 181, 185, 186, 187, 195, 196, 198, 199, 207, 212, 226, 227, 228, 242, 247, 248, 260], "config_util": [0, 167, 213], "configur": [8, 9, 11, 13, 17, 21, 23, 25, 29, 166, 174, 179, 180, 181, 183, 185, 186, 187, 196, 198, 205, 206, 208, 212, 213, 214, 218, 220, 222, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 249, 253, 254, 256, 257, 258, 259], "conflict": [174, 226], "conform": [227, 262, 266], "conjunct": 263, "connect": [190, 196, 200, 201, 214, 217, 220], "connectedgraph": [173, 208], "consecut": [201, 237, 249, 257], "consid": [24, 197, 218, 220, 232, 243, 250, 252, 262, 266], "consist": [169, 170, 171, 208, 211, 213, 216, 224, 235, 253, 263], "consol": 209, "constant": [172, 216, 238, 245, 258, 259], "constantpad2d": [53, 54], "constantpad3d": 55, "constrain": [190, 213], "constraint": [193, 222], "construct": [208, 211], "constructor": [6, 19, 169, 172, 211, 231], "consum": [198, 217, 222, 225, 241, 255], "contain": [1, 2, 8, 12, 21, 29, 30, 158, 166, 168, 172, 173, 174, 175, 179, 184, 186, 190, 195, 196, 201, 210, 212, 214, 218, 220, 222, 224, 227, 228, 229, 236, 237, 238, 240, 241, 245, 246, 247, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 265], "content": 190, "context": [9, 30, 175, 261, 262, 266], "contigu": [197, 203, 205, 206, 208], "continu": [2, 20, 173, 184, 187, 205, 208, 224, 232, 235, 253], "contrast": [20, 171, 248], "contribut": [194, 212, 224, 232], "control": [25, 172, 175, 180, 185, 198, 263], "conv": [3, 7, 11, 14, 15, 23, 27, 170, 172, 183, 196, 199, 200, 201, 208, 213, 218, 220, 221, 226, 229, 237, 242, 249, 257], "conv1": [20, 172, 173, 181, 196, 200, 201, 214, 218, 220, 227, 228, 231, 242, 250, 251, 252], "conv1_relu": [196, 200, 201], "conv1d": [27, 56, 200, 208], "conv2": [20, 170, 172, 213, 214, 218, 220, 231, 242], "conv2d": [15, 20, 27, 30, 57, 170, 171, 172, 173, 175, 181, 196, 200, 201, 208, 213, 214, 217, 221, 227, 228, 242, 243, 248], "conv2d_lay": 248, "conv2dnormactiv": [200, 201], "conv2dtranspos": [15, 200], "conv3d": 58, "conv_1": [20, 213, 244], "conv_2": [20, 244], "conv_weight": 200, "conv_weight_arrai": 200, "conv_weight_nam": 200, "conveni": 265, "convent": [208, 229], "converg": [190, 228], "convers": [208, 227, 231], "convert": [2, 12, 20, 158, 171, 172, 174, 181, 184, 190, 196, 198, 200, 201, 227, 228, 230, 239, 253, 261, 262, 266], "convert_to_pb": [22, 227, 228, 243], "convolut": [20, 170, 190, 199, 200, 201, 202, 213, 214, 215, 217, 218, 220, 221, 232, 235, 236, 237, 238, 240, 244, 245, 246, 248, 249, 250, 252, 253, 254, 257, 258, 259], "convtranspos": 208, "convtranspose1d": [59, 208], "convtranspose2d": [27, 60, 200], "convtranspose3d": 61, "copi": [20, 22, 160, 166, 187, 203, 205, 206, 227, 228, 234, 236, 253, 254, 257, 258, 259, 263], "copy_": 171, "corp": 224, "correct": [13, 25, 185, 190, 198, 224, 226, 227, 228, 237, 248, 249, 255, 260, 262, 266], "correct_bia": 257, "correct_predict": [196, 224, 227, 236], "correctli": 208, "correl": [224, 235, 253], "correspond": [2, 3, 6, 8, 11, 12, 14, 15, 19, 21, 23, 27, 166, 169, 173, 174, 175, 179, 181, 182, 183, 184, 186, 187, 188, 194, 196, 199, 200, 202, 207, 211, 212, 213, 214, 221, 224, 227, 228, 241, 248, 255, 263], "cosine_similar": 177, "cosineembeddingloss": 62, "cosinesimilar": 63, "cost": [17, 29, 214, 216, 217, 218, 220, 223, 225, 228, 250, 252, 263], "cost_metr": [17, 29, 214, 218, 220, 250, 251, 252], "costmetr": [17, 29, 214, 218, 220, 250, 251, 252], "could": [22, 171, 187, 212, 221, 222, 227, 228, 231, 235, 236, 237, 238, 240, 242, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "count_param": 244, "counter": [22, 227, 228, 242, 256], "counterpart": 175, "cours": [245, 246, 248, 250, 251, 252, 258, 259], "cout": 180, "cover": [235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 263], "cp": [214, 215, 216, 221], "cp310": 194, "cp_comp_stat": 252, "cpu": [28, 172, 181, 187, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 207, 208, 211, 224, 226, 227, 228, 235, 236, 237, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "cpuexecutionprovid": [9, 196, 208, 227, 235, 236, 237, 238], "creat": [2, 8, 9, 12, 13, 17, 20, 22, 24, 25, 29, 30, 166, 168, 172, 174, 175, 178, 180, 184, 185, 187, 190, 192, 195, 196, 197, 198, 199, 203, 205, 207, 208, 210, 211, 214, 217, 218, 220, 225, 226, 228, 234, 241, 243, 247, 250, 251, 252, 255, 260, 261, 262, 263, 265, 266], "create_quantsim_and_encod": [8, 212], "critic": 239, "crop_length": [224, 239], "cropped_imag": [224, 239], "cross": [4, 13, 16, 25, 28, 185, 196, 198, 212, 232, 234], "cross_layer_equ": [0, 5, 18, 167, 201, 237, 249, 257], "crossentropyloss": [64, 199, 205, 206, 228], "crosslayerequ": 208, "ctcloss": 48, "ctivations_pdf": [8, 21, 179, 186, 212], "cu118": 194, "cu121": 194, "cubla": 208, "cuda": [6, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 214, 224, 226, 227, 228, 235, 236, 237, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "cudaexecutionprovid": [196, 227, 235, 236, 237, 238], "cudnn": [192, 193, 194, 195], "cudnn_conv_algo_search": [235, 236, 237, 238], "cumul": [241, 255], "curat": 191, "current": [12, 17, 20, 22, 24, 29, 30, 160, 166, 173, 174, 184, 197, 203, 208, 214, 218, 220, 224, 225, 227, 228, 242, 243, 244, 253, 260, 267], "curv": [2, 12, 184, 216, 224, 235, 239, 253], "custom": [9, 20, 22, 30, 172, 175, 190, 203, 208, 222, 227, 228, 232, 235, 241, 243, 255, 263], "custom_function_not_to_be_trac": 172, "custom_object": [22, 227, 228], "customdataload": [198, 224], "customdataset": 197, "custommodel": 172, "custommodul": 172, "cycl": 265, "d": [161, 162, 163, 164, 165, 193, 203, 222], "dangl": [227, 228], "dark": [235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260], "data": [2, 8, 11, 12, 17, 21, 22, 23, 24, 25, 26, 29, 158, 159, 160, 168, 171, 172, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 218, 220, 223, 224, 227, 228, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "data_load": [2, 23, 24, 25, 29, 168, 174, 182, 183, 184, 185, 188, 196, 197, 198, 199, 203, 207, 210, 214, 224, 227, 228, 235, 237, 238, 240, 241, 242, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260], "data_loader_wrapp": [12, 224, 239], "data_set": [11, 24, 196, 197, 240, 248], "data_typ": [25, 171, 181, 185, 187, 198, 208, 227, 228], "dataload": [2, 12, 23, 24, 25, 26, 174, 176, 182, 183, 184, 185, 188, 196, 197, 198, 199, 203, 205, 206, 207, 212, 224, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "dataloader_wrapp": [224, 239], "dataloader_wrapper_len": 203, "dataloadermnist": 214, "dataparallel": 228, "dataset": [2, 8, 9, 12, 13, 14, 21, 24, 25, 26, 179, 181, 184, 185, 186, 195, 196, 197, 198, 199, 205, 206, 207, 212, 218, 224, 227, 228, 234, 243, 263, 265], "dataset_dir": [218, 224, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "dataset_root": [196, 227], "dataset_train": [245, 246], "dataset_valid": [245, 246], "datasetv2": [11, 13, 14, 21, 196, 198, 199, 212], "datatyp": [13, 25, 185, 198, 222], "db99447": 208, "dc34fa4": 208, "de": [180, 263], "debian": 194, "debug": [171, 208, 209, 211, 222, 233, 239], "decai": 217, "decid": [182, 188, 197, 203, 207, 219, 224, 235, 236, 237, 238, 239, 240, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260], "decim": [214, 218, 220, 250, 251, 252], "decis": [262, 266], "declar": 30, "decode_predict": [218, 224, 239], "decompos": [217, 218, 220], "decomposit": [217, 218, 220, 251, 252], "decompress": [7, 170, 213], "decompressed_bw": [7, 170, 213], "decor": 30, "decreas": [10, 190, 207], "dedic": 190, "deem": 265, "deep": [190, 191, 192, 200, 217, 225], "deepcopi": 236, "deepseek": 203, "deepspe": 208, "def": [2, 9, 12, 17, 20, 22, 29, 30, 171, 172, 173, 174, 181, 184, 187, 195, 196, 197, 198, 199, 203, 205, 206, 207, 212, 214, 218, 220, 224, 227, 228, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "default": [2, 8, 9, 11, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 160, 161, 162, 164, 165, 166, 168, 172, 174, 175, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 195, 196, 198, 200, 201, 207, 208, 210, 212, 214, 216, 217, 218, 219, 220, 222, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "default_activation_bw": [8, 212, 224], "default_beta_rang": [11, 23, 183, 196], "default_bitwidth": 224, "default_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 261, 262, 263, 264, 265, 266, 267], "default_config_fil": [23, 183, 196], "default_config_per_channel": [229, 242], "default_data_col": [203, 205, 206], "default_data_typ": [22, 181, 187, 227, 228], "default_forward_fn": [182, 188, 197, 207], "default_new": 178, "default_num_iter": [11, 23, 183, 196, 240, 248, 254, 255], "default_output_bw": [21, 22, 179, 181, 186, 187, 195, 196, 197, 199, 203, 205, 206, 207, 212, 224, 226, 227, 228, 235, 237, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "default_param_bw": [8, 11, 21, 22, 23, 179, 181, 183, 186, 187, 195, 196, 197, 199, 203, 205, 206, 207, 212, 224, 226, 227, 228, 235, 237, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "default_quant_schem": [11, 23, 183, 196, 240, 248, 254], "default_reg_param": [11, 23, 183, 196], "default_warm_start": [11, 23, 183, 196], "defer": 192, "defin": [2, 12, 20, 30, 172, 173, 175, 180, 184, 197, 203, 208, 212, 214, 218, 220, 222, 224, 227, 229, 230, 231, 239, 244, 247, 248, 250, 251, 252, 254, 257, 258, 259, 260, 263], "definit": [2, 12, 29, 30, 169, 171, 172, 174, 178, 184, 187, 211, 214, 218, 220, 224, 227, 230, 231, 235, 239, 242, 243, 247, 248, 253, 254, 257, 258, 259, 260, 263], "degrad": [236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259, 262, 265, 266], "degre": [218, 220], "deleg": 180, "delet": [2, 12, 184, 212, 224, 235, 239, 253], "deliber": [235, 239, 247, 248, 253, 260], "delta": [8, 20, 21, 179, 186, 194, 208, 212, 243, 244, 263], "demand": 190, "demonstr": [234, 247, 260], "denable_cuda": 193, "denable_onnx": 193, "denable_tensorflow": 193, "denable_test": 193, "denable_torch": 193, "denot": [218, 221, 222], "dens": [15, 20, 200, 208, 230, 242, 243, 244], "dep": 193, "depend": [158, 159, 160, 172, 194, 208, 215, 229, 233, 234, 248], "deploi": [189, 263, 264, 265], "deploy": [189, 190, 191, 192, 261, 262, 264, 266], "deprec": [181, 208, 227, 228], "depth": [196, 199, 201, 208, 232], "depthwis": 208, "depthwise_conv2d": 201, "depthwiseconv2d": [15, 200, 201], "dequant": [158, 159, 160, 162, 165, 166, 180, 190, 194, 208, 262, 265, 266], "dequantizedtensor": [159, 160, 162, 180, 181, 195], "dequantizelinear": 177, "deriv": [161, 162, 164, 165, 180, 196, 224, 239, 253, 263], "descend": 166, "describ": [166, 171, 193, 194, 195, 213, 217, 219, 222, 224, 229, 232, 234, 248, 262, 263, 264, 265, 266], "descript": [175, 222, 235, 237, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "design": [173, 190, 196, 213, 235, 239, 244, 247, 248, 253, 260], "desir": [8, 22, 160, 179, 180, 181, 186, 187, 212, 215, 217, 218, 224, 225, 227, 228, 232, 235, 239, 250, 251, 252, 253, 261, 262, 266], "detach": [160, 177], "detail": [25, 172, 185, 191, 198, 213, 214, 216, 219, 222, 226, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266], "detect": 217, "determin": [8, 21, 22, 166, 170, 175, 179, 186, 187, 190, 197, 198, 202, 203, 205, 206, 207, 212, 213, 222, 227, 228, 235, 243, 253, 255], "determinist": 172, "dev": 193, "develop": [168, 189, 190, 192, 210, 265], "devic": [6, 13, 23, 25, 160, 172, 181, 183, 184, 185, 187, 189, 190, 191, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 224, 226, 227, 228, 233, 235, 236, 237, 238, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "diable_missing_quant": 227, "diagnost": 232, "diagram": [205, 206, 243], "dict": [1, 2, 8, 9, 10, 12, 17, 21, 22, 24, 25, 29, 166, 169, 172, 174, 175, 179, 184, 185, 186, 187, 196, 197, 198, 207, 211, 212, 214, 218, 220, 222, 224, 226, 227, 228, 231, 236], "dictat": 265, "dictionari": [8, 12, 17, 21, 29, 166, 179, 181, 186, 187, 212, 214, 216, 217, 218, 220, 224, 227, 228, 229, 241, 242, 244], "dicuss": 244, "did": 248, "didn": 256, "diff": 208, "differ": [17, 29, 171, 172, 178, 190, 201, 202, 204, 207, 213, 214, 216, 217, 218, 220, 222, 224, 225, 226, 232, 235, 239, 242, 243, 248, 250, 251, 252, 253, 258, 259, 261, 262, 263, 266], "dim": [170, 180, 213, 253], "dimens": [7, 170, 175, 213, 218, 220, 222, 232, 263], "dir": [9, 227, 242, 247, 248, 249], "dir_path": [6, 169, 211], "direct": [1, 191, 196, 200, 208, 211, 213, 222, 224, 262, 263, 265, 266], "directli": [8, 14, 192, 195, 199, 205, 208, 212, 226, 227, 242, 256, 263, 265], "directori": [2, 6, 8, 9, 12, 13, 17, 19, 21, 25, 29, 169, 179, 184, 185, 186, 193, 196, 198, 199, 200, 201, 211, 212, 214, 218, 220, 224, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], "directrori": 224, "disabl": [2, 8, 21, 171, 175, 178, 179, 181, 182, 186, 187, 188, 200, 207, 212, 216, 217, 224, 227, 228, 229, 239, 250, 252, 263], "disable_missing_quant": 227, "discard": 212, "disciplin": 196, "discuss": [196, 234, 239, 250, 251, 252], "disk": [6, 19, 169, 211], "displai": [210, 219, 234, 239, 243], "display_comp_ratio_plot": 219, "display_eval_scor": 219, "dist": 193, "distict": 208, "distil": [197, 202, 203], "distinct": 173, "distort": 263, "distribut": [17, 29, 190, 196, 201, 208, 214, 218, 220, 232, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 263], "divbackward0": 180, "diverg": 190, "divid": [213, 215, 228], "divis": [180, 190, 213], "dlc": 261, "dlc_path": 261, "dlcompress": 208, "dlequal": 208, "dlf": 190, "do": [9, 12, 20, 23, 172, 173, 178, 181, 183, 196, 200, 203, 205, 212, 217, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "do_constant_fold": [200, 235, 237, 238], "do_not_trace_m": 172, "doc": [172, 178, 193, 208, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "dockerfil": 193, "docstr": 213, "document": [178, 194, 200, 208, 211, 213, 219, 222, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "doe": [20, 30, 172, 184, 197, 203, 207, 208, 210, 212, 214, 216, 218, 220, 228, 231, 232, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266], "doesn": [30, 227, 228, 235, 237, 238, 240, 241, 249, 250, 251, 252, 253, 254, 257, 258, 259, 265], "doesnt": [174, 226], "don": [30, 172, 193, 205, 206, 212, 239, 242, 243, 247, 248, 260], "done": [161, 162, 180, 208, 217, 227, 229, 230, 239, 244, 248, 256], "down": [204, 222, 248], "download": [191, 194, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "downsampl": [250, 252], "downstream": [208, 221, 222], "dq_output": 30, "drastic": [216, 262, 266], "drawback": 263, "driver": [192, 194, 195, 218], "drop": [2, 12, 13, 25, 175, 184, 185, 198, 212, 215, 217, 223, 224, 228, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263], "dropout": [20, 65, 243, 244], "dropout1": [20, 244], "dropout1d": 66, "dropout2": [20, 244], "dropout2d": 67, "dropout3d": 68, "dtype": [158, 159, 160, 166, 170, 171, 172, 174, 195, 203, 205, 206, 208, 213, 222, 226], "due": [20, 173, 208], "dummi": [8, 23, 25, 27, 28, 169, 173, 179, 181, 183, 184, 185, 186, 187, 196, 198, 200, 201, 205, 206, 211, 212, 227, 228, 235, 247, 253, 260], "dummy_attention_mask": [205, 206], "dummy_data": 212, "dummy_input": [8, 9, 23, 24, 25, 27, 28, 168, 169, 178, 179, 181, 183, 184, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 213, 224, 226, 227, 228, 231, 235, 236, 237, 238, 253, 254, 255, 256, 257, 258, 259, 260], "dummy_input_dict": 211, "dummy_input_id": [205, 206], "dummy_model": [197, 203], "dummymodel": [24, 197], "dump": [203, 208, 242], "duplic": [160, 172], "dure": [1, 2, 9, 10, 11, 12, 13, 17, 20, 23, 24, 25, 29, 30, 166, 168, 175, 183, 184, 185, 190, 191, 196, 197, 198, 207, 208, 209, 210, 214, 217, 218, 219, 220, 224, 227, 228, 229, 238, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 258, 259, 260, 262, 263, 266], "dynam": [166, 172, 190, 208, 263], "dynamic_ax": [196, 200, 224, 227, 235, 236, 237, 238], "dynamo": 177, "e": [8, 9, 22, 176, 181, 187, 202, 203, 207, 212, 222, 224, 227, 228, 235, 236, 239, 242, 247, 248, 253, 256, 260], "e78dbec": 208, "e7d10c7": 208, "each": [1, 2, 8, 9, 10, 11, 12, 20, 21, 23, 30, 168, 173, 175, 176, 179, 180, 183, 184, 186, 190, 196, 197, 200, 201, 203, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 222, 224, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263], "earli": [2, 12, 184, 224], "easi": [208, 226, 265], "easier": 171, "easili": [180, 214, 218, 220], "echo": 193, "ecosystem": 189, "ed": 196, "edg": [190, 191, 265], "edit": [222, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "effect": [11, 14, 22, 23, 26, 175, 183, 190, 196, 199, 202, 212, 227, 228, 238, 243, 245, 246, 258, 259, 262, 265, 266], "effici": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 256, 261, 262, 263, 264, 265, 266, 267], "efficientnetb4": 208, "effort": [13, 25, 174, 185, 198, 226, 241, 255, 262, 265, 266], "eigen": 193, "eights_pdf": [8, 21, 179, 186, 212], "either": [17, 29, 170, 174, 180, 213, 214, 218, 220, 221, 224, 226, 231, 235, 240, 248, 250, 251, 252, 253], "element": 222, "elementari": 243, "elementwis": [172, 175, 208], "elimin": [190, 200, 212, 263], "els": [2, 12, 172, 173, 184, 195, 196, 197, 198, 199, 200, 201, 203, 207, 218, 224, 226, 228, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "elu": 69, "embed": [20, 70, 172, 177, 181, 187, 208, 217, 227, 228, 232, 243, 244], "embed_dim": [20, 243, 244], "embedding_lay": [20, 244], "embeddingbag": 71, "embodi": 190, "empir": [241, 255], "emploi": [190, 191], "empti": 229, "emul": 263, "enabl": [2, 7, 8, 12, 13, 17, 21, 25, 29, 166, 171, 174, 178, 179, 182, 184, 185, 186, 188, 190, 192, 198, 199, 200, 202, 207, 208, 211, 213, 214, 218, 219, 220, 224, 227, 229, 239, 246, 248, 250, 252, 253, 259, 261, 263, 265], "enable_convert_op_reduct": [12, 174, 184, 224, 239, 253], "enable_onnx_check": [181, 187, 227, 228], "enable_per_layer_mse_loss": [8, 21, 212, 247, 260], "enbl": 213, "enc": 30, "enc_typ": 222, "encapsul": [2, 12, 174, 179, 184, 186, 212, 224], "encaptur": 178, "encod": [1, 2, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 30, 158, 159, 160, 161, 162, 166, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 224, 226, 228, 236, 237, 238, 240, 241, 242, 243, 245, 246, 248, 249, 254, 255, 257, 258, 259, 261, 265], "encoding_analyz": [161, 162, 166], "encoding_file_path": [227, 228], "encoding_path": [196, 198, 240, 241, 248, 254, 255], "encoding_vers": [213, 222], "encodinganalyz": [161, 162, 166], "encodinganalyzerforpython": 194, "encodingbas": [158, 159, 166], "encodingmismatchinfo": 227, "encodingtyp": 222, "encount": [30, 243], "encourag": [20, 172, 230, 231], "end": [14, 24, 161, 162, 163, 164, 165, 172, 173, 191, 197, 199, 207, 217, 224, 227, 234, 242, 243, 245, 246, 250, 251, 252, 256, 258, 259, 265], "end_beta": [11, 23, 183, 196], "end_idx": 198, "enforc": 166, "engin": [191, 200, 208, 211, 213, 222, 224, 262, 263, 265, 266], "enhanc": [8, 21, 178, 179, 186, 208, 212, 227, 247, 260, 263], "enough": [196, 239, 250, 251, 252, 262, 266], "ensur": [175, 195, 199, 205, 206, 208, 211, 216, 224, 232, 248, 262, 266], "enter": [30, 175, 198], "entir": [8, 21, 179, 180, 186, 212, 214, 217, 218, 220, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "entireti": [20, 248], "entri": [25, 181, 185, 187, 198, 222, 227, 228, 229], "enum": [2, 9, 12, 17, 23, 29, 169, 181, 183, 184, 187, 196, 211, 214, 218, 220, 222, 224, 227, 228, 235, 239, 242, 243, 253, 256], "enumer": [17, 29, 169, 203, 205, 206, 211, 214, 218, 220, 224, 227, 228, 244], "environ": [190, 224, 234, 235, 239, 241, 242, 245, 246, 253, 260], "ep": [200, 201, 208], "epoch": [199, 205, 206, 214, 217, 218, 220, 228, 236, 237, 238, 240, 241, 242, 243, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259], "epsilon": [20, 208, 243, 244], "equal": [4, 13, 16, 25, 28, 159, 160, 170, 180, 185, 196, 198, 212, 213, 215, 216, 232, 234, 240, 244, 263], "equalize_model": [4, 16, 28, 201, 237, 249, 257], "equat": [161, 162, 163, 164, 165, 213, 263], "equival": [25, 30, 164, 165, 166, 170, 174, 181, 184, 185, 187, 197, 198, 203, 213, 224, 227, 228, 231, 235, 248, 253, 254, 257, 258, 259, 260, 261], "erorr": 239, "error": [1, 13, 20, 25, 30, 172, 180, 181, 185, 190, 196, 198, 208, 209, 224, 226, 227, 228, 232, 239, 263], "especi": [190, 205, 228, 232, 235, 248, 253, 265], "essenti": [235, 239, 242, 243, 253, 256], "estim": [208, 234, 263, 265], "esults_dir": [8, 21, 179, 186, 212], "etc": [24, 190, 193, 197, 208, 215, 222, 235, 239, 242, 243, 248, 253], "eval": [2, 8, 12, 13, 17, 21, 24, 25, 29, 172, 174, 179, 182, 184, 185, 186, 188, 195, 196, 197, 198, 199, 200, 201, 207, 212, 214, 216, 217, 218, 219, 220, 224, 226, 227, 228, 235, 236, 237, 238, 239, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "eval_callback": [8, 13, 17, 21, 25, 29, 179, 185, 186, 198, 212, 214, 218, 220, 224, 241, 242, 247, 250, 251, 252, 255, 260], "eval_callback_factori": [235, 253], "eval_callback_fn": 212, "eval_callback_for_phase1": [2, 12, 184, 224, 235, 253], "eval_callback_for_phase2": [2, 12, 184, 224, 235, 253], "eval_callback_for_phase_1": 224, "eval_callback_for_phase_2": 224, "eval_callback_phase1": 239, "eval_callback_phase2": 239, "eval_data_load": [224, 227], "eval_data_s": 227, "eval_dataset": [196, 198, 199, 212, 227, 228, 241, 242], "eval_dataset_s": [198, 241, 242, 255], "eval_func": [218, 224, 239, 247], "eval_iter": [17, 29, 214, 218, 220, 250, 251, 252], "eval_scor": [8, 17, 21, 29, 179, 186, 212, 214, 218, 220], "evalcallbackfactori": [2, 174, 184, 224, 235, 253], "evalfunct": 218, "evalu": [2, 8, 12, 13, 17, 21, 25, 29, 174, 179, 184, 185, 186, 195, 196, 197, 198, 199, 203, 207, 214, 216, 217, 218, 219, 220, 224, 234, 241, 243, 255, 262, 263, 266], "evaluate_accuraci": 253, "evaluate_model": [214, 218, 220], "even": [30, 180, 224, 225, 226, 235, 239, 242, 243, 248, 253], "evenli": 213, "eventu": 226, "everi": [6, 8, 11, 19, 21, 23, 169, 179, 180, 183, 186, 196, 197, 203, 209, 211, 212, 216, 217, 228, 235, 236, 237, 238, 239, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 256, 258, 259, 260, 263], "evlauat": 239, "ex": 178, "exactli": [13, 24, 30, 100, 166, 175, 197, 198, 247, 260, 263], "examin": 172, "exampl": [7, 9, 17, 24, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 173, 174, 175, 177, 178, 180, 181, 182, 188, 190, 193, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 221, 226, 227, 228, 229, 230, 231, 232, 233, 243, 244, 255, 262, 263, 266], "exce": [168, 210], "exceed": [168, 210], "except": [20, 182, 188, 200, 201, 207, 213, 224, 226, 228, 235, 237, 238, 244, 247, 260], "exchang": 190, "exclud": [25, 172, 173, 179, 182, 185, 186, 188, 198, 207, 208, 212, 222], "excluded_lay": 222, "exclus": [166, 170, 213], "execut": [2, 9, 12, 13, 25, 172, 181, 184, 185, 187, 198, 200, 208, 219, 224, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "exercis": [235, 242, 247, 248, 253, 256, 260], "exist": [30, 100, 166, 175, 181, 187, 213, 224, 227, 228, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 265], "exist_ok": [235, 239, 240, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "exit": [2, 12, 13, 25, 30, 175, 184, 185, 198, 224], "expand": [208, 213], "expand_dim": 198, "expanded_conv_depthwis": [196, 201], "expans": [213, 217], "expect": [2, 8, 13, 17, 21, 22, 23, 25, 29, 168, 172, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 196, 198, 203, 207, 210, 212, 214, 217, 218, 220, 224, 226, 227, 228, 230, 235, 242, 250, 251, 252, 253, 256], "experi": [17, 29, 170, 192, 194, 213, 214, 217, 218, 220, 236, 240, 245, 246, 249, 250, 251, 252, 254, 257, 258, 259, 262, 266], "experiment": [192, 197, 203, 208, 213, 217], "experss": [20, 244], "expert": [241, 255], "explain": [208, 214, 217, 235, 239, 242, 243, 247, 253, 256, 260], "explan": [191, 236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259], "explicitli": [13, 25, 185, 198, 221], "expon": [166, 170, 213], "exponent_bit": [166, 170, 213], "export": [8, 9, 21, 22, 24, 25, 169, 171, 174, 178, 179, 181, 182, 185, 186, 187, 188, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 207, 208, 209, 211, 212, 217, 222, 224, 225, 226, 231, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 248, 249, 253, 254, 255, 257, 258, 259, 261], "export_int32_bia": 177, "export_model": [9, 178, 181, 187, 227, 228], "export_param": [235, 237, 238], "export_per_layer_encoding_min_max_rang": [8, 21, 179, 186, 212], "export_per_layer_mse_loss": [8, 21, 179, 186, 212], "export_per_layer_stats_histogram": [8, 21, 179, 186, 212], "export_to_torchscript": [181, 187, 227, 228], "exported_model": 213, "expos": [172, 196, 212], "express": [17, 29, 205, 206, 214, 218, 220], "extend": [171, 208], "extens": [175, 234, 261], "extern": 208, "extra": [166, 175, 193, 208], "extract": [190, 227, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "extrem": [235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 263], "ey": 212, "f": [172, 173, 177, 180, 193, 194, 195, 196, 198, 199, 200, 201, 224, 227, 228, 236, 242, 255], "f0": 215, "facebook": [190, 205, 206], "facilit": 191, "fact": 205, "factor": [213, 215, 217, 242, 243, 245, 246, 250, 251, 252, 256, 258, 259], "factori": [2, 12, 174, 184, 224], "fail": [172, 173, 174, 181, 198, 200, 201, 208, 224, 226, 227, 228, 235, 237, 238], "failur": 208, "fair": 190, "fairli": [239, 242, 243, 247, 248, 260], "fake": [162, 165, 166, 174, 184, 208, 224, 227, 235, 236, 237, 238, 240, 242, 243, 245, 246, 248, 249, 253, 254, 255, 256, 257, 258, 259], "fakequ": [181, 187, 227, 228], "fall": [216, 229, 250, 251, 252, 262, 266], "fallback": 261, "fals": [2, 7, 9, 12, 13, 17, 20, 22, 25, 29, 30, 158, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 178, 180, 181, 184, 185, 187, 194, 196, 198, 200, 201, 203, 205, 206, 211, 213, 214, 218, 220, 222, 224, 226, 227, 228, 229, 235, 237, 238, 239, 240, 242, 243, 245, 246, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "famili": [190, 208, 226], "familiar": 234, "far": [242, 256], "farther": [236, 240, 254], "fashion": 248, "fast": [12, 193, 224], "faster": [208, 224, 235, 241, 242, 248, 253, 255], "fastest": 192, "fc": [217, 220], "fc1": 172, "fc2": 172, "fea395f": 208, "featur": [7, 20, 24, 168, 171, 172, 173, 177, 190, 191, 197, 198, 200, 201, 203, 208, 210, 217, 219, 224, 226, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "featurealphadropout": 72, "feed": [20, 243, 244, 263], "feel": [226, 242, 243, 256], "feez": [182, 188, 207], "few": [199, 215, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "fewer": [217, 265], "ff_dim": [20, 243, 244], "ffn": [20, 244], "ffn_output": [20, 244], "field": [2, 166, 184, 222, 224, 235, 253], "figur": [196, 198, 201, 214, 216, 218, 219, 220, 221, 232, 263], "file": [2, 8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 174, 179, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 196, 198, 199, 207, 208, 212, 213, 214, 218, 220, 222, 224, 226, 227, 228, 235, 237, 238, 241, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265], "file_path": [187, 195, 196, 200, 201, 224, 227], "filenam": [8, 9, 11, 22, 23, 181, 183, 187, 196, 197, 199, 203, 207, 212, 227, 228, 235, 236, 237, 238], "filename_prefix": [9, 11, 22, 23, 181, 183, 187, 196, 197, 199, 203, 207, 224, 227, 228, 235, 236, 239, 240, 242, 248, 249, 253, 254, 255, 256, 257, 258, 259], "filename_prefix_encod": [178, 181, 187, 227, 228], "fill": [25, 181, 185, 187, 198, 227, 228], "filter": [20, 190, 248], "final": [17, 20, 29, 173, 182, 188, 205, 206, 207, 212, 213, 214, 215, 216, 218, 220, 224, 228, 232, 235, 239, 242, 243, 247, 253, 256, 260, 265], "find": [2, 12, 15, 173, 174, 182, 184, 187, 188, 192, 197, 200, 203, 207, 212, 216, 225, 226, 228, 235, 236, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 262, 263, 266], "fine": [17, 22, 29, 178, 187, 191, 214, 215, 218, 220, 227, 228, 236, 237, 238, 240, 241, 243, 245, 246, 249, 254, 255, 257, 258, 259, 262, 265, 266], "finer": [166, 180, 213], "finess": [262, 266], "finetun": [236, 237, 240, 241, 242, 248, 249, 250, 251, 252, 254, 256, 258, 259], "finetuned_accuraci": [256, 258, 259], "finetuned_accuracy_bn_reestim": 256, "finetuned_model": [250, 251], "finish": [245, 246, 258, 259], "finit": 166, "first": [20, 23, 172, 175, 178, 180, 182, 183, 188, 196, 201, 207, 208, 217, 218, 232, 242, 243, 244, 247, 248, 250, 251, 252, 256, 260, 265], "fit": [17, 29, 199, 214, 216, 218, 220, 228, 242, 243, 245, 246, 256, 265], "five": [237, 257], "fix": [173, 208, 222, 224, 235, 236, 237, 238, 263], "flag": [2, 12, 13, 25, 168, 171, 172, 173, 174, 181, 184, 185, 187, 193, 198, 210, 224, 226, 227, 228, 235, 239, 253], "flatten": [73, 172, 205, 206, 222, 242], "flexibl": [235, 253], "flexround": 197, "float": [2, 8, 11, 12, 13, 17, 21, 22, 23, 25, 29, 30, 158, 159, 166, 170, 174, 179, 181, 183, 184, 185, 186, 187, 190, 196, 198, 200, 201, 208, 212, 213, 214, 218, 220, 222, 224, 225, 227, 228, 232, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266], "float16": [9, 166, 170, 171, 213, 227], "float32": [9, 195, 212, 227], "float8": 208, "float_fallback": 261, "floatencod": [166, 208], "floatquant": [166, 171], "floatquantizedequant": 171, "flow": [25, 172, 185, 198, 232, 263], "fly": 177, "fo": 248, "focu": 256, "fold": [3, 13, 14, 15, 25, 27, 74, 181, 185, 190, 196, 198, 199, 201, 208, 212, 224, 236, 239], "fold_all_batch_norm": [15, 27, 200, 224, 228, 239, 240, 245, 246, 248, 249, 253, 254, 257, 258, 259], "fold_all_batch_norms_to_scal": [14, 199, 242, 256], "fold_all_batch_norms_to_weight": [3, 200, 235, 236, 237, 238], "fold_param_quant": 181, "folded_model": 200, "folder": [212, 247, 260], "follow": [0, 5, 6, 8, 9, 18, 19, 20, 21, 22, 30, 100, 167, 169, 171, 172, 173, 174, 175, 178, 179, 181, 186, 187, 193, 194, 195, 196, 198, 199, 200, 201, 208, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "footprint": [190, 191], "forall_": [161, 162, 163, 164, 165], "forc": [193, 235, 236, 237, 238, 250, 251, 252, 253, 254, 257, 258, 259, 260], "forg": 193, "form": [20, 247, 260], "formal": 213, "format": [8, 11, 21, 22, 23, 160, 176, 179, 181, 183, 186, 187, 190, 191, 192, 196, 198, 203, 207, 208, 212, 213, 224, 227, 228, 230, 236, 261, 263, 265], "former": 231, "forward": [2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 166, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 212, 224, 227, 228, 231, 232, 235, 238, 239, 242, 243, 244, 245, 246, 247, 253, 254, 256, 257, 258, 259, 260, 262, 266], "forward_fn": [2, 13, 23, 24, 25, 26, 174, 176, 182, 183, 184, 185, 188, 196, 197, 198, 199, 203, 207, 224, 235, 242, 253, 256], "forward_one_batch": [235, 253], "forward_pass": [195, 196, 197, 205, 206, 207, 224], "forward_pass_arg": 227, "forward_pass_call_back": [224, 239], "forward_pass_callback": [2, 8, 9, 12, 21, 22, 179, 181, 184, 186, 187, 212, 224, 227, 228, 235, 237, 238, 240, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "forward_pass_callback_2": [12, 224], "forward_pass_callback_arg": [9, 22, 181, 187, 224, 227, 228, 239, 240, 242, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259], "forward_pass_callback_fn": 212, "found": [171, 228, 244, 263], "four": [198, 263], "fp": 202, "fp16": [174, 208, 226, 265], "fp32": [2, 6, 8, 12, 19, 21, 169, 174, 179, 182, 184, 186, 188, 190, 197, 203, 207, 208, 211, 212, 222, 224, 228, 242, 243, 260, 261, 262, 263, 265, 266], "fp32_acccuraci": 239, "fp32_layer_output": 211, "fp32_layer_output_util": 211, "fp32_output": [2, 224], "fp_qdq": 171, "fp_quantiz": 171, "frac": [161, 162, 163, 164, 165, 166, 180, 263], "fraction": [224, 262, 266], "fractionalmaxpool2d": 75, "fractionalmaxpool3d": 76, "framework": [190, 191, 194, 195, 197, 200, 203, 211, 227, 229, 234, 261, 262, 263, 266], "free": [226, 237, 242, 243, 249, 256, 257], "freez": [171, 197, 203, 207, 208, 240, 248, 254], "freeze_encod": 171, "friendli": [178, 198, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 265], "from": [2, 9, 12, 13, 20, 22, 23, 24, 25, 26, 30, 159, 160, 161, 162, 166, 167, 170, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266], "from_encod": 166, "from_modul": 30, "from_numpi": 177, "from_pretrain": [203, 205, 206], "from_str": [9, 22, 181, 187, 227, 228], "from_tensor_slic": 212, "front": [2, 12, 13, 25, 184, 185, 198, 235, 239, 253], "frozen": [1, 196, 205, 206, 227, 236, 248], "full": [24, 190, 197, 218, 224, 225, 230, 231, 235, 236, 237, 238, 239, 240, 242, 245, 246, 249, 253, 254, 256, 257, 258, 259], "fulli": [0, 167, 177, 208, 217, 220, 222, 227], "func": [2, 12, 174, 179, 184, 186, 212, 224], "func_callback_arg": [2, 12, 174, 179, 184, 186, 212, 224, 235, 253], "func_wrapp": [218, 224, 239], "function": [0, 2, 5, 8, 9, 12, 13, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 158, 159, 160, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 198, 199, 201, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 224, 227, 228, 230, 231, 236, 237, 239, 240, 243, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 266], "function_nam": [250, 251, 252], "functional_callback": 243, "functional_model": [242, 243, 244], "functional_model_weight_ord": 244, "functional_op": 173, "fundament": 171, "furhter": [241, 255], "furo": 208, "further": [158, 161, 162, 163, 164, 165, 172, 180, 214, 217, 233, 252, 262, 263, 266], "furthermor": 20, "fuse": [205, 229, 242, 263], "fuse_bn_into_conv": 200, "fusion": [190, 208], "futur": [168, 210], "fx": [25, 172, 185, 198], "g": [22, 176, 187, 203, 212, 222, 224, 227, 228, 235, 236, 239, 242, 247, 248, 253, 256, 260], "gain": [196, 214, 215, 217, 236, 240, 245, 246, 248, 249, 250, 251, 252, 254, 257, 258, 259, 262, 266], "gamma": 197, "gap": 225, "gather": 227, "gaussiannllloss": 81, "gave": 198, "gelu": 77, "gemm": [7, 208, 229, 242], "gemma3": 208, "gener": [6, 19, 30, 161, 162, 163, 164, 165, 169, 177, 180, 184, 190, 193, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 212, 213, 217, 222, 224, 226, 227, 228, 229, 232, 234, 235, 239, 243, 253, 255, 261, 263, 265], "generate_calibration_callback": [205, 206], "generate_layer_output": [6, 19, 169, 211], "get": [2, 12, 17, 29, 166, 172, 174, 178, 184, 191, 194, 196, 206, 207, 208, 211, 217, 218, 220, 224, 225, 226, 233, 235, 236, 237, 238, 239, 242, 243, 244, 247], "get_activation_quant": [2, 224], "get_active_param_quant": [12, 224], "get_active_quant": [2, 12, 174, 184, 224], "get_available_provid": [196, 235, 236, 237, 238], "get_calibration_and_eval_data_load": 227, "get_candid": [2, 12, 174, 184, 224], "get_data_loader_wrapp": [224, 239], "get_default_kernel": 30, "get_devic": 255, "get_encod": 166, "get_eval_func": [218, 224, 239], "get_extra_st": 166, "get_input": [196, 224, 235, 236, 237, 238], "get_input_quantizer_modul": [174, 184, 224], "get_kernel": 30, "get_loss_fn": [182, 188, 207], "get_model": [230, 239], "get_offset": 180, "get_original_models_weights_in_functional_model_ord": 244, "get_param_quant": [2, 224], "get_path_for_per_channel_config": [195, 196, 198, 199, 207, 226, 227], "get_peft_model": 178, "get_pre_processed_input": 211, "get_quant_scheme_candid": [13, 25, 185, 198], "get_scal": [160, 180], "get_subclass_model_with_functional_lay": 20, "get_text_classificaiton_model": 20, "get_top5_acc": 239, "get_val_dataload": [235, 237, 238, 250, 252, 253, 254, 256, 257, 258, 259, 260], "get_val_dataset": [240, 241, 242, 247, 248, 249], "get_weight": [200, 201, 244], "git": 234, "github": [194, 234], "give": [196, 201, 208, 212, 217, 223, 224, 239, 243, 247, 248, 250, 251, 252, 260, 264], "given": [2, 4, 12, 13, 16, 17, 22, 23, 25, 26, 28, 29, 30, 168, 174, 175, 181, 182, 183, 184, 185, 187, 188, 196, 198, 199, 201, 207, 210, 214, 216, 217, 218, 220, 223, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 266], "global": [190, 207, 232], "globalaveragepooling1d": [20, 243, 244], "glu": 78, "go": [20, 208, 235, 239, 242, 243, 247, 248, 253, 256, 260], "goal": [13, 25, 185, 198, 212, 235, 253, 265], "good": [20, 178, 217, 226, 242, 243, 245, 246, 250, 251, 252, 256, 258, 259, 262, 266], "googl": 190, "got": [3, 14, 27, 172, 199, 200], "gpu": [190, 192, 193, 194, 195, 208, 211, 214, 218, 220, 227, 250, 251, 252, 254, 256, 257, 258, 259, 260], "grad_fn": [158, 159, 160, 161, 162, 177, 180, 195], "gradient": [158, 159, 160, 205, 206, 208, 227, 228], "grant": 234, "granular": [17, 29, 213, 214, 217, 218, 220, 232, 243, 250, 251, 252], "granularli": 213, "graph": [20, 23, 25, 160, 172, 177, 181, 183, 185, 187, 196, 198, 200, 201, 208, 218, 219, 222, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265], "graph_optimization_level": 177, "graphmodul": 172, "graphoptimizationlevel": 177, "greater": [17, 29, 213, 214, 215, 216, 218, 220], "greedi": [17, 29, 214, 217, 218, 219, 220], "greedili": [235, 239, 253], "greedy_param": [214, 218, 220, 250, 251, 252], "greedy_select_param": [17, 29, 214, 218, 250, 251, 252], "greedymixedprecisionalgo": [12, 174, 184, 224, 239, 253], "greedyselectionparamet": [17, 29, 214, 218, 220, 250, 251, 252], "green": 221, "grid": [180, 182, 188, 207, 213, 263], "group": [2, 7, 12, 170, 174, 184, 208, 213, 229, 235, 253, 263], "groupedblockquantizedequant": 213, "groupnorm": 82, "gru": [79, 208], "grucel": 80, "guarante": 20, "guid": [0, 167, 191, 196, 204, 208, 224, 227, 233, 234, 235, 239, 241, 253, 254, 255, 257, 258, 259, 260, 265], "guidebook": 217, "guidelin": [172, 196, 227, 228, 253, 254, 257, 258, 259, 260], "h": [220, 221, 234], "h5": [211, 261], "ha": [0, 8, 11, 20, 23, 25, 30, 158, 167, 171, 172, 173, 181, 183, 184, 185, 187, 190, 192, 193, 196, 197, 198, 203, 204, 207, 208, 212, 213, 215, 216, 219, 221, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 265], "had": [230, 231], "half": 215, "hand": [235, 253], "handl": [13, 14, 25, 26, 185, 194, 195, 198, 199, 208, 213, 263], "hard": 172, "hardshrink": 83, "hardsigmoid": 84, "hardswish": 85, "hardtanh": 86, "hardwar": [9, 181, 187, 190, 227, 228, 263, 265], "hat": 263, "have": [8, 20, 21, 30, 168, 169, 170, 171, 172, 173, 176, 179, 180, 186, 190, 192, 195, 203, 205, 208, 210, 211, 212, 213, 217, 222, 224, 226, 227, 228, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266], "hba": [237, 249, 257], "he": 217, "head": [20, 243, 244], "heavi": [168, 210, 219], "height": [200, 201, 218, 220, 221, 235, 236, 237, 238, 243, 253, 254, 256, 257, 258, 259, 260], "held": [30, 175, 258, 259], "help": [171, 173, 174, 181, 187, 189, 212, 213, 216, 217, 224, 225, 226, 227, 228, 229, 232, 237, 247, 249, 257, 260, 262, 265, 266], "helper": [174, 180, 184, 205, 224, 242, 256], "hen": [13, 25, 185, 198], "here": [23, 171, 178, 180, 183, 192, 196, 201, 205, 206, 218, 228, 229, 235, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 265, 266], "heterogen": 265, "heurist": [241, 255], "hidden": [20, 243, 244], "hide": 226, "high": [2, 4, 12, 16, 28, 171, 184, 190, 191, 201, 202, 204, 208, 215, 216, 224, 236, 237, 238, 240, 245, 246, 249, 250, 251, 252, 254, 257, 258, 259], "higher": [23, 183, 184, 196, 213, 214, 216, 218, 220, 224, 225, 228, 232, 235, 239, 250, 251, 252, 253, 263, 265], "highest": [13, 25, 185, 198, 216], "highlight": 219, "hingeembeddingloss": 87, "histogram": [8, 21, 179, 186, 208, 209, 247, 260, 263], "histogram_freq": 243, "historgram": [8, 212], "histori": [242, 243, 245, 246], "hold": [158, 159, 160, 175, 199, 226, 229, 232], "honor": [214, 218, 220], "hood": 171, "hook": 263, "hope": [235, 239, 242, 243, 248, 253, 256], "hopefulli": 244, "host": [194, 208, 219], "hotspot": [8, 21, 179, 186, 212, 223], "how": [2, 12, 173, 175, 178, 180, 181, 184, 190, 191, 193, 195, 196, 204, 208, 212, 213, 217, 218, 220, 222, 223, 224, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266], "howev": [20, 171, 177, 194, 204, 208, 213, 214, 218, 220, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 265, 266], "html": [8, 21, 168, 172, 179, 186, 193, 194, 208, 209, 210, 212, 234, 247, 260], "htp": 261, "htp_v66": [9, 181, 187, 227, 228], "htp_v68": [9, 181, 187, 227, 228], "htp_v69": [9, 181, 187, 227, 228], "htp_v73": [9, 181, 187, 227, 228], "htp_v75": [9, 181, 187, 227, 228], "htp_v79": [9, 181, 187, 227, 228], "htp_v81": [9, 181, 187, 227, 228], "http": [172, 194, 197, 203, 208, 219, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "hub": [189, 191, 200, 208, 211, 213, 222, 224, 262, 263, 265, 266], "huberloss": 88, "huggingfac": [178, 205, 206, 208], "hx": [79, 80, 96, 97, 123, 124], "hxwx5": 221, "hxwx8": 221, "hyper": [199, 228, 236, 240, 242, 243, 245, 246, 249, 250, 251, 252, 254, 256, 257, 258, 259, 265], "hyperparamet": 228, "i": [0, 1, 2, 4, 7, 8, 9, 12, 13, 17, 20, 21, 22, 23, 24, 25, 28, 29, 30, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266], "i_": [161, 162, 163, 164, 165], "i_0": [161, 162, 163, 164, 165], "i_d": [161, 162, 163, 164, 165], "iccv": [217, 237, 249, 257], "id": [6, 13, 25, 185, 198, 205, 206, 211, 219], "ideal": [208, 239, 247, 248, 260], "idempot": 160, "ident": [200, 230, 231, 244], "identifi": [170, 173, 208, 209, 212, 213, 214, 221, 223, 224, 232, 234, 263, 265], "ie": 226, "ieee": [166, 217], "ignor": [2, 17, 29, 172, 184, 214, 218, 220, 224, 227, 235, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 266], "ignore_quant_ops_list": [23, 183, 196], "illustr": [196, 214, 216, 218, 219, 220, 221, 248, 250, 251, 252, 263, 265], "ilsvrc": [198, 224], "ilsvrc2012": [235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "imag": [8, 21, 179, 186, 190, 193, 196, 198, 199, 207, 212, 224, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "image_bw": 231, "image_dataset": 212, "image_dataset_from_directori": [196, 198, 199, 218, 224, 227, 228, 239, 240, 245, 246, 248], "image_height": [240, 248], "image_net_config": [235, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "image_net_data_load": [235, 237, 238, 250, 252, 254, 256, 257, 258, 259, 260], "image_net_dataset": [240, 241, 242, 247, 248, 249], "image_net_evalu": [235, 237, 238, 240, 241, 242, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "image_net_train": [250, 251, 252, 256, 257, 258, 259], "image_rgb": 231, "image_s": [196, 198, 199, 218, 224, 227, 228, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "image_width": [240, 248], "imageclassificationevalu": 207, "imagefold": [227, 253, 255], "imagenet": [196, 198, 199, 200, 201, 207, 218, 224, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "imagenet_data": [196, 227, 236], "imagenet_dataset": [196, 198, 199, 227, 228, 255], "imagenet_dir": [245, 246], "imagenetdataload": [235, 237, 238, 247, 250, 252, 254, 256, 257, 258, 259, 260], "imagenetdatapipelin": [235, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "imagenetdataset": [240, 241, 242, 247, 248, 249], "imagenetevalu": [235, 237, 238, 240, 241, 242, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "imagenettrain": [250, 251, 252, 256, 257, 258, 259], "images_dir": 256, "images_mean": 253, "images_std": 253, "imagin": 248, "imdb": 243, "img": [218, 224, 239], "img_height": [224, 239], "img_width": [224, 239], "immedi": [237, 241, 249, 255, 257], "impact": [190, 216, 232, 233, 235, 236, 248, 253], "implement": [6, 19, 22, 30, 169, 180, 198, 205, 206, 208, 211, 212, 227, 228, 232, 234, 235, 253, 262, 265, 266], "impli": [224, 235, 253], "import": [11, 20, 22, 23, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 175, 177, 178, 180, 181, 183, 187, 190, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 213, 214, 218, 220, 222, 224, 226, 227, 228, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "impos": 213, "improv": [191, 196, 197, 200, 202, 203, 208, 213, 215, 217, 225, 227, 228, 232, 236, 237, 238, 240, 241, 242, 243, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 264, 266], "in1": 226, "in2": 226, "in_channel": [170, 213], "in_eval_mod": 255, "in_featur": [30, 171, 175, 181], "in_plac": [22, 181, 187, 203, 205, 206, 227, 228], "inc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 261, 262, 263, 264, 265, 266, 267], "includ": [2, 13, 25, 168, 184, 185, 190, 194, 198, 200, 201, 208, 210, 212, 216, 219, 222, 224, 228, 229, 262, 263, 266], "include_top": [239, 240, 248, 249], "incompat": [208, 242, 243], "incorrect": [174, 208, 226], "incorrectli": [208, 262, 266], "increas": [17, 29, 202, 214, 216, 218, 220, 235, 248, 253, 263], "increment": [262, 266], "incur": 212, "independ": [172, 190, 232], "index": [8, 21, 175, 179, 186, 193, 208, 212, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "index_0": [247, 260], "index_1": [247, 260], "index_n": [247, 260], "indic": [17, 29, 109, 110, 111, 174, 175, 180, 181, 214, 215, 218, 220, 221, 222, 226, 227, 228, 241, 248, 253, 255], "indirect": [224, 235, 253], "individu": [8, 21, 179, 186, 191, 212, 216, 223, 229], "induc": 263, "infer": [9, 11, 13, 22, 23, 25, 181, 183, 185, 190, 195, 196, 197, 198, 200, 203, 207, 208, 212, 213, 215, 218, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266], "inferencesess": [2, 8, 9, 177, 211, 212, 224, 227, 235, 236, 237, 238], "influenc": 263, "info": [15, 173, 200, 208, 239], "inform": [2, 12, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 173, 184, 189, 191, 208, 213, 222, 224, 235, 239, 253, 256], "inherit": [20, 30, 100, 175], "init": [200, 201], "initi": [6, 9, 161, 162, 166, 175, 180, 181, 187, 196, 200, 201, 211, 227, 235, 237, 238, 240, 246, 247, 248, 253, 254, 258, 259, 260], "initial_accuraci": [198, 255], "initializd": 175, "inner": 232, "innov": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 261, 262, 263, 264, 265, 266, 267], "inp_data": 218, "inp_symmetri": [182, 188, 207], "inplac": [166, 173, 200, 201], "input": [1, 2, 6, 7, 8, 9, 10, 12, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 227, 228, 229, 230, 231, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 256, 260, 261, 263], "input1": [46, 62, 105], "input2": [46, 62, 105], "input_": [161, 162, 163, 164, 165], "input_1": [196, 200, 201], "input_batch": 211, "input_channel": [7, 170, 213], "input_data": [198, 227, 235, 237, 238, 253, 254, 256, 257, 258, 259, 260], "input_dim": [20, 243, 244], "input_dlc": 261, "input_id": [203, 205, 206], "input_inst": [6, 19, 169, 211], "input_lay": [20, 244], "input_length": 48, "input_list": 261, "input_nam": [177, 181, 187, 195, 196, 200, 224, 227, 228, 235, 236, 237, 238], "input_network": 261, "input_op_nam": [17, 218], "input_q": 180, "input_qdq": 180, "input_qtzr": 30, "input_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 181, 184, 224, 227, 228], "input_shap": [12, 27, 28, 29, 172, 196, 200, 201, 212, 214, 218, 220, 224, 226, 227, 230, 235, 236, 237, 238, 239, 240, 244, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "input_tensor": [20, 172, 239, 240, 248, 249], "inputlay": [20, 196, 200, 201], "inputs_batch": [227, 235, 237, 238, 253, 254, 256, 257, 258, 259, 260], "insert": [172, 227, 235, 236, 237, 238, 240, 242, 243, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 263, 265], "insid": [20, 24, 30, 172, 175, 193, 197, 218, 226, 243, 244], "insight": [219, 232], "inspect": [217, 243], "instabl": [242, 256], "instal": [190, 191, 208, 219, 234, 245, 246, 249, 255, 257, 258, 259, 265], "instanc": [1, 6, 10, 19, 30, 169, 172, 173, 187, 196, 207, 211, 219, 262, 266], "instancenorm1d": 89, "instancenorm2d": 90, "instancenorm3d": 91, "instanti": [178, 180, 205, 206, 213, 219, 222, 224, 229, 231, 235, 247, 248, 253, 256, 260], "instead": [166, 172, 173, 196, 208, 213, 218, 221, 222, 230, 231, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "instruct": [191, 194, 203, 208, 213, 228, 234, 261, 262, 266], "int": [1, 2, 6, 7, 8, 10, 11, 12, 13, 14, 17, 21, 22, 23, 24, 25, 26, 29, 59, 60, 61, 109, 110, 111, 161, 162, 163, 164, 165, 166, 170, 171, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 198, 199, 203, 205, 206, 207, 208, 211, 212, 213, 214, 218, 220, 222, 224, 227, 228, 235, 239, 241, 242, 247, 250, 251, 252, 253, 255, 263], "int16": [9, 174, 195, 198, 224, 226, 227, 235, 239, 253, 262, 263, 265, 266], "int32": [177, 205, 206, 222], "int4": [9, 174, 196, 198, 208, 226, 227, 265], "int8": [9, 159, 160, 174, 190, 195, 196, 198, 224, 226, 227, 228, 235, 236, 237, 238, 239, 248, 253, 254, 257, 258, 259, 262, 263, 265, 266], "int_multipli": 30, "intact": 224, "integ": [22, 164, 165, 170, 180, 187, 190, 196, 205, 212, 213, 222, 224, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 262, 265, 266], "integr": [13, 25, 178, 185, 197, 198], "intel": [192, 194, 195], "intellig": 217, "intend": [190, 212, 214, 218, 220, 222, 226, 234], "inter": 209, "interact": [168, 171, 190], "intercept": 263, "interchang": 213, "interest": [8, 179, 186, 212], "interfac": [194, 208, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "intermedi": [2, 6, 12, 19, 25, 169, 176, 181, 184, 185, 187, 190, 198, 203, 208, 209, 211, 224, 227, 228, 235, 239, 253], "intern": [13, 20, 25, 171, 185, 187, 198, 217, 229, 240, 243, 244, 248, 254], "interpol": [12, 216, 224, 235, 253], "interpret": [213, 227, 228], "introduc": [175, 197, 201, 202, 203, 208, 224, 229, 263], "invalid": [172, 213], "invoc": [250, 251, 252], "invok": [8, 9, 21, 175, 179, 181, 186, 187, 212, 217, 219, 227, 228, 248], "involv": [2, 12, 171, 184, 199, 204, 205, 206, 224, 232, 235, 239, 253, 262, 266], "io": [174, 226], "ip": 234, "ipynb": 234, "irrespect": [24, 197], "is_avail": [195, 196, 197, 198, 199, 200, 201, 203, 207, 224, 226, 228, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "is_bfloat16": 166, "is_float16": 166, "is_initi": [30, 161, 162, 166, 175, 180], "is_input_quant": [229, 242], "is_leaf_modul": 172, "is_output_quant": [229, 242], "is_quant": [229, 242], "is_sym": 222, "is_symmetr": [194, 222, 229, 242], "is_train": [224, 235, 237, 238, 239, 250, 252, 254, 256, 257, 258, 259, 260], "is_unsigned_symmetr": 171, "isinst": [170, 205, 206, 213], "islic": [196, 236], "isol": [193, 263], "issu": [20, 173, 199, 208, 209, 211, 219, 226, 232, 262, 266], "item": [166, 203, 205, 206, 224, 227, 228, 244, 247, 260, 261], "iter": [8, 9, 11, 17, 23, 24, 25, 29, 176, 183, 185, 192, 196, 197, 198, 203, 208, 212, 214, 218, 220, 224, 227, 235, 236, 237, 238, 239, 240, 241, 242, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "itertool": [196, 205, 206, 236], "its": [8, 12, 20, 30, 100, 158, 166, 174, 175, 190, 191, 197, 203, 205, 206, 212, 213, 214, 218, 221, 224, 226, 229, 234, 235, 237, 238, 240, 241, 242, 244, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 262, 263, 266], "itself": [211, 217, 218, 247, 256, 260], "j_": [161, 162, 163, 164, 165], "j_0": [161, 162, 163, 164, 165], "j_d": [161, 162, 163, 164, 165], "jaderberg": 217, "jan": 217, "jenkin": 193, "jian": 217, "jianhua": 217, "jit": [205, 206, 231], "job": [242, 243, 245, 246, 250, 251, 252, 256, 258, 259, 261], "join": [195, 196, 200, 201, 214, 218, 220, 224, 227, 240, 245, 246, 248, 253, 254, 255], "jointli": [246, 258, 259], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 247, 260, 261, 262, 263, 264, 265, 266, 267], "jupyt": [191, 208, 234], "just": [208, 221, 235, 239, 242, 243, 247, 248, 253, 258, 259, 260, 263], "k": [180, 203, 205, 206, 220, 255], "kaim": 217, "kd": 208, "keep": [172, 224, 225, 229, 238, 245, 262, 266], "kei": [166, 174, 195, 203, 205, 206, 222, 226, 236, 237, 238, 240, 244, 245, 246, 249, 250, 251, 252, 254, 257, 258, 259], "kept": [12, 224, 227, 228, 232], "kera": [11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 191, 193, 196, 198, 199, 200, 201, 208, 211, 212, 218, 224, 227, 228, 230, 234, 239, 240, 241, 245, 246, 247, 248, 249], "keraslayeroutput": [19, 211], "kernel": [30, 208, 213, 214, 218, 220, 248], "kernel_s": [20, 172, 173, 181, 200, 201, 227, 228, 248], "key_dim": [20, 243, 244], "keyword": [30, 173], "kl": 190, "kldivloss": 92, "know": [30, 235, 242, 243, 248, 253, 256], "knowledg": [197, 202, 203, 222], "known": [173, 263], "kullback": 190, "kuzmin": 217, "kwarg": [9, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 173, 174, 175, 177, 181, 208, 224, 227, 228, 244], "l1": [182, 188, 207, 226], "l1loss": 93, "l2": 226, "lab": [190, 265], "label": [193, 196, 198, 199, 203, 205, 206, 212, 218, 224, 227, 228, 235, 236, 239, 240, 241, 242, 245, 246, 248, 253, 255], "label_dataset": 212, "label_mod": [196, 198, 199, 218, 224, 227, 228, 239, 240, 245, 246, 248], "labeled_data": 198, "labeled_data_load": 198, "lambda": [25, 170, 174, 176, 184, 185, 196, 198, 199, 203, 208, 212, 213, 224, 227, 228, 239, 240, 241, 242, 243, 244, 248], "laptop": [190, 191], "larg": [178, 202, 204, 208, 215, 217, 218, 220, 228, 239, 262, 266], "larger": [213, 218, 220], "last": [12, 224], "lastli": 227, "latenc": [192, 208, 215, 225, 262, 266], "later": [187, 192, 194, 195, 208, 235, 242, 243, 247, 248, 256, 260], "latest": [174, 192, 194, 195, 208, 226], "launch": 234, "layer": [1, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 100, 168, 169, 170, 173, 175, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 213, 214, 215, 218, 219, 220, 221, 222, 225, 227, 228, 229, 230, 231, 233, 234, 236, 239, 243, 250, 251, 252, 262, 263, 265, 266], "layer1": [247, 260], "layer2": [247, 260], "layer_nam": [8, 21, 176, 179, 186, 203, 212], "layer_output_util": [0, 5, 18, 167, 211], "layern": [247, 260], "layernorm": [20, 98, 208, 243, 244], "layernorm1": [20, 244], "layernorm2": [20, 244], "layeroutpututil": [6, 19, 169, 211], "layers_to_exclud": 173, "layout": [160, 172], "lazili": 208, "lceil": [161, 162, 164, 165, 166, 263], "lead": [8, 10, 196, 207, 212, 232, 249, 257], "leaf": [172, 174, 197, 203, 208], "leakyrelu": [99, 208], "learn": [171, 187, 189, 190, 191, 192, 196, 200, 201, 204, 205, 206, 207, 208, 217, 225, 228, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 266], "learnabl": [161, 162, 197, 202, 203, 208], "learnedgrid": 208, "learnedgridquant": 171, "learning_r": [199, 228, 250, 251, 252, 256, 258, 259], "learning_rate_schedul": [250, 251, 252, 256, 258, 259], "learnt": 203, "least": [184, 236, 240, 254], "leav": [196, 206], "left": [161, 162, 163, 164, 165, 166, 180, 204, 213, 216, 221, 224, 235, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 263], "legaci": [194, 208], "leibler": 190, "len": [23, 172, 183, 196, 198, 203, 205, 206, 218, 224, 227, 228, 239, 243, 253, 255], "length": [170, 175, 213, 222], "leq": [161, 162, 163, 164, 165], "less": [190, 213, 214, 216, 224, 225, 229, 239, 253, 263, 265], "lesser": [235, 253], "let": [172, 203, 235, 239, 242, 243, 248, 253, 265], "level": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 171, 172, 174, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 191, 196, 197, 198, 199, 200, 201, 203, 204, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 224, 225, 226, 227, 228, 232, 236, 238, 239, 240, 243, 245, 246, 250, 251, 252, 254, 258, 259, 263], "lfloor": [161, 162, 163, 164, 165, 166], "liblapack": 194, "libpymo": [171, 194, 208], "libqnnhtp": 261, "libqnnmodeldlc": 261, "librari": [9, 178, 190, 227, 261], "lie": 213, "light": [235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260], "lightweight": 204, "like": [20, 171, 191, 211, 212, 217, 222, 223, 224, 225, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265], "limit": [203, 208, 235, 236, 237, 238, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "limitedbatchdataload": 203, "line": [227, 261], "linear": [3, 11, 14, 15, 23, 27, 30, 100, 170, 171, 172, 173, 175, 178, 183, 196, 199, 200, 201, 202, 208, 213, 214], "linear1": [170, 213], "linear_1": 213, "link": 234, "list": [2, 3, 6, 9, 12, 13, 14, 15, 17, 19, 20, 23, 25, 27, 28, 29, 59, 60, 61, 109, 110, 111, 164, 165, 166, 169, 170, 172, 173, 174, 175, 179, 182, 183, 184, 185, 186, 188, 196, 198, 199, 200, 201, 203, 205, 206, 207, 211, 212, 213, 214, 216, 218, 220, 222, 226, 227, 229, 235, 236, 239, 242, 244, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 266], "list_of_module_comp_ratio_pair": [17, 29, 214, 218, 220], "listen": 219, "lite": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "liter": [174, 226], "littl": [171, 217, 236, 240, 245, 246, 249, 250, 251, 252, 254, 257, 258, 259, 262, 266], "llama": [203, 208], "llama3": 203, "llamadecoderlay": [197, 203], "llamaforcausallm": 203, "llamamodel": [197, 203], "llm": [208, 265], "load": [22, 24, 172, 173, 187, 190, 191, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 214, 217, 218, 220, 224, 227, 228, 235, 236, 237, 238, 243, 261, 265], "load_adapt": [205, 206], "load_checkpoint": 187, "load_data": 243, "load_dataset": [196, 198, 199, 203, 205, 206, 207, 224], "load_encod": [196, 227, 228], "load_encodings_to_sim": [208, 211, 227, 228], "load_model": [195, 196, 200, 201, 211, 224, 227, 235, 236, 237, 238], "load_state_dict": 166, "loader": [2, 8, 23, 25, 26, 174, 182, 183, 184, 185, 188, 196, 198, 199, 207, 212, 224, 227, 228, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 258, 259, 260], "local": [207, 219, 234], "localresponsenorm": 101, "locat": [235, 239, 242, 247, 248, 253, 256, 260, 262, 266], "log": [173, 174, 212, 224, 226, 239, 242, 243, 245, 246], "log_2": 166, "log_dir": [242, 243, 245, 246], "log_fil": [174, 226], "log_input": 122, "log_prob": 48, "logdir": 243, "logger": 173, "logic": [2, 12, 30, 100, 175, 184, 208, 224, 235, 236, 237, 238, 250, 251, 252, 253, 254, 257, 258, 259, 260], "logit": [205, 206, 224, 228, 253, 255], "logsigmoid": 102, "logsoftmax": 103, "long": [203, 205], "longer": [171, 181, 194, 213, 222, 227, 228, 250, 251, 252, 265], "look": [20, 191, 222, 235, 239, 242, 243, 244, 247, 248, 253, 260, 261], "lookup": 244, "lookup_quant": [12, 224], "loop": [172, 228, 232, 235, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "lora": [176, 178, 190, 203, 208], "lora_a": [205, 206], "lora_a_lay": 206, "lora_add_lay": 206, "lora_alpha": 178, "lora_b": [205, 206], "lora_b_lay": 206, "lora_config": 178, "lora_dropout": 178, "lora_mul_lay": 206, "loraconfig": 178, "loralay": [205, 206], "lose": 221, "loss": [8, 10, 11, 21, 23, 158, 179, 182, 183, 186, 188, 191, 196, 198, 199, 205, 206, 207, 208, 217, 225, 227, 228, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 254, 257, 258, 259, 263], "loss_fn": [182, 188, 199, 205, 206, 207, 228, 242], "lost": [262, 263, 266], "low": [171, 180, 190, 202, 204, 208, 217, 222, 227, 248, 250, 252, 257], "lower": [10, 23, 177, 183, 190, 196, 201, 207, 213, 216, 224, 225, 232, 235, 239, 248, 253, 265], "lowest": 214, "lpbq": [170, 208, 213, 222], "lppool1d": 94, "lppool2d": 95, "lr": [199, 228], "lstm": [96, 208], "lstmcell": 97, "lsvrc": [235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "lt": 194, "lwc": 203, "m": [193, 194, 220, 234, 243], "mac": [17, 29, 214, 215, 217, 218, 220, 223, 224, 235, 250, 251, 252, 253], "machin": [189, 190, 204, 208, 217, 262, 266], "made": [172, 174, 190, 208, 226, 229, 253, 254, 257, 258, 259], "magnitud": 214, "mai": [2, 10, 13, 20, 25, 30, 158, 159, 160, 168, 171, 172, 175, 184, 185, 198, 201, 207, 208, 210, 212, 213, 217, 222, 224, 227, 235, 236, 237, 239, 242, 243, 247, 248, 249, 253, 256, 257, 260, 262, 266], "main": [199, 229], "maintain": [190, 198, 216, 217, 240, 254], "major": [217, 222], "make": [174, 175, 178, 190, 208, 226, 229, 230, 231, 242, 243, 244, 248, 256, 262, 265, 266], "make_dummy_input": 195, "makedir": [235, 239, 240, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "manag": [9, 194, 265], "mandatori": 211, "manditori": 20, "mani": [172, 196, 208, 215, 235, 239, 242, 243, 247, 248, 250, 251, 252, 253, 260], "manner": [13, 25, 185, 198, 201], "mantissa": [166, 170, 213], "mantissa_bit": [166, 170, 213], "manual": [17, 29, 161, 162, 171, 174, 198, 208, 214, 217, 218, 220, 222, 250, 251, 252], "manual_param": [214, 218, 220], "manual_se": 253, "manualmodeparam": [17, 29, 214, 218, 220], "manylinux_2_34_x86_64": 194, "map": [12, 13, 22, 30, 159, 164, 165, 173, 175, 190, 196, 198, 199, 203, 205, 206, 208, 212, 216, 222, 224, 227, 228, 229, 239, 240, 241, 242, 244, 248, 263], "map_loc": 211, "marginrankingloss": 105, "marku": 217, "mask": 30, "maskedadd": 30, "match": [166, 181, 187, 208, 212, 213, 214, 217, 218, 220, 221, 227, 228, 229, 232, 244], "math": [198, 224, 262, 266], "mathemat": [180, 190, 231, 235, 248, 253], "matmul": [7, 208], "matmul_8": 173, "matric": 205, "matrix": 248, "matter": [30, 260], "max": [8, 21, 161, 162, 166, 168, 171, 179, 186, 194, 208, 209, 210, 217, 222, 227, 238, 245, 246, 248, 261, 265], "max_epoch": [250, 251, 252, 256, 258, 259], "max_iter": [203, 205, 206], "maximum": [2, 12, 13, 21, 25, 164, 165, 166, 184, 185, 198, 212, 224, 235, 239, 240, 241, 242, 247, 248, 249, 253, 260, 263], "maxlen": [20, 243, 244], "maxpool1d": 106, "maxpool2d": 107, "maxpool3d": 108, "maxpooling2d": 242, "maxunpool1d": 109, "maxunpool2d": 110, "maxunpool3d": 111, "mdoel": 199, "mean": [26, 175, 196, 198, 199, 209, 224, 227, 229, 235, 236, 239, 242, 243, 244, 247, 248, 250, 251, 252, 253, 255, 256, 257, 260, 263], "meaning": 239, "measur": [2, 8, 12, 21, 29, 179, 184, 186, 190, 212, 214, 218, 220, 224, 235, 250, 251, 252, 253, 262, 266], "mechan": [22, 172, 180, 196, 226, 227, 228], "meet": [13, 25, 184, 185, 198, 215, 216, 224, 235, 239, 253, 262, 266], "member": 229, "memori": [17, 29, 160, 178, 190, 191, 208, 214, 215, 217, 218, 220, 221, 223, 225, 250, 251, 252, 262, 266], "memory_format": 160, "merg": 190, "messag": 239, "met": [2, 12, 184, 224, 235, 239, 253], "meta": 203, "metadata": [176, 203], "metapackag": 234, "method": [6, 13, 19, 22, 24, 25, 30, 100, 160, 169, 171, 172, 174, 175, 181, 184, 185, 187, 190, 196, 197, 198, 202, 205, 207, 211, 216, 217, 224, 226, 227, 228, 232, 237, 238, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 263], "methodologi": [262, 266], "metric": [17, 29, 196, 198, 199, 207, 212, 214, 218, 220, 224, 227, 228, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263, 266], "mha": [208, 243], "middl": [262, 266], "might": [2, 12, 184, 196, 208, 212, 222, 224, 232, 235, 236, 239, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 266], "migrat": [0, 167, 208, 227], "mimic": 265, "mimick": 171, "min": [8, 21, 161, 162, 168, 171, 179, 186, 194, 208, 209, 210, 222, 238, 245, 246, 248, 261, 265], "min_max": [9, 196, 208, 227, 235, 236, 238], "min_max_rang": [212, 247, 260], "miniconda": 193, "miniforg": 193, "minim": [182, 188, 190, 191, 201, 202, 207, 223, 224, 225, 235, 238, 239, 245, 246, 253, 258, 259, 263], "minima": 207, "minimum": [164, 165, 172, 197, 203, 207, 208, 247, 260, 263], "minmaxencodinganalyz": 166, "minor": [208, 222], "miou": [235, 253], "mish": 112, "mismatch": [180, 193, 209, 211, 227, 248], "miss": [20, 166, 173, 208, 261], "missing_kei": 166, "mistral": 208, "mix": [2, 12, 13, 25, 174, 184, 185, 192, 198, 208, 230, 234, 262, 266], "mixed_precis": [0, 5, 18, 167, 224, 226, 235, 239, 253], "mixed_precision_algo": [2, 174, 184, 224, 235, 239, 253], "mixed_preision_quant_model": 224, "mixedprecisionconfigur": [174, 226], "mixin": [30, 175], "mkdir": 234, "ml": [191, 217, 238, 243, 245, 246, 258, 259], "mmp": 225, "mmp_log": [174, 226], "mnist": [214, 218, 220], "mnist_after_bn_re_estimation_qat_range_learn": 242, "mnist_torch_model": 214, "mnist_trained_on_gpu": [214, 218, 220], "mnt": 193, "mobil": [190, 191], "mobilenet": [190, 196, 199, 207], "mobilenet_v2": [195, 196, 198, 199, 200, 201, 207, 224, 226, 227, 228], "mobilenet_v2_weight": [196, 200, 201, 207, 224, 227], "mobilenetv2": [196, 198, 199, 200, 201, 227, 228], "mobilenetv2_1": [196, 200, 201], "mode": [13, 17, 22, 25, 29, 172, 181, 185, 187, 198, 208, 214, 218, 220, 227, 229, 250, 251, 252], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 229, 233, 234, 261, 263, 264, 265, 267], "model_after_qat": [243, 245, 246], "model_config": 203, "model_id": [203, 205, 206], "model_input": [173, 242], "model_or_pipelin": [196, 207], "model_output": 242, "model_prepar": [0, 18, 167, 200, 201, 208, 212, 244, 253, 254, 256, 257, 258, 259, 260], "model_prepare_requir": [25, 185, 198], "model_preparer_elementwise_add_exampl": 172, "model_preparer_functional_exampl": 172, "model_preparer_reused_exampl": 172, "model_preparer_subclassed_model_with_functional_lay": 20, "model_preparer_two_subclassed_lay": 20, "model_torch": 211, "model_transform": 172, "model_valid": [0, 167], "model_weights_in_correct_ord": 244, "modelcompressor": [17, 29, 214, 218, 220, 250, 251, 252], "modeling_llama": 203, "modeling_opt": [205, 206], "modelprepar": [20, 172, 244, 253, 254, 257, 258, 259, 260], "modelproto": [3, 4, 6, 8, 9, 200, 201, 211, 212, 227], "modelvalid": 173, "modelwithconsecutivelinearblock": 197, "modelwithelementwiseaddop": 172, "modelwithfunctionallinear": 173, "modelwithfunctionalrelu": 172, "modelwithlinear": 197, "modelwithnontorchfunct": 172, "modelwithoutfunctionallinear": 173, "modelwithoutreusednod": 173, "modelwithreusednod": 173, "modelwithreusedrelu": 172, "modif": [253, 254, 257, 258, 259], "modifi": [22, 24, 172, 181, 187, 196, 197, 200, 201, 205, 206, 208, 211, 221, 224, 227, 228, 235, 237, 238, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "modul": [2, 7, 12, 17, 23, 24, 25, 26, 27, 28, 29, 30, 100, 166, 168, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 220, 221, 224, 226, 227, 228, 230, 231, 235, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "module_cl": 30, "module_classes_to_exclud": 172, "module_nam": [205, 206], "module_to_exclud": 172, "modulecompratiopair": [17, 29, 214, 218, 220], "moduledict": [30, 171, 175, 181, 227, 228], "modulelist": [30, 171, 175, 181, 227, 228], "modules_to_exclud": [25, 172, 182, 185, 188, 198, 207], "modules_to_ignor": [17, 29, 179, 186, 212, 214, 218, 220, 250, 251, 252], "momentum": [199, 200, 201], "monitor": 212, "monoton": [17, 29, 214, 216, 218, 220], "more": [17, 22, 23, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 173, 175, 178, 183, 184, 187, 190, 196, 201, 208, 212, 214, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 232, 235, 239, 242, 243, 244, 247, 248, 253, 256, 260, 261, 262, 263, 265, 266], "most": [180, 190, 194, 198, 229, 243, 263], "move": [228, 234], "movement": 208, "movi": 243, "mp": [174, 226], "mp_configur": 226, "mse": [8, 10, 21, 171, 179, 182, 186, 188, 208, 212, 263], "mseloss": 104, "much": [221, 250, 251, 252, 262, 266], "mul_scal": 206, "multi": [208, 243], "multigpu": 208, "multiheadattent": [20, 208, 243, 244], "multilabelmarginloss": 113, "multilabelsoftmarginloss": 114, "multimarginloss": 115, "multipl": [17, 25, 27, 28, 29, 160, 169, 172, 173, 174, 175, 178, 181, 185, 187, 198, 200, 201, 208, 211, 213, 214, 217, 218, 220, 226, 227, 228, 247, 260, 263], "multipli": [175, 215, 217, 218, 220, 223, 235, 253], "must": [20, 160, 166, 170, 173, 175, 196, 197, 198, 199, 203, 207, 212, 213, 215, 221, 227, 229, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 265], "mutual": [166, 170, 213], "my_functional_model": 20, "myfunctionalmodel": 20, "n": [8, 13, 21, 179, 180, 186, 198, 212, 213, 220], "nagel": 217, "name": [2, 8, 12, 17, 20, 21, 30, 168, 169, 174, 175, 178, 179, 181, 184, 186, 187, 193, 196, 200, 201, 203, 205, 206, 208, 210, 211, 212, 218, 219, 222, 224, 226, 227, 228, 235, 236, 237, 238, 242, 244, 247, 260, 261, 263], "name_": [8, 21, 179, 186, 212, 247, 260], "name_to_quantizer_dict": [2, 12, 174, 184, 224], "named_modul": [205, 206], "named_paramet": 205, "namedtupl": 166, "namespac": [167, 171, 183, 184, 185, 186, 187, 188], "naming_schem": [169, 211], "namingschem": [169, 211], "nativ": [175, 208], "navig": 234, "na\u00efv": 202, "nconv": 200, "ndarrai": [1, 2, 6, 8, 9, 10, 12, 196, 198, 207, 211, 212, 224, 227, 236, 244], "nearest": [13, 21, 22, 25, 185, 187, 196, 198, 212, 227, 228, 236, 239, 240, 243, 245, 246, 248, 249, 254, 257], "necessari": [158, 159, 160, 181, 193, 200, 212, 214, 218, 219, 220, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "necessarili": [224, 235, 239, 253], "necessit": 194, "need": [8, 9, 17, 19, 20, 21, 22, 23, 24, 29, 169, 174, 179, 183, 186, 190, 194, 196, 197, 199, 200, 201, 203, 207, 208, 211, 212, 213, 214, 218, 220, 222, 224, 225, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "neg": [148, 149, 164, 165, 235, 242, 243, 248, 253], "negat": [240, 254], "nest": 208, "net": [234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], "network": [20, 175, 190, 208, 215, 216, 217, 219, 228, 232, 241, 243, 244, 248, 255, 263], "neural": [190, 215, 217, 228, 232, 235, 241, 248, 253, 255, 263], "neuron": 190, "new": [15, 20, 160, 161, 162, 171, 172, 187, 191, 194, 200, 204, 205, 208, 213, 224, 226, 230, 231, 240, 244, 245, 246, 248, 249, 253, 260], "new_empti": 160, "next": [196, 201, 208, 227, 232, 235, 237, 239, 242, 243, 248, 253, 256, 263], "next_conv_weight": 201, "nfolded_model": 200, "night": [236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "nllloss": 116, "nllloss2d": 117, "nmodel": [200, 201], "nn": [0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 170, 171, 172, 173, 174, 177, 181, 196, 197, 198, 199, 205, 206, 207, 208, 210, 212, 213, 214, 218, 220, 224, 226, 227, 228, 231, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "nncf": 190, "nnext": 201, "no_grad": [173, 181, 195, 196, 197, 205, 206, 207, 224, 227, 228, 253, 254, 255, 257, 258, 259, 260], "node": [22, 25, 172, 181, 184, 185, 187, 190, 198, 200, 201, 207, 208, 227, 228, 231, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 253, 254, 257, 258, 259, 262, 265, 266], "noffset": 180, "nois": [201, 212, 223, 228, 229, 265], "noisi": [242, 256], "non": [9, 172, 174, 178, 182, 188, 197, 203, 207, 208, 219, 227, 241, 255, 261, 263, 265], "none": [2, 6, 8, 9, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 59, 60, 61, 71, 79, 80, 96, 97, 100, 109, 110, 111, 123, 124, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 207, 210, 211, 212, 213, 214, 218, 219, 220, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "norm": [15, 196, 201, 208, 212, 224, 239, 249], "normal": [15, 190, 196, 198, 200, 208, 212, 224, 227, 236, 255], "notabl": 222, "note": [2, 8, 12, 13, 20, 21, 22, 24, 25, 171, 179, 180, 181, 182, 184, 185, 186, 187, 188, 194, 197, 198, 207, 211, 212, 213, 214, 218, 219, 220, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "note1": [235, 253, 256, 260], "note2": [235, 253, 256, 260], "notebook": [208, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259], "noth": [17, 29, 214, 218, 220, 262, 266], "notic": [168, 208, 210], "notimplementederror": 30, "now": [20, 172, 173, 180, 181, 196, 200, 201, 208, 222, 224, 227, 228, 235, 237, 238, 239, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "np": [1, 2, 9, 10, 20, 194, 196, 198, 207, 212, 218, 224, 227, 236, 239, 244], "nprepared_model": [200, 201], "nprev": 201, "nscale": 180, "nullptr": 208, "num": [164, 165], "num_batch": [8, 11, 21, 23, 26, 182, 183, 188, 196, 197, 198, 199, 207, 212, 227, 236, 237, 240, 241, 242, 247, 248, 254, 255, 256, 257, 260], "num_bias_correct_sampl": 257, "num_calibration_sampl": [196, 198, 199, 224, 227, 228, 236], "num_candid": [10, 182, 188, 207], "num_channel": 222, "num_class": 212, "num_comp_ratio_candid": [17, 29, 214, 218, 220, 250, 251, 252], "num_epoch": [199, 208], "num_eval_sampl": [196, 224, 227, 236], "num_head": [20, 243, 244], "num_iter": [1, 24, 176, 196, 197, 203, 208, 218, 224, 239], "num_of_sampl": 198, "num_quant_sampl": 257, "num_reconstruction_sampl": [29, 214, 250, 252], "num_sampl": [2, 174, 184, 197, 212, 224, 241, 242, 253, 255], "num_samples_for_phase_1": [13, 25, 185, 198], "num_samples_for_phase_2": [13, 25, 185, 198], "num_step": [164, 165], "num_word": 243, "num_work": [196, 198, 199, 207, 235, 236, 237, 238, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "number": [1, 2, 8, 10, 11, 13, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 164, 165, 166, 170, 172, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 196, 197, 198, 199, 203, 204, 207, 208, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266], "numer": [169, 211], "numpi": [177, 194, 195, 196, 198, 212, 218, 224, 227, 235, 236, 237, 238, 244], "numpy_help": [200, 201], "nupi": [12, 224], "nvidia": [190, 192, 194, 195], "o": [194, 195, 196, 200, 201, 208, 214, 218, 220, 224, 227, 235, 236, 239, 240, 241, 242, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "object": [1, 2, 7, 8, 9, 12, 13, 22, 24, 25, 30, 158, 159, 160, 166, 168, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 196, 197, 198, 203, 207, 208, 209, 210, 211, 212, 213, 214, 218, 220, 224, 225, 226, 227, 228, 235, 241, 242, 247, 253, 254, 255, 257, 258, 259, 260, 262, 263, 265, 266], "observ": [9, 30, 166, 175, 181, 212, 217, 227, 228, 248, 256, 263], "obtain": [6, 169, 212, 215, 222, 261], "obvious": [214, 218, 220], "occur": [168, 210, 222], "occurr": [8, 21, 179, 186, 212, 214], "oct": 217, "off": [11, 22, 23, 183, 193, 196, 199, 224, 227, 228, 235, 239, 253, 262, 266], "offer": [8, 179, 186, 194, 198, 209, 212, 241, 255], "offset": [8, 21, 30, 71, 161, 162, 163, 164, 165, 179, 180, 186, 194, 208, 212, 222, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260, 261, 263, 265], "offset_": [161, 162, 163, 164, 165], "often": [198, 200, 201, 217], "older": [194, 226], "omit": [216, 229], "omniqu": [0, 167, 197, 208], "onc": [30, 160, 173, 180, 208, 214, 217, 226, 228, 230, 231, 238, 243, 245, 246, 250, 251, 252, 257, 258, 259, 261, 262, 265, 266], "one": [9, 23, 25, 27, 172, 173, 174, 180, 181, 183, 184, 185, 187, 194, 196, 197, 198, 200, 203, 205, 206, 208, 213, 214, 217, 218, 219, 220, 222, 226, 227, 228, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 265], "ones": [203, 263], "ones_lik": [161, 162], "onli": [2, 8, 9, 12, 22, 158, 159, 160, 164, 165, 168, 170, 171, 172, 174, 175, 177, 179, 180, 181, 184, 186, 187, 192, 193, 194, 196, 200, 204, 205, 206, 207, 208, 210, 211, 212, 213, 217, 218, 219, 221, 222, 224, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 266], "onnx": [0, 1, 2, 3, 5, 6, 8, 9, 25, 167, 169, 174, 181, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 207, 208, 210, 211, 212, 213, 222, 224, 226, 227, 228, 229, 231, 234, 261, 262, 263, 265, 266], "onnx_data": [196, 236], "onnx_data_gener": 227, "onnx_encoding_path": 227, "onnx_export_arg": [25, 169, 181, 185, 187, 198, 211, 227, 228], "onnx_file_nam": 231, "onnx_model": [195, 212], "onnx_output": 177, "onnx_util": 211, "onnxexportapiarg": [25, 169, 181, 185, 187, 198, 211, 227, 228], "onnxmodel": [8, 212], "onnxruntim": [9, 177, 193, 194, 196, 208, 211, 212, 227, 235, 236, 237, 238], "onnxsim": [196, 200, 201, 211, 212, 224, 227, 235, 236, 237, 238], "onto": 265, "op": [2, 9, 11, 12, 15, 17, 22, 23, 25, 173, 181, 183, 184, 185, 187, 196, 198, 200, 208, 218, 227, 228, 229, 235, 236, 237, 238, 240, 242, 243, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263], "op_list": [229, 242], "op_typ": [2, 7, 184, 224, 229, 235, 242, 253], "op_type_map": 173, "open": [190, 242], "opencv": 208, "oper": [7, 17, 20, 30, 171, 172, 173, 175, 190, 195, 197, 201, 202, 203, 207, 208, 211, 218, 224, 227, 228, 229, 231, 232, 235, 238, 239, 244, 245, 246, 253, 258, 259, 262, 263, 265, 266], "oppos": [237, 249, 257], "opset": [177, 208], "opset_vers": [177, 181, 187, 227, 228], "opt": [205, 206, 239], "optim": [1, 2, 10, 11, 12, 13, 23, 24, 25, 29, 166, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 214, 217, 219, 224, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266], "optimized_accuraci": [198, 255], "option": [2, 8, 9, 11, 12, 13, 17, 21, 22, 23, 24, 25, 26, 29, 30, 161, 162, 163, 164, 165, 166, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 194, 196, 197, 198, 199, 207, 208, 212, 213, 214, 218, 220, 224, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263], "optlearnedpositionalembed": [205, 206], "optmiz": [235, 253], "orang": 221, "order": [30, 100, 173, 175, 209, 213, 214, 226, 228, 229, 230, 231, 236, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 256, 258, 259, 260, 261, 265], "org": [172, 194, 197, 203, 208, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "org_top1": 224, "organ": [190, 264], "origin": [17, 20, 29, 30, 171, 172, 175, 182, 188, 190, 202, 207, 208, 211, 212, 214, 215, 216, 218, 219, 220, 224, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 266], "original_model": [20, 244], "original_model_weight": 244, "ort": [9, 177, 196, 227, 235, 236, 237, 238], "ort_disable_al": 177, "oscil": 199, "other": [160, 170, 171, 172, 174, 191, 194, 195, 196, 197, 203, 204, 205, 206, 208, 213, 216, 226, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264], "otherwis": [13, 161, 162, 164, 165, 170, 173, 181, 187, 198, 201, 213, 222, 227, 228, 232, 236, 237, 238, 240, 241, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 262, 266], "our": [178, 242, 243, 256], "out": [8, 20, 21, 22, 161, 162, 163, 164, 165, 166, 172, 179, 180, 181, 186, 187, 194, 208, 212, 227, 228, 233, 244], "out1": [20, 226, 244], "out2": 226, "out3": 226, "out_": [161, 162, 163, 164, 165], "out_channel": [170, 213], "out_featur": [30, 171, 175, 181], "outlier": [212, 263], "outlin": [204, 215], "output": [2, 6, 7, 8, 10, 12, 13, 17, 19, 20, 21, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 212, 213, 214, 217, 218, 220, 221, 222, 224, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263], "output_bw": [13, 25, 185, 198], "output_dim": [20, 243, 244], "output_dir": 261, "output_dir_path": 261, "output_dlc": 261, "output_encod": 30, "output_nam": [177, 181, 187, 196, 200, 224, 227, 228, 235, 236, 237, 238], "output_op_nam": [12, 17, 218, 224], "output_path": [176, 203, 261], "output_qtzr": 30, "output_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 181, 184, 224, 227, 228], "output_s": [59, 60, 61, 109, 110, 111], "output_shap": 244, "outsid": 229, "over": [8, 20, 25, 164, 165, 175, 180, 185, 198, 202, 212, 214, 216, 217, 218, 220, 224, 263], "overal": [215, 216, 232], "overfit": 207, "overhead": [239, 250, 252, 253, 263], "overlin": [162, 165], "overload": [9, 164, 165, 181, 227, 228], "overrid": [25, 160, 172, 181, 185, 187, 198, 227, 228, 253, 254, 257, 258, 259], "overridden": [30, 175, 229], "overtax": [262, 266], "overview": [171, 223, 264], "overwri": [227, 228], "overwriiten": [227, 228], "overwritten": [171, 206, 227], "own": [198, 212, 265], "p": [235, 253], "p1": 226, "p2": 226, "pack": 233, "packag": [0, 167, 192, 208, 234], "pad": [20, 172, 173, 181, 200, 201, 227, 228, 242], "pad_sequ": 243, "page": [191, 193, 194, 195, 213, 215, 262, 263, 266], "pair": [3, 14, 17, 27, 29, 199, 200, 214, 218, 220], "pairwis": 203, "pairwisedist": 119, "pandoc": 193, "parallel": 228, "param": [2, 11, 12, 17, 21, 23, 29, 30, 100, 173, 174, 175, 179, 182, 183, 184, 186, 188, 196, 200, 201, 205, 207, 208, 212, 213, 214, 218, 220, 222, 224, 225, 226, 235, 237, 238, 240, 241, 242, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 265], "param_bitwidth": [196, 222, 227, 228], "param_bw": [13, 25, 185, 198], "param_bw_override_list": [23, 183, 196], "param_encod": [171, 222], "param_nam": [8, 21, 179, 186, 212], "param_name_": [8, 21, 179, 186, 212, 247, 260], "param_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 175, 181, 213, 227, 228], "param_typ": [9, 195, 196, 227, 235, 236, 237, 238], "paramet": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 217, 218, 220, 222, 223, 224, 226, 227, 229, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266], "parameter": [9, 227], "parameter_quant": [2, 12, 174, 184, 224], "parent": [30, 100, 175, 208, 224], "pareto": [2, 12, 13, 25, 184, 185, 198, 235, 239, 253], "pareto_front": 198, "pareto_front_list": [224, 235, 253], "pars": [23, 181, 183, 187, 196, 227, 228], "part": [8, 20, 21, 179, 186, 212, 213, 217, 227, 265], "partial": [25, 172, 185, 198, 208, 227, 228], "particular": [170, 173, 213, 224, 229, 235, 239, 253], "pass": [2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 100, 166, 169, 171, 172, 173, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 198, 199, 205, 206, 207, 208, 211, 212, 213, 218, 219, 224, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 266], "pass_calibration_data": [196, 199, 227, 228, 235, 237, 238, 240, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "past": [208, 234], "patch": 222, "path": [2, 8, 9, 11, 12, 13, 17, 21, 22, 23, 25, 29, 168, 172, 174, 176, 179, 181, 183, 184, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 214, 218, 220, 224, 226, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], "path_to_imagenet": [224, 227, 228], "pathlik": [227, 228], "pattern": [208, 217], "pb": 261, "pcq": [8, 21, 179, 186, 212], "pcq_quantsim_config": 248, "pdf": [8, 21, 179, 186, 208, 212], "peft": [0, 167, 176, 203, 205, 206, 208], "peft_model": 178, "peft_model_id": [205, 206], "peftmixedmodel": 178, "pend": [24, 197], "pendyam": 217, "per": [7, 8, 17, 21, 29, 169, 170, 175, 179, 186, 190, 199, 200, 201, 202, 207, 208, 209, 211, 214, 218, 219, 220, 222, 224, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263], "per_block": 222, "per_block_int_scal": 222, "per_channel": 222, "per_channel_quant": [175, 222, 229, 242, 248], "per_layer_mse_loss": [212, 247, 260], "per_layer_quant_dis": [212, 247, 260], "per_layer_quant_en": [212, 247, 260], "per_sample_weight": 71, "per_tensor": 222, "percentag": [190, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "perform": [2, 3, 4, 8, 12, 13, 16, 21, 23, 25, 26, 28, 30, 100, 161, 162, 166, 175, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 222, 227, 228, 235, 236, 237, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 260, 262, 263, 264, 265, 266], "perform_per_layer_analysis_by_disabling_quant": [8, 212], "perform_per_layer_analysis_by_disabling_quant_wrapp": [21, 179, 186, 212], "perform_per_layer_analysis_by_enabling_quant": [8, 212], "perform_per_layer_analysis_by_enabling_quant_wrapp": [21, 179, 186, 212], "perhap": [235, 242, 247, 248, 253, 256, 260], "period": [11, 23, 183, 196], "perman": 208, "persist": 166, "person": 190, "perspect": [197, 203, 235, 248, 253], "phase": [2, 12, 13, 25, 174, 184, 185, 198, 217, 235, 239, 253], "phase1": [2, 12, 184, 224, 235, 253], "phase1_optim": [2, 12, 184, 224, 235, 253], "phase2": 184, "phase2_revers": 184, "phi": 208, "phone": [190, 191], "php": [234, 235, 239, 242, 247, 248, 253, 256, 260], "pick": [2, 12, 20, 184, 215, 216, 224, 235, 239, 253], "pickl": [17, 29, 214, 218, 220], "pictur": [236, 237, 238, 239, 240, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "piec": [20, 172], "pin": [193, 208], "pin_memori": [160, 172, 253], "pink": 221, "pinpoint": 212, "pip": [194, 195, 208, 219, 234], "pipelin": [25, 185, 198, 208, 211, 232, 243, 245, 246, 263, 265], "piptool": 193, "pitr": 217, "pixelshuffl": 120, "pixelunshuffl": 121, "place": [2, 4, 12, 22, 23, 24, 28, 181, 183, 184, 187, 196, 197, 201, 208, 224, 227, 228, 229, 235, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "place_model": [205, 206], "placehold": [205, 206], "placement": [208, 235, 236, 237, 238, 250, 251, 252, 253, 254, 257, 258, 259, 260], "plai": 248, "plan": 265, "platform": [189, 190, 194, 212, 236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259], "pleas": [171, 173, 178, 181, 187, 194, 208, 212, 214, 218, 220, 227, 228, 235, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 256, 260, 261], "plot": [2, 12, 168, 184, 210, 212, 224, 235, 239, 247, 253, 260], "pmatrix": [161, 162, 163, 164, 165], "point": [2, 8, 12, 20, 21, 30, 158, 159, 170, 171, 179, 184, 186, 187, 190, 200, 201, 208, 212, 213, 222, 224, 225, 232, 235, 237, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 265, 266], "pointer": [239, 242, 243, 247, 248, 260], "poissonnllloss": 122, "pool": [239, 240, 242, 248, 249], "pop": 244, "popul": 222, "popular": 204, "port": [208, 219], "portabl": 190, "portion": 20, "pos_emb": [20, 244], "posit": [20, 148, 149, 164, 165, 242, 243, 244], "possibl": [2, 3, 12, 13, 20, 22, 25, 173, 177, 181, 184, 185, 187, 198, 200, 212, 213, 216, 224, 227, 228, 229, 230, 231, 232, 235, 239, 241, 244, 253, 255, 262, 266], "post": [13, 25, 185, 190, 192, 198, 201, 208, 212, 217, 222, 227, 228, 236, 237, 238, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 262, 263, 266], "post_training_tf": [8, 11, 21, 22, 23, 168, 179, 183, 186, 196, 198, 208, 210, 212, 222, 227, 228, 235, 239, 240, 242, 243, 245, 248, 249, 253, 256, 257], "post_training_tf_enhanc": [8, 11, 13, 21, 22, 23, 25, 179, 181, 183, 185, 186, 187, 196, 198, 212, 222, 227, 228, 235, 237, 239, 242, 243, 247, 253, 254, 256, 257, 258, 260], "potenti": [219, 242, 256], "power": [190, 208, 222, 225, 232], "pp": 217, "practic": [217, 235, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 255, 260], "pre": [194, 197, 200, 203, 207, 208, 209, 211, 212, 214, 217, 223, 228, 234, 236], "preced": [199, 202, 221], "precis": [2, 12, 13, 25, 161, 162, 163, 164, 165, 166, 174, 184, 185, 190, 192, 198, 208, 222, 223, 232, 234, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 254, 256, 257, 258, 259, 260], "precomput": [205, 227], "precursor": 200, "pred": [218, 224, 239, 253], "pred_label": [196, 198, 224, 227, 236], "pred_prob": [196, 198, 224, 227, 236], "predefin": [241, 255], "predict": [12, 190, 211, 212, 218, 224, 227, 239, 247], "prefer": [171, 194, 213, 265], "prefix": [11, 22, 23, 175, 181, 183, 187, 196, 227, 228], "prelu": [118, 208], "prepar": [20, 24, 25, 172, 178, 185, 197, 198, 200, 201, 208, 224, 230, 231, 241, 262, 264, 266], "prepare_model": [20, 172, 200, 201, 212, 244, 253, 254, 256, 257, 258, 259, 260], "prepared_model": [172, 200, 201, 212], "prepend": [175, 234], "preprocess": [196, 198, 199, 218, 224, 227, 228, 236, 239, 240, 243, 245, 246, 248], "preprocess_input": [196, 198, 199, 218, 224, 227, 228, 239, 240, 245, 246, 248, 249], "prerequisit": 219, "presenc": 228, "present": [169, 171, 173, 178, 211, 213, 222, 244, 256], "preserv": [166, 172, 196, 208], "preserve_format": 160, "preset": 224, "pretrain": [196, 198, 199, 200, 201, 212, 224, 226, 227, 228, 235, 236, 237, 238, 239, 240, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263], "pretti": [214, 218, 220], "prev": 201, "prev_conv_weight": 201, "prevent": [171, 172, 206, 208, 214], "previou": [2, 12, 17, 29, 180, 184, 190, 214, 215, 218, 220, 224, 232, 235, 239, 253, 257, 261], "print": [30, 164, 165, 171, 172, 173, 175, 180, 181, 194, 195, 196, 198, 199, 200, 201, 212, 214, 218, 220, 224, 227, 228, 235, 236, 237, 238, 242, 243, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "prior": [2, 12, 184, 208, 222, 224, 235, 239, 253, 254, 257, 258, 259], "privileg": 234, "probabl": 190, "problem": [172, 208, 232, 262, 266], "problemat": [172, 232], "proce": [13, 25, 185, 198, 200, 262, 266], "procedur": [208, 216, 219, 227, 237, 249, 250, 252, 257], "proceed": [200, 201, 224, 235, 237, 238], "process": [190, 198, 200, 211, 213, 214, 216, 217, 218, 226, 227, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 253, 254, 257, 258, 259, 263, 265], "processor": [190, 192, 194, 195], "produc": [13, 25, 158, 159, 168, 172, 185, 190, 198, 209, 210, 212, 216, 222, 224, 235, 247, 248, 253, 260, 263], "product": [190, 191, 215], "profil": [174, 192, 193, 224, 261], "progbar": [240, 245, 246, 248, 249], "progbar_stat_upd": [240, 245, 246, 248, 249], "progress": 219, "project": 190, "prone": [198, 226], "pronounc": 225, "propag": [208, 221, 226], "propagate_encod": [25, 181, 185, 187, 198, 227, 228], "proper": 208, "properli": [161, 162, 208, 211], "properti": [166, 171], "protobuf": 193, "protocol_buffers_python_implement": 193, "provid": [0, 2, 5, 8, 9, 12, 18, 20, 21, 23, 25, 30, 166, 167, 171, 173, 178, 179, 181, 183, 184, 185, 186, 187, 190, 192, 193, 196, 198, 200, 205, 207, 208, 212, 213, 215, 216, 217, 218, 219, 222, 224, 226, 227, 228, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "proxi": 172, "prune": [29, 190, 208, 215, 216, 218, 220, 221, 223, 234, 251], "pt_model": [196, 200, 201, 224, 227, 235, 236, 237, 238], "pth": [22, 181, 187, 211, 214, 218, 220, 227, 228], "ptq": [13, 25, 185, 190, 191, 192, 197, 198, 201, 202, 203, 208, 212, 217, 228, 241, 255, 262, 263, 265, 266], "public": [0, 167, 208, 227], "publish": 208, "pure": [20, 231], "purpos": [190, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "put": [184, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "py38": 194, "pypi": [195, 208], "pyproject": 193, "pytest": 193, "python": [20, 190, 192, 194, 195, 208], "python3": [193, 194, 208, 234], "pythonpath": [211, 234], "pytorch": [0, 25, 167, 169, 172, 173, 175, 180, 181, 182, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 218, 220, 224, 226, 227, 228, 229, 234, 240, 241, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266], "q": [30, 158, 159, 160, 161, 162, 164, 165, 166, 171, 175, 180, 205, 206, 263], "q_": 263, "q_modul": 171, "q_output": 30, "qadd": 175, "qairt": 261, "qat": [11, 23, 183, 190, 192, 196, 199, 205, 206, 208, 232, 234, 235, 238, 243, 248, 253, 262, 263, 265, 266], "qat2": 208, "qc": 208, "qc_quantize_op": 208, "qcquantizeop": [2, 208, 224], "qcquantizewrapp": [14, 171, 199, 208], "qdo": 190, "qdq": [162, 166, 205, 208, 262, 265, 266], "qlinear": [30, 171, 175], "qmax": [161, 162, 164, 165, 180, 181, 227, 228], "qmin": [161, 162, 164, 165, 180, 181, 227, 228], "qmodul": 171, "qmul": 175, "qmult": 30, "qnn": [192, 208, 225, 248, 249, 261, 265], "qol": 208, "qsim": [24, 197, 242], "qtype": [9, 227], "qtzr": [180, 205], "quad": [161, 162, 163, 164, 165], "qualcomm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 262, 263, 264, 265, 266, 267], "qualiti": [235, 253], "quant": [2, 8, 9, 13, 21, 22, 23, 25, 179, 181, 182, 183, 185, 186, 187, 188, 196, 198, 207, 208, 212, 224, 227, 228, 234, 235, 236, 239, 240, 242, 243, 245, 246, 248, 249, 253, 254, 255, 256, 257, 258, 259], "quant_analyz": [0, 5, 18, 167, 171, 212, 247, 260], "quant_analyzer_result": 212, "quant_dequ": 158, "quant_schem": [8, 9, 13, 21, 22, 25, 168, 179, 181, 185, 186, 187, 194, 195, 196, 197, 198, 199, 203, 207, 210, 212, 222, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "quant_sim": [176, 203, 226], "quant_sim_model": [187, 227], "quant_stats_visu": [168, 210], "quant_wrapp": 171, "quantanalyz": [8, 21, 171, 179, 186, 208, 209], "quantiz": [0, 1, 2, 5, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 196, 197, 199, 200, 201, 203, 206, 207, 208, 210, 211, 215, 217, 219, 224, 225, 226, 227, 229, 231, 233, 234, 241, 244, 250, 251, 252, 255], "quantizablemultiheadattent": 208, "quantizaiton": 7, "quantization_overrid": 261, "quantization_tf": 194, "quantizationdatatyp": [2, 12, 13, 22, 25, 171, 174, 181, 184, 185, 187, 198, 224, 227, 228, 235, 239, 253], "quantizationmixin": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 205, 206], "quantizationmod": 194, "quantizationsim": [235, 237, 238, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "quantizationsimmodel": [1, 2, 7, 8, 9, 10, 12, 13, 14, 21, 22, 24, 25, 30, 168, 170, 171, 174, 176, 177, 179, 180, 181, 182, 185, 186, 187, 188, 195, 196, 197, 198, 199, 203, 205, 207, 208, 210, 211, 212, 213, 222, 224, 226, 227, 228, 229, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263], "quantizationsimmodelv1": 171, "quantizationsimmodelv2": 171, "quantized_": [196, 197, 203, 207], "quantized_callback": [242, 243, 245, 246], "quantized_dlc": 261, "quantized_linear": 30, "quantized_mobilenet_v2": [196, 199, 227, 228], "quantized_mobilenetv2": 228, "quantized_model": [181, 227, 228], "quantized_repr": [30, 158, 159, 160], "quantizedadd": 175, "quantizedconv2d": [171, 175, 181, 213, 227, 228], "quantizedequant": [158, 171, 175, 180, 181, 194, 205, 213, 227, 228], "quantizedlinear": [30, 171, 175, 181, 213], "quantizedmaskedadd": 30, "quantizedmultipli": [30, 175], "quantizedoptlearnedpositionalembed": [205, 206], "quantizedrelu": 171, "quantizedsoftmax": 175, "quantizedtensor": [30, 158, 160, 161, 180], "quantizelinear": [177, 208], "quantizer_arg": 222, "quantizer_config": [12, 224], "quantizer_group": [2, 12, 174, 184, 224], "quantizer_info": [2, 224], "quantizer_nam": [12, 224], "quantizerbas": [30, 175, 180, 206], "quantizergroup": [2, 12, 13, 25, 174, 184, 185, 198, 224], "quantparam": 257, "quantschem": [8, 9, 11, 13, 21, 22, 23, 25, 168, 179, 181, 183, 185, 186, 187, 195, 196, 197, 198, 199, 203, 207, 208, 210, 212, 224, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "quantsim": [0, 5, 6, 8, 11, 18, 19, 21, 23, 167, 168, 169, 171, 174, 178, 179, 183, 186, 190, 195, 196, 197, 199, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 222, 224, 225, 226, 228, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 253, 254, 256, 257, 258, 259, 262, 265, 266], "quantsim_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 261, 262, 263, 264, 265, 266, 267], "quantsim_layer_output": 211, "quantsim_layer_output_util": 211, "quantsimmodel": [197, 203, 207], "quatiz": 265, "quic": [190, 194, 234], "quick": [180, 191, 192, 194, 227, 244, 248, 250, 252], "quickli": [191, 235, 239, 247, 248, 253, 260], "qwa": 208, "qwen": 203, "qwen2": [203, 208], "r": [2, 8, 12, 21, 178, 179, 184, 186, 193, 212, 224, 248], "radic": [262, 266], "rais": [20, 30, 166, 198, 224, 244], "rand": [173, 197, 211, 212, 253, 254, 256, 257, 258, 259, 260], "randint": 203, "randn": [30, 159, 160, 161, 162, 172, 173, 175, 181, 194, 195, 196, 198, 199, 200, 201, 207, 212, 224, 226, 227, 228, 235, 236, 237, 238, 255], "random": [20, 194, 195, 212, 214, 224, 244, 255], "random_input": [20, 244], "random_split": 227, "randperm": 253, "rang": [8, 20, 21, 164, 165, 168, 172, 179, 180, 186, 187, 190, 196, 199, 201, 202, 203, 205, 206, 208, 209, 210, 216, 224, 227, 228, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 248, 249, 253, 254, 255, 256, 257, 258, 263], "rank": [17, 29, 202, 204, 218, 220], "rank_select": 220, "rank_select_schem": [29, 220], "rankselectschem": [29, 214, 218, 220], "rapidli": 192, "rare": 208, "rate": [20, 208, 217, 228, 242, 243, 244, 245, 246, 250, 251, 252, 256, 258, 259], "rather": [172, 207, 229, 242, 256], "ratio": [17, 29, 214, 215, 218, 220, 250, 251, 252], "raw": [203, 205, 206], "rceil": [164, 165], "re": [2, 12, 180, 182, 184, 188, 207, 208, 224, 234, 235, 244, 253, 262, 266], "re_estimation_dataset": 242, "re_estimation_dataset_s": 242, "reach": [198, 241, 255], "read": 212, "reader": [235, 242, 247, 248, 253, 256, 260], "readi": [22, 180, 181, 187, 227, 228, 232, 235, 237, 238, 239, 242, 243, 245, 246, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 265], "readili": [235, 239, 242, 247, 248, 253, 256, 260], "real": [158, 159, 195, 219, 224, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "realiz": [174, 226], "realli": [235, 242, 247, 248, 256, 260], "reason": [173, 236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259, 262, 266], "recalcul": [242, 256], "receiv": 172, "recent": 265, "recip": 208, "recogn": [173, 263], "recommend": [1, 2, 8, 9, 20, 23, 177, 180, 183, 192, 194, 195, 196, 197, 199, 200, 201, 203, 212, 213, 215, 224, 227, 232, 235, 236, 237, 238, 239, 240, 241, 244, 248, 254, 255, 262, 265, 266], "recomput": [196, 208, 236], "reconfigur": 208, "reconstruct": [11, 23, 183, 196, 250, 252], "record": [8, 21, 179, 186, 212], "recov": [208, 232, 237, 249, 250, 251, 252, 257, 262, 265, 266], "recoveri": [262, 266], "recurr": 208, "recurs": 208, "redefin": 173, "redesign": 208, "reduc": [1, 10, 175, 178, 190, 191, 196, 199, 201, 202, 207, 208, 213, 217, 221, 223, 225, 232, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "reduct": [215, 250, 251, 252, 262, 266], "redund": [200, 217], "reestim": [14, 26, 199, 242], "reestimate_bn_stat": [14, 26, 199, 242, 256], "refer": [169, 171, 178, 182, 187, 188, 207, 211, 213, 222, 224, 227, 228, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261], "reflect": [245, 246, 258, 259, 263], "reflectionpad1d": 128, "reflectionpad2d": 129, "reflectionpad3d": 130, "regard": [2, 12, 184, 224, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "regardless": [197, 203], "regist": [30, 166, 197, 205, 206, 208, 235], "regress": 214, "regular": [11, 12, 22, 23, 30, 180, 181, 183, 187, 196, 224, 227, 228, 235, 236, 243], "rel": [12, 17, 29, 214, 215, 218, 220, 224, 232, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260], "relat": [171, 214, 218, 220, 263], "relationship": 213, "releas": [193, 194, 203, 234], "release_tag": 234, "relev": [225, 250, 251, 252, 265], "reli": [171, 235, 237, 238, 239, 242, 243, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "reload": 257, "relu": [20, 126, 171, 172, 173, 196, 200, 201, 208, 221, 229, 230, 231, 242, 243, 244], "relu1": [20, 173, 231], "relu2": [20, 173, 230, 231], "relu6": [127, 200, 201, 208], "remain": [24, 171, 182, 188, 196, 197, 203, 207, 208], "remov": [14, 25, 26, 172, 185, 190, 198, 199, 200, 206, 208, 214, 221, 222, 227, 228, 244, 263], "remove_all_quant": 206, "remove_column": [203, 205, 206], "renam": 208, "reorder": 244, "reorgan": 208, "repeat": [178, 214, 248, 262, 266], "repeatedli": 265, "replac": [171, 172, 175, 178, 205, 208, 213, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "replace_lora_layers_with_quantizable_lay": [178, 205, 206], "replicationpad1d": 131, "replicationpad2d": 132, "replicationpad3d": 133, "report": [208, 226, 262, 266], "repositori": 234, "repres": [2, 8, 9, 13, 17, 20, 21, 22, 25, 158, 159, 160, 166, 174, 175, 179, 181, 184, 185, 186, 187, 190, 195, 198, 208, 212, 214, 216, 218, 220, 222, 224, 226, 227, 228, 231, 247, 260, 261, 263], "represent": [158, 159, 160, 166, 180, 190, 208, 244, 261, 263], "requant": 200, "request": 226, "requir": [2, 17, 20, 29, 30, 169, 171, 172, 178, 180, 181, 187, 190, 193, 194, 196, 197, 200, 201, 203, 205, 207, 208, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 224, 226, 227, 228, 229, 231, 235, 239, 244, 247, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263, 265, 266], "requires_grad": [159, 160, 172, 227, 228], "requires_grad_": [171, 205, 206], "rerun": 173, "resblock": 20, "research": 190, "resembl": 20, "resid": 208, "residu": 214, "resiz": [196, 198, 208, 224, 227, 236, 253], "resnet": [181, 215, 218, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249], "resnet18": [181, 212, 227, 228, 235, 236, 237, 238, 240, 241, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "resnet18_after_adaround": 236, "resnet18_after_cle_bc": [254, 255, 257], "resnet18_after_qat": [256, 258, 259], "resnet18_mixed_precis": [235, 253], "resnet50": [212, 218, 224, 239, 240, 241, 245, 246, 247, 248, 249], "resnet50_after_adaround": 240, "resnet50_after_amp": 239, "resnet50_after_cl": 249, "resnet50_pcq_adaround": 248, "resolv": [173, 208], "resort": 232, "resourc": [190, 235, 242, 243, 244, 248, 253, 256, 262, 266], "respecit": [235, 253], "respect": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 180, 182, 188, 202, 207, 208, 212, 224, 230, 245, 246], "respond": [247, 260], "respons": [2, 12, 184, 190, 217, 224, 235, 239, 253, 262, 266], "ressembl": 244, "rest": [208, 232, 240, 245, 246, 248, 249], "restor": [187, 208, 232, 250, 251, 252, 263, 265], "restrict": 213, "resu": 20, "result": [2, 8, 12, 13, 20, 21, 25, 30, 158, 159, 160, 179, 180, 181, 184, 185, 186, 187, 196, 197, 198, 199, 201, 203, 205, 206, 207, 209, 212, 213, 214, 215, 217, 218, 220, 224, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "results_dir": [2, 8, 12, 13, 21, 25, 179, 184, 185, 186, 198, 212, 224, 235, 239, 247, 253, 260], "retain": [190, 224], "retest": [262, 266], "retrain": [190, 231, 265], "retriev": 30, "retrieve_context": 261, "retuern": 224, "return": [2, 3, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 169, 170, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 213, 214, 216, 218, 220, 224, 227, 228, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "return_dict": [203, 205, 206], "reus": [172, 173, 230, 231, 235, 253], "reveal": 232, "revert": 232, "review": 243, "revis": 222, "revisit": 215, "rework": 222, "rewrit": 173, "rfloor": [161, 162, 163, 164, 165, 166, 263], "rgb": [198, 224, 231], "rgb_output": 231, "right": [161, 162, 163, 164, 165, 166, 175, 180, 213, 221, 224, 235, 239, 241, 243, 253, 255, 263], "rmsnorm": 208, "rmsnormal": 208, "rnn": [123, 208], "rnncell": 124, "robust": [177, 207, 208, 265], "root": [193, 196, 208, 227, 253, 255], "rough": [235, 253], "roughli": [25, 174, 184, 185, 198, 224], "round": [1, 11, 13, 17, 21, 22, 23, 25, 29, 183, 185, 187, 190, 198, 208, 212, 218, 220, 227, 228, 234, 248, 263], "round_mod": 257, "round_nearest": 194, "rounding_mod": [13, 21, 22, 25, 181, 185, 187, 198, 208, 212, 227, 228, 239, 240, 243, 245, 246, 248, 249], "roundingmod": 194, "routin": [227, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "rrelu": 125, "rtype": [12, 20, 158, 159, 160, 174, 184, 224], "rule": [22, 213, 224, 226, 227, 228, 229, 265], "run": [2, 8, 9, 12, 13, 17, 20, 21, 22, 24, 25, 26, 29, 161, 162, 171, 172, 173, 174, 175, 177, 179, 180, 181, 184, 185, 186, 187, 190, 192, 195, 196, 197, 198, 199, 208, 211, 213, 214, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 233, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "run_forward_pass": [9, 181, 227, 228], "run_infer": [13, 25, 185, 198, 255], "runnabl": 265, "runtim": [10, 22, 30, 180, 181, 187, 190, 191, 192, 200, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 227, 228, 235, 236, 237, 238, 240, 245, 246, 248, 249, 253, 254, 257, 258, 259, 261, 262, 264, 265, 266], "runtimeerror": [166, 181, 227, 228], "s2": 197, "s3": 197, "s_1": 213, "s_2": 213, "s_n": 213, "safe": 160, "safetensor": [176, 203], "sai": [172, 215, 224, 226, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "sake": [211, 237, 257], "same": [8, 20, 21, 25, 30, 100, 158, 159, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 198, 201, 202, 204, 211, 212, 213, 226, 227, 228, 229, 235, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259], "sampl": [1, 2, 8, 9, 10, 13, 21, 22, 24, 25, 168, 174, 175, 179, 182, 184, 185, 186, 187, 188, 189, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 210, 212, 214, 218, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "sampled_dataset": [241, 242, 247], "sandeep": 217, "saniti": 180, "satisfactori": [196, 197, 199, 203, 207, 232, 262, 266], "satisfi": [172, 174, 198, 213, 226, 241, 255], "saurabh": 217, "save": [2, 6, 8, 9, 11, 12, 13, 17, 19, 21, 22, 23, 25, 29, 168, 169, 176, 179, 181, 183, 184, 185, 186, 187, 196, 198, 203, 207, 208, 209, 210, 211, 212, 214, 218, 220, 224, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265], "save_checkpoint": 187, "save_dir": [19, 211], "save_path": [168, 210], "saved_eval_scores_dict": [17, 29, 214, 218, 220], "saw": 248, "scalar": [8, 13, 21, 179, 186, 198, 208, 212], "scale": [14, 30, 159, 160, 161, 162, 163, 164, 165, 166, 176, 180, 190, 194, 199, 201, 202, 203, 208, 212, 213, 222, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260, 261, 263, 265], "scale_": [161, 162, 163, 164, 165, 180], "scenario": [221, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 254, 257, 258, 259, 260], "scene": 265, "schedul": [228, 250, 251, 252, 256, 258, 259], "schema": 208, "scheme": [8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 169, 179, 181, 183, 185, 186, 187, 190, 196, 198, 208, 211, 212, 214, 217, 218, 220, 227, 228, 235, 239, 242, 243, 247, 250, 251, 252, 253, 256, 260], "scope": 172, "score": [2, 8, 12, 13, 17, 21, 25, 29, 179, 184, 185, 186, 198, 212, 214, 216, 217, 218, 219, 220, 224, 235, 236, 237, 238, 239, 241, 242, 255, 256], "script": 256, "sdk": [191, 235, 248, 253, 265], "search": [2, 12, 13, 25, 182, 184, 185, 188, 198, 202, 207, 208, 224, 228, 229, 235, 242, 243, 245, 246, 250, 251, 252, 253, 256, 258, 259, 265], "searcher": 217, "sec": [224, 235, 239, 248, 253], "second": [9, 13, 20, 23, 175, 178, 181, 182, 183, 188, 196, 198, 200, 201, 207, 213, 224, 227, 228, 247, 260], "section": [2, 173, 184, 205, 206, 213, 223, 224, 229, 233, 235, 242, 253, 255, 262, 263, 264, 266], "see": [0, 17, 20, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 187, 191, 194, 195, 196, 201, 208, 213, 214, 217, 218, 219, 220, 227, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266], "seed": 214, "seem": 217, "seen": [212, 247, 260], "select": [13, 17, 25, 29, 185, 190, 194, 198, 205, 206, 212, 215, 218, 219, 220, 221, 229, 235, 239, 253, 261, 263], "select_param": [29, 220], "self": [13, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 172, 173, 198, 203, 224, 230, 231, 244, 255], "selu": 134, "sens": 175, "sensit": [2, 8, 12, 21, 179, 184, 186, 199, 208, 209, 216, 223, 225, 235, 237, 239, 249, 253, 257, 262, 263, 265, 266], "sentiment": 243, "separ": [11, 20, 22, 23, 171, 172, 173, 181, 183, 187, 196, 199, 208, 212, 227, 228, 232, 239], "separableconv2d": 208, "seq": 207, "seq_length": [203, 205, 206], "seq_ms": [0, 167, 171, 207], "seqms": [202, 207, 208], "seqmseparam": [182, 188, 207], "sequanti": 244, "sequenc": [181, 196, 198, 202, 227, 228, 229, 241, 243, 255], "sequenti": [10, 20, 171, 182, 188, 200, 201, 208, 229, 230, 232, 242, 243, 244], "seri": [25, 174, 181, 185, 187, 198, 226, 227, 228, 241, 255, 261], "serial": 261, "serializetostr": [211, 235, 236, 237, 238], "serv": [175, 196, 198, 212, 219], "servic": 226, "sess": [9, 177, 218, 227, 235, 236, 237, 238], "sess_opt": 177, "session": [9, 17, 195, 196, 211, 212, 218, 224, 227, 235, 236, 237, 238], "sessionopt": 177, "set": [1, 2, 7, 8, 9, 10, 11, 12, 13, 17, 20, 21, 25, 29, 30, 166, 168, 170, 171, 172, 173, 174, 175, 177, 179, 184, 185, 186, 187, 190, 196, 198, 199, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266], "set_activation_quantizers_to_float": [170, 213], "set_adapt": 178, "set_adaround_param": [13, 25, 185, 198, 241, 255], "set_and_freeze_param_encod": [196, 240, 248, 254], "set_blockwise_quantization_for_weight": [170, 213], "set_default_kernel": 30, "set_export_param": [25, 185, 198], "set_extra_st": 166, "set_grouped_blockwise_quantization_for_weight": [0, 5, 170, 213], "set_kernel": 30, "set_mixed_precision_param": [13, 25, 185, 198], "set_model_input_precis": [174, 226], "set_model_output_precis": [174, 226], "set_model_preparer_param": [25, 185, 198], "set_precis": [174, 226], "set_quant": 208, "set_quant_scheme_candid": [13, 25, 185, 198], "set_quantizers_to_candid": [2, 12, 174, 184, 224], "set_rang": [158, 159], "set_transform": [198, 224], "set_verbos": [224, 239], "settabl": 263, "setup": [171, 193, 194, 195, 200, 224], "sever": [173, 175, 207, 208, 212, 215, 230, 231], "sgd": [199, 227, 228], "sh": 193, "shall": 222, "shape": [9, 12, 20, 27, 28, 29, 158, 159, 160, 161, 162, 166, 170, 171, 172, 173, 175, 180, 181, 196, 200, 201, 205, 212, 213, 214, 218, 220, 224, 227, 228, 230, 235, 236, 237, 238, 242, 243, 244, 248, 253, 254, 256, 257, 258, 259, 260], "share": [173, 175], "sharp": 217, "sharpli": [250, 251, 252, 262, 266], "shift": [249, 257], "shift_label": [205, 206], "shift_logit": [205, 206], "should": [8, 12, 17, 20, 21, 22, 24, 29, 30, 100, 160, 169, 171, 172, 175, 179, 181, 182, 186, 187, 188, 194, 195, 196, 197, 198, 207, 211, 212, 213, 214, 215, 218, 220, 222, 224, 227, 228, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 266], "shouldn": 180, "show": [173, 178, 201, 209, 213, 216, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "showcas": [247, 260], "shown": [171, 178, 193, 194, 195, 198, 212, 221, 231, 232, 247, 260], "shuffl": [196, 197, 198, 199, 203, 214, 218, 224, 227, 228, 236, 239, 240, 245, 246, 248], "side": 221, "sigmoid": [20, 136, 172], "sign": [164, 165, 171, 180, 263], "signatur": [9, 17, 29, 30, 164, 165, 181, 198, 208, 212, 214, 218, 220, 227, 228, 250, 251, 252], "signific": [196, 232], "significantli": 208, "silu": 135, "sim": [1, 2, 7, 8, 9, 10, 12, 14, 21, 22, 24, 168, 170, 171, 174, 177, 178, 179, 181, 182, 184, 186, 187, 188, 195, 196, 197, 198, 199, 203, 206, 207, 208, 210, 212, 213, 222, 224, 226, 227, 228, 236, 239, 242, 243, 248, 255], "sim1": 171, "sim2": 171, "sim_model": [240, 245, 246, 247, 248, 249, 254, 256, 257, 258, 259, 260], "similar": [178, 180, 190, 194, 201, 213, 263], "similarli": [232, 235, 239, 247, 248, 253, 256, 260, 262, 266], "simpl": [172, 212, 214, 218, 220, 239, 242, 243, 247, 248, 260], "simpler": 171, "simpli": [8, 21, 22, 172, 179, 186, 187, 212, 227, 228, 235, 239, 242, 243, 248, 253, 256], "simplic": [178, 211], "simplif": 201, "simplifi": [1, 2, 8, 9, 171, 196, 200, 201, 211, 212, 224, 227, 261], "simuat": [236, 237, 240, 245, 246, 248, 249, 254, 257, 258, 259], "simul": [9, 22, 166, 170, 175, 178, 181, 187, 190, 192, 196, 197, 199, 200, 203, 207, 208, 209, 210, 211, 213, 222, 224, 225, 227, 228, 229, 231, 233, 234, 242, 243, 250, 251, 252, 260, 262, 266], "sinc": [181, 207, 213, 215, 224, 227, 228, 235, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 263], "singl": [2, 6, 13, 19, 25, 169, 172, 174, 184, 185, 198, 208, 211, 212, 213, 214, 216, 217, 218, 220, 222, 224, 247, 248, 260, 263], "singular": [217, 218, 220, 251, 252], "situat": 212, "six": 229, "size": [7, 8, 20, 160, 161, 162, 163, 164, 165, 170, 173, 175, 180, 190, 196, 197, 203, 212, 213, 218, 220, 222, 223, 224, 225, 227, 240, 241, 242, 243, 244, 248, 254, 262, 265, 266], "skbuild_build_target": 193, "skew": [236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259], "skip": [23, 25, 182, 183, 185, 188, 193, 196, 198, 199, 205, 207, 214, 227, 228, 237, 249, 257], "skipped_optim": 200, "slight": 248, "slightli": [204, 235, 253], "slim": 208, "slow": 217, "small": [9, 181, 199, 204, 207, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260], "smaller": [2, 12, 23, 183, 184, 196, 217, 218, 220, 224, 232, 235, 248, 253, 265], "smoothl1loss": 137, "snapdragon": [235, 248, 253], "snippet": [172, 213, 235, 253], "snpe": [208, 248, 249], "so": [8, 9, 22, 23, 24, 171, 172, 173, 175, 181, 183, 187, 190, 196, 197, 200, 201, 205, 206, 212, 214, 216, 218, 220, 227, 228, 235, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 266], "softmarginloss": 138, "softmax": [20, 139, 175, 243, 244, 253], "softmax2d": 140, "softmin": 141, "softplu": [142, 172], "softshrink": 143, "softsign": 144, "softwar": [190, 191, 208], "sole": 212, "solut": [216, 224, 228, 232, 239, 253], "some": [17, 20, 29, 171, 172, 175, 180, 196, 201, 205, 206, 214, 216, 218, 220, 221, 224, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 265, 266], "someth": [22, 187, 212, 217, 227, 228], "sometim": [212, 214, 217, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 253, 254, 257, 258, 259, 262, 266], "somewher": [262, 266], "soon": 198, "sort": [24, 197, 244], "sourc": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 198, 199, 200, 201, 207, 208, 210, 211, 212, 213, 214, 218, 220, 224, 226, 227, 228, 232], "space": [29, 214, 218, 220, 224, 263], "spars": 208, "sparse_categorical_crossentropi": 243, "spatial": [17, 29, 208, 214, 215, 216, 220, 223, 234], "spatial_svd": [29, 214, 218, 220, 251, 252], "spatial_svd_auto_mod": 218, "spatial_svd_manual_mod": 218, "spatialsvdparamet": [17, 29, 214, 218, 220, 251, 252], "spconv": 208, "special": [25, 172, 185, 190, 198], "specif": [8, 17, 20, 22, 25, 29, 30, 170, 173, 175, 179, 181, 185, 186, 187, 193, 198, 204, 208, 212, 213, 214, 218, 220, 227, 228, 229, 235, 236, 239, 240, 242, 244, 248, 253, 254, 256, 261, 262, 263, 266], "specifi": [2, 8, 13, 17, 21, 22, 23, 29, 161, 162, 163, 164, 165, 166, 174, 179, 181, 183, 184, 186, 187, 196, 198, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "speed": [17, 29, 200, 208, 214, 217, 218, 220, 223, 228, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "speedup": [182, 188, 207, 235, 248, 253], "split": [182, 188, 196, 198, 199, 203, 205, 206, 207, 213, 224, 227, 228, 236, 263], "sqnr": [2, 13, 25, 174, 182, 184, 185, 188, 198, 207, 224, 235, 239, 253, 263], "sqrt": 172, "squar": [209, 263], "squeez": [242, 253], "ssvd": 215, "ssvd_comp_stat": 252, "ssvd_compressed_model": 252, "ssvd_cp_compressed_model": 252, "ssvd_cp_finetuned_model": 252, "ssvd_finetuned_model": 252, "stabl": [172, 177, 196, 242, 256], "stack": [189, 224], "stand": 208, "standalon": [196, 208], "standard": [12, 166, 172, 175, 190, 224, 238, 243, 245, 246, 258, 259], "start": [2, 11, 12, 20, 23, 164, 165, 172, 173, 178, 183, 184, 191, 194, 196, 215, 224, 229, 233, 234, 235, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 258, 259, 260, 262, 263, 266], "start_beta": [11, 23, 183, 196], "start_i": [224, 239], "start_x": [224, 239], "starting_op_nam": [12, 224], "stat": [8, 26, 168, 199, 210, 212, 214, 218, 220], "statatist": 256, "state": [166, 182, 188, 189, 192, 207, 224, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260], "state_dict": 166, "stateless": 231, "statement": 172, "static": [12, 17, 20, 29, 172, 173, 208, 214, 218, 220, 224], "static_patch_count": 20, "staticgridperchannelquant": 171, "staticgridquant": 171, "staticgridquantwrapp": 171, "staticmethod": [172, 235, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "statist": [8, 9, 17, 21, 26, 29, 161, 162, 166, 168, 175, 179, 181, 186, 199, 202, 209, 210, 214, 218, 220, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "std": [196, 198, 224, 227, 236, 253, 255], "step": [1, 8, 12, 21, 164, 165, 172, 174, 178, 179, 182, 186, 188, 193, 194, 195, 204, 205, 206, 214, 215, 216, 217, 225, 226, 232, 234, 235, 237, 238, 239, 241, 242, 243, 247, 248, 253, 256, 260, 261, 263, 264, 265], "still": [171, 194, 196, 213, 230, 232, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 262, 266], "stochast": [21, 22, 187, 212, 227, 228], "stop": [11, 23, 183, 196, 198], "stopiter": [198, 224], "storag": [213, 263], "store": [11, 22, 23, 159, 174, 181, 183, 187, 196, 213, 225, 226, 227, 228, 235, 239, 253], "str": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 25, 166, 168, 169, 172, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 196, 198, 203, 207, 210, 211, 212, 218, 224, 226, 227, 228, 231, 236, 239, 244], "str_idx": 198, "straightforward": [262, 266], "strategi": [262, 266], "stream": [196, 198, 199, 207], "strict": [7, 166, 174, 226, 227, 228, 229, 263], "strict_symmetr": [194, 229, 242], "strict_valid": [13, 25, 185, 198], "strictli": [166, 227], "stride": [160, 172, 173, 181, 200, 201, 227, 228], "strike": 217, "string": [9, 22, 174, 181, 187, 222, 226, 227, 228, 229], "strongli": [20, 172, 180, 236, 240, 248, 254], "structur": [25, 172, 175, 185, 190, 198, 217, 226, 247, 252, 260], "stude": 233, "style": 248, "sub": [247, 260], "subbackward0": 180, "subclass": [20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 180, 208, 227, 230, 242, 243], "subdirectori": [235, 237, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "subfold": [235, 237, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "sublay": 173, "submit": 261, "submodul": [20, 231], "subpackag": [30, 208], "subsequ": [158, 190, 196, 200, 201, 208, 227, 229, 235, 237, 248, 249, 253], "subset": [8, 9, 21, 179, 181, 186, 199, 212, 213, 221, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "subsetrandomsampl": 255, "subsidiari": 191, "substanti": 222, "substitut": 227, "success": [241, 255], "successfulli": [181, 211, 227, 228], "sudo": 234, "suffic": [236, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259], "suffici": [212, 227, 228, 263, 265], "suggest": [22, 187, 216, 217, 227, 228, 250, 252, 262, 266], "suit": [190, 198, 205, 241, 255], "suitabl": 190, "sum": [196, 198, 218, 224, 227, 228, 236, 239, 253, 255], "summari": [191, 196, 200, 201, 208, 217, 243], "sun": 217, "super": [20, 30, 172, 173, 198, 208, 224, 244], "supergroup": [208, 242, 263], "suppli": 213, "support": [2, 8, 11, 12, 20, 21, 22, 23, 29, 30, 172, 173, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 191, 194, 195, 196, 197, 198, 199, 200, 203, 207, 208, 210, 212, 213, 214, 215, 217, 218, 220, 222, 223, 224, 227, 229, 230, 231, 232, 235, 239, 242, 243, 244, 253, 256, 258, 259, 262, 263, 266], "supported_kernel": [2, 184, 224, 235, 253], "supported_kernel_op": [174, 184, 224], "suppos": [2, 12, 184, 224, 235, 239, 253], "svd": [17, 29, 208, 214, 215, 216, 223, 234], "swap": 208, "sweep": [10, 207], "switch": [208, 213], "symbol": [20, 172], "symbolic_trac": [25, 172, 185, 198], "symfp": [182, 188, 207], "symmetr": [30, 158, 159, 160, 161, 162, 170, 171, 175, 180, 181, 205, 208, 213, 222, 227, 228, 229, 244, 263], "symmetri": [171, 182, 188, 207, 208], "symqt": [182, 188, 207], "sync": 228, "syntax": 222, "system": 193, "systemat": 190, "t": [2, 9, 12, 25, 30, 172, 180, 181, 182, 184, 185, 188, 193, 198, 203, 205, 206, 207, 208, 212, 224, 227, 228, 229, 235, 239, 242, 243, 247, 248, 253, 256, 260, 265], "tabl": [168, 210, 219, 222, 234], "tag": 234, "take": [1, 2, 9, 12, 13, 24, 25, 29, 30, 170, 173, 174, 177, 178, 180, 181, 184, 185, 196, 197, 198, 199, 203, 208, 213, 214, 216, 217, 218, 220, 221, 224, 226, 227, 228, 232, 233, 235, 239, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 256, 260, 265], "taken": [20, 24, 197, 221], "tanh": 145, "tanhshrink": 146, "tap": [21, 179, 186, 212], "tar": [29, 220], "target": [9, 17, 20, 22, 29, 41, 42, 48, 62, 64, 81, 87, 88, 92, 93, 104, 105, 113, 114, 115, 116, 117, 122, 137, 138, 178, 181, 184, 187, 190, 197, 198, 200, 203, 207, 208, 209, 211, 214, 215, 216, 217, 218, 220, 222, 224, 227, 228, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 266], "target_comp_ratio": [17, 29, 214, 218, 220, 250, 251, 252], "target_data": [253, 254, 256, 257, 258, 259, 260], "target_length": 48, "target_modul": 178, "task": [190, 219, 222, 235, 236, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "taxonomi": 217, "tbd": [207, 210], "teach": 234, "techiqu": 257, "techniqu": [13, 25, 185, 190, 192, 197, 198, 200, 201, 203, 204, 205, 208, 212, 213, 214, 215, 218, 220, 224, 225, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266], "technologi": [190, 191], "tell": 248, "tempfil": 208, "temporari": [9, 196, 200, 201, 224, 227], "temporarili": [171, 206], "tend": 196, "tensor": [1, 2, 9, 12, 13, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 196, 197, 198, 200, 201, 203, 205, 206, 208, 211, 212, 213, 214, 218, 220, 222, 223, 224, 226, 227, 228, 229, 231, 232, 235, 237, 244, 247, 248, 249, 253, 257, 258, 259, 260, 263], "tensor_nam": 222, "tensor_quant": 171, "tensorboard": [242, 243, 245, 246], "tensorflow": [0, 18, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 207, 208, 210, 211, 212, 213, 218, 222, 224, 227, 228, 229, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 260, 261, 262, 263, 265, 266], "tensorquant": [12, 224], "tensorquantizationsimforpython": 194, "term": [181, 191, 213, 218, 220, 227, 228], "termin": 234, "test": [8, 21, 179, 186, 203, 205, 206, 212, 242, 243, 244, 262, 265, 266], "test_dataload": [203, 205, 206], "test_dataset": [203, 205, 206], "text": [20, 161, 162, 163, 164, 165, 203, 205, 206, 244], "textclassif": 244, "tf": [2, 8, 11, 14, 16, 17, 20, 21, 179, 186, 193, 196, 198, 199, 201, 208, 211, 212, 218, 224, 227, 230, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 256, 260], "tf_cpp_min_log_level": [224, 239, 241, 242, 245, 246], "tf_dataset": [240, 248, 249], "tf_enhanc": [9, 22, 227, 228, 235, 239, 242, 243, 253, 256], "tfencod": 171, "tflite": [235, 248, 253], "tfoplambda": [20, 208, 244], "than": [17, 23, 29, 171, 172, 173, 183, 184, 187, 196, 207, 208, 213, 214, 215, 218, 220, 224, 226, 228, 229, 235, 236, 240, 242, 243, 253, 254, 256, 265], "thei": [172, 173, 204, 205, 206, 213, 219, 224, 230, 232, 235, 236, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 263, 265], "them": [13, 20, 22, 25, 166, 171, 172, 173, 175, 185, 190, 196, 198, 212, 217, 223, 226, 227, 228, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "theme": 208, "thereaft": 224, "therebi": [225, 235, 253], "therefor": [2, 12, 184, 200, 215, 224, 235, 239, 242, 243, 244, 253], "theta_": [161, 162], "thi": [2, 6, 8, 9, 10, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 100, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266], "thing": [236, 237, 238, 240, 241, 248, 249, 250, 251, 252, 254, 257, 258, 259, 261], "those": [8, 179, 186, 205, 212, 226, 229, 244, 265], "though": [30, 180, 213, 225, 229, 235, 239, 242, 243, 248, 253, 262, 266], "three": [172, 215, 235, 250, 251, 252, 253, 265], "threshold": [147, 168, 198, 210], "through": [2, 9, 20, 21, 160, 171, 172, 174, 175, 179, 184, 186, 196, 201, 205, 206, 212, 224, 226, 227, 228, 233, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 262, 263, 266], "throughout": [24, 190, 197, 229], "throw": [30, 180, 181, 227, 228], "thrown": [208, 227, 228], "thu": [158, 159, 160], "tijmen": 217, "till": [2, 12, 184, 224, 235, 239, 253], "time": [17, 29, 160, 172, 173, 178, 192, 196, 198, 208, 212, 213, 214, 217, 218, 219, 220, 224, 226, 228, 239, 241, 247, 255, 257, 260, 265], "tmp": [8, 13, 21, 25, 179, 185, 186, 193, 195, 196, 198, 199, 200, 201, 212, 224, 227, 228, 242, 247, 260], "tmpdir": 178, "to_arrai": [200, 201], "to_list": [2, 12, 174, 184, 224], "todo": [174, 226], "togeth": [224, 248], "toggl": 193, "toi": 212, "token": [20, 203, 205, 206, 232, 243, 244], "token_and_position_embed": 244, "token_emb": [20, 244], "tokenandpositionembed": [20, 244], "tokenized_dummy_text": [205, 206], "toler": [198, 215, 241, 255], "tolist": 253, "toml": 193, "too": [213, 250, 252], "tool": [21, 179, 186, 190, 192, 193, 201, 208, 212, 213, 221, 225, 244, 261, 262, 264, 266], "toolkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 261, 262, 263, 264, 265, 266, 267], "top": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 174, 176, 179, 182, 183, 184, 185, 186, 187, 188, 196, 197, 198, 199, 200, 201, 203, 207, 212, 213, 214, 218, 219, 220, 224, 226, 227, 228, 235, 237, 238, 239, 240, 241, 242, 243, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260], "top1": [218, 224, 239, 255], "top1_accuraci": 253, "top5": 239, "topk": [253, 255], "torch": [13, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 187, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 213, 214, 218, 220, 224, 226, 227, 228, 231, 234, 235, 236, 237, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "torch_stabl": 194, "torchscript": [25, 169, 181, 185, 187, 190, 198, 211, 227, 228], "torchvis": [181, 195, 196, 198, 199, 200, 201, 207, 212, 224, 226, 227, 228, 235, 236, 237, 238, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "total": [205, 206, 216, 218, 224, 227, 239, 244, 263], "total_length": [203, 205, 206], "total_sampl": [196, 224, 227, 236], "totensor": [196, 198, 224, 227, 236, 253, 255], "touch": 20, "toward": 232, "tpu": 190, "tqdm": [196, 205, 206, 224, 227, 228, 236, 253, 255], "trace": [20, 25, 168, 172, 185, 198, 210, 231], "traceabl": [172, 205, 206, 231], "traceback": 172, "traceerror": 172, "tracer": 172, "track": [212, 247, 260], "track_running_stat": [200, 201], "trade": [11, 23, 183, 196, 224, 235, 239, 253], "tradeoff": [190, 224, 235, 239, 253, 262, 266], "train": [8, 9, 13, 14, 17, 20, 21, 25, 26, 29, 176, 179, 181, 185, 186, 190, 192, 196, 197, 198, 199, 201, 203, 204, 207, 208, 209, 211, 212, 214, 217, 218, 220, 224, 227, 232, 234, 235, 239, 244, 253, 255, 262, 263, 266], "train_dataload": [181, 203, 205, 206, 227, 228], "train_dataset": [203, 205, 206, 242], "train_dataset_s": 242, "train_flag": [29, 214, 218, 220], "train_load": [214, 256], "train_model": [29, 214, 218, 220], "train_one_epoch": [205, 206], "trainabl": [197, 203, 204, 205, 206, 246, 259], "trainer": [17, 29, 214, 218, 220, 234, 250, 251, 252, 256, 258, 259], "training_range_learning_with_tf_init": [181, 195, 197, 199, 203, 207, 227, 228, 242, 246, 256, 259], "trainingextens": 193, "trainingmod": [235, 238], "transact": 217, "transform": [20, 172, 196, 198, 203, 205, 206, 208, 213, 224, 227, 236, 244, 253, 254, 255, 257, 258, 259, 260], "transformer_block": [20, 244], "transformerblock": [20, 244], "transit": 224, "translat": 248, "transpos": 180, "trap": 207, "travers": 226, "tri": [192, 217, 250, 251, 252], "tripletmarginloss": 148, "tripletmarginwithdistanceloss": 149, "triumph": 226, "true": [2, 9, 12, 13, 17, 22, 25, 29, 30, 159, 160, 161, 162, 166, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 187, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 212, 213, 214, 218, 220, 222, 224, 226, 227, 228, 229, 235, 236, 237, 238, 239, 240, 242, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "true_quant": [205, 206], "truli": 172, "trust_remote_cod": 203, "try": [17, 29, 196, 198, 200, 201, 214, 215, 217, 218, 220, 224, 232, 235, 237, 238, 239, 248, 250, 251, 252, 253, 265], "tune": [17, 22, 29, 178, 187, 191, 214, 215, 218, 220, 227, 228, 236, 237, 238, 240, 241, 243, 245, 246, 249, 254, 255, 257, 258, 259, 262, 265, 266], "tuner": 205, "tupl": [2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 97, 161, 162, 163, 164, 165, 169, 170, 173, 174, 179, 180, 181, 183, 184, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 203, 211, 212, 213, 214, 218, 220, 224, 226, 227, 228, 231, 235, 239, 247, 253, 260], "turn": [192, 208, 229], "tutori": 189, "tweak": 178, "twice": [20, 178], "two": [12, 20, 24, 29, 171, 172, 173, 174, 184, 190, 192, 197, 212, 213, 216, 217, 218, 220, 224, 226, 228, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 263, 265], "txt": [174, 193, 226, 261], "type": [2, 3, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 170, 171, 172, 173, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 196, 197, 198, 199, 200, 201, 207, 208, 210, 212, 213, 214, 217, 218, 219, 220, 224, 227, 228, 229, 235, 239, 241, 242, 244, 247, 250, 251, 252, 253, 255, 258, 259, 261, 265], "typeerror": 172, "typic": [20, 30, 175, 190, 196, 212, 213, 215, 235, 236, 240, 241, 242, 243, 245, 246, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266], "u": [243, 248], "ubuntu": [192, 194, 195], "ubuntu22": 208, "uint": 208, "uint16": 222, "uint32": 222, "uint8": [158, 222], "unaccept": [262, 266], "unchang": [182, 188, 207, 227, 228], "uncompress": 215, "under": [2, 9, 12, 168, 171, 184, 199, 210, 212, 224, 229, 232, 235, 253], "undergo": 190, "underli": [30, 180, 232], "understand": [171, 180, 235, 239, 242, 243, 244, 247, 248, 253, 256, 260], "undo": [14, 26, 199], "uneven": 232, "unexpect": 166, "unexpected_kei": 166, "unflatten": 150, "unfold": 151, "unid": [13, 25, 185, 198], "uniniti": [24, 196, 197, 203, 207], "unintuit": [13, 25, 185, 198], "union": [6, 7, 8, 15, 17, 19, 20, 22, 23, 25, 27, 28, 29, 169, 170, 173, 174, 179, 181, 183, 184, 185, 186, 187, 196, 198, 200, 201, 211, 212, 213, 214, 218, 220, 226, 227, 228], "uniqu": 248, "unit": 190, "unknown": 215, "unlabel": [8, 13, 25, 185, 196, 198, 212, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260], "unlabeled_data": 198, "unlabeled_data_load": [198, 212, 224], "unlabeled_dataset": [21, 196, 198, 199, 212, 241, 242, 247], "unlabeled_dataset_iter": [8, 212], "unlabeled_imagenet_data_load": 255, "unlabeled_imagenet_dataset": 255, "unlabeleddatasetwrapp": [241, 255], "unlabelled_data_load": 198, "unless": [13, 25, 30, 181, 185, 187, 198, 221, 227, 228, 262, 266], "unlik": [166, 177, 200, 256], "unmodifi": [204, 216], "unnecessari": [200, 208, 221, 235, 248, 253], "unpin": 208, "unrol": [172, 208], "unsign": [229, 263], "unsigned_symmetr": [194, 229, 242], "unsigned_zero": 166, "unsimplifi": [200, 201, 224, 235, 237, 238], "unsqueez": [205, 206], "until": [13, 25, 161, 162, 181, 185, 198, 199, 227, 228, 241, 255], "untouch": [227, 228], "unwrap": 244, "up": [11, 17, 20, 22, 23, 29, 174, 177, 183, 187, 190, 193, 196, 199, 208, 212, 214, 217, 218, 220, 221, 224, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265], "updat": [1, 24, 166, 176, 196, 197, 199, 203, 206, 208, 219, 222, 227, 228, 234, 236, 238, 240, 244, 245, 246, 248, 249, 254, 255, 257, 258, 259, 263], "update_lora_weight": [176, 203], "updatestat": 194, "upgrad": [0, 167, 208], "upon": [14, 26, 30, 175, 199, 208, 261], "upsampl": 152, "upsamplingbilinear2d": 153, "upsamplingnearest2d": 154, "upstream": [214, 221], "upto": [224, 235, 242, 247, 248, 253, 256, 260], "url": [17, 29, 214, 218, 219, 220, 234], "us": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 25, 26, 29, 30, 158, 159, 161, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 219, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "usabl": 222, "usag": [24, 173, 178, 180, 190, 197, 203, 208, 222, 261], "use_all_amp_candid": [2, 184, 224, 235, 253], "use_cach": [203, 205, 206], "use_cuda": [17, 29, 194, 208, 211, 214, 218, 220, 239, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "use_embedded_encod": [181, 187, 227, 228], "use_fast": 203, "use_monotonic_fit": [17, 29, 214, 218, 220], "use_strict_symmetr": 171, "use_symmetric_encod": [171, 208], "user": [2, 9, 12, 13, 14, 17, 20, 22, 23, 24, 25, 29, 30, 171, 172, 174, 180, 181, 183, 184, 185, 187, 191, 193, 194, 196, 197, 198, 199, 200, 208, 212, 214, 217, 218, 220, 222, 223, 224, 226, 227, 228, 230, 231, 234, 235, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "user_onnx_lib": [9, 227], "userflow": [182, 188, 207], "usual": [199, 217, 228, 262, 263, 266], "util": [6, 8, 20, 171, 173, 179, 186, 195, 196, 197, 198, 199, 205, 206, 207, 208, 211, 212, 213, 224, 226, 227, 228, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "v": [2, 11, 12, 23, 183, 184, 193, 196, 213, 224, 235, 239, 247, 253, 260, 262, 263, 266], "v1": [0, 171, 194, 203, 205, 206, 208, 211, 224, 239, 253, 254, 255, 256, 257, 258, 259, 260], "v2": [0, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 174, 181, 197, 205, 206, 208, 210, 213, 226, 227, 228], "val": [196, 227, 235, 236, 237, 238, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "val_dataset": 247, "val_transform": 255, "valid": [2, 8, 12, 21, 173, 179, 184, 186, 189, 195, 196, 198, 207, 208, 212, 213, 214, 218, 220, 222, 224, 227, 235, 239, 242, 243, 245, 246, 247, 248, 253, 255, 256, 260], "validate_example_model": 173, "validate_for_missing_modul": 173, "validate_for_reused_modul": 173, "validate_model": 173, "validation_check": 173, "validation_d": [218, 224, 239], "validation_data": [242, 243, 245, 246], "valu": [1, 2, 8, 9, 12, 13, 17, 21, 22, 23, 29, 30, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 174, 179, 181, 183, 184, 186, 187, 190, 194, 195, 196, 198, 201, 203, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 235, 236, 237, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 263], "value_qtzr": 30, "vanilla": 243, "var": [26, 81, 199], "vari": [2, 12, 184, 215, 224], "variabl": [17, 20, 29, 161, 162, 172, 214, 216, 218, 220, 234], "varianc": [201, 242, 256], "variant": [190, 192, 193, 194, 195, 208], "varieti": 201, "variou": [2, 17, 29, 174, 184, 192, 208, 214, 217, 218, 220, 223, 224, 232, 241, 247, 255, 260, 263], "vector": [208, 236, 240, 248, 254], "vedaldi": 217, "venic": 217, "venv": 193, "ver": 208, "ver_cuda": 193, "ver_onnxruntim": 193, "ver_python": 193, "ver_tensorflow": 193, "ver_torch": 193, "verbos": 239, "veri": [24, 197, 212, 215, 217, 224, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 254, 255, 257, 258, 259, 260], "verifi": [20, 172, 254, 257, 258, 259], "versa": [216, 224, 232, 235, 239, 253, 263], "version": [30, 100, 168, 171, 172, 175, 181, 187, 190, 192, 193, 195, 205, 206, 208, 210, 211, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266], "via": [20, 25, 185, 190, 192, 193, 194, 198, 208, 215, 261, 263], "vice": [216, 224, 232, 235, 239, 253, 263], "view": [168, 173, 180, 191, 194, 205, 206, 209, 210, 219, 224], "view_a": 255, "viewabl": 234, "virtual": 193, "vision": 217, "visit": 192, "visual": [17, 29, 192, 208, 212, 214, 217, 218, 220, 224, 243, 247, 260], "visualization_tool": [0, 167, 210], "visualization_url": [17, 29, 214, 218, 220], "visualize_stat": [168, 210], "visualizecompress": 219, "vocab_s": [20, 203, 205, 206, 243, 244], "vol": 217, "volum": 221, "w": [2, 8, 12, 21, 179, 184, 186, 198, 208, 212, 220, 221, 224, 227, 242], "w16a16": 208, "w4a16": 208, "w4a8": [198, 208, 262, 265, 266], "w4fp16": 208, "w8a16": [198, 227, 262, 265, 266], "w8a8": [198, 228, 262, 265, 266], "wa": [17, 29, 158, 180, 208, 211, 214, 217, 218, 220, 222, 224, 226, 235, 239, 240, 242, 243, 244, 248, 250, 252, 253, 254, 256], "wai": [171, 180, 182, 187, 188, 207, 211, 227, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 257, 258, 259, 260, 265], "walk": 233, "want": [2, 6, 12, 22, 30, 169, 172, 184, 187, 193, 194, 205, 206, 211, 224, 227, 228, 235, 239, 242, 243, 247, 248, 253, 260, 262, 266], "warm": [11, 23, 183, 196], "warn": [24, 173, 197, 203], "wasn": 208, "we": [2, 6, 12, 20, 169, 171, 172, 173, 175, 178, 180, 184, 192, 196, 200, 201, 203, 205, 206, 211, 213, 215, 217, 218, 224, 225, 227, 232, 235, 236, 239, 240, 241, 242, 243, 244, 247, 248, 250, 252, 253, 254, 255, 256, 260, 262, 265, 266], "websit": [191, 215], "websocket": 219, "weight": [1, 2, 3, 7, 8, 10, 11, 12, 20, 21, 23, 24, 27, 29, 30, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 190, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 215, 218, 223, 224, 226, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260, 262, 263, 265, 266], "weight_bw": 257, "weight_decai": 199, "weight_info": 244, "weight_nam": 244, "weight_q": 180, "weight_qdq": 180, "weight_svd": [29, 214, 218, 220], "weight_svd_auto_mod": 220, "weight_svd_manual_mod": 220, "weights_in_correct_ord": 244, "weights_pdf": [212, 247, 260], "weightsvdparamet": [29, 214, 218, 220], "well": [158, 173, 196, 212, 217, 224, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 253, 254, 255, 257, 258, 259, 260], "were": [208, 211, 215, 221, 222, 227, 229, 241, 248, 255], "weren": 172, "what": [191, 219, 244, 265], "when": [2, 8, 9, 12, 17, 20, 21, 22, 25, 29, 30, 166, 172, 175, 179, 181, 182, 184, 185, 186, 187, 188, 197, 198, 199, 203, 207, 208, 212, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263], "whenev": [177, 208, 231], "where": [2, 11, 12, 13, 17, 22, 23, 29, 161, 162, 163, 164, 165, 166, 172, 180, 181, 183, 184, 187, 190, 196, 198, 199, 200, 208, 212, 214, 216, 218, 219, 220, 221, 222, 224, 227, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263], "wherea": [180, 184, 235, 253], "wherein": [6, 169, 211], "whether": [24, 25, 166, 172, 173, 174, 185, 197, 198, 211, 216, 226, 227, 228, 235, 236, 237, 238, 240, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "which": [2, 6, 7, 11, 12, 13, 17, 19, 20, 23, 25, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 178, 180, 183, 184, 185, 187, 190, 192, 194, 196, 197, 198, 200, 201, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265], "while": [7, 17, 29, 166, 175, 204, 208, 214, 216, 218, 220, 222, 232, 235, 236, 237, 238, 239, 240, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 262, 263, 265, 266], "whl": [193, 194], "who": 222, "whole": [13, 198, 213, 241, 242, 263], "whose": [168, 169, 170, 172, 210, 211, 213, 229, 261], "why": [232, 235, 248, 253], "wide": [190, 200, 201], "width": [8, 21, 179, 186, 200, 201, 212, 213, 218, 220, 221, 222, 223, 225, 232, 235, 236, 237, 238, 248, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "wikitext": [203, 205, 206], "wildcard": 180, "wise": [8, 21, 179, 182, 186, 188, 190, 199, 207, 208, 212, 232], "wiseconv2d": [196, 201], "wish": [196, 200, 201, 224, 226, 227], "within": [30, 158, 159, 160, 175, 190, 193, 208, 212, 215, 243, 263, 265], "without": [13, 22, 25, 158, 160, 166, 168, 178, 181, 185, 187, 198, 207, 208, 210, 221, 227, 228, 236, 240, 241, 243, 245, 246, 248, 249, 254, 255, 257, 258, 259, 262, 265, 266], "won": [25, 172, 182, 185, 188, 198, 207, 229], "word": [160, 243], "work": [12, 22, 171, 173, 187, 192, 193, 201, 204, 208, 213, 217, 224, 227, 228, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 266], "workaround": 172, "workflow": [191, 202, 204, 215, 233, 261, 265], "workspac": [193, 234], "world": 195, "wors": 217, "worth": 180, "would": [20, 171, 174, 205, 208, 218, 226, 229, 235, 239, 242, 247, 248, 253, 256, 260], "wq": 208, "wrap": [30, 171, 172, 243, 247, 260], "wrap_linear": 171, "wrapped_module_nam": [21, 179, 186, 212], "wrapper": [21, 179, 186, 208, 212, 214, 218, 220, 224, 239, 243, 253, 254, 257, 258, 259], "write": [174, 213, 226, 227, 228, 237, 238, 240, 245, 246, 249, 254, 257, 258, 259], "written": [9, 181, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "wrong": 208, "wrt": [12, 224], "wsl2": 208, "www": 234, "x": [0, 20, 158, 159, 160, 166, 167, 172, 173, 175, 177, 194, 196, 198, 199, 200, 201, 208, 212, 215, 218, 222, 224, 227, 228, 230, 231, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 253, 254, 256, 257, 258, 259, 260, 263], "x1": [63, 119, 172], "x2": [63, 119, 172, 230, 231], "x86": [192, 194, 195], "x86_64": 194, "x_": 263, "x_c": 166, "x_dq": 159, "x_q": [159, 160], "x_qdq": 158, "x_train": 243, "x_val": 243, "xiangyu": 217, "xx": 222, "y": [172, 193, 196, 198, 199, 212, 224, 227, 228, 239, 240, 247, 248, 260], "y_train": 243, "y_val": 243, "y_zero_point": 208, "ybelkada": [205, 206], "ye": 217, "yet": [177, 197, 203, 235, 239, 242, 243, 248, 253], "yield": [2, 8, 13, 23, 25, 26, 174, 182, 183, 184, 185, 188, 196, 198, 199, 207, 212, 215, 224, 227, 228, 232, 242, 256, 263], "yihui": 217, "you": [8, 17, 25, 29, 30, 171, 172, 179, 180, 185, 186, 187, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 207, 208, 212, 213, 214, 215, 217, 218, 219, 220, 224, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266], "your": [8, 25, 30, 171, 172, 173, 179, 185, 186, 193, 194, 196, 198, 199, 205, 209, 211, 212, 215, 217, 219, 223, 227, 228, 233, 234, 235, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266], "your_imagenet_validation_data_path": [196, 198, 199, 227, 228], "yy": 222, "zero": [11, 23, 183, 196, 208, 263], "zero_grad": [199, 205, 206, 228], "zeropad1d": 155, "zeropad2d": 156, "zeropad3d": 157, "zhang": 217, "zip": [212, 218, 224, 239], "zisserman": 217, "zlib": 208, "zou": 217, "zz": 222, "\u00aa": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00b2": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00b3": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00b5": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00b9": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00ba": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00bc": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00bd": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u00be": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u03c9": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u210e": 218, "\u215b": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u215c": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u215d": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\u215e": [191, 200, 208, 211, 213, 222, 224, 261, 262, 263, 265, 266], "\ud835\udc58": [218, 220], "\ud835\udc5a": 218, "\ud835\udc5b": 218, "\ud835\udc64": 218}, "titles": ["AIMET API", "aimet_onnx.apply_adaround", "aimet_onnx.mixed_precision", "aimet_onnx.batch_norm_fold", "aimet_onnx.cross_layer_equalization", "aimet_onnx API", "aimet_onnx.layer_output_utils", "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", "aimet_onnx.quant_analyzer", "aimet_onnx.quantsim", "aimet_onnx.apply_seq_mse", "aimet_tensorflow.adaround", "aimet_tensorflow.mixed_precision", "aimet_tensorflow.auto_quant_v2", "aimet_tensorflow.keras.bn_reestimation", "aimet_tensorflow.batch_norm_fold", "aimet_tensorflow.cross_layer_equalization", "aimet_tensorflow.compress", "aimet_tensorflow API", "aimet_tensorflow.layer_output_utils", "aimet_tensorflow.model_preparer", "aimet_tensorflow.quant_analyzer", "aimet_tensorflow.quantsim", "aimet_torch.adaround", "aimet_torch.experimental.adascale", "aimet_torch.auto_quant", "aimet_torch.bn_reestimation", "aimet_torch.batch_norm_fold", "aimet_torch.cross_layer_equalization", "aimet_torch.compress", "QuantizationMixin", "QuantizedAdaptiveAvgPool1d", "QuantizedAdaptiveAvgPool2d", "QuantizedAdaptiveAvgPool3d", "QuantizedAdaptiveMaxPool1d", "QuantizedAdaptiveMaxPool2d", "QuantizedAdaptiveMaxPool3d", "QuantizedAlphaDropout", "QuantizedAvgPool1d", "QuantizedAvgPool2d", "QuantizedAvgPool3d", "QuantizedBCELoss", "QuantizedBCEWithLogitsLoss", "QuantizedBatchNorm1d", "QuantizedBatchNorm2d", "QuantizedBatchNorm3d", "QuantizedBilinear", "QuantizedCELU", "QuantizedCTCLoss", "QuantizedChannelShuffle", "QuantizedCircularPad1d", "QuantizedCircularPad2d", "QuantizedCircularPad3d", "QuantizedConstantPad1d", "QuantizedConstantPad2d", "QuantizedConstantPad3d", "QuantizedConv1d", "QuantizedConv2d", "QuantizedConv3d", "QuantizedConvTranspose1d", "QuantizedConvTranspose2d", "QuantizedConvTranspose3d", "QuantizedCosineEmbeddingLoss", "QuantizedCosineSimilarity", "QuantizedCrossEntropyLoss", "QuantizedDropout", "QuantizedDropout1d", "QuantizedDropout2d", "QuantizedDropout3d", "QuantizedELU", "QuantizedEmbedding", "QuantizedEmbeddingBag", "QuantizedFeatureAlphaDropout", "QuantizedFlatten", "QuantizedFold", "QuantizedFractionalMaxPool2d", "QuantizedFractionalMaxPool3d", "QuantizedGELU", "QuantizedGLU", "QuantizedGRU", "QuantizedGRUCell", "QuantizedGaussianNLLLoss", "QuantizedGroupNorm", "QuantizedHardshrink", "QuantizedHardsigmoid", "QuantizedHardswish", "QuantizedHardtanh", "QuantizedHingeEmbeddingLoss", "QuantizedHuberLoss", "QuantizedInstanceNorm1d", "QuantizedInstanceNorm2d", "QuantizedInstanceNorm3d", "QuantizedKLDivLoss", "QuantizedL1Loss", "QuantizedLPPool1d", "QuantizedLPPool2d", "QuantizedLSTM", "QuantizedLSTMCell", "QuantizedLayerNorm", "QuantizedLeakyReLU", "QuantizedLinear", "QuantizedLocalResponseNorm", "QuantizedLogSigmoid", "QuantizedLogSoftmax", "QuantizedMSELoss", "QuantizedMarginRankingLoss", "QuantizedMaxPool1d", "QuantizedMaxPool2d", "QuantizedMaxPool3d", "QuantizedMaxUnpool1d", "QuantizedMaxUnpool2d", "QuantizedMaxUnpool3d", "QuantizedMish", "QuantizedMultiLabelMarginLoss", "QuantizedMultiLabelSoftMarginLoss", "QuantizedMultiMarginLoss", "QuantizedNLLLoss", "QuantizedNLLLoss2d", "QuantizedPReLU", "QuantizedPairwiseDistance", "QuantizedPixelShuffle", "QuantizedPixelUnshuffle", "QuantizedPoissonNLLLoss", "QuantizedRNN", "QuantizedRNNCell", "QuantizedRReLU", "QuantizedReLU", "QuantizedReLU6", "QuantizedReflectionPad1d", "QuantizedReflectionPad2d", "QuantizedReflectionPad3d", "QuantizedReplicationPad1d", "QuantizedReplicationPad2d", "QuantizedReplicationPad3d", "QuantizedSELU", "QuantizedSiLU", "QuantizedSigmoid", "QuantizedSmoothL1Loss", "QuantizedSoftMarginLoss", "QuantizedSoftmax", "QuantizedSoftmax2d", "QuantizedSoftmin", "QuantizedSoftplus", "QuantizedSoftshrink", "QuantizedSoftsign", "QuantizedTanh", "QuantizedTanhshrink", "QuantizedThreshold", "QuantizedTripletMarginLoss", "QuantizedTripletMarginWithDistanceLoss", "QuantizedUnflatten", "QuantizedUnfold", "QuantizedUpsample", "QuantizedUpsamplingBilinear2d", "QuantizedUpsamplingNearest2d", "QuantizedZeroPad1d", "QuantizedZeroPad2d", "QuantizedZeroPad3d", "DequantizedTensor", "QuantizedTensor", "QuantizedTensorBase", "Quantize", "QuantizeDequantize", "dequantize", "quantize", "quantize_dequantize", "FloatQuantizeDequantize", "aimet_torch API", "aimet_torch.visualization_tools", "aimet_torch.layer_output_utils", "aimet_torch.quantsim.config_utils", "Migration guide", "aimet_torch.model_preparer", "aimet_torch.model_validator", "aimet_torch.mixed_precision", "aimet_torch.nn", "aimet_torch.experimental.omniquant", "aimet_torch.onnx.export (beta)", "aimet_torch.peft", "aimet_torch.quant_analyzer", "aimet_torch.quantization", "aimet_torch.quantsim", "aimet_torch.seq_mse", "aimet_torch.v1.adaround", "aimet_torch.v1.mixed_precision", "aimet_torch.v1.auto_quant", "aimet_torch.v1.quant_analyzer", "aimet_torch.v1.quantsim", "aimet_torch.v1.seq_mse", "External resources", "Glossary", "AIMET Documentation", "What is AIMET?", "Building from source", "Installation", "Quick Start", "Adaptive rounding", "AdaScale", "Automatic quantization", "Batch norm re-estimation", "Batch norm folding", "Cross-layer equalization", "Post Training Quantization Techniques", "OmniQuant", "Quantized LoRa", "QW-LoRa", "QWA-LoRa", "Sequential MSE", "Release notes", "Analysis tools", "Interactive visualization", "Layer output generation", "Quantization analyzer", "Per-block quantization", "Channel pruning", "Compression features Guidebook", "Greedy compression ratio selection", "Compression", "Spatial SVD", "AIMET visualization", "Weight SVD", "Winnowing", "Encoding Format Specification", "Techniques", "Automatic mixed precision", "Mixed precision", "Manual mixed precision", "Calibration", "Quantization-aware training", "Runtime configuration", "TensorFlow model guidelines", "PyTorch model guidelines", "Quantization debugging guidelines", "Tutorials", "Example Notebooks", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "Cross-Layer Equalization", "Quantization simulation", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Quantization-Aware Training with a Keras Transformer Model", "Keras Model Preparer", "Quantization-aware training", "Quantization-Aware training with range learning", "Quant Analyzer", "Quantsim and Adaround - Per Channel Quantization (PCQ)", "Cross-Layer Equalization with QuantSim", "Model compression using channel pruning", "Model compression using spatial SVD", "Model compression using spatial SVD and channel pruning", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Cross-Layer Equalization and Bias Correction", "Quantization-aware training", "Quantization-aware training with range learning", "Quant Analyzer", "On-target inference", "Quantization workflow", "Quantization simulation guide", "Quantization user guide", "AIMET features", "Quantization workflow", "AIMET documentation versions"], "titleterms": {"0": [208, 222, 239], "1": [171, 196, 197, 198, 199, 200, 203, 207, 208, 211, 212, 222, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "10": 193, "13": 208, "16": 208, "17": 208, "18": 208, "19": 208, "2": [171, 196, 197, 198, 199, 200, 203, 207, 208, 211, 212, 222, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "20": 208, "21": 208, "22": 208, "23": 208, "24": 208, "25": 208, "26": 208, "27": 208, "28": 208, "29": 208, "3": [193, 196, 197, 198, 199, 200, 203, 207, 208, 211, 212, 222, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "30": 208, "31": 208, "32": 208, "33": 208, "34": 208, "35": 208, "4": [196, 197, 198, 199, 203, 207, 208, 211, 212, 224, 227, 228, 229, 232, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259, 262, 266], "5": [197, 198, 203, 207, 208, 212, 227, 228, 229, 232, 241, 242, 256], "6": [198, 208, 212, 222, 232], "7": [198, 208, 232], "8": [208, 232], "9": 208, "For": [236, 237, 238, 240, 241, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259], "On": [261, 264], "accuraci": [235, 236, 237, 238, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 262, 265, 266], "activ": [212, 232], "adapt": [196, 202, 236, 240, 254], "adaround": [11, 23, 183, 236, 240, 248, 254], "adascal": [24, 197, 202], "affin": [171, 180], "ai": 261, "aimet": [0, 191, 192, 193, 195, 219, 263, 264, 265, 267], "aimet_onnx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "aimet_tensorflow": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "aimet_torch": [23, 24, 25, 26, 27, 28, 29, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "algorithm": [224, 235, 239, 253], "also": 263, "altern": 194, "amp": [235, 239, 253], "an": [235, 236, 237, 238], "analysi": [209, 212, 223, 224, 232, 247, 260], "analyz": [209, 212, 247, 260], "api": [0, 5, 18, 20, 167, 172, 173, 175, 178, 180, 191, 196, 197, 198, 199, 200, 201, 203, 207, 210, 211, 212, 213, 214, 218, 220, 224, 226, 227, 228, 235, 239, 253, 265], "appli": [226, 236, 237, 240, 241, 247, 248, 249, 254, 257, 260], "apply_adaround": 1, "apply_seq_ms": 10, "arg": 222, "auto_qu": [25, 185], "auto_quant_v2": 13, "automat": [198, 202, 224, 225, 235, 239, 253], "autoqu": [241, 255], "awar": [223, 228, 242, 243, 245, 246, 256, 258, 259, 265], "base": [205, 226], "baselin": [235, 236, 237, 238, 239, 240, 241, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "batch": [199, 200, 202, 235, 237, 238, 240, 245, 246, 248, 249, 253, 254, 257, 258, 259], "batch_norm_fold": [3, 15, 27], "batchnorm": [242, 256], "bc": 257, "beta": 177, "between": 244, "bia": 257, "bit": 224, "block": [180, 213], "blockwis": [213, 223], "bn_reestim": [14, 26], "bokeh": 219, "brows": 234, "build": [193, 194], "calibr": [206, 212, 227, 228], "call": [235, 239, 253, 263], "callback": [206, 212, 227, 235, 242, 253], "case": [217, 224], "channel": [180, 214, 217, 248, 250, 252], "check": 232, "choos": 194, "cle": [237, 249, 257], "code": [20, 171, 172, 214, 218, 220, 224, 234], "compil": [193, 261], "complementari": 196, "compress": [17, 29, 214, 215, 216, 217, 218, 219, 220, 223, 250, 251, 252], "comput": [175, 227, 228, 235, 239, 253], "conda": 193, "confid": 232, "config_util": 170, "configur": [175, 229, 263], "constant": [241, 242, 255], "contain": 193, "context": [196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 214, 218, 220, 224, 226], "convers": 261, "convert": [224, 235, 236, 237, 238, 244], "correct": 257, "cp": 217, "creat": [193, 206, 212, 224, 227, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259], "cross": [201, 202, 237, 249, 257], "cross_layer_equ": [4, 16, 28], "cuda": 193, "data": 222, "dataset": [235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "debug": [232, 264], "default": 229, "defin": [235, 241, 242, 253, 255], "definit": 22, "depend": 193, "deploi": [262, 266], "deploy": 265, "dequant": 163, "dequantizedtensor": 158, "descript": 212, "design": 219, "desir": 193, "determin": [236, 237, 238, 240, 241, 245, 246, 248, 249, 254, 257, 258, 259, 263], "dictionari": 222, "differ": 244, "direct": 261, "disabl": [247, 260], "discuss": 244, "docker": 193, "document": [191, 193, 267], "download": 234, "enabl": [212, 247, 260], "encod": [175, 212, 222, 227, 235, 239, 247, 253, 260, 263], "engin": 261, "enum": 22, "environ": 193, "equal": [201, 202, 237, 249, 257], "error": 212, "estim": [199, 202, 242, 256], "evalu": [212, 227, 228, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "exampl": [20, 171, 172, 191, 214, 218, 220, 224, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "execut": [199, 201, 213, 261], "experiment": [24, 176], "explor": 216, "export": [177, 213, 227, 228, 242, 256, 263, 265], "extern": 189, "fake": 239, "faq": 217, "fast": 239, "featur": [215, 264, 265], "file": 229, "find": [224, 239], "fine": [217, 250, 251, 252], "fix": 232, "float": 171, "floatquantizedequant": 166, "flow": [178, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "fold": [200, 202, 235, 237, 238, 240, 242, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259], "format": 222, "fp16": [262, 266], "fp32": [232, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "from": [171, 193, 194], "front": 224, "function": [235, 241, 242, 244, 253, 255], "gener": [209, 211, 262, 266], "get": [192, 240, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "glossari": [190, 191], "gpu": 228, "granular": 263, "greedi": 216, "group": 224, "guid": [171, 263, 264], "guidebook": 215, "guidelin": [230, 231, 232, 262, 264, 266], "helper": [241, 255], "histogram": 212, "how": [171, 216, 221, 229, 263], "hub": 261, "hyper": 196, "i": [192, 235, 239, 247, 248, 253, 256, 260], "import": [211, 212], "improv": 265, "individu": 232, "infer": [261, 264, 265], "inform": [236, 237, 238, 240, 241, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259], "initi": 228, "input": [211, 226], "insert": 239, "instal": [193, 194, 195], "instanti": [236, 237, 238, 239, 240, 241, 242, 245, 246, 249, 250, 251, 252, 254, 257, 258, 259], "interact": [209, 210], "kera": [14, 242, 243, 244], "layer": [201, 202, 209, 211, 212, 216, 217, 224, 226, 232, 235, 237, 238, 240, 242, 244, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260], "layer_output_util": [6, 19, 169], "leaf": 226, "learn": [246, 259], "learnedgrid": 171, "level": 222, "librari": 212, "limit": [20, 172, 244], "list": 224, "load": [211, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "local": 193, "lora": [202, 204, 205, 206], "loss": [212, 247, 260], "low": 213, "manual": [225, 226], "max": [212, 247, 260, 263], "mean": 212, "method": 239, "migrat": 171, "min": [212, 247, 260, 263], "mix": [224, 225, 226, 235, 239, 253, 265], "mixed_precis": [2, 12, 174, 184], "mmp": 226, "mode": 228, "model": [195, 205, 211, 212, 213, 217, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266], "model_input": 229, "model_output": 229, "model_prepar": [20, 172], "model_valid": 173, "modifi": 229, "modul": [171, 175], "more": [236, 237, 238, 240, 241, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259], "move": 171, "mse": [202, 207, 247, 260], "multi": 228, "new": 193, "next": [236, 240, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 262, 266], "nn": 175, "nois": 263, "non": 226, "norm": [199, 200, 202, 237, 257], "normal": [235, 238, 240, 245, 246, 248, 249, 253, 254, 258, 259], "note": [191, 208, 217], "notebook": [191, 234, 235, 239, 247, 248, 253, 256, 260], "nvidia": 193, "obtain": 211, "old": 194, "omniqu": [176, 202, 203], "onnx": [177, 235, 236, 237, 238], "op": [224, 239], "option": [217, 226], "origin": 244, "output": [209, 211, 226], "overal": [235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "overhead": 224, "overview": [191, 216, 217, 219, 221, 229, 263], "packag": [193, 194], "param": 229, "paramet": [196, 228, 235, 239, 253, 263], "pareto": 224, "path": 265, "pcq": 248, "pdf": [247, 260], "peft": 178, "per": [180, 212, 213, 216, 217, 232, 247, 248, 260], "perform": [224, 232, 242, 245, 246, 256, 258, 259], "phase": 224, "pip": 193, "pipelin": [235, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260], "platform": [192, 195], "post": [191, 202, 223, 265], "power": 213, "precis": [224, 225, 226, 235, 239, 253, 262, 265, 266], "prepar": [212, 242, 244], "prerequisit": [194, 196, 197, 198, 199, 203, 207, 212, 227, 228], "pretrain": [241, 247, 255], "procedur": [197, 198, 200, 203, 207, 214, 262, 266], "process": 171, "profil": 226, "prune": [214, 217, 250, 252], "ptq": 205, "pypi": 194, "python": 193, "pytorch": [231, 235, 236, 237, 238], "qat": [228, 242, 245, 246, 256, 258, 259], "qualcomm": 261, "quant": [247, 260], "quant_analyz": [8, 21, 179, 186], "quantanalyz": [212, 247, 260], "quantiz": [161, 164, 171, 175, 180, 191, 195, 198, 202, 204, 205, 209, 212, 213, 222, 223, 228, 232, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "quantizationmixin": 30, "quantizationsim": 242, "quantizationsimmodel": 206, "quantize_dequant": 165, "quantizedadaptiveavgpool1d": 31, "quantizedadaptiveavgpool2d": 32, "quantizedadaptiveavgpool3d": 33, "quantizedadaptivemaxpool1d": 34, "quantizedadaptivemaxpool2d": 35, "quantizedadaptivemaxpool3d": 36, "quantizedalphadropout": 37, "quantizedavgpool1d": 38, "quantizedavgpool2d": 39, "quantizedavgpool3d": 40, "quantizedbatchnorm1d": 43, "quantizedbatchnorm2d": 44, "quantizedbatchnorm3d": 45, "quantizedbceloss": 41, "quantizedbcewithlogitsloss": 42, "quantizedbilinear": 46, "quantizedcelu": 47, "quantizedchannelshuffl": 49, "quantizedcircularpad1d": 50, "quantizedcircularpad2d": 51, "quantizedcircularpad3d": 52, "quantizedconstantpad1d": 53, "quantizedconstantpad2d": 54, "quantizedconstantpad3d": 55, "quantizedconv1d": 56, "quantizedconv2d": 57, "quantizedconv3d": 58, "quantizedconvtranspose1d": 59, "quantizedconvtranspose2d": 60, "quantizedconvtranspose3d": 61, "quantizedcosineembeddingloss": 62, "quantizedcosinesimilar": 63, "quantizedcrossentropyloss": 64, "quantizedctcloss": 48, "quantizeddropout": 65, "quantizeddropout1d": 66, "quantizeddropout2d": 67, "quantizeddropout3d": 68, "quantizedelu": 69, "quantizedembed": 70, "quantizedembeddingbag": 71, "quantizedequant": 162, "quantizedfeaturealphadropout": 72, "quantizedflatten": 73, "quantizedfold": 74, "quantizedfractionalmaxpool2d": 75, "quantizedfractionalmaxpool3d": 76, "quantizedgaussiannllloss": 81, "quantizedgelu": 77, "quantizedglu": 78, "quantizedgroupnorm": 82, "quantizedgru": 79, "quantizedgrucel": 80, "quantizedhardshrink": 83, "quantizedhardsigmoid": 84, "quantizedhardswish": 85, "quantizedhardtanh": 86, "quantizedhingeembeddingloss": 87, "quantizedhuberloss": 88, "quantizedinstancenorm1d": 89, "quantizedinstancenorm2d": 90, "quantizedinstancenorm3d": 91, "quantizedkldivloss": 92, "quantizedl1loss": 93, "quantizedlayernorm": 98, "quantizedleakyrelu": 99, "quantizedlinear": 100, "quantizedlocalresponsenorm": 101, "quantizedlogsigmoid": 102, "quantizedlogsoftmax": 103, "quantizedlppool1d": 94, "quantizedlppool2d": 95, "quantizedlstm": 96, "quantizedlstmcel": 97, "quantizedmarginrankingloss": 105, "quantizedmaxpool1d": 106, "quantizedmaxpool2d": 107, "quantizedmaxpool3d": 108, "quantizedmaxunpool1d": 109, "quantizedmaxunpool2d": 110, "quantizedmaxunpool3d": 111, "quantizedmish": 112, "quantizedmseloss": 104, "quantizedmultilabelmarginloss": 113, "quantizedmultilabelsoftmarginloss": 114, "quantizedmultimarginloss": 115, "quantizednllloss": 116, "quantizednllloss2d": 117, "quantizedpairwisedist": 119, "quantizedpixelshuffl": 120, "quantizedpixelunshuffl": 121, "quantizedpoissonnllloss": 122, "quantizedprelu": 118, "quantizedreflectionpad1d": 128, "quantizedreflectionpad2d": 129, "quantizedreflectionpad3d": 130, "quantizedrelu": 126, "quantizedrelu6": 127, "quantizedreplicationpad1d": 131, "quantizedreplicationpad2d": 132, "quantizedreplicationpad3d": 133, "quantizedrnn": 123, "quantizedrnncel": 124, "quantizedrrelu": 125, "quantizedselu": 134, "quantizedsigmoid": 136, "quantizedsilu": 135, "quantizedsmoothl1loss": 137, "quantizedsoftmarginloss": 138, "quantizedsoftmax": 139, "quantizedsoftmax2d": 140, "quantizedsoftmin": 141, "quantizedsoftplu": 142, "quantizedsoftshrink": 143, "quantizedsoftsign": 144, "quantizedtanh": 145, "quantizedtanhshrink": 146, "quantizedtensor": 159, "quantizedtensorbas": 160, "quantizedthreshold": 147, "quantizedtripletmarginloss": 148, "quantizedtripletmarginwithdistanceloss": 149, "quantizedunflatten": 150, "quantizedunfold": 151, "quantizedupsampl": 152, "quantizedupsamplingbilinear2d": 153, "quantizedupsamplingnearest2d": 154, "quantizedzeropad1d": 155, "quantizedzeropad2d": 156, "quantizedzeropad3d": 157, "quantsim": [7, 9, 22, 170, 181, 187, 227, 248, 249, 263], "quantwrapp": 171, "quick": 195, "quickli": 195, "qw": [204, 205], "qwa": [204, 206], "rang": [212, 246, 247, 259, 260], "rank": 217, "ratio": [216, 217, 219], "re": [199, 202, 242, 256], "recommend": 228, "reconstruct": 214, "reduc": [224, 262, 266], "reestim": 256, "refer": [175, 180, 191, 217], "regular": 239, "relat": 234, "releas": [191, 208], "resourc": 189, "restor": [262, 266], "round": [196, 202, 217, 236, 240, 254], "run": [193, 206, 212, 234, 235, 239, 253, 255], "runtim": [229, 263], "scheme": 263, "score": [240, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259], "sdk": 261, "select": [214, 216, 217], "sensit": [212, 224, 232], "seq_ms": [182, 188], "sequenti": [202, 207], "server": [219, 234], "session": 219, "set": [193, 226], "set_grouped_blockwise_quantization_for_weight": 7, "setup": [196, 197, 199, 201, 203, 205, 206, 207, 214, 218, 220, 226, 228], "show": 244, "signal": 263, "sim": [235, 237, 238, 240, 245, 246, 249, 253, 254, 256, 257, 258, 259], "similar": 244, "simplifi": [235, 236, 237, 238], "simul": [235, 236, 237, 238, 239, 240, 245, 246, 248, 249, 253, 254, 256, 257, 258, 259, 263, 265], "small": 195, "sourc": [193, 194], "spatial": [217, 218, 251, 252], "specif": 222, "squar": 212, "start": [192, 195, 219], "staticgrid": 171, "statist": [212, 247, 256, 260], "step": [196, 197, 198, 199, 200, 203, 207, 211, 212, 224, 227, 228, 236, 240, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 262, 266], "structur": [222, 229], "subclass": 244, "summari": [239, 242, 244, 248, 256], "supergroup": 229, "support": [192, 193, 228, 265], "svd": [217, 218, 220, 251, 252], "target": [261, 264, 265], "techniqu": [191, 196, 202, 217, 223, 257], "tensorflow": 230, "terminologi": 178, "test": [193, 195], "tf": 263, "thi": [235, 239, 247, 248, 253, 256, 260], "tool": [168, 209, 223, 265], "top": 222, "train": [191, 202, 205, 206, 223, 228, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 265], "transform": 243, "try": [262, 266], "tune": [217, 250, 251, 252], "tutori": [191, 233], "type": [222, 226], "unit": 193, "updat": 205, "us": [171, 214, 217, 218, 220, 224, 250, 251, 252], "user": [178, 264], "v": 171, "v1": [167, 183, 184, 185, 186, 187, 188], "valid": [236, 237, 238, 240, 241, 249, 250, 251, 252, 254, 257, 258, 259], "variabl": 193, "verifi": [194, 195, 262, 266], "version": [194, 222, 267], "visual": [168, 209, 210, 219, 232], "visualization_tool": 168, "w16a16": [262, 266], "weight": [205, 212, 214, 217, 220, 232], "what": [192, 235, 239, 247, 248, 253, 256, 260], "wheel": 193, "width": 224, "winnow": [214, 221], "work": [216, 221, 263], "workflow": [196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 214, 218, 220, 224, 226, 227, 228, 232, 262, 263, 264, 266], "wrapper": [247, 260], "x": 171}})