Search.setIndex({"alltitles": {"1) Find layer groups": [[235, "find-layer-groups"]], "1. Creating a Keras model with subclass layers": [[199, "1.-Creating-a-Keras-model-with-subclass-layers"]], "1. Define Constants and Helper functions": [[210, "1.-Define-Constants-and-Helper-functions"]], "1. Example evaluation and training pipeline": [[202, "1.-Example-evaluation-and-training-pipeline"], [203, "1.-Example-evaluation-and-training-pipeline"], [211, "1.-Example-evaluation-and-training-pipeline"], [215, "1.-Example-evaluation-and-training-pipeline"]], "1. Example evaluation pipeline": [[190, "1.-Example-evaluation-pipeline"], [208, "1.-Example-evaluation-pipeline"]], "1. FP32 confidence checks": [[258, "fp32-confidence-checks"]], "1. Instantiate the example evaluation and training datasets": [[200, "1.-Instantiate-the-example-evaluation-and-training-datasets"], [201, "1.-Instantiate-the-example-evaluation-and-training-datasets"]], "1. Instantiate the example evaluation and training pipeline": [[197, "1.-Instantiate-the-example-evaluation-and-training-pipeline"]], "1. Instantiate the example evaluation method": [[194, "1.-Instantiate-the-example-evaluation-method"]], "1. Instantiate the example training and validation pipeline": [[191, "1.-Instantiate-the-example-training-and-validation-pipeline"], [192, "1.-Instantiate-the-example-training-and-validation-pipeline"], [193, "1.-Instantiate-the-example-training-and-validation-pipeline"], [195, "1.-Instantiate-the-example-training-and-validation-pipeline"], [196, "1.-Instantiate-the-example-training-and-validation-pipeline"], [204, "1.-Instantiate-the-example-training-and-validation-pipeline"], [205, "1.-Instantiate-the-example-training-and-validation-pipeline"], [206, "1.-Instantiate-the-example-training-and-validation-pipeline"], [207, "1.-Instantiate-the-example-training-and-validation-pipeline"], [209, "1.-Instantiate-the-example-training-and-validation-pipeline"], [212, "1.-Instantiate-the-example-training-and-validation-pipeline"], [213, "1.-Instantiate-the-example-training-and-validation-pipeline"], [214, "1.-Instantiate-the-example-training-and-validation-pipeline"]], "1. Run the notebook server": [[189, "run-the-notebook-server"]], "1. Sensitivity to weight and activation quantization": [[221, "sensitivity-to-weight-and-activation-quantization"]], "1. Versioning": [[251, "versioning"]], "1. defaults": [[254, "defaults"]], "1.13.0": [[257, "id35"]], "1.16.0": [[257, "id34"]], "1.16.1": [[257, "id33"]], "1.16.2": [[257, "id32"]], "1.17.0": [[257, "id31"]], "1.18.0": [[257, "id30"]], "1.19.1": [[257, "id29"]], "1.20.0": [[257, "id28"]], "1.21.0": [[257, "id27"]], "1.22.0": [[257, "id26"]], "1.22.1": [[257, "id25"]], "1.22.2": [[257, "id24"]], "1.23.0": [[257, "id23"]], "1.24.0": [[257, "id22"]], "1.25.0": [[257, "id21"]], "1.26.0": [[257, "id20"]], "1.27.0": [[257, "id19"]], "1.28.0": [[257, "id18"]], "1.29.0": [[257, "id17"]], "1.30.0": [[257, "id16"]], "1.31.0": [[257, "id15"]], "1.32.0": [[257, "id14"]], "1.33.0": [[257, "id13"]], "1.33.5": [[257, "id12"]], "1.34.0": [[257, "id11"]], "1.35.0": [[257, "id10"]], "1.35.1": [[257, "id9"]], "2) Perform sensitivity analysis (Phase 1)": [[235, "perform-sensitivity-analysis-phase-1"]], "2. Convert an FP32 PyTorch model to ONNX, simplify & then evaluate baseline FP32 accuracy": [[190, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [191, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [192, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"], [193, "2.-Convert-an-FP32-PyTorch-model-to-ONNX,-simplify-&-then-evaluate-baseline-FP32-accuracy"]], "2. Converting the Keras model with subclass layers to a Keras model with functional layers": [[199, "2.-Converting-the-Keras-model-with-subclass-layers-to-a-Keras-model-with-functional-layers"]], "2. Create the model in Keras": [[197, "2.-Create-the-model-in-Keras"]], "2. Define Constants and Datasets Prepare": [[197, "2.-Define-Constants-and-Datasets-Prepare"]], "2. Download the example notebooks and related code": [[189, "download-the-example-notebooks-and-related-code"]], "2. Load FP32 model": [[211, "2.-Load-FP32-model"]], "2. Load a pretrained FP32 model": [[196, "2.-Load-a-pretrained-FP32-model"], [202, "2.-Load-a-pretrained-FP32-model"], [210, "2.-Load-a-pretrained-FP32-model"]], "2. Load the FP32 model and evaluate the model to find the baseline FP32 accuracy": [[194, "2.-Load-the-FP32-model-and-evaluate-the-model-to-find-the-baseline-FP32-accuracy"]], "2. Load the model": [[215, "2.-Load-the-model"]], "2. Load the model and evaluate to get a baseline FP32 accuracy score": [[195, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [200, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [201, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [203, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [204, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [205, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [206, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [207, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [208, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [209, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [212, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [213, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"], [214, "2.-Load-the-model-and-evaluate-to-get-a-baseline-FP32-accuracy-score"]], "2. Per-layer quantizer enablement": [[221, "per-layer-quantizer-enablement"]], "2. Version 0.6.1": [[251, "version-0-6-1"]], "2. Weights or activations quantization": [[258, "weights-or-activations-quantization"]], "2. params": [[254, "params"]], "2.0.0": [[257, "id8"]], "2.1. Encoding specification": [[251, "encoding-specification"]], "2.1.0": [[257, "id7"]], "2.2.0": [[257, "id6"]], "2.3.0": [[257, "id5"]], "2.4.0": [[257, "id4"]], "2.5.0": [[257, "id3"]], "2.6.0": [[257, "id2"]], "2.7.0": [[257, "id1"]], "3) Create a Pareto-front list (Phase 2)": [[235, "create-a-pareto-front-list-phase-2"]], "3. Apply QuantAnalyzer to the model": [[202, "3.-Apply-QuantAnalyzer-to-the-model"], [215, "3.-Apply-QuantAnalyzer-to-the-model"]], "3. Compress the model and fine-tune": [[205, "3.-Compress-the-model-and-fine-tune"], [206, "3.-Compress-the-model-and-fine-tune"], [207, "3.-Compress-the-model-and-fine-tune"]], "3. Create a quantization simulation model": [[190, "3.-Create-a-quantization-simulation-model"], [208, "3.-Create-a-quantization-simulation-model"]], "3. Create a quantization simulation model and Perform QAT": [[211, "3.-Create-a-quantization-simulation-model-and-Perform-QAT"]], "3. Create a quantization simulation model and determine quantized accuracy": [[191, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [192, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [193, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [195, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [200, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [201, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [203, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [204, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [209, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [212, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [213, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"], [214, "3.-Create-a-quantization-simulation-model-and-determine-quantized-accuracy"]], "3. Determine the baseline FP32 accuracy": [[196, "3.-Determine-the-baseline-FP32-accuracy"]], "3. Fixing weight quantization": [[258, "fixing-weight-quantization"]], "3. Per-layer encodings min-max range": [[221, "per-layer-encodings-min-max-range"]], "3. Run AutoQuant": [[210, "3.-Run-AutoQuant"]], "3. Run the notebooks": [[189, "run-the-notebooks"]], "3. Showing similarities and differences between the original and converted models": [[199, "3.-Showing-similarities-and-differences-between-the-original-and-converted-models"]], "3. Train and evaluate the model": [[197, "3.-Train-and-evaluate-the-model"]], "3. Version 1.0.0": [[251, "version-1-0-0"]], "3. supergroups": [[254, "supergroups"]], "3.1. Encoding specification": [[251, "id1"]], "3.Create a quantization simulation model (with fake quantization ops inserted)": [[194, "3.Create-a-quantization-simulation-model-(with-fake-quantization-ops-inserted)"]], "4) Reduce Bit-width Convert Op Overhead (Phase 3)": [[235, "reduce-bit-width-convert-op-overhead-phase-3"]], "4. Apply Adaround": [[191, "4.-Apply-Adaround"], [195, "4.-Apply-Adaround"], [203, "4.-Apply-Adaround"], [209, "4.-Apply-Adaround"]], "4. Apply CLE": [[192, "4.-Apply-CLE"], [204, "4.-Apply-CLE"]], "4. Apply CLE and BC": [[212, "4.-Apply-CLE-and-BC"]], "4. Create a QuantizationSim Model": [[197, "4.-Create-a-QuantizationSim-Model"]], "4. Define constants and helper functions": [[196, "4.-Define-constants-and-helper-functions"]], "4. Discussing the limitations of the Keras Model Preparer": [[199, "4.-Discussing-the-limitations-of-the-Keras-Model-Preparer"]], "4. Fixing activation quantization": [[258, "fixing-activation-quantization"]], "4. Per-layer statistics histogram": [[221, "per-layer-statistics-histogram"]], "4. Perform BatchNorm Reestimation": [[211, "4.-Perform-BatchNorm-Reestimation"]], "4. Perform QAT": [[200, "4.-Perform-QAT"], [201, "4.-Perform-QAT"], [213, "4.-Perform-QAT"], [214, "4.-Perform-QAT"]], "4. Run AMP algorithm on the quantized model": [[190, "4.-Run-AMP-algorithm-on-the-quantized-model"], [194, "4.-Run-AMP-algorithm-on-the-quantized-model"], [208, "4.-Run-AMP-algorithm-on-the-quantized-model"]], "4. model_input": [[254, "model-input"]], "5. Apply AutoQuant": [[196, "5.-Apply-AutoQuant"]], "5. Export Model": [[197, "5.-Export-Model"], [211, "5.-Export-Model"]], "5. Per-layer mean-square-error loss": [[221, "per-layer-mean-square-error-loss"]], "5. Perform QAT": [[197, "5.-Perform-QAT"]], "5. Performing per-layer analysis": [[258, "performing-per-layer-analysis"]], "5. model_output": [[254, "model-output"]], "6. Visualizing sensitive layers": [[258, "visualizing-sensitive-layers"]], "7. Fixing individual quantizers": [[258, "fixing-individual-quantizers"]], "8. Quantize the model": [[258, "quantize-the-model"]], "AIMET API": [[0, null]], "AIMET Documentation": [[244, null]], "AIMET documentation versions": [[263, null]], "AIMET features": [[259, "aimet-features"], [261, null]], "AIMET installation in Docker": [[246, null]], "AIMET manual installation and setup": [[247, null]], "AIMET visualization": [[231, null]], "API": [[20, "api"], [172, "api"], [173, "api"], [178, "api"], [216, "api"], [217, "api"], [219, "api"], [220, "api"], [221, "api"], [222, "api"], [223, "api"], [224, "api"], [225, "api"], [226, "api"], [230, "api"], [232, "api"], [235, "api"], [237, "api"], [238, "api"], [242, "api"], [249, "api"], [250, "api"], [253, "api"]], "API Call for Regular AMP": [[194, "API-Call-for-Regular-AMP"]], "API Reference": [[244, "api-reference"]], "API reference": [[175, "api-reference"], [180, "api-reference"]], "Accuracy improvement tools": [[261, "accuracy-improvement-tools"]], "AdaScale": [[217, null], [234, "adascale"]], "Adaptive Rounding (AdaRound)": [[191, null], [195, null], [209, null]], "Adaptive rounding": [[216, null], [234, "adaptive-rounding"]], "Affine quantizers": [[180, "affine-quantizers"]], "Alternative packages": [[245, "alternative-packages"]], "Analysis descriptions": [[221, "analysis-descriptions"]], "Analysis tools": [[218, null], [234, "analysis-tools"]], "Apply the profile": [[237, "apply-the-profile"]], "AutoQuant": [[196, null], [210, null]], "Automatic Mixed-Precision (AMP)": [[190, null], [194, null], [208, null]], "Automatic mixed precision": [[235, null], [236, "automatic-mixed-precision"]], "Automatic quantization": [[222, null], [234, "automatic-quantization"]], "Batch norm folding": [[224, null], [234, "batch-norm-folding"]], "Batch norm re-estimation": [[223, null], [234, "batch-norm-re-estimation"]], "Bias Correction": [[212, "Bias-Correction"]], "Browse the notebooks": [[189, "browse-the-notebooks"]], "Build a Docker image": [[246, "build-a-docker-image"]], "Building from source": [[245, "building-from-source"]], "CLE": [[212, "CLE"]], "Calibration": [[250, null]], "Calibration Callback": [[241, "calibration-callback"]], "Call AMP API": [[190, "Call-AMP-API"], [208, "Call-AMP-API"]], "Channel pruning": [[226, null]], "Channel pruning (CP)": [[229, "channel-pruning-cp"]], "Channel selection": [[226, "channel-selection"]], "Choose and install a package": [[245, "choose-and-install-a-package"]], "Choose to download or build an image": [[246, "choose-to-download-or-build-an-image"]], "Choose your AIMET variant": [[246, "choose-your-aimet-variant"]], "Code Examples": [[20, "code-examples"], [171, "code-examples"], [172, "code-examples"]], "Code example": [[226, "code-example"], [230, "code-example"], [232, "code-example"], [235, "code-example"]], "Compilation": [[260, "compilation"]], "Complementary techniques": [[216, "complementary-techniques"]], "Compressing using Spatial SVD": [[230, "compressing-using-spatial-svd"]], "Compression": [[229, null], [231, "compression"], [234, "compression"]], "Compression features Guidebook": [[227, null]], "Compression ratio selection": [[228, "compression-ratio-selection"], [229, "compression-ratio-selection"]], "Compression using Channel Pruning": [[226, "compression-using-channel-pruning"]], "Compression using Weight SVD": [[232, "compression-using-weight-svd"]], "Compute Encodings": [[190, "Compute-Encodings"], [194, "Compute-Encodings"], [208, "Compute-Encodings"]], "Computing encodings": [[175, "computing-encodings"]], "Configuration": [[175, "configuration"]], "Configuration file structure": [[254, "configuration-file-structure"]], "Context": [[216, "context"], [217, "context"], [219, "context"], [220, "context"], [221, "context"], [222, "context"], [223, "context"], [224, "context"], [225, "context"], [226, "context"], [230, "context"], [232, "context"], [235, "context"], [237, "context"], [238, "context"], [240, "context"], [241, "context"], [242, "context"]], "Conversion": [[260, "conversion"]], "Create Quantization Sim Model": [[190, "Create-Quantization-Sim-Model"], [208, "Create-Quantization-Sim-Model"], [211, "Create-Quantization-Sim-Model"]], "Create QuantizationSimModel": [[241, "create-quantizationsimmodel"]], "Create the Quantization Sim Model": [[191, "Create-the-Quantization-Sim-Model"], [192, "Create-the-Quantization-Sim-Model"], [193, "Create-the-Quantization-Sim-Model"], [195, "Create-the-Quantization-Sim-Model"], [200, "Create-the-Quantization-Sim-Model"], [201, "Create-the-Quantization-Sim-Model"], [204, "Create-the-Quantization-Sim-Model"], [209, "Create-the-Quantization-Sim-Model"], [212, "Create-the-Quantization-Sim-Model"], [213, "Create-the-Quantization-Sim-Model"], [214, "Create-the-Quantization-Sim-Model"]], "Cross-Layer Equalization": [[192, null]], "Cross-Layer Equalization and Bias Correction": [[212, null]], "Cross-Layer Equalization with QuantSim": [[204, null]], "Cross-layer equalization": [[225, null], [234, "cross-layer-equalization"]], "Data type": [[251, "id5"]], "Dataset": [[190, "Dataset"], [191, "Dataset"], [192, "Dataset"], [193, "Dataset"], [194, "Dataset"], [195, "Dataset"], [196, "Dataset"], [197, "Dataset"], [200, "Dataset"], [201, "Dataset"], [202, "Dataset"], [203, "Dataset"], [204, "Dataset"], [205, "Dataset"], [206, "Dataset"], [207, "Dataset"], [208, "Dataset"], [209, "Dataset"], [210, "Dataset"], [211, "Dataset"], [212, "Dataset"], [213, "Dataset"], [214, "Dataset"], [215, "Dataset"]], "Debugging guidelines": [[259, "debugging-guidelines"]], "Debugging workflow": [[258, "debugging-workflow"]], "Define callback functions for AMP": [[190, "Define-callback-functions-for-AMP"], [208, "Define-callback-functions-for-AMP"]], "Deployment paths": [[261, "deployment-paths"]], "DequantizedTensor": [[158, null]], "Design": [[231, "design"]], "Determine quantization parameters (encodings)": [[252, "determine-quantization-parameters-encodings"]], "Docker install": [[245, "docker-install"]], "Download a prebuilt Docker image": [[246, "download-a-prebuilt-docker-image"]], "Encoding Format Specification": [[251, null]], "Encoding dictionary structure": [[251, "id3"]], "Encoding min/max ranges": [[202, "Encoding-min/max-ranges"], [215, "Encoding-min/max-ranges"]], "Encoding type": [[251, "id4"]], "Enum Definition": [[22, "enum-definition"]], "Environment setup": [[246, "environment-setup"]], "Example Notebooks": [[244, "example-notebooks"]], "Examples": [[189, null]], "Executing per-block quantization": [[249, "executing-per-block-quantization"]], "Execution": [[223, "execution"], [225, "execution"], [260, "execution"]], "Export API": [[261, "export-api"]], "Export tools": [[261, "export-tools"]], "Exported Encodings": [[252, "exported-encodings"]], "Exporting blockwise-quantized models": [[249, "exporting-blockwise-quantized-models"]], "FAQs": [[229, "faqs"]], "Fast AMP (AMP 2.0)": [[194, "Fast-AMP-(AMP-2.0)"]], "Feature Guide": [[244, "feature-guide"]], "FloatQuantizeDequantize": [[166, null]], "Fold Batch Norm layers": [[192, "Fold-Batch-Norm-layers"], [212, "Fold-Batch-Norm-layers"]], "Fold Batch Normalization layers": [[190, "Fold-Batch-Normalization-layers"], [191, "Fold-Batch-Normalization-layers"], [193, "Fold-Batch-Normalization-layers"], [195, "Fold-Batch-Normalization-layers"], [200, "Fold-Batch-Normalization-layers"], [201, "Fold-Batch-Normalization-layers"], [203, "Fold-Batch-Normalization-layers"], [204, "Fold-Batch-Normalization-layers"], [208, "Fold-Batch-Normalization-layers"], [209, "Fold-Batch-Normalization-layers"], [213, "Fold-Batch-Normalization-layers"], [214, "Fold-Batch-Normalization-layers"]], "Fold BatchNorm Layers": [[197, "Fold-BatchNorm-Layers"], [211, "Fold-BatchNorm-Layers"]], "For more information": [[191, "For-more-information"], [192, "For-more-information"], [193, "For-more-information"], [195, "For-more-information"], [196, "For-more-information"], [200, "For-more-information"], [201, "For-more-information"], [204, "For-more-information"], [205, "For-more-information"], [206, "For-more-information"], [207, "For-more-information"], [209, "For-more-information"], [210, "For-more-information"], [212, "For-more-information"], [213, "For-more-information"], [214, "For-more-information"]], "General guidelines": [[262, "general-guidelines"]], "Glossary": [[243, null], [244, "glossary"]], "Greedy compression ratio selection": [[228, null]], "Host install from scratch": [[245, "host-install-from-scratch"]], "How it works": [[228, "how-it-works"]], "How quantization simulation works": [[252, "how-quantization-simulation-works"]], "How to modify configuration file": [[254, "how-to-modify-configuration-file"]], "How to use aimet_torch 1.x": [[171, "how-to-use-aimet-torch-1-x"]], "How winnowing works": [[233, "how-winnowing-works"]], "Hyper parameters": [[216, "hyper-parameters"]], "Install AIMET packages": [[246, "install-aimet-packages"]], "Installation": [[244, "installation"], [245, null]], "Installing AIMET": [[246, "installing-aimet"], [247, "installing-aimet"], [248, "installing-aimet"]], "Interactive visualization": [[218, "interactive-visualization"], [219, null]], "Keras Model Preparer": [[199, null]], "Layer output generation": [[218, "layer-output-generation"], [220, null]], "Limitations": [[20, "limitations"], [172, "limitations"]], "LoRa Training": [[240, "lora-training"]], "Low power blockwise quantization": [[249, "low-power-blockwise-quantization"]], "MMP API options": [[237, "mmp-api-options"]], "Manual mixed precision": [[236, "manual-mixed-precision"], [237, null]], "Migration Process": [[171, "migration-process"]], "Migration guide": [[171, null]], "Min-Max (also called \u201cTF\u201d in AIMET)": [[252, "min-max-also-called-tf-in-aimet"]], "Mixed Precision Algorithm": [[235, "mixed-precision-algorithm"]], "Mixed precision": [[234, "mixed-precision"], [236, null], [261, "mixed-precision"]], "Model compression": [[229, "model-compression"]], "Model compression using channel pruning": [[205, null]], "Model compression using spatial SVD": [[206, null]], "Model compression using spatial SVD and channel pruning": [[207, null]], "Model guidelines": [[256, "model-guidelines"]], "Moving from QuantWrapper to Quantized Modules": [[171, "moving-from-quantwrapper-to-quantized-modules"]], "Moving from StaticGrid and LearnedGrid Quantizer to Affine and Float Quantizer": [[171, "moving-from-staticgrid-and-learnedgrid-quantizer-to-affine-and-float-quantizer"]], "Multi-GPU support": [[253, "multi-gpu-support"]], "NOTE": [[229, null]], "Next steps": [[191, "Next-steps"], [195, "Next-steps"], [200, "Next-steps"], [201, "Next-steps"], [204, "Next-steps"], [205, "Next-steps"], [206, "Next-steps"], [207, "Next-steps"], [209, "Next-steps"], [210, "Next-steps"], [212, "Next-steps"], [213, "Next-steps"], [214, "Next-steps"]], "Next: deploying the model": [[262, "next-deploying-the-model"]], "Old versions": [[245, "old-versions"]], "OmniQuant": [[234, "omniquant"], [238, null]], "On-target inference": [[259, "on-target-inference"], [260, null]], "Optimization techniques": [[234, null]], "Optional techniques": [[229, "optional-techniques"]], "Overall flow": [[190, "Overall-flow"], [191, "Overall-flow"], [192, "Overall-flow"], [193, "Overall-flow"], [194, "Overall-flow"], [195, "Overall-flow"], [196, "Overall-flow"], [197, "Overall-flow"], [198, "Overall-flow"], [199, "Overall-flow"], [200, "Overall-flow"], [201, "Overall-flow"], [202, "Overall-flow"], [203, "Overall-flow"], [204, "Overall-flow"], [205, "Overall-flow"], [206, "Overall-flow"], [207, "Overall-flow"], [208, "Overall-flow"], [209, "Overall-flow"], [210, "Overall-flow"], [211, "Overall-flow"], [212, "Overall-flow"], [213, "Overall-flow"], [214, "Overall-flow"], [215, "Overall-flow"]], "Overview": [[228, "overview"], [229, "overview"], [231, "overview"], [233, "overview"], [252, "overview"], [254, "overview"]], "PDF of statistics": [[202, "PDF-of-statistics"], [215, "PDF-of-statistics"]], "PTQ": [[240, "ptq"]], "Parameters for AMP algorithm": [[190, "Parameters-for-AMP-algorithm"], [194, "Parameters-for-AMP-algorithm"], [208, "Parameters-for-AMP-algorithm"]], "Per-block quantization": [[180, "per-block-quantization"], [249, null]], "Per-channel quantization": [[180, "per-channel-quantization"]], "Per-layer MSE loss": [[202, "Per-layer-MSE-loss"], [215, "Per-layer-MSE-loss"]], "Per-layer analysis by enabling/disabling quantization wrappers": [[202, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"], [215, "Per-layer-analysis-by-enabling/disabling-quantization-wrappers"]], "Per-layer exploration": [[228, "per-layer-exploration"]], "Per-layer fine-tuning": [[229, "per-layer-fine-tuning"]], "Perform QAT": [[211, "Perform-QAT"]], "Post-training quantization": [[261, "post-training-quantization"]], "Prepare the evaluation callback function": [[197, "Prepare-the-evaluation-callback-function"]], "Prerequisites": [[216, "prerequisites"], [217, "prerequisites"], [221, "prerequisites"], [222, "prerequisites"], [223, "prerequisites"], [238, "prerequisites"], [242, "prerequisites"], [245, "prerequisites"], [246, "prerequisites"], [247, "prerequisites"], [250, "prerequisites"], [253, "prerequisites"]], "Procedure": [[217, "procedure"], [222, "procedure"], [224, "procedure"], [226, "procedure"], [238, "procedure"], [242, "procedure"], [262, "procedure"]], "PyPI": [[245, "pypi"]], "PyTorch model guidelines": [[256, null]], "QAT modes": [[253, "qat-modes"]], "QAT recommendations": [[253, "qat-recommendations"]], "QW-LoRa": [[239, "qw-lora"], [240, null]], "QWA-LoRa": [[239, "qwa-lora"], [241, null]], "Qualcomm\u00ae AI Engine Direct SDK": [[260, "qualcommreg-ai-engine-direct-sdk"]], "Qualcomm\u00ae AI hub": [[260, "qualcommreg-ai-hub"]], "Quant Analyzer": [[202, null], [215, null]], "QuantSim workflow": [[252, "quantsim-workflow"]], "Quantization": [[260, "quantization"]], "Quantization Simulation Guide": [[244, "quantization-simulation-guide"]], "Quantization analyzer": [[218, "quantization-analyzer"], [221, null]], "Quantization debugging guidelines": [[258, null]], "Quantization granularity": [[252, "quantization-granularity"]], "Quantization schemes": [[252, "quantization-schemes"]], "Quantization simulation": [[193, null], [261, "quantization-simulation"]], "Quantization simulation guide": [[252, null]], "Quantization user guide": [[259, null]], "Quantization workflow": [[259, "quantization-workflow"], [262, null]], "Quantization-Aware Training with BatchNorm Re-estimation": [[197, null], [211, null]], "Quantization-Aware Training with a Keras Transformer Model": [[198, null]], "Quantization-Aware training with range learning": [[201, null]], "Quantization-aware training": [[200, null], [213, null], [253, null], [261, "quantization-aware-training"]], "Quantization-aware training with range learning": [[214, null]], "QuantizationMixin": [[30, null]], "Quantize": [[161, null]], "Quantize and Update Base Model Weights": [[240, "quantize-and-update-base-model-weights"]], "QuantizeDequantize": [[162, null]], "Quantized LoRa": [[234, "quantized-lora"], [239, null]], "Quantized modules": [[175, "quantized-modules"]], "QuantizedAdaptiveAvgPool1d": [[31, null]], "QuantizedAdaptiveAvgPool2d": [[32, null]], "QuantizedAdaptiveAvgPool3d": [[33, null]], "QuantizedAdaptiveMaxPool1d": [[34, null]], "QuantizedAdaptiveMaxPool2d": [[35, null]], "QuantizedAdaptiveMaxPool3d": [[36, null]], "QuantizedAlphaDropout": [[37, null]], "QuantizedAvgPool1d": [[38, null]], "QuantizedAvgPool2d": [[39, null]], "QuantizedAvgPool3d": [[40, null]], "QuantizedBCELoss": [[41, null]], "QuantizedBCEWithLogitsLoss": [[42, null]], "QuantizedBatchNorm1d": [[43, null]], "QuantizedBatchNorm2d": [[44, null]], "QuantizedBatchNorm3d": [[45, null]], "QuantizedBilinear": [[46, null]], "QuantizedCELU": [[47, null]], "QuantizedCTCLoss": [[48, null]], "QuantizedChannelShuffle": [[49, null]], "QuantizedCircularPad1d": [[50, null]], "QuantizedCircularPad2d": [[51, null]], "QuantizedCircularPad3d": [[52, null]], "QuantizedConstantPad1d": [[53, null]], "QuantizedConstantPad2d": [[54, null]], "QuantizedConstantPad3d": [[55, null]], "QuantizedConv1d": [[56, null]], "QuantizedConv2d": [[57, null]], "QuantizedConv3d": [[58, null]], "QuantizedConvTranspose1d": [[59, null]], "QuantizedConvTranspose2d": [[60, null]], "QuantizedConvTranspose3d": [[61, null]], "QuantizedCosineEmbeddingLoss": [[62, null]], "QuantizedCosineSimilarity": [[63, null]], "QuantizedCrossEntropyLoss": [[64, null]], "QuantizedDropout": [[65, null]], "QuantizedDropout1d": [[66, null]], "QuantizedDropout2d": [[67, null]], "QuantizedDropout3d": [[68, null]], "QuantizedELU": [[69, null]], "QuantizedEmbedding": [[70, null]], "QuantizedEmbeddingBag": [[71, null]], "QuantizedFeatureAlphaDropout": [[72, null]], "QuantizedFlatten": [[73, null]], "QuantizedFold": [[74, null]], "QuantizedFractionalMaxPool2d": [[75, null]], "QuantizedFractionalMaxPool3d": [[76, null]], "QuantizedGELU": [[77, null]], "QuantizedGLU": [[78, null]], "QuantizedGRU": [[79, null]], "QuantizedGRUCell": [[80, null]], "QuantizedGaussianNLLLoss": [[81, null]], "QuantizedGroupNorm": [[82, null]], "QuantizedHardshrink": [[83, null]], "QuantizedHardsigmoid": [[84, null]], "QuantizedHardswish": [[85, null]], "QuantizedHardtanh": [[86, null]], "QuantizedHingeEmbeddingLoss": [[87, null]], "QuantizedHuberLoss": [[88, null]], "QuantizedInstanceNorm1d": [[89, null]], "QuantizedInstanceNorm2d": [[90, null]], "QuantizedInstanceNorm3d": [[91, null]], "QuantizedKLDivLoss": [[92, null]], "QuantizedL1Loss": [[93, null]], "QuantizedLPPool1d": [[94, null]], "QuantizedLPPool2d": [[95, null]], "QuantizedLSTM": [[96, null]], "QuantizedLSTMCell": [[97, null]], "QuantizedLayerNorm": [[98, null]], "QuantizedLeakyReLU": [[99, null]], "QuantizedLinear": [[100, null]], "QuantizedLocalResponseNorm": [[101, null]], "QuantizedLogSigmoid": [[102, null]], "QuantizedLogSoftmax": [[103, null]], "QuantizedMSELoss": [[104, null]], "QuantizedMarginRankingLoss": [[105, null]], "QuantizedMaxPool1d": [[106, null]], "QuantizedMaxPool2d": [[107, null]], "QuantizedMaxPool3d": [[108, null]], "QuantizedMaxUnpool1d": [[109, null]], "QuantizedMaxUnpool2d": [[110, null]], "QuantizedMaxUnpool3d": [[111, null]], "QuantizedMish": [[112, null]], "QuantizedMultiLabelMarginLoss": [[113, null]], "QuantizedMultiLabelSoftMarginLoss": [[114, null]], "QuantizedMultiMarginLoss": [[115, null]], "QuantizedNLLLoss": [[116, null]], "QuantizedNLLLoss2d": [[117, null]], "QuantizedPReLU": [[118, null]], "QuantizedPairwiseDistance": [[119, null]], "QuantizedPixelShuffle": [[120, null]], "QuantizedPixelUnshuffle": [[121, null]], "QuantizedPoissonNLLLoss": [[122, null]], "QuantizedRNN": [[123, null]], "QuantizedRNNCell": [[124, null]], "QuantizedRReLU": [[125, null]], "QuantizedReLU": [[126, null]], "QuantizedReLU6": [[127, null]], "QuantizedReflectionPad1d": [[128, null]], "QuantizedReflectionPad2d": [[129, null]], "QuantizedReflectionPad3d": [[130, null]], "QuantizedReplicationPad1d": [[131, null]], "QuantizedReplicationPad2d": [[132, null]], "QuantizedReplicationPad3d": [[133, null]], "QuantizedSELU": [[134, null]], "QuantizedSiLU": [[135, null]], "QuantizedSigmoid": [[136, null]], "QuantizedSmoothL1Loss": [[137, null]], "QuantizedSoftMarginLoss": [[138, null]], "QuantizedSoftmax": [[139, null]], "QuantizedSoftmax2d": [[140, null]], "QuantizedSoftmin": [[141, null]], "QuantizedSoftplus": [[142, null]], "QuantizedSoftshrink": [[143, null]], "QuantizedSoftsign": [[144, null]], "QuantizedTanh": [[145, null]], "QuantizedTanhshrink": [[146, null]], "QuantizedTensor": [[159, null]], "QuantizedTensorBase": [[160, null]], "QuantizedThreshold": [[147, null]], "QuantizedTripletMarginLoss": [[148, null]], "QuantizedTripletMarginWithDistanceLoss": [[149, null]], "QuantizedUnflatten": [[150, null]], "QuantizedUnfold": [[151, null]], "QuantizedUpsample": [[152, null]], "QuantizedUpsamplingBilinear2d": [[153, null]], "QuantizedUpsamplingNearest2d": [[154, null]], "QuantizedZeroPad1d": [[155, null]], "QuantizedZeroPad2d": [[156, null]], "QuantizedZeroPad3d": [[157, null]], "Quantizer Args structure": [[251, "id6"]], "Quantizers": [[180, "quantizers"]], "Quantsim and Adaround - Per Channel Quantization (PCQ)": [[203, null]], "Quick Start": [[244, "quick-start"]], "Quick Start (PyTorch)": [[248, null]], "Rank Rounding": [[229, "rank-rounding"]], "Re-estimate BatchNorm Statistics": [[211, "Re-estimate-BatchNorm-Statistics"]], "References": [[229, "references"]], "Regular AMP": [[194, "Regular-AMP"]], "Release Notes": [[244, "release-notes"]], "Release notes": [[257, null]], "Run QWA-LoRa": [[241, "run-qwa-lora"]], "Running a quick example": [[248, "running-a-quick-example"]], "Running the notebooks": [[189, "running-the-notebooks"]], "Runtime configuration": [[252, "runtime-configuration"], [254, null]], "Sequential MSE": [[234, "sequential-mse"], [242, null]], "Set model input precision": [[237, "set-model-input-precision"]], "Set model output precision": [[237, "set-model-output-precision"]], "Set precision based on layer type": [[237, "set-precision-based-on-layer-type"]], "Set precision of a leaf layer": [[237, "set-precision-of-a-leaf-layer"]], "Set precision of a non-leaf layer": [[237, "set-precision-of-a-non-leaf-layer"]], "Setup": [[216, "setup"], [217, "setup"], [223, "setup"], [225, "setup"], [226, "setup"], [230, "setup"], [232, "setup"], [237, "setup"], [238, "setup"], [240, "setup"], [241, "setup"], [242, "setup"]], "Signal-to-Quantization-Noise": [[252, "signal-to-quantization-noise"]], "Simulate quantization noise": [[252, "simulate-quantization-noise"]], "Spatial SVD": [[229, "spatial-svd"], [230, null]], "Start the docker container": [[246, "start-the-docker-container"]], "Starting a Bokeh server session": [[231, "starting-a-bokeh-server-session"]], "Step 1": [[216, "step-1"], [217, "step-1"], [222, "step-1"], [223, "step-1"], [224, "step-1"], [235, "step-1"], [238, "step-1"], [242, "step-1"]], "Step 1 Importing libraries": [[221, "step-1-importing-libraries"]], "Step 1: Creating a QuantSim model": [[250, "step-1-creating-a-quantsim-model"]], "Step 1: Importing the API": [[220, "step-1-importing-the-api"]], "Step 1: Setup": [[253, "step-1-setup"]], "Step 1: Trying FP16 precision (no quantization)": [[262, "step-1-trying-fp16-precision-no-quantization"]], "Step 2": [[216, "step-2"], [217, "step-2"], [222, "step-2"], [223, "step-2"], [224, "step-2"], [235, "step-2"], [238, "step-2"], [242, "step-2"]], "Step 2 Preparing calibration callback": [[221, "step-2-preparing-calibration-callback"]], "Step 2: Computing the initial quantization parameters": [[253, "step-2-computing-the-initial-quantization-parameters"]], "Step 2: Creating a calibration callback": [[250, "step-2-creating-a-calibration-callback"]], "Step 2: Loading a model": [[220, "step-2-loading-a-model"]], "Step 2: Verifying W16A16 quantization": [[262, "step-2-verifying-w16a16-quantization"]], "Step 3": [[216, "step-3"], [217, "step-3"], [222, "step-3"], [223, "step-3"], [224, "step-3"], [238, "step-3"], [242, "step-3"]], "Step 3 Preparing evaluation callback": [[221, "step-3-preparing-evaluation-callback"]], "Step 3. Reducing precision": [[262, "step-3-reducing-precision"]], "Step 3: Calibrate the quantized model": [[253, "step-3-calibrate-the-quantized-model"]], "Step 3: Computing encodings": [[250, "step-3-computing-encodings"]], "Step 3: Obtaining inputs": [[220, "step-3-obtaining-inputs"]], "Step 4": [[216, "step-4"], [217, "step-4"], [222, "step-4"], [223, "step-4"], [238, "step-4"], [242, "step-4"]], "Step 4 Preparing model": [[221, "step-4-preparing-model"]], "Step 4. Restoring accuracy": [[262, "step-4-restoring-accuracy"]], "Step 4: Evaluating the model": [[253, "step-4-evaluating-the-model"]], "Step 4: Evaluation": [[250, "step-4-evaluation"]], "Step 4: Generating layer outputs": [[220, "step-4-generating-layer-outputs"]], "Step 5": [[217, "step-5"], [222, "step-5"], [238, "step-5"], [242, "step-5"]], "Step 5 Creating QuantAnalyzer": [[221, "step-5-creating-quantanalyzer"]], "Step 5: Exporting the model": [[250, "step-5-exporting-the-model"], [253, "step-5-exporting-the-model"]], "Step 6": [[222, "step-6"]], "Step 6 Running the analysis": [[221, "step-6-running-the-analysis"]], "Step 7": [[222, "step-7"]], "Summary": [[194, "Summary"], [197, "Summary"], [199, "Summary"], [203, "Summary"], [211, "Summary"]], "Supported precisions for on-target inference": [[261, "supported-precisions-for-on-target-inference"]], "Techniques": [[212, "Techniques"]], "TensorFlow model guidelines": [[255, null]], "Terminology": [[178, "terminology"]], "Tested platform": [[248, "tested-platform"]], "Top level structure": [[251, "id2"]], "Training Callback": [[241, "training-callback"]], "Use Case": [[229, "use-case"]], "Use Cases": [[235, "use-cases"]], "User Guide": [[244, "user-guide"]], "User flow": [[178, "user-flow"]], "Verifying the installation": [[245, "verifying-the-installation"], [248, "verifying-the-installation"]], "Visualization Tools": [[168, "visualization-tools"]], "Visualizing compression ratios": [[231, "visualizing-compression-ratios"]], "Weight SVD": [[229, "weight-svd"], [232, null]], "Weight reconstruction": [[226, "weight-reconstruction"]], "What this notebook is not": [[190, "What-this-notebook-is-not"], [194, "What-this-notebook-is-not"], [202, "What-this-notebook-is-not"], [203, "What-this-notebook-is-not"], [208, "What-this-notebook-is-not"], [211, "What-this-notebook-is-not"], [215, "What-this-notebook-is-not"]], "Winnowing": [[226, "winnowing"], [233, null], [233, "id1"]], "Workflow": [[216, "workflow"], [216, "id2"], [217, "workflow"], [219, "workflow"], [220, "workflow"], [221, "workflow"], [222, "workflow"], [223, "workflow"], [224, "workflow"], [225, "workflow"], [226, "workflow"], [230, "workflow"], [232, "workflow"], [235, "workflow"], [237, "workflow"], [238, "workflow"], [240, "workflow"], [241, "workflow"], [242, "workflow"], [250, "workflow"], [253, "workflow"]], "aimet_onnx": [[0, "aimet-onnx"]], "aimet_onnx API": [[5, null]], "aimet_onnx.adaround": [[1, null]], "aimet_onnx.batch_norm_fold": [[3, null]], "aimet_onnx.cross_layer_equalization": [[4, null]], "aimet_onnx.layer_output_utils": [[6, null]], "aimet_onnx.mixed_precision": [[2, null]], "aimet_onnx.quant_analyzer": [[8, null]], "aimet_onnx.quantsim": [[9, null]], "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights": [[7, null]], "aimet_onnx.seq_mse": [[10, null]], "aimet_tensorflow": [[0, "aimet-tensorflow"]], "aimet_tensorflow API": [[18, null]], "aimet_tensorflow.adaround": [[11, null]], "aimet_tensorflow.auto_quant_v2": [[13, null]], "aimet_tensorflow.batch_norm_fold": [[15, null]], "aimet_tensorflow.compress": [[17, null]], "aimet_tensorflow.cross_layer_equalization": [[16, null]], "aimet_tensorflow.keras.bn_reestimation": [[14, null]], "aimet_tensorflow.layer_output_utils": [[19, null]], "aimet_tensorflow.mixed_precision": [[12, null]], "aimet_tensorflow.model_preparer": [[20, null]], "aimet_tensorflow.quant_analyzer": [[21, null]], "aimet_tensorflow.quantsim": [[22, null]], "aimet_torch": [[0, "aimet-torch"], [167, "aimet-torch"]], "aimet_torch 1.x vs aimet_torch 2": [[171, "aimet-torch-1-x-vs-aimet-torch-2"]], "aimet_torch API": [[167, null]], "aimet_torch.adaround": [[23, null]], "aimet_torch.auto_quant": [[25, null]], "aimet_torch.batch_norm_fold": [[27, null]], "aimet_torch.bn_reestimation": [[26, null]], "aimet_torch.compress": [[29, null]], "aimet_torch.cross_layer_equalization": [[28, null]], "aimet_torch.experimental.adascale": [[24, null]], "aimet_torch.experimental.omniquant": [[176, null]], "aimet_torch.layer_output_utils": [[169, null]], "aimet_torch.mixed_precision": [[174, null]], "aimet_torch.model_preparer": [[172, null]], "aimet_torch.model_validator": [[173, null]], "aimet_torch.nn": [[175, null]], "aimet_torch.onnx.export (beta)": [[177, null]], "aimet_torch.peft": [[178, null]], "aimet_torch.quant_analyzer": [[179, null]], "aimet_torch.quantization": [[180, null]], "aimet_torch.quantsim": [[181, null]], "aimet_torch.quantsim.config_utils": [[170, null]], "aimet_torch.seq_mse": [[182, null]], "aimet_torch.v1": [[167, "aimet-torch-v1"]], "aimet_torch.v1.adaround": [[183, null]], "aimet_torch.v1.auto_quant": [[185, null]], "aimet_torch.v1.mixed_precision": [[184, null]], "aimet_torch.v1.quant_analyzer": [[186, null]], "aimet_torch.v1.quantsim": [[187, null]], "aimet_torch.v1.seq_mse": [[188, null]], "aimet_torch.visualization_tools": [[168, null]], "dequantize": [[163, null]], "quantize": [[164, null]], "quantize_dequantize": [[165, null]]}, "docnames": ["apiref/index", "apiref/onnx/adaround", "apiref/onnx/amp", "apiref/onnx/bnf", "apiref/onnx/cle", "apiref/onnx/index", "apiref/onnx/layer_output_generation", "apiref/onnx/lpbq", "apiref/onnx/quant_analyzer", "apiref/onnx/quantsim", "apiref/onnx/seq_mse", "apiref/tensorflow/adaround", "apiref/tensorflow/amp", "apiref/tensorflow/autoquant", "apiref/tensorflow/bn", "apiref/tensorflow/bnf", "apiref/tensorflow/cle", "apiref/tensorflow/compress", "apiref/tensorflow/index", "apiref/tensorflow/layer_output_generation", "apiref/tensorflow/model_preparer", "apiref/tensorflow/quant_analyzer", "apiref/tensorflow/quantsim", "apiref/torch/adaround", "apiref/torch/adascale", "apiref/torch/autoquant", "apiref/torch/bn", "apiref/torch/bnf", "apiref/torch/cle", "apiref/torch/compress", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d", "apiref/torch/generated/aimet_torch.nn.QuantizedELU", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten", "apiref/torch/generated/aimet_torch.nn.QuantizedFold", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d", "apiref/torch/generated/aimet_torch.nn.QuantizedMish", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize", "apiref/torch/index", "apiref/torch/interactive_visualization", "apiref/torch/layer_output_generation", "apiref/torch/lpbq", "apiref/torch/migration_guide", "apiref/torch/model_preparer", "apiref/torch/model_validator", "apiref/torch/mp", "apiref/torch/nn", "apiref/torch/omniquant", "apiref/torch/onnx", "apiref/torch/peft_lora", "apiref/torch/quant_analyzer", "apiref/torch/quantization", "apiref/torch/quantsim", "apiref/torch/seq_mse", "apiref/torch/v1/adaround", "apiref/torch/v1/amp", "apiref/torch/v1/autoquant", "apiref/torch/v1/quant_analyzer", "apiref/torch/v1/quantsim", "apiref/torch/v1/seq_mse", "examples/index", "examples/onnx/quantization/AMP", "examples/onnx/quantization/adaround", "examples/onnx/quantization/cle", "examples/onnx/quantization/quantsim", "examples/tensorflow/quantization/keras/KerasAMP", "examples/tensorflow/quantization/keras/adaround", "examples/tensorflow/quantization/keras/autoquant", "examples/tensorflow/quantization/keras/bn_reestimation", "examples/tensorflow/quantization/keras/keras_transformer_qat", "examples/tensorflow/quantization/keras/model_preparer", "examples/tensorflow/quantization/keras/qat", "examples/tensorflow/quantization/keras/qat_range_learning", "examples/tensorflow/quantization/keras/quant_analyzer", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq", "examples/tensorflow/quantization/keras/quantsim_cle", "examples/torch/compression/channel_pruning", "examples/torch/compression/spatial_svd", "examples/torch/compression/spatial_svd_channel_pruning", "examples/torch/quantization/AMP", "examples/torch/quantization/adaround", "examples/torch/quantization/autoquant", "examples/torch/quantization/bn_reestimation", "examples/torch/quantization/cle_bc", "examples/torch/quantization/qat", "examples/torch/quantization/qat_range_learning", "examples/torch/quantization/quant_analyzer", "featureguide/adaround", "featureguide/adascale", "featureguide/analysis tools/index", "featureguide/analysis tools/interactive_visualization", "featureguide/analysis tools/layer_output_generation", "featureguide/analysis tools/quant_analyzer", "featureguide/autoquant", "featureguide/bn", "featureguide/bnf", "featureguide/cle", "featureguide/compression/channel_pruning", "featureguide/compression/feature_guidebook", "featureguide/compression/greedy_compression_ratio_selection", "featureguide/compression/index", "featureguide/compression/spatial_svd", "featureguide/compression/visualization_compression", "featureguide/compression/weight_svd", "featureguide/compression/winnowing", "featureguide/index", "featureguide/mixed precision/amp", "featureguide/mixed precision/index", "featureguide/mixed precision/mmp", "featureguide/omniquant", "featureguide/quantized LoRa/index", "featureguide/quantized LoRa/qw_lora", "featureguide/quantized LoRa/qwa_lora", "featureguide/seq_mse", "glossary", "index", "install/index", "install/install_docker", "install/install_host", "install/quick-start", "quantsim/blockwise", "quantsim/calibration", "quantsim/encoding_spec", "quantsim/index", "quantsim/qat", "quantsim/runtime_config", "quantsim/tensorflow/model_guidelines", "quantsim/torch/model_guidelines", "release_notes", "userguide/debugging_guidelines", "userguide/index", "userguide/on_target_inference", "userguide/quantization_tools", "userguide/quantization_workflow", "versions"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["apiref/index.rst", "apiref/onnx/adaround.rst", "apiref/onnx/amp.rst", "apiref/onnx/bnf.rst", "apiref/onnx/cle.rst", "apiref/onnx/index.rst", "apiref/onnx/layer_output_generation.rst", "apiref/onnx/lpbq.rst", "apiref/onnx/quant_analyzer.rst", "apiref/onnx/quantsim.rst", "apiref/onnx/seq_mse.rst", "apiref/tensorflow/adaround.rst", "apiref/tensorflow/amp.rst", "apiref/tensorflow/autoquant.rst", "apiref/tensorflow/bn.rst", "apiref/tensorflow/bnf.rst", "apiref/tensorflow/cle.rst", "apiref/tensorflow/compress.rst", "apiref/tensorflow/index.rst", "apiref/tensorflow/layer_output_generation.rst", "apiref/tensorflow/model_preparer.rst", "apiref/tensorflow/quant_analyzer.rst", "apiref/tensorflow/quantsim.rst", "apiref/torch/adaround.rst", "apiref/torch/adascale.rst", "apiref/torch/autoquant.rst", "apiref/torch/bn.rst", "apiref/torch/bnf.rst", "apiref/torch/cle.rst", "apiref/torch/compress.rst", "apiref/torch/generated/aimet_torch.nn.QuantizationMixin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAdaptiveMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedAvgPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBCEWithLogitsLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBatchNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedBilinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCTCLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedChannelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCircularPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConstantPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConv3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedConvTranspose3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCosineSimilarity.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedCrossEntropyLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedDropout3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbedding.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedEmbeddingBag.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFeatureAlphaDropout.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFlatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedFractionalMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGRUCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGaussianNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedGroupNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardsigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardswish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHardtanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHingeEmbeddingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedHuberLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedInstanceNorm3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedKLDivLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLPPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTM.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLSTMCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLayerNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLeakyReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLinear.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLocalResponseNorm.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedLogSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMSELoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMarginRankingLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxPool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMaxUnpool3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMish.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedMultiMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedNLLLoss2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPairwiseDistance.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelShuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPixelUnshuffle.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedPoissonNLLLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNN.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRNNCell.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedRReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReLU6.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReflectionPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedReplicationPad3d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSELU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSiLU.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSigmoid.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSmoothL1Loss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmax2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftmin.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftplus.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedSoftsign.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanh.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTanhshrink.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedThreshold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnflatten.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUnfold.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsample.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingBilinear2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedUpsamplingNearest2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad1d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad2d.rst", "apiref/torch/generated/aimet_torch.nn.QuantizedZeroPad3d.rst", "apiref/torch/generated/aimet_torch.quantization.DequantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensor.rst", "apiref/torch/generated/aimet_torch.quantization.QuantizedTensorBase.rst", "apiref/torch/generated/aimet_torch.quantization.affine.Quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.QuantizeDequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize.rst", "apiref/torch/generated/aimet_torch.quantization.affine.quantize_dequantize.rst", "apiref/torch/generated/aimet_torch.quantization.float.FloatQuantizeDequantize.rst", "apiref/torch/index.rst", "apiref/torch/interactive_visualization.rst", "apiref/torch/layer_output_generation.rst", "apiref/torch/lpbq.rst", "apiref/torch/migration_guide.rst", "apiref/torch/model_preparer.rst", "apiref/torch/model_validator.rst", "apiref/torch/mp.rst", "apiref/torch/nn.rst", "apiref/torch/omniquant.rst", "apiref/torch/onnx.rst", "apiref/torch/peft_lora.rst", "apiref/torch/quant_analyzer.rst", "apiref/torch/quantization.rst", "apiref/torch/quantsim.rst", "apiref/torch/seq_mse.rst", "apiref/torch/v1/adaround.rst", "apiref/torch/v1/amp.rst", "apiref/torch/v1/autoquant.rst", "apiref/torch/v1/quant_analyzer.rst", "apiref/torch/v1/quantsim.rst", "apiref/torch/v1/seq_mse.rst", "examples/index.rst", "examples/onnx/quantization/AMP.ipynb", "examples/onnx/quantization/adaround.ipynb", "examples/onnx/quantization/cle.ipynb", "examples/onnx/quantization/quantsim.ipynb", "examples/tensorflow/quantization/keras/KerasAMP.ipynb", "examples/tensorflow/quantization/keras/adaround.ipynb", "examples/tensorflow/quantization/keras/autoquant.ipynb", "examples/tensorflow/quantization/keras/bn_reestimation.ipynb", "examples/tensorflow/quantization/keras/keras_transformer_qat.ipynb", "examples/tensorflow/quantization/keras/model_preparer.ipynb", "examples/tensorflow/quantization/keras/qat.ipynb", "examples/tensorflow/quantization/keras/qat_range_learning.ipynb", "examples/tensorflow/quantization/keras/quant_analyzer.ipynb", "examples/tensorflow/quantization/keras/quantsim_adaround_pcq.ipynb", "examples/tensorflow/quantization/keras/quantsim_cle.ipynb", "examples/torch/compression/channel_pruning.ipynb", "examples/torch/compression/spatial_svd.ipynb", "examples/torch/compression/spatial_svd_channel_pruning.ipynb", "examples/torch/quantization/AMP.ipynb", "examples/torch/quantization/adaround.ipynb", "examples/torch/quantization/autoquant.ipynb", "examples/torch/quantization/bn_reestimation.ipynb", "examples/torch/quantization/cle_bc.ipynb", "examples/torch/quantization/qat.ipynb", "examples/torch/quantization/qat_range_learning.ipynb", "examples/torch/quantization/quant_analyzer.ipynb", "featureguide/adaround.rst", "featureguide/adascale.rst", "featureguide/analysis tools/index.rst", "featureguide/analysis tools/interactive_visualization.rst", "featureguide/analysis tools/layer_output_generation.rst", "featureguide/analysis tools/quant_analyzer.rst", "featureguide/autoquant.rst", "featureguide/bn.rst", "featureguide/bnf.rst", "featureguide/cle.rst", "featureguide/compression/channel_pruning.rst", "featureguide/compression/feature_guidebook.rst", "featureguide/compression/greedy_compression_ratio_selection.rst", "featureguide/compression/index.rst", "featureguide/compression/spatial_svd.rst", "featureguide/compression/visualization_compression.rst", "featureguide/compression/weight_svd.rst", "featureguide/compression/winnowing.rst", "featureguide/index.rst", "featureguide/mixed precision/amp.rst", "featureguide/mixed precision/index.rst", "featureguide/mixed precision/mmp.rst", "featureguide/omniquant.rst", "featureguide/quantized LoRa/index.rst", "featureguide/quantized LoRa/qw_lora.rst", "featureguide/quantized LoRa/qwa_lora.rst", "featureguide/seq_mse.rst", "glossary.rst", "index.rst", "install/index.rst", "install/install_docker.rst", "install/install_host.rst", "install/quick-start.rst", "quantsim/blockwise.rst", "quantsim/calibration.rst", "quantsim/encoding_spec.rst", "quantsim/index.rst", "quantsim/qat.rst", "quantsim/runtime_config.rst", "quantsim/tensorflow/model_guidelines.rst", "quantsim/torch/model_guidelines.rst", "release_notes.rst", "userguide/debugging_guidelines.rst", "userguide/index.rst", "userguide/on_target_inference.rst", "userguide/quantization_tools.rst", "userguide/quantization_workflow.rst", "versions.rst"], "indexentries": {"accelerator": [[243, "term-Accelerator", true]], "accuracy": [[243, "term-Accuracy", true]], "activation": [[243, "term-Activation", true]], "activation quantization": [[243, "term-Activation-Quantization", true]], "adaround": [[243, "term-AdaRound", true]], "adaroundparameters (class in aimet_onnx.adaround.adaround_weight)": [[1, "aimet_onnx.adaround.adaround_weight.AdaroundParameters", false], [216, "aimet_onnx.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_tensorflow.keras.adaround_weight)": [[11, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false], [216, "aimet_tensorflow.keras.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.adaround.adaround_weight)": [[23, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false], [216, "aimet_torch.adaround.adaround_weight.AdaroundParameters", false]], "adaroundparameters (class in aimet_torch.v1.adaround.adaround_weight)": [[183, "aimet_torch.v1.adaround.adaround_weight.AdaroundParameters", false]], "add_check() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.add_check", false]], "ai model efficiency toolkit": [[243, "term-AI-Model-Efficiency-Toolkit", true]], "aimet": [[243, "term-AIMET", true]], "analyze() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false], [221, "aimet_onnx.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.analyze", false]], "analyze() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.analyze", false]], "apply() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false], [237, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.apply", false]], "apply_adaround() (in module aimet_onnx.adaround.adaround_weight.adaround)": [[1, "aimet_onnx.adaround.adaround_weight.Adaround.apply_adaround", false], [216, "aimet_onnx.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_tensorflow.keras.adaround_weight.adaround)": [[11, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false], [216, "aimet_tensorflow.keras.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.adaround.adaround_weight.adaround)": [[23, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false], [216, "aimet_torch.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adaround() (in module aimet_torch.v1.adaround.adaround_weight.adaround)": [[183, "aimet_torch.v1.adaround.adaround_weight.Adaround.apply_adaround", false]], "apply_adascale() (in module aimet_torch.experimental.adascale)": [[24, "aimet_torch.experimental.adascale.apply_adascale", false], [217, "aimet_torch.experimental.adascale.apply_adascale", false]], "apply_omniquant() (in module aimet_torch.experimental.omniquant)": [[176, "aimet_torch.experimental.omniquant.apply_omniquant", false], [238, "aimet_torch.experimental.omniquant.apply_omniquant", false]], "apply_seq_mse() (in module aimet_onnx.sequential_mse.seq_mse.sequentialmse)": [[10, "aimet_onnx.sequential_mse.seq_mse.SequentialMse.apply_seq_mse", false], [242, "aimet_onnx.sequential_mse.seq_mse.SequentialMse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.seq_mse)": [[182, "aimet_torch.seq_mse.apply_seq_mse", false], [242, "aimet_torch.seq_mse.apply_seq_mse", false]], "apply_seq_mse() (in module aimet_torch.v1.seq_mse)": [[188, "aimet_torch.v1.seq_mse.apply_seq_mse", false]], "auto (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false], [230, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.auto", false]], "autoquant": [[243, "term-AutoQuant", true]], "autoquantwithautomixedprecision (class in aimet_tensorflow.keras.auto_quant_v2)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision", false]], "batch normalization": [[243, "term-Batch-Normalization", true]], "batch normalization folding (bn folding)": [[243, "term-Batch-Normalization-Folding-BN-Folding", true]], "bitwidth (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.bitwidth", false]], "bn": [[243, "term-BN", true]], "callbackfunc (class in aimet_common.defs)": [[2, "aimet_common.defs.CallbackFunc", false], [12, "aimet_common.defs.CallbackFunc", false], [174, "aimet_common.defs.CallbackFunc", false], [184, "aimet_common.defs.CallbackFunc", false], [235, "aimet_common.defs.CallbackFunc", false], [235, "id0", false], [235, "id1", false]], "callbackfunc (class in aimet_common.utils)": [[179, "aimet_common.utils.CallbackFunc", false], [186, "aimet_common.utils.CallbackFunc", false], [221, "aimet_common.utils.CallbackFunc", false]], "check_model_sensitivity_to_quantization() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "check_model_sensitivity_to_quantization() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.check_model_sensitivity_to_quantization", false]], "choose_fast_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false], [235, "aimet_tensorflow.keras.mixed_precision.choose_fast_mixed_precision", false]], "choose_mixed_precision() (in module aimet_onnx.mixed_precision)": [[2, "aimet_onnx.mixed_precision.choose_mixed_precision", false], [235, "aimet_onnx.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_tensorflow.keras.mixed_precision)": [[12, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false], [235, "aimet_tensorflow.keras.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.mixed_precision)": [[174, "aimet_torch.mixed_precision.choose_mixed_precision", false], [235, "aimet_torch.mixed_precision.choose_mixed_precision", false]], "choose_mixed_precision() (in module aimet_torch.v1.mixed_precision)": [[184, "aimet_torch.v1.mixed_precision.choose_mixed_precision", false]], "clone() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.clone", false]], "cnn": [[243, "term-CNN", true]], "compress_model() (aimet_tensorflow.keras.compress.modelcompressor static method)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false], [230, "aimet_tensorflow.keras.compress.ModelCompressor.compress_model", false]], "compression": [[243, "term-Compression", true]], "compute_encodings() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.compute_encodings", false]], "compute_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.compute_encodings", false]], "compute_encodings() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel.compute_encodings", false]], "compute_encodings() (in module aimet_onnx)": [[9, "aimet_onnx.compute_encodings", false]], "convolutional layer": [[243, "term-Convolutional-Layer", true]], "convolutional neural network": [[243, "term-Convolutional-Neural-Network", true]], "dequantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.dequantize", false]], "dequantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.dequantize", false]], "dequantize() (in module aimet_torch.quantization.affine)": [[163, "aimet_torch.quantization.affine.dequantize", false]], "dequantizedtensor (class in aimet_torch.quantization)": [[158, "aimet_torch.quantization.DequantizedTensor", false]], "detach() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.detach", false]], "device": [[243, "term-Device", true]], "dlf": [[243, "term-DLF", true]], "dynamic layer fusion": [[243, "term-Dynamic-Layer-Fusion", true]], "edge device": [[243, "term-Edge-device", true]], "enable_per_layer_mse_loss() (aimet_onnx.quant_analyzer.quantanalyzer method)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false], [221, "aimet_onnx.quant_analyzer.QuantAnalyzer.enable_per_layer_mse_loss", false]], "encoding": [[243, "term-Encoding", true]], "equalize_model() (in module aimet_onnx.cross_layer_equalization)": [[4, "aimet_onnx.cross_layer_equalization.equalize_model", false], [225, "aimet_onnx.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_tensorflow.keras.cross_layer_equalization)": [[16, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false], [225, "aimet_tensorflow.keras.cross_layer_equalization.equalize_model", false]], "equalize_model() (in module aimet_torch.cross_layer_equalization)": [[28, "aimet_torch.cross_layer_equalization.equalize_model", false], [225, "aimet_torch.cross_layer_equalization.equalize_model", false]], "evalcallbackfactory (class in aimet_onnx.amp.mixed_precision_algo)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false], [235, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory", false]], "evalcallbackfactory (class in aimet_torch.amp.mixed_precision_algo)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [184, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false], [235, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory", false]], "exponent_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.exponent_bits", false]], "export() (aimet_onnx.quantizationsimmodel method)": [[9, "aimet_onnx.QuantizationSimModel.export", false]], "export() (aimet_tensorflow.keras.quantsim.quantizationsimmodel method)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel.export", false]], "export() (aimet_torch.quantizationsimmodel method)": [[181, "aimet_torch.QuantizationSimModel.export", false]], "export() (aimet_torch.v1.quantsim.quantizationsimmodel method)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel.export", false]], "export() (in module aimet_torch.onnx)": [[177, "aimet_torch.onnx.export", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_encoding_min_max_range() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_encoding_min_max_range", false]], "export_per_layer_mse_loss() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_mse_loss() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_mse_loss", false]], "export_per_layer_stats_histogram() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "export_per_layer_stats_histogram() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.export_per_layer_stats_histogram", false]], "floatquantizedequantize (class in aimet_torch.quantization.float)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize", false]], "fold_all_batch_norms() (in module aimet_tensorflow.keras.batch_norm_fold)": [[15, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false], [224, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms() (in module aimet_torch.batch_norm_fold)": [[27, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false], [224, "aimet_torch.batch_norm_fold.fold_all_batch_norms", false]], "fold_all_batch_norms_to_scale() (in module aimet_tensorflow.keras.batch_norm_fold)": [[14, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false], [223, "aimet_tensorflow.keras.batch_norm_fold.fold_all_batch_norms_to_scale", false]], "fold_all_batch_norms_to_weight() (in module aimet_onnx.batch_norm_fold)": [[3, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false], [224, "aimet_onnx.batch_norm_fold.fold_all_batch_norms_to_weight", false]], "forward() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.forward", false]], "forward() (aimet_torch.nn.quantizedlinear method)": [[100, "aimet_torch.nn.QuantizedLinear.forward", false]], "forward() (aimet_torch.quantization.affine.quantize method)": [[161, "aimet_torch.quantization.affine.Quantize.forward", false]], "forward() (aimet_torch.quantization.affine.quantizedequantize method)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize.forward", false]], "forward() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.forward", false]], "forward_fn() (aimet_torch.seq_mse.seqmseparams method)": [[182, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false], [242, "aimet_torch.seq_mse.SeqMseParams.forward_fn", false]], "forward_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams.forward_fn", false]], "fp32": [[243, "term-FP32", true]], "from_encodings() (aimet_torch.quantization.float.floatquantizedequantize class method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.from_encodings", false]], "from_module() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.from_module", false]], "from_str() (aimet_common.defs.quantscheme class method)": [[9, "aimet_common.defs.QuantScheme.from_str", false], [22, "aimet_common.defs.QuantScheme.from_str", false], [181, "aimet_common.defs.QuantScheme.from_str", false], [187, "aimet_common.defs.QuantScheme.from_str", false]], "generate_layer_outputs() (aimet_onnx.layer_output_utils.layeroutpututil method)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [220, "aimet_onnx.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_tensorflow.keras.layer_output_utils.layeroutpututil method)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [220, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "generate_layer_outputs() (aimet_torch.layer_output_utils.layeroutpututil method)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false], [220, "aimet_torch.layer_output_utils.LayerOutputUtil.generate_layer_outputs", false]], "get_activation_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_activation_quantizers", false]], "get_active_param_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_param_quantizers", false]], "get_active_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_active_quantizers() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false], [235, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_active_quantizers", false]], "get_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false], [235, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_candidate", false]], "get_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.get_default_kernel", false]], "get_encodings() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_encodings", false]], "get_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.get_extra_state", false]], "get_input_quantizer_modules() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false], [235, "aimet_torch.amp.quantizer_groups.QuantizerGroup.get_input_quantizer_modules", false]], "get_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.get_kernel", false]], "get_loss_fn() (aimet_torch.seq_mse.seqmseparams method)": [[182, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false], [242, "aimet_torch.seq_mse.SeqMseParams.get_loss_fn", false]], "get_loss_fn() (aimet_torch.v1.seq_mse.seqmseparams method)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams.get_loss_fn", false]], "get_param_quantizers() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.get_param_quantizers", false]], "get_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.get_quant_scheme_candidates", false]], "greedyselectionparameters (class in aimet_common.defs)": [[17, "aimet_common.defs.GreedySelectionParameters", false], [230, "aimet_common.defs.GreedySelectionParameters", false]], "implements() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.implements", false]], "inference": [[243, "term-Inference", true]], "input_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.input_quantizers", false]], "int8": [[243, "term-INT8", true]], "is_bfloat16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_bfloat16", false]], "is_float16() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.is_float16", false]], "kl divergence": [[243, "term-KL-Divergence", true]], "layer": [[243, "term-Layer", true]], "layer-wise quantization": [[243, "term-Layer-wise-quantization", true]], "layeroutpututil (class in aimet_onnx.layer_output_utils)": [[6, "aimet_onnx.layer_output_utils.LayerOutputUtil", false], [220, "aimet_onnx.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_tensorflow.keras.layer_output_utils)": [[19, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false], [220, "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil", false]], "layeroutpututil (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.LayerOutputUtil", false], [220, "aimet_torch.layer_output_utils.LayerOutputUtil", false]], "load_checkpoint() (aimet_torch.v1.quantsim method)": [[187, "aimet_torch.v1.quantsim.load_checkpoint", false]], "load_state_dict() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.load_state_dict", false]], "lookup_quantizer() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup static method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.lookup_quantizer", false]], "lora mobilenet": [[243, "term-LoRA-MobileNet", true]], "mantissa_bits (aimet_torch.quantization.float.floatquantizedequantize property)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.mantissa_bits", false]], "manual (aimet_tensorflow.keras.defs.spatialsvdparameters.mode attribute)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false], [230, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode.manual", false]], "mixedprecisionconfigurator (class in aimet_torch.v2.mixed_precision)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false], [237, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator", false]], "model": [[243, "term-Model", true]], "modelcompressor (class in aimet_tensorflow.keras.compress)": [[17, "aimet_tensorflow.keras.compress.ModelCompressor", false], [230, "aimet_tensorflow.keras.compress.ModelCompressor", false]], "modelvalidator (class in aimet_torch.model_validator.model_validator)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator", false]], "namingscheme (class in aimet_torch.layer_output_utils)": [[169, "aimet_torch.layer_output_utils.NamingScheme", false], [220, "aimet_torch.layer_output_utils.NamingScheme", false]], "neural network compression framework": [[243, "term-Neural-Network-Compression-Framework", true]], "new_empty() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.new_empty", false]], "nncf": [[243, "term-NNCF", true]], "node": [[243, "term-Node", true]], "normalization": [[243, "term-Normalization", true]], "onnx": [[243, "term-ONNX", true]], "onnx (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false], [220, "aimet_torch.layer_output_utils.NamingScheme.ONNX", false]], "open neural network exchange": [[243, "term-Open-Neural-Network-Exchange", true]], "optimize() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.optimize", false]], "output_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.output_quantizers", false]], "param_quantizers (aimet_torch.nn.quantizationmixin attribute)": [[30, "aimet_torch.nn.QuantizationMixin.param_quantizers", false]], "per-channel quantization": [[243, "term-Per-channel-Quantization", true]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_disabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_disabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.quant_analyzer.quantanalyzer method)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "perform_per_layer_analysis_by_enabling_quant_wrappers() (aimet_torch.v1.quant_analyzer.quantanalyzer method)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer.perform_per_layer_analysis_by_enabling_quant_wrappers", false]], "post-training quantization": [[243, "term-Post-Training-Quantization", true]], "prepare_model() (in module aimet_tensorflow.keras.model_preparer)": [[20, "aimet_tensorflow.keras.model_preparer.prepare_model", false]], "prepare_model() (in module aimet_torch.model_preparer)": [[172, "aimet_torch.model_preparer.prepare_model", false]], "pruning": [[243, "term-Pruning", true]], "ptq": [[243, "term-PTQ", true]], "pytorch": [[243, "term-PyTorch", true]], "pytorch (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false], [220, "aimet_torch.layer_output_utils.NamingScheme.PYTORCH", false]], "qat": [[243, "term-QAT", true]], "qdo": [[243, "term-QDO", true]], "qualcomm innovation center": [[243, "term-Qualcomm-Innovation-Center", true]], "quantanalyzer (class in aimet_onnx.quant_analyzer)": [[8, "aimet_onnx.quant_analyzer.QuantAnalyzer", false], [221, "aimet_onnx.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.quant_analyzer)": [[179, "aimet_torch.quant_analyzer.QuantAnalyzer", false], [221, "aimet_torch.quant_analyzer.QuantAnalyzer", false]], "quantanalyzer (class in aimet_torch.v1.quant_analyzer)": [[186, "aimet_torch.v1.quant_analyzer.QuantAnalyzer", false]], "quantization": [[243, "term-Quantization", true]], "quantization simulation": [[243, "term-Quantization-Simulation", true]], "quantization-aware training": [[243, "term-Quantization-Aware-Training", true]], "quantizationmixin (class in aimet_torch.nn)": [[30, "aimet_torch.nn.QuantizationMixin", false]], "quantizationsimmodel (class in aimet_onnx)": [[9, "aimet_onnx.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_tensorflow.keras.quantsim)": [[22, "aimet_tensorflow.keras.quantsim.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch)": [[181, "aimet_torch.QuantizationSimModel", false]], "quantizationsimmodel (class in aimet_torch.v1.quantsim)": [[187, "aimet_torch.v1.quantsim.QuantizationSimModel", false]], "quantize (class in aimet_torch.quantization.affine)": [[161, "aimet_torch.quantization.affine.Quantize", false]], "quantize() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantize", false]], "quantize() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantize", false]], "quantize() (in module aimet_torch.quantization.affine)": [[164, "aimet_torch.quantization.affine.quantize", false]], "quantize_dequantize() (in module aimet_torch.quantization.affine)": [[165, "aimet_torch.quantization.affine.quantize_dequantize", false]], "quantized_repr() (aimet_torch.quantization.dequantizedtensor method)": [[158, "aimet_torch.quantization.DequantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensor method)": [[159, "aimet_torch.quantization.QuantizedTensor.quantized_repr", false]], "quantized_repr() (aimet_torch.quantization.quantizedtensorbase method)": [[160, "aimet_torch.quantization.QuantizedTensorBase.quantized_repr", false]], "quantizedadaptiveavgpool1d (class in aimet_torch.nn)": [[31, "aimet_torch.nn.QuantizedAdaptiveAvgPool1d", false]], "quantizedadaptiveavgpool2d (class in aimet_torch.nn)": [[32, "aimet_torch.nn.QuantizedAdaptiveAvgPool2d", false]], "quantizedadaptiveavgpool3d (class in aimet_torch.nn)": [[33, "aimet_torch.nn.QuantizedAdaptiveAvgPool3d", false]], "quantizedadaptivemaxpool1d (class in aimet_torch.nn)": [[34, "aimet_torch.nn.QuantizedAdaptiveMaxPool1d", false]], "quantizedadaptivemaxpool2d (class in aimet_torch.nn)": [[35, "aimet_torch.nn.QuantizedAdaptiveMaxPool2d", false]], "quantizedadaptivemaxpool3d (class in aimet_torch.nn)": [[36, "aimet_torch.nn.QuantizedAdaptiveMaxPool3d", false]], "quantizedalphadropout (class in aimet_torch.nn)": [[37, "aimet_torch.nn.QuantizedAlphaDropout", false]], "quantizedavgpool1d (class in aimet_torch.nn)": [[38, "aimet_torch.nn.QuantizedAvgPool1d", false]], "quantizedavgpool2d (class in aimet_torch.nn)": [[39, "aimet_torch.nn.QuantizedAvgPool2d", false]], "quantizedavgpool3d (class in aimet_torch.nn)": [[40, "aimet_torch.nn.QuantizedAvgPool3d", false]], "quantizedbatchnorm1d (class in aimet_torch.nn)": [[43, "aimet_torch.nn.QuantizedBatchNorm1d", false]], "quantizedbatchnorm2d (class in aimet_torch.nn)": [[44, "aimet_torch.nn.QuantizedBatchNorm2d", false]], "quantizedbatchnorm3d (class in aimet_torch.nn)": [[45, "aimet_torch.nn.QuantizedBatchNorm3d", false]], "quantizedbceloss (class in aimet_torch.nn)": [[41, "aimet_torch.nn.QuantizedBCELoss", false]], "quantizedbcewithlogitsloss (class in aimet_torch.nn)": [[42, "aimet_torch.nn.QuantizedBCEWithLogitsLoss", false]], "quantizedbilinear (class in aimet_torch.nn)": [[46, "aimet_torch.nn.QuantizedBilinear", false]], "quantizedcelu (class in aimet_torch.nn)": [[47, "aimet_torch.nn.QuantizedCELU", false]], "quantizedchannelshuffle (class in aimet_torch.nn)": [[49, "aimet_torch.nn.QuantizedChannelShuffle", false]], "quantizedcircularpad1d (class in aimet_torch.nn)": [[50, "aimet_torch.nn.QuantizedCircularPad1d", false]], "quantizedcircularpad2d (class in aimet_torch.nn)": [[51, "aimet_torch.nn.QuantizedCircularPad2d", false]], "quantizedcircularpad3d (class in aimet_torch.nn)": [[52, "aimet_torch.nn.QuantizedCircularPad3d", false]], "quantizedconstantpad1d (class in aimet_torch.nn)": [[53, "aimet_torch.nn.QuantizedConstantPad1d", false]], "quantizedconstantpad2d (class in aimet_torch.nn)": [[54, "aimet_torch.nn.QuantizedConstantPad2d", false]], "quantizedconstantpad3d (class in aimet_torch.nn)": [[55, "aimet_torch.nn.QuantizedConstantPad3d", false]], "quantizedconv1d (class in aimet_torch.nn)": [[56, "aimet_torch.nn.QuantizedConv1d", false]], "quantizedconv2d (class in aimet_torch.nn)": [[57, "aimet_torch.nn.QuantizedConv2d", false]], "quantizedconv3d (class in aimet_torch.nn)": [[58, "aimet_torch.nn.QuantizedConv3d", false]], "quantizedconvtranspose1d (class in aimet_torch.nn)": [[59, "aimet_torch.nn.QuantizedConvTranspose1d", false]], "quantizedconvtranspose2d (class in aimet_torch.nn)": [[60, "aimet_torch.nn.QuantizedConvTranspose2d", false]], "quantizedconvtranspose3d (class in aimet_torch.nn)": [[61, "aimet_torch.nn.QuantizedConvTranspose3d", false]], "quantizedcosineembeddingloss (class in aimet_torch.nn)": [[62, "aimet_torch.nn.QuantizedCosineEmbeddingLoss", false]], "quantizedcosinesimilarity (class in aimet_torch.nn)": [[63, "aimet_torch.nn.QuantizedCosineSimilarity", false]], "quantizedcrossentropyloss (class in aimet_torch.nn)": [[64, "aimet_torch.nn.QuantizedCrossEntropyLoss", false]], "quantizedctcloss (class in aimet_torch.nn)": [[48, "aimet_torch.nn.QuantizedCTCLoss", false]], "quantizeddropout (class in aimet_torch.nn)": [[65, "aimet_torch.nn.QuantizedDropout", false]], "quantizeddropout1d (class in aimet_torch.nn)": [[66, "aimet_torch.nn.QuantizedDropout1d", false]], "quantizeddropout2d (class in aimet_torch.nn)": [[67, "aimet_torch.nn.QuantizedDropout2d", false]], "quantizeddropout3d (class in aimet_torch.nn)": [[68, "aimet_torch.nn.QuantizedDropout3d", false]], "quantizedelu (class in aimet_torch.nn)": [[69, "aimet_torch.nn.QuantizedELU", false]], "quantizedembedding (class in aimet_torch.nn)": [[70, "aimet_torch.nn.QuantizedEmbedding", false]], "quantizedembeddingbag (class in aimet_torch.nn)": [[71, "aimet_torch.nn.QuantizedEmbeddingBag", false]], "quantizedequantize (class in aimet_torch.quantization.affine)": [[162, "aimet_torch.quantization.affine.QuantizeDequantize", false]], "quantizedfeaturealphadropout (class in aimet_torch.nn)": [[72, "aimet_torch.nn.QuantizedFeatureAlphaDropout", false]], "quantizedflatten (class in aimet_torch.nn)": [[73, "aimet_torch.nn.QuantizedFlatten", false]], "quantizedfold (class in aimet_torch.nn)": [[74, "aimet_torch.nn.QuantizedFold", false]], "quantizedfractionalmaxpool2d (class in aimet_torch.nn)": [[75, "aimet_torch.nn.QuantizedFractionalMaxPool2d", false]], "quantizedfractionalmaxpool3d (class in aimet_torch.nn)": [[76, "aimet_torch.nn.QuantizedFractionalMaxPool3d", false]], "quantizedgaussiannllloss (class in aimet_torch.nn)": [[81, "aimet_torch.nn.QuantizedGaussianNLLLoss", false]], "quantizedgelu (class in aimet_torch.nn)": [[77, "aimet_torch.nn.QuantizedGELU", false]], "quantizedglu (class in aimet_torch.nn)": [[78, "aimet_torch.nn.QuantizedGLU", false]], "quantizedgroupnorm (class in aimet_torch.nn)": [[82, "aimet_torch.nn.QuantizedGroupNorm", false]], "quantizedgru (class in aimet_torch.nn)": [[79, "aimet_torch.nn.QuantizedGRU", false]], "quantizedgrucell (class in aimet_torch.nn)": [[80, "aimet_torch.nn.QuantizedGRUCell", false]], "quantizedhardshrink (class in aimet_torch.nn)": [[83, "aimet_torch.nn.QuantizedHardshrink", false]], "quantizedhardsigmoid (class in aimet_torch.nn)": [[84, "aimet_torch.nn.QuantizedHardsigmoid", false]], "quantizedhardswish (class in aimet_torch.nn)": [[85, "aimet_torch.nn.QuantizedHardswish", false]], "quantizedhardtanh (class in aimet_torch.nn)": [[86, "aimet_torch.nn.QuantizedHardtanh", false]], "quantizedhingeembeddingloss (class in aimet_torch.nn)": [[87, "aimet_torch.nn.QuantizedHingeEmbeddingLoss", false]], "quantizedhuberloss (class in aimet_torch.nn)": [[88, "aimet_torch.nn.QuantizedHuberLoss", false]], "quantizedinstancenorm1d (class in aimet_torch.nn)": [[89, "aimet_torch.nn.QuantizedInstanceNorm1d", false]], "quantizedinstancenorm2d (class in aimet_torch.nn)": [[90, "aimet_torch.nn.QuantizedInstanceNorm2d", false]], "quantizedinstancenorm3d (class in aimet_torch.nn)": [[91, "aimet_torch.nn.QuantizedInstanceNorm3d", false]], "quantizedkldivloss (class in aimet_torch.nn)": [[92, "aimet_torch.nn.QuantizedKLDivLoss", false]], "quantizedl1loss (class in aimet_torch.nn)": [[93, "aimet_torch.nn.QuantizedL1Loss", false]], "quantizedlayernorm (class in aimet_torch.nn)": [[98, "aimet_torch.nn.QuantizedLayerNorm", false]], "quantizedleakyrelu (class in aimet_torch.nn)": [[99, "aimet_torch.nn.QuantizedLeakyReLU", false]], "quantizedlinear (class in aimet_torch.nn)": [[100, "aimet_torch.nn.QuantizedLinear", false]], "quantizedlocalresponsenorm (class in aimet_torch.nn)": [[101, "aimet_torch.nn.QuantizedLocalResponseNorm", false]], "quantizedlogsigmoid (class in aimet_torch.nn)": [[102, "aimet_torch.nn.QuantizedLogSigmoid", false]], "quantizedlogsoftmax (class in aimet_torch.nn)": [[103, "aimet_torch.nn.QuantizedLogSoftmax", false]], "quantizedlppool1d (class in aimet_torch.nn)": [[94, "aimet_torch.nn.QuantizedLPPool1d", false]], "quantizedlppool2d (class in aimet_torch.nn)": [[95, "aimet_torch.nn.QuantizedLPPool2d", false]], "quantizedlstm (class in aimet_torch.nn)": [[96, "aimet_torch.nn.QuantizedLSTM", false]], "quantizedlstmcell (class in aimet_torch.nn)": [[97, "aimet_torch.nn.QuantizedLSTMCell", false]], "quantizedmarginrankingloss (class in aimet_torch.nn)": [[105, "aimet_torch.nn.QuantizedMarginRankingLoss", false]], "quantizedmaxpool1d (class in aimet_torch.nn)": [[106, "aimet_torch.nn.QuantizedMaxPool1d", false]], "quantizedmaxpool2d (class in aimet_torch.nn)": [[107, "aimet_torch.nn.QuantizedMaxPool2d", false]], "quantizedmaxpool3d (class in aimet_torch.nn)": [[108, "aimet_torch.nn.QuantizedMaxPool3d", false]], "quantizedmaxunpool1d (class in aimet_torch.nn)": [[109, "aimet_torch.nn.QuantizedMaxUnpool1d", false]], "quantizedmaxunpool2d (class in aimet_torch.nn)": [[110, "aimet_torch.nn.QuantizedMaxUnpool2d", false]], "quantizedmaxunpool3d (class in aimet_torch.nn)": [[111, "aimet_torch.nn.QuantizedMaxUnpool3d", false]], "quantizedmish (class in aimet_torch.nn)": [[112, "aimet_torch.nn.QuantizedMish", false]], "quantizedmseloss (class in aimet_torch.nn)": [[104, "aimet_torch.nn.QuantizedMSELoss", false]], "quantizedmultilabelmarginloss (class in aimet_torch.nn)": [[113, "aimet_torch.nn.QuantizedMultiLabelMarginLoss", false]], "quantizedmultilabelsoftmarginloss (class in aimet_torch.nn)": [[114, "aimet_torch.nn.QuantizedMultiLabelSoftMarginLoss", false]], "quantizedmultimarginloss (class in aimet_torch.nn)": [[115, "aimet_torch.nn.QuantizedMultiMarginLoss", false]], "quantizednllloss (class in aimet_torch.nn)": [[116, "aimet_torch.nn.QuantizedNLLLoss", false]], "quantizednllloss2d (class in aimet_torch.nn)": [[117, "aimet_torch.nn.QuantizedNLLLoss2d", false]], "quantizedpairwisedistance (class in aimet_torch.nn)": [[119, "aimet_torch.nn.QuantizedPairwiseDistance", false]], "quantizedpixelshuffle (class in aimet_torch.nn)": [[120, "aimet_torch.nn.QuantizedPixelShuffle", false]], "quantizedpixelunshuffle (class in aimet_torch.nn)": [[121, "aimet_torch.nn.QuantizedPixelUnshuffle", false]], "quantizedpoissonnllloss (class in aimet_torch.nn)": [[122, "aimet_torch.nn.QuantizedPoissonNLLLoss", false]], "quantizedprelu (class in aimet_torch.nn)": [[118, "aimet_torch.nn.QuantizedPReLU", false]], "quantizedreflectionpad1d (class in aimet_torch.nn)": [[128, "aimet_torch.nn.QuantizedReflectionPad1d", false]], "quantizedreflectionpad2d (class in aimet_torch.nn)": [[129, "aimet_torch.nn.QuantizedReflectionPad2d", false]], "quantizedreflectionpad3d (class in aimet_torch.nn)": [[130, "aimet_torch.nn.QuantizedReflectionPad3d", false]], "quantizedrelu (class in aimet_torch.nn)": [[126, "aimet_torch.nn.QuantizedReLU", false]], "quantizedrelu6 (class in aimet_torch.nn)": [[127, "aimet_torch.nn.QuantizedReLU6", false]], "quantizedreplicationpad1d (class in aimet_torch.nn)": [[131, "aimet_torch.nn.QuantizedReplicationPad1d", false]], "quantizedreplicationpad2d (class in aimet_torch.nn)": [[132, "aimet_torch.nn.QuantizedReplicationPad2d", false]], "quantizedreplicationpad3d (class in aimet_torch.nn)": [[133, "aimet_torch.nn.QuantizedReplicationPad3d", false]], "quantizedrnn (class in aimet_torch.nn)": [[123, "aimet_torch.nn.QuantizedRNN", false]], "quantizedrnncell (class in aimet_torch.nn)": [[124, "aimet_torch.nn.QuantizedRNNCell", false]], "quantizedrrelu (class in aimet_torch.nn)": [[125, "aimet_torch.nn.QuantizedRReLU", false]], "quantizedselu (class in aimet_torch.nn)": [[134, "aimet_torch.nn.QuantizedSELU", false]], "quantizedsigmoid (class in aimet_torch.nn)": [[136, "aimet_torch.nn.QuantizedSigmoid", false]], "quantizedsilu (class in aimet_torch.nn)": [[135, "aimet_torch.nn.QuantizedSiLU", false]], "quantizedsmoothl1loss (class in aimet_torch.nn)": [[137, "aimet_torch.nn.QuantizedSmoothL1Loss", false]], "quantizedsoftmarginloss (class in aimet_torch.nn)": [[138, "aimet_torch.nn.QuantizedSoftMarginLoss", false]], "quantizedsoftmax (class in aimet_torch.nn)": [[139, "aimet_torch.nn.QuantizedSoftmax", false]], "quantizedsoftmax2d (class in aimet_torch.nn)": [[140, "aimet_torch.nn.QuantizedSoftmax2d", false]], "quantizedsoftmin (class in aimet_torch.nn)": [[141, "aimet_torch.nn.QuantizedSoftmin", false]], "quantizedsoftplus (class in aimet_torch.nn)": [[142, "aimet_torch.nn.QuantizedSoftplus", false]], "quantizedsoftshrink (class in aimet_torch.nn)": [[143, "aimet_torch.nn.QuantizedSoftshrink", false]], "quantizedsoftsign (class in aimet_torch.nn)": [[144, "aimet_torch.nn.QuantizedSoftsign", false]], "quantizedtanh (class in aimet_torch.nn)": [[145, "aimet_torch.nn.QuantizedTanh", false]], "quantizedtanhshrink (class in aimet_torch.nn)": [[146, "aimet_torch.nn.QuantizedTanhshrink", false]], "quantizedtensor (class in aimet_torch.quantization)": [[159, "aimet_torch.quantization.QuantizedTensor", false]], "quantizedtensorbase (class in aimet_torch.quantization)": [[160, "aimet_torch.quantization.QuantizedTensorBase", false]], "quantizedthreshold (class in aimet_torch.nn)": [[147, "aimet_torch.nn.QuantizedThreshold", false]], "quantizedtripletmarginloss (class in aimet_torch.nn)": [[148, "aimet_torch.nn.QuantizedTripletMarginLoss", false]], "quantizedtripletmarginwithdistanceloss (class in aimet_torch.nn)": [[149, "aimet_torch.nn.QuantizedTripletMarginWithDistanceLoss", false]], "quantizedunflatten (class in aimet_torch.nn)": [[150, "aimet_torch.nn.QuantizedUnflatten", false]], "quantizedunfold (class in aimet_torch.nn)": [[151, "aimet_torch.nn.QuantizedUnfold", false]], "quantizedupsample (class in aimet_torch.nn)": [[152, "aimet_torch.nn.QuantizedUpsample", false]], "quantizedupsamplingbilinear2d (class in aimet_torch.nn)": [[153, "aimet_torch.nn.QuantizedUpsamplingBilinear2d", false]], "quantizedupsamplingnearest2d (class in aimet_torch.nn)": [[154, "aimet_torch.nn.QuantizedUpsamplingNearest2d", false]], "quantizedzeropad1d (class in aimet_torch.nn)": [[155, "aimet_torch.nn.QuantizedZeroPad1d", false]], "quantizedzeropad2d (class in aimet_torch.nn)": [[156, "aimet_torch.nn.QuantizedZeroPad2d", false]], "quantizedzeropad3d (class in aimet_torch.nn)": [[157, "aimet_torch.nn.QuantizedZeroPad3d", false]], "quantizergroup (class in aimet_onnx.amp.quantizer_groups)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_tensorflow.keras.amp.quantizer_groups)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup", false]], "quantizergroup (class in aimet_torch.amp.quantizer_groups)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false], [235, "aimet_torch.amp.quantizer_groups.QuantizerGroup", false]], "quantscheme (class in aimet_common.defs)": [[9, "aimet_common.defs.QuantScheme", false], [22, "aimet_common.defs.QuantScheme", false], [181, "aimet_common.defs.QuantScheme", false], [187, "aimet_common.defs.QuantScheme", false]], "quantsim": [[243, "term-QuantSim", true]], "quic": [[243, "term-QUIC", true]], "reestimate_bn_stats() (in module aimet_tensorflow.keras.bn_reestimation)": [[14, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false], [223, "aimet_tensorflow.keras.bn_reestimation.reestimate_bn_stats", false]], "reestimate_bn_stats() (in module aimet_torch.bn_reestimation)": [[26, "aimet_torch.bn_reestimation.reestimate_bn_stats", false], [223, "aimet_torch.bn_reestimation.reestimate_bn_stats", false]], "run_inference() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.run_inference", false]], "save_checkpoint() (aimet_torch.v1.quantsim method)": [[187, "aimet_torch.v1.quantsim.save_checkpoint", false]], "seqmseparams (class in aimet_onnx.sequential_mse.seq_mse)": [[10, "aimet_onnx.sequential_mse.seq_mse.SeqMseParams", false], [242, "aimet_onnx.sequential_mse.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.seq_mse)": [[182, "aimet_torch.seq_mse.SeqMseParams", false], [242, "aimet_torch.seq_mse.SeqMseParams", false]], "seqmseparams (class in aimet_torch.v1.seq_mse)": [[188, "aimet_torch.v1.seq_mse.SeqMseParams", false]], "set_activation_quantizers_to_float() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_activation_quantizers_to_float", false]], "set_adaround_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_adaround_params", false]], "set_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_blockwise_quantization_for_weights", false]], "set_default_kernel() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.set_default_kernel", false]], "set_extra_state() (aimet_torch.quantization.float.floatquantizedequantize method)": [[166, "aimet_torch.quantization.float.FloatQuantizeDequantize.set_extra_state", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_onnx.quantsim)": [[7, "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", false]], "set_grouped_blockwise_quantization_for_weights() (in module aimet_torch.v2.quantsim.config_utils)": [[170, "aimet_torch.v2.quantsim.config_utils.set_grouped_blockwise_quantization_for_weights", false]], "set_kernel() (aimet_torch.nn.quantizationmixin method)": [[30, "aimet_torch.nn.QuantizationMixin.set_kernel", false]], "set_mixed_precision_params() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_mixed_precision_params", false]], "set_model_input_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false], [237, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_input_precision", false]], "set_model_output_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false], [237, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_model_output_precision", false]], "set_precision() (aimet_torch.v2.mixed_precision.mixedprecisionconfigurator method)": [[174, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false], [237, "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator.set_precision", false]], "set_quant_scheme_candidates() (aimet_tensorflow.keras.auto_quant_v2.autoquantwithautomixedprecision method)": [[13, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false], [222, "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision.set_quant_scheme_candidates", false]], "set_quantizers_to_candidate() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "set_quantizers_to_candidate() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false], [235, "aimet_torch.amp.quantizer_groups.QuantizerGroup.set_quantizers_to_candidate", false]], "spatialsvdparameters (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false], [230, "aimet_tensorflow.keras.defs.SpatialSvdParameters", false]], "spatialsvdparameters.automodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false], [230, "aimet_tensorflow.keras.defs.SpatialSvdParameters.AutoModeParams", false]], "spatialsvdparameters.manualmodeparams (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false], [230, "aimet_tensorflow.keras.defs.SpatialSvdParameters.ManualModeParams", false]], "spatialsvdparameters.mode (class in aimet_tensorflow.keras.defs)": [[17, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false], [230, "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode", false]], "sqnr() (aimet_onnx.amp.mixed_precision_algo.evalcallbackfactory method)": [[2, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [235, "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "sqnr() (aimet_torch.amp.mixed_precision_algo.evalcallbackfactory method)": [[174, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [184, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false], [235, "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory.sqnr", false]], "target hardware accelerator": [[243, "term-Target-Hardware-Accelerator", true]], "target runtime": [[243, "term-Target-Runtime", true]], "tensorflow": [[243, "term-TensorFlow", true]], "to_list() (aimet_onnx.amp.quantizer_groups.quantizergroup method)": [[2, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false], [235, "aimet_onnx.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_tensorflow.keras.amp.quantizer_groups.quantizergroup method)": [[12, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false], [235, "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup.to_list", false]], "to_list() (aimet_torch.amp.quantizer_groups.quantizergroup method)": [[174, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [184, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false], [235, "aimet_torch.amp.quantizer_groups.QuantizerGroup.to_list", false]], "torchscript": [[243, "term-TorchScript", true]], "torchscript (aimet_torch.layer_output_utils.namingscheme attribute)": [[169, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false], [220, "aimet_torch.layer_output_utils.NamingScheme.TORCHSCRIPT", false]], "validate_model() (aimet_torch.model_validator.model_validator.modelvalidator static method)": [[173, "aimet_torch.model_validator.model_validator.ModelValidator.validate_model", false]], "variant": [[243, "term-Variant", true]], "visualize_stats() (in module aimet_torch.v2.visualization_tools)": [[168, "aimet_torch.v2.visualization_tools.visualize_stats", false], [219, "aimet_torch.v2.visualization_tools.visualize_stats", false]], "weights": [[243, "term-Weights", true]], "wrap() (aimet_torch.nn.quantizationmixin class method)": [[30, "aimet_torch.nn.QuantizationMixin.wrap", false]]}, "objects": {"aimet_common.defs": [[235, 0, 1, "id1", "CallbackFunc"], [230, 0, 1, "", "GreedySelectionParameters"], [187, 0, 1, "", "QuantScheme"]], "aimet_common.defs.QuantScheme": [[187, 1, 1, "", "from_str"]], "aimet_common.utils": [[221, 0, 1, "", "CallbackFunc"]], "aimet_onnx": [[9, 0, 1, "", "QuantizationSimModel"], [9, 2, 1, "", "compute_encodings"]], "aimet_onnx.QuantizationSimModel": [[9, 1, 1, "", "compute_encodings"], [9, 1, 1, "", "export"]], "aimet_onnx.adaround.adaround_weight": [[216, 0, 1, "", "AdaroundParameters"]], "aimet_onnx.adaround.adaround_weight.Adaround": [[216, 2, 1, "", "apply_adaround"]], "aimet_onnx.amp.mixed_precision_algo": [[235, 0, 1, "", "EvalCallbackFactory"]], "aimet_onnx.amp.mixed_precision_algo.EvalCallbackFactory": [[235, 1, 1, "", "sqnr"]], "aimet_onnx.amp.quantizer_groups": [[235, 0, 1, "", "QuantizerGroup"]], "aimet_onnx.amp.quantizer_groups.QuantizerGroup": [[235, 1, 1, "", "get_activation_quantizers"], [235, 1, 1, "", "get_active_quantizers"], [235, 1, 1, "", "get_candidate"], [235, 1, 1, "", "get_param_quantizers"], [235, 1, 1, "", "set_quantizers_to_candidate"], [235, 1, 1, "", "to_list"]], "aimet_onnx.batch_norm_fold": [[224, 2, 1, "", "fold_all_batch_norms_to_weight"]], "aimet_onnx.cross_layer_equalization": [[225, 2, 1, "", "equalize_model"]], "aimet_onnx.layer_output_utils": [[220, 0, 1, "", "LayerOutputUtil"]], "aimet_onnx.layer_output_utils.LayerOutputUtil": [[220, 1, 1, "", "generate_layer_outputs"]], "aimet_onnx.mixed_precision": [[235, 2, 1, "", "choose_mixed_precision"]], "aimet_onnx.quant_analyzer": [[221, 0, 1, "", "QuantAnalyzer"]], "aimet_onnx.quant_analyzer.QuantAnalyzer": [[221, 1, 1, "", "analyze"], [221, 1, 1, "", "enable_per_layer_mse_loss"]], "aimet_onnx.quantsim": [[7, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_onnx.sequential_mse.seq_mse": [[242, 0, 1, "", "SeqMseParams"]], "aimet_onnx.sequential_mse.seq_mse.SequentialMse": [[242, 2, 1, "", "apply_seq_mse"]], "aimet_tensorflow.keras.adaround_weight": [[216, 0, 1, "", "AdaroundParameters"]], "aimet_tensorflow.keras.adaround_weight.Adaround": [[216, 2, 1, "", "apply_adaround"]], "aimet_tensorflow.keras.amp.quantizer_groups": [[235, 0, 1, "", "QuantizerGroup"]], "aimet_tensorflow.keras.amp.quantizer_groups.QuantizerGroup": [[235, 1, 1, "", "get_active_param_quantizers"], [235, 1, 1, "", "get_active_quantizers"], [235, 1, 1, "", "get_candidate"], [235, 1, 1, "", "lookup_quantizer"], [235, 1, 1, "", "set_quantizers_to_candidate"], [235, 1, 1, "", "to_list"]], "aimet_tensorflow.keras.auto_quant_v2": [[222, 0, 1, "", "AutoQuantWithAutoMixedPrecision"]], "aimet_tensorflow.keras.auto_quant_v2.AutoQuantWithAutoMixedPrecision": [[222, 1, 1, "", "get_quant_scheme_candidates"], [222, 1, 1, "", "optimize"], [222, 1, 1, "", "run_inference"], [222, 1, 1, "", "set_adaround_params"], [222, 1, 1, "", "set_mixed_precision_params"], [222, 1, 1, "", "set_quant_scheme_candidates"]], "aimet_tensorflow.keras.batch_norm_fold": [[224, 2, 1, "", "fold_all_batch_norms"], [223, 2, 1, "", "fold_all_batch_norms_to_scale"]], "aimet_tensorflow.keras.bn_reestimation": [[223, 2, 1, "", "reestimate_bn_stats"]], "aimet_tensorflow.keras.compress": [[230, 0, 1, "", "ModelCompressor"]], "aimet_tensorflow.keras.compress.ModelCompressor": [[230, 1, 1, "", "compress_model"]], "aimet_tensorflow.keras.cross_layer_equalization": [[225, 2, 1, "", "equalize_model"]], "aimet_tensorflow.keras.defs": [[230, 0, 1, "", "SpatialSvdParameters"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters": [[230, 0, 1, "", "AutoModeParams"], [230, 0, 1, "", "ManualModeParams"], [230, 0, 1, "", "Mode"]], "aimet_tensorflow.keras.defs.SpatialSvdParameters.Mode": [[230, 3, 1, "", "auto"], [230, 3, 1, "", "manual"]], "aimet_tensorflow.keras.layer_output_utils": [[220, 0, 1, "", "LayerOutputUtil"]], "aimet_tensorflow.keras.layer_output_utils.LayerOutputUtil": [[220, 1, 1, "", "generate_layer_outputs"]], "aimet_tensorflow.keras.mixed_precision": [[235, 2, 1, "", "choose_fast_mixed_precision"], [235, 2, 1, "", "choose_mixed_precision"]], "aimet_tensorflow.keras.model_preparer": [[20, 2, 1, "", "prepare_model"]], "aimet_tensorflow.keras.quantsim": [[22, 0, 1, "", "QuantizationSimModel"]], "aimet_tensorflow.keras.quantsim.QuantizationSimModel": [[22, 1, 1, "", "compute_encodings"], [22, 1, 1, "", "export"]], "aimet_torch": [[181, 0, 1, "", "QuantizationSimModel"]], "aimet_torch.QuantizationSimModel": [[181, 1, 1, "", "compute_encodings"], [181, 1, 1, "", "export"]], "aimet_torch.adaround.adaround_weight": [[216, 0, 1, "", "AdaroundParameters"]], "aimet_torch.adaround.adaround_weight.Adaround": [[216, 2, 1, "", "apply_adaround"]], "aimet_torch.amp.mixed_precision_algo": [[235, 0, 1, "", "EvalCallbackFactory"]], "aimet_torch.amp.mixed_precision_algo.EvalCallbackFactory": [[235, 1, 1, "", "sqnr"]], "aimet_torch.amp.quantizer_groups": [[235, 0, 1, "", "QuantizerGroup"]], "aimet_torch.amp.quantizer_groups.QuantizerGroup": [[235, 1, 1, "", "get_active_quantizers"], [235, 1, 1, "", "get_candidate"], [235, 1, 1, "", "get_input_quantizer_modules"], [235, 1, 1, "", "set_quantizers_to_candidate"], [235, 1, 1, "", "to_list"]], "aimet_torch.batch_norm_fold": [[224, 2, 1, "", "fold_all_batch_norms"]], "aimet_torch.bn_reestimation": [[223, 2, 1, "", "reestimate_bn_stats"]], "aimet_torch.cross_layer_equalization": [[225, 2, 1, "", "equalize_model"]], "aimet_torch.experimental.adascale": [[217, 2, 1, "", "apply_adascale"]], "aimet_torch.experimental.omniquant": [[238, 2, 1, "", "apply_omniquant"]], "aimet_torch.layer_output_utils": [[220, 0, 1, "", "LayerOutputUtil"], [220, 0, 1, "", "NamingScheme"]], "aimet_torch.layer_output_utils.LayerOutputUtil": [[220, 1, 1, "", "generate_layer_outputs"]], "aimet_torch.layer_output_utils.NamingScheme": [[220, 3, 1, "", "ONNX"], [220, 3, 1, "", "PYTORCH"], [220, 3, 1, "", "TORCHSCRIPT"]], "aimet_torch.mixed_precision": [[235, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.model_preparer": [[172, 2, 1, "", "prepare_model"]], "aimet_torch.model_validator.model_validator": [[173, 0, 1, "", "ModelValidator"]], "aimet_torch.model_validator.model_validator.ModelValidator": [[173, 1, 1, "", "add_check"], [173, 1, 1, "", "validate_model"]], "aimet_torch.nn": [[30, 0, 1, "", "QuantizationMixin"], [31, 0, 1, "", "QuantizedAdaptiveAvgPool1d"], [32, 0, 1, "", "QuantizedAdaptiveAvgPool2d"], [33, 0, 1, "", "QuantizedAdaptiveAvgPool3d"], [34, 0, 1, "", "QuantizedAdaptiveMaxPool1d"], [35, 0, 1, "", "QuantizedAdaptiveMaxPool2d"], [36, 0, 1, "", "QuantizedAdaptiveMaxPool3d"], [37, 0, 1, "", "QuantizedAlphaDropout"], [38, 0, 1, "", "QuantizedAvgPool1d"], [39, 0, 1, "", "QuantizedAvgPool2d"], [40, 0, 1, "", "QuantizedAvgPool3d"], [41, 0, 1, "", "QuantizedBCELoss"], [42, 0, 1, "", "QuantizedBCEWithLogitsLoss"], [43, 0, 1, "", "QuantizedBatchNorm1d"], [44, 0, 1, "", "QuantizedBatchNorm2d"], [45, 0, 1, "", "QuantizedBatchNorm3d"], [46, 0, 1, "", "QuantizedBilinear"], [47, 0, 1, "", "QuantizedCELU"], [48, 0, 1, "", "QuantizedCTCLoss"], [49, 0, 1, "", "QuantizedChannelShuffle"], [50, 0, 1, "", "QuantizedCircularPad1d"], [51, 0, 1, "", "QuantizedCircularPad2d"], [52, 0, 1, "", "QuantizedCircularPad3d"], [53, 0, 1, "", "QuantizedConstantPad1d"], [54, 0, 1, "", "QuantizedConstantPad2d"], [55, 0, 1, "", "QuantizedConstantPad3d"], [56, 0, 1, "", "QuantizedConv1d"], [57, 0, 1, "", "QuantizedConv2d"], [58, 0, 1, "", "QuantizedConv3d"], [59, 0, 1, "", "QuantizedConvTranspose1d"], [60, 0, 1, "", "QuantizedConvTranspose2d"], [61, 0, 1, "", "QuantizedConvTranspose3d"], [62, 0, 1, "", "QuantizedCosineEmbeddingLoss"], [63, 0, 1, "", "QuantizedCosineSimilarity"], [64, 0, 1, "", "QuantizedCrossEntropyLoss"], [65, 0, 1, "", "QuantizedDropout"], [66, 0, 1, "", "QuantizedDropout1d"], [67, 0, 1, "", "QuantizedDropout2d"], [68, 0, 1, "", "QuantizedDropout3d"], [69, 0, 1, "", "QuantizedELU"], [70, 0, 1, "", "QuantizedEmbedding"], [71, 0, 1, "", "QuantizedEmbeddingBag"], [72, 0, 1, "", "QuantizedFeatureAlphaDropout"], [73, 0, 1, "", "QuantizedFlatten"], [74, 0, 1, "", "QuantizedFold"], [75, 0, 1, "", "QuantizedFractionalMaxPool2d"], [76, 0, 1, "", "QuantizedFractionalMaxPool3d"], [77, 0, 1, "", "QuantizedGELU"], [78, 0, 1, "", "QuantizedGLU"], [79, 0, 1, "", "QuantizedGRU"], [80, 0, 1, "", "QuantizedGRUCell"], [81, 0, 1, "", "QuantizedGaussianNLLLoss"], [82, 0, 1, "", "QuantizedGroupNorm"], [83, 0, 1, "", "QuantizedHardshrink"], [84, 0, 1, "", "QuantizedHardsigmoid"], [85, 0, 1, "", "QuantizedHardswish"], [86, 0, 1, "", "QuantizedHardtanh"], [87, 0, 1, "", "QuantizedHingeEmbeddingLoss"], [88, 0, 1, "", "QuantizedHuberLoss"], [89, 0, 1, "", "QuantizedInstanceNorm1d"], [90, 0, 1, "", "QuantizedInstanceNorm2d"], [91, 0, 1, "", "QuantizedInstanceNorm3d"], [92, 0, 1, "", "QuantizedKLDivLoss"], [93, 0, 1, "", "QuantizedL1Loss"], [94, 0, 1, "", "QuantizedLPPool1d"], [95, 0, 1, "", "QuantizedLPPool2d"], [96, 0, 1, "", "QuantizedLSTM"], [97, 0, 1, "", "QuantizedLSTMCell"], [98, 0, 1, "", "QuantizedLayerNorm"], [99, 0, 1, "", "QuantizedLeakyReLU"], [100, 0, 1, "", "QuantizedLinear"], [101, 0, 1, "", "QuantizedLocalResponseNorm"], [102, 0, 1, "", "QuantizedLogSigmoid"], [103, 0, 1, "", "QuantizedLogSoftmax"], [104, 0, 1, "", "QuantizedMSELoss"], [105, 0, 1, "", "QuantizedMarginRankingLoss"], [106, 0, 1, "", "QuantizedMaxPool1d"], [107, 0, 1, "", "QuantizedMaxPool2d"], [108, 0, 1, "", "QuantizedMaxPool3d"], [109, 0, 1, "", "QuantizedMaxUnpool1d"], [110, 0, 1, "", "QuantizedMaxUnpool2d"], [111, 0, 1, "", "QuantizedMaxUnpool3d"], [112, 0, 1, "", "QuantizedMish"], [113, 0, 1, "", "QuantizedMultiLabelMarginLoss"], [114, 0, 1, "", "QuantizedMultiLabelSoftMarginLoss"], [115, 0, 1, "", "QuantizedMultiMarginLoss"], [116, 0, 1, "", "QuantizedNLLLoss"], [117, 0, 1, "", "QuantizedNLLLoss2d"], [118, 0, 1, "", "QuantizedPReLU"], [119, 0, 1, "", "QuantizedPairwiseDistance"], [120, 0, 1, "", "QuantizedPixelShuffle"], [121, 0, 1, "", "QuantizedPixelUnshuffle"], [122, 0, 1, "", "QuantizedPoissonNLLLoss"], [123, 0, 1, "", "QuantizedRNN"], [124, 0, 1, "", "QuantizedRNNCell"], [125, 0, 1, "", "QuantizedRReLU"], [126, 0, 1, "", "QuantizedReLU"], [127, 0, 1, "", "QuantizedReLU6"], [128, 0, 1, "", "QuantizedReflectionPad1d"], [129, 0, 1, "", "QuantizedReflectionPad2d"], [130, 0, 1, "", "QuantizedReflectionPad3d"], [131, 0, 1, "", "QuantizedReplicationPad1d"], [132, 0, 1, "", "QuantizedReplicationPad2d"], [133, 0, 1, "", "QuantizedReplicationPad3d"], [134, 0, 1, "", "QuantizedSELU"], [135, 0, 1, "", "QuantizedSiLU"], [136, 0, 1, "", "QuantizedSigmoid"], [137, 0, 1, "", "QuantizedSmoothL1Loss"], [138, 0, 1, "", "QuantizedSoftMarginLoss"], [139, 0, 1, "", "QuantizedSoftmax"], [140, 0, 1, "", "QuantizedSoftmax2d"], [141, 0, 1, "", "QuantizedSoftmin"], [142, 0, 1, "", "QuantizedSoftplus"], [143, 0, 1, "", "QuantizedSoftshrink"], [144, 0, 1, "", "QuantizedSoftsign"], [145, 0, 1, "", "QuantizedTanh"], [146, 0, 1, "", "QuantizedTanhshrink"], [147, 0, 1, "", "QuantizedThreshold"], [148, 0, 1, "", "QuantizedTripletMarginLoss"], [149, 0, 1, "", "QuantizedTripletMarginWithDistanceLoss"], [150, 0, 1, "", "QuantizedUnflatten"], [151, 0, 1, "", "QuantizedUnfold"], [152, 0, 1, "", "QuantizedUpsample"], [153, 0, 1, "", "QuantizedUpsamplingBilinear2d"], [154, 0, 1, "", "QuantizedUpsamplingNearest2d"], [155, 0, 1, "", "QuantizedZeroPad1d"], [156, 0, 1, "", "QuantizedZeroPad2d"], [157, 0, 1, "", "QuantizedZeroPad3d"]], "aimet_torch.nn.QuantizationMixin": [[30, 1, 1, "", "compute_encodings"], [30, 1, 1, "", "forward"], [30, 1, 1, "", "from_module"], [30, 1, 1, "", "get_default_kernel"], [30, 1, 1, "", "get_kernel"], [30, 1, 1, "", "implements"], [30, 3, 1, "", "input_quantizers"], [30, 3, 1, "", "output_quantizers"], [30, 3, 1, "", "param_quantizers"], [30, 1, 1, "", "set_default_kernel"], [30, 1, 1, "", "set_kernel"], [30, 1, 1, "", "wrap"]], "aimet_torch.nn.QuantizedLinear": [[100, 1, 1, "", "forward"]], "aimet_torch.onnx": [[177, 2, 1, "", "export"]], "aimet_torch.quant_analyzer": [[221, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.quant_analyzer.QuantAnalyzer": [[221, 1, 1, "", "analyze"], [221, 1, 1, "", "check_model_sensitivity_to_quantization"], [221, 1, 1, "", "export_per_layer_encoding_min_max_range"], [221, 1, 1, "", "export_per_layer_mse_loss"], [221, 1, 1, "", "export_per_layer_stats_histogram"], [221, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [221, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.quantization": [[158, 0, 1, "", "DequantizedTensor"], [159, 0, 1, "", "QuantizedTensor"], [160, 0, 1, "", "QuantizedTensorBase"]], "aimet_torch.quantization.DequantizedTensor": [[158, 1, 1, "", "dequantize"], [158, 1, 1, "", "quantize"], [158, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensor": [[159, 1, 1, "", "dequantize"], [159, 1, 1, "", "quantize"], [159, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.QuantizedTensorBase": [[160, 1, 1, "", "clone"], [160, 1, 1, "", "dequantize"], [160, 1, 1, "", "detach"], [160, 1, 1, "", "new_empty"], [160, 1, 1, "", "quantize"], [160, 1, 1, "", "quantized_repr"]], "aimet_torch.quantization.affine": [[161, 0, 1, "", "Quantize"], [162, 0, 1, "", "QuantizeDequantize"], [163, 2, 1, "", "dequantize"], [164, 2, 1, "", "quantize"], [165, 2, 1, "", "quantize_dequantize"]], "aimet_torch.quantization.affine.Quantize": [[161, 1, 1, "", "forward"]], "aimet_torch.quantization.affine.QuantizeDequantize": [[162, 1, 1, "", "forward"]], "aimet_torch.quantization.float": [[166, 0, 1, "", "FloatQuantizeDequantize"]], "aimet_torch.quantization.float.FloatQuantizeDequantize": [[166, 4, 1, "", "bitwidth"], [166, 1, 1, "", "compute_encodings"], [166, 4, 1, "", "exponent_bits"], [166, 1, 1, "", "forward"], [166, 1, 1, "", "from_encodings"], [166, 1, 1, "", "get_encodings"], [166, 1, 1, "", "get_extra_state"], [166, 1, 1, "", "is_bfloat16"], [166, 1, 1, "", "is_float16"], [166, 1, 1, "", "load_state_dict"], [166, 4, 1, "", "mantissa_bits"], [166, 1, 1, "", "set_extra_state"]], "aimet_torch.seq_mse": [[242, 0, 1, "", "SeqMseParams"], [242, 2, 1, "", "apply_seq_mse"]], "aimet_torch.seq_mse.SeqMseParams": [[242, 1, 1, "", "forward_fn"], [242, 1, 1, "", "get_loss_fn"]], "aimet_torch.v1.adaround.adaround_weight": [[183, 0, 1, "", "AdaroundParameters"]], "aimet_torch.v1.adaround.adaround_weight.Adaround": [[183, 2, 1, "", "apply_adaround"]], "aimet_torch.v1.mixed_precision": [[184, 2, 1, "", "choose_mixed_precision"]], "aimet_torch.v1.quant_analyzer": [[186, 0, 1, "", "QuantAnalyzer"]], "aimet_torch.v1.quant_analyzer.QuantAnalyzer": [[186, 1, 1, "", "analyze"], [186, 1, 1, "", "check_model_sensitivity_to_quantization"], [186, 1, 1, "", "export_per_layer_encoding_min_max_range"], [186, 1, 1, "", "export_per_layer_mse_loss"], [186, 1, 1, "", "export_per_layer_stats_histogram"], [186, 1, 1, "", "perform_per_layer_analysis_by_disabling_quant_wrappers"], [186, 1, 1, "", "perform_per_layer_analysis_by_enabling_quant_wrappers"]], "aimet_torch.v1.quantsim": [[187, 0, 1, "", "QuantizationSimModel"], [187, 1, 1, "", "load_checkpoint"], [187, 1, 1, "", "save_checkpoint"]], "aimet_torch.v1.quantsim.QuantizationSimModel": [[187, 1, 1, "", "compute_encodings"], [187, 1, 1, "", "export"]], "aimet_torch.v1.seq_mse": [[188, 0, 1, "", "SeqMseParams"], [188, 2, 1, "", "apply_seq_mse"]], "aimet_torch.v1.seq_mse.SeqMseParams": [[188, 1, 1, "", "forward_fn"], [188, 1, 1, "", "get_loss_fn"]], "aimet_torch.v2.mixed_precision": [[237, 0, 1, "", "MixedPrecisionConfigurator"]], "aimet_torch.v2.mixed_precision.MixedPrecisionConfigurator": [[237, 1, 1, "", "apply"], [237, 1, 1, "", "set_model_input_precision"], [237, 1, 1, "", "set_model_output_precision"], [237, 1, 1, "", "set_precision"]], "aimet_torch.v2.quantsim.config_utils": [[170, 2, 1, "", "set_activation_quantizers_to_float"], [170, 2, 1, "", "set_blockwise_quantization_for_weights"], [170, 2, 1, "", "set_grouped_blockwise_quantization_for_weights"]], "aimet_torch.v2.visualization_tools": [[219, 2, 1, "", "visualize_stats"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:attribute", "4": "py:property"}, "terms": {"": [1, 2, 7, 8, 12, 20, 21, 22, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 166, 170, 172, 174, 175, 179, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 242, 243, 247, 249, 250, 251, 252, 253, 255, 257, 258, 261, 262], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263], "00": [164, 165, 205, 206, 207, 224, 225], "000": [216, 252], "0000": [158, 165, 177, 180], "0000e": [164, 165], "001": [190, 208, 223], "0014807": 245, "00183112e": 224, "00215936e": 224, "0030": 180, "00317": 217, "0032": 180, "0034": 180, "00347728e": 225, "0035": 180, "0036": [162, 180], "0037": 180, "0038": 180, "0039": [162, 180], "0059": 180, "0063": 180, "0064": 180, "0068": 180, "0069": 180, "0073": 180, "0074": 180, "0078": 180, "00_224": [216, 224, 225], "01": [1, 11, 23, 164, 165, 183, 194, 196, 210, 216, 222, 224, 225], "0115": 162, "0117": 180, "0142": 160, "01457286e": [224, 225], "0156": 180, "0158": 162, "0176": 162, "0195": 180, "02": [164, 165, 224, 225], "02078857e": [224, 225], "0234": 180, "0235": 222, "026354755942277083": 245, "02635476": 245, "0273": 180, "0278355": 245, "02887694e": 225, "0293162": 245, "0295": 162, "03": [224, 225], "0312": 180, "0352": 180, "03798249e": 224, "0386": 162, "0391": 180, "04": [224, 225, 245, 248], "04025269e": 224, "0406616e": 225, "0424": 162, "0428": 223, "0430": 180, "0449": 248, "0469": 180, "0471": 162, "04721": 204, "05": [164, 165, 224, 225], "0500e": [164, 165], "0508": 180, "05270951": 245, "0541903": 245, "0549": 162, "05549544e": [224, 225], "0564": 162, "0639": 162, "0667": 165, "0680": 162, "0769": 248, "0784": 162, "07906426": 245, "08": [164, 165], "080545": 245, "0819": 162, "0820258": 245, "0859": 166, "0861": 248, "08742931e": [224, 225], "0882": 160, "0889": 166, "0891": 166, "09": 235, "09111059e": 224, "0947": 166, "09685047e": [224, 225], "0x7f127685a598": 173, "0x7f9dd9bd90d0": 173, "0x7ff5703eff28": 173, "0x7ff577373598": 173, "1": [1, 2, 10, 12, 13, 17, 20, 21, 23, 24, 25, 29, 30, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 225, 226, 228, 229, 230, 232, 233, 237, 239, 240, 241, 245, 246, 247, 248, 249, 252, 263], "10": [17, 20, 29, 30, 158, 161, 162, 164, 172, 173, 175, 180, 181, 187, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 211, 213, 214, 216, 223, 226, 228, 229, 230, 232, 235, 245, 246, 247, 248, 249, 250, 253, 255, 257], "100": [2, 12, 14, 26, 171, 184, 197, 211, 223, 235, 243, 245, 248], "1000": [8, 21, 160, 179, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 226, 230, 232, 250], "10000": [11, 190, 191, 195, 203, 208, 209, 216], "1000e": [164, 165], "102": [180, 248], "1024": [198, 216, 235, 250], "103": [161, 180], "104": 248, "105": 248, "1050": 248, "10541902": 245, "10569119e": [224, 225], "106": 161, "1060": 162, "1068997": 245, "107": 180, "10708203e": [224, 225], "108": 180, "109": 161, "10k": [1, 23, 183, 216], "11": [159, 160, 164, 180, 207, 245, 246, 247, 257], "110": [161, 180], "111": [161, 180], "11176670e": 225, "112": [216, 224, 225], "1128": 162, "1155": 248, "116": 248, "1176": 162, "118": 180, "119": [180, 248], "12": [164, 180, 245, 246, 247, 248, 249, 257], "12039044e": 225, "121": 248, "122": 161, "1232": 162, "127": [159, 160, 180, 181, 248, 250, 253], "128": [2, 13, 25, 159, 160, 170, 172, 174, 180, 181, 184, 185, 198, 200, 201, 216, 222, 224, 225, 235, 245, 248, 249, 250, 253], "129": 161, "13": [164, 180, 248, 263], "1307": 162, "131": 161, "13137": [217, 238, 257], "13177378": 245, "1333": 165, "1398": 229, "14": [164, 180, 248, 257, 263], "1406": 229, "141": 161, "143": 161, "144": 161, "145": 161, "1458": 248, "146": 161, "15": [164, 165, 180, 197, 198, 200, 201, 211, 213, 214, 223, 229, 253, 257], "150": 161, "1500": [24, 217], "1500e": [164, 165], "152": 161, "15259957e": 225, "153": 159, "155": 161, "15717569e": 224, "15812853": 245, "15e": [205, 207], "15k": [1, 23, 183, 216], "16": [2, 9, 12, 22, 30, 161, 166, 172, 174, 175, 177, 178, 180, 181, 184, 187, 190, 194, 197, 208, 212, 216, 217, 222, 230, 235, 238, 240, 241, 248, 249, 250, 253, 262, 263], "1619": 248, "162": 161, "16245179e": [224, 225], "1647": 162, "16839484e": 225, "16966406e": 225, "17": [161, 180, 225, 263], "1709": 162, "172": 161, "1727": 166, "1729": 166, "1741": 162, "178": 161, "17871511e": 225, "179": 161, "18": [180, 190, 191, 192, 193, 248, 263], "181": 161, "18136823e": 224, "18448329": 245, "186": 161, "18673885e": 224, "187": 161, "188": 161, "1889": 162, "19": [161, 180, 224, 225, 245, 263], "1906": 204, "19186290e": [224, 225], "192": 161, "1921e": [164, 165], "194": 161, "1943": 229, "1945": 160, "1955": 229, "1977": 162, "19778645e": 224, "1_all": 247, "1b": 238, "1e": [20, 198, 199, 223, 224, 225, 250, 253], "1k": [216, 222, 223, 235, 242, 250], "1m": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 198, 218, 219, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 252, 255, 256, 259, 260, 261, 263], "20": [1, 10, 11, 20, 23, 160, 177, 182, 183, 188, 196, 197, 198, 199, 200, 201, 211, 213, 214, 216, 223, 224, 225, 230, 240, 241, 242, 253, 263], "200": [20, 171, 198, 199, 210], "2000": [1, 23, 159, 165, 183, 191, 195, 196, 203, 209, 210, 212, 216], "20000": [20, 198, 199], "2000e": [164, 165], "2012": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "2014": 229, "2016": 229, "2017": 229, "2019": [192, 204, 212], "203": 161, "20433941e": [224, 225], "2048": [216, 222, 223, 238, 253], "205": 159, "2068": 248, "207": 161, "20k": 198, "21": [160, 177, 224, 225, 263], "21066449e": 224, "21083805": 245, "2118": 162, "2123188": 245, "21250950e": 224, "2137995": 245, "216": 161, "218": 161, "2196": 162, "22": [180, 224, 225, 245, 248, 263], "2205": 160, "2212": 162, "2217": 248, "22219264e": [224, 225], "224": [181, 190, 191, 192, 193, 194, 197, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 230, 235, 237, 242, 248, 250, 253], "225": [210, 216, 222, 235, 250], "22583652e": 224, "226": 161, "2260": 160, "2265": 162, "229": [210, 216, 222, 235, 250], "23": [159, 160, 263], "23011987e": [224, 225], "2306": 217, "2308": [217, 238, 257], "2315": 248, "23156421e": [224, 225], "2353": 162, "2355": 162, "2363": [162, 248], "237": 161, "23719281": 245, "238": 161, "24": 263, "240": 180, "2401543": 245, "241": 180, "242": 180, "24257803e": 224, "243": 180, "2431": 248, "244": 180, "245": 180, "2458": 162, "2459": 248, "246": 180, "247": 180, "248": 180, "249": 180, "25": [180, 263], "250": 180, "2500e": [164, 165], "251": 180, "252": 180, "253": 180, "254": 180, "2546": 162, "255": [158, 161, 180, 181, 250, 253], "256": [8, 180, 194, 208, 216, 221, 222, 235, 250], "2568": 162, "2592": 173, "26": [159, 180, 248, 263], "26179108e": 224, "26354757": 245, "2650282": 245, "2667": 165, "27": [248, 263], "27415752e": 225, "2771": 162, "28": [159, 160, 203, 226, 230, 232, 248, 263], "28238320e": 225, "288": [216, 225], "28990233": 245, "29": [180, 263], "291383": 245, "2921": 160, "2930528e": 225, "29590677e": [224, 225], "2b": 227, "2d": [203, 226, 229, 233, 249], "3": [2, 12, 13, 25, 29, 158, 160, 164, 165, 169, 171, 172, 173, 174, 178, 180, 181, 182, 184, 185, 188, 198, 225, 226, 227, 230, 232, 233, 237, 240, 245, 246, 247, 248, 249, 263], "30": [161, 180, 248, 263], "300": 208, "3000": [159, 198], "30122258e": [224, 225], "3038": 162, "30402938e": 225, "31": [1, 8, 11, 21, 23, 179, 181, 183, 186, 187, 216, 221, 248, 250, 253, 263], "31080866e": 224, "312": 159, "3137": 162, "31625706": 245, "32": [20, 161, 172, 173, 180, 181, 187, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 221, 222, 223, 224, 225, 235, 242, 243, 248, 250, 251, 253, 255, 258, 263], "32141271e": 224, "3216": 162, "33": [161, 205, 206, 207, 248, 263], "3333": 165, "33731920e": [224, 225], "34": 263, "34215236e": 225, "34261182": 245, "3451": 162, "3467390e": 225, "34694423e": 225, "347054": 245, "3470540046691895": 245, "35": [181, 248, 250, 253, 263], "350m": [240, 241], "35139937e": 225, "36": 161, "3610": 248, "36896658": 245, "37": [160, 161, 180], "3734087606114667": 245, "37757687e": 225, "38": [159, 160, 229], "38100997e": [224, 225], "3861": 248, "39": 158, "39502389e": [224, 225], "3992": 162, "3d": 249, "4": [1, 2, 7, 8, 11, 13, 21, 23, 25, 159, 160, 164, 165, 170, 171, 172, 177, 178, 179, 180, 181, 183, 185, 186, 187, 193, 198, 202, 205, 206, 207, 210, 215, 224, 225, 226, 228, 230, 232, 233, 240, 241, 246, 247, 248, 249, 251, 263], "40": [159, 160, 238], "4000": [158, 165], "406": [210, 216, 222, 235, 250], "41": 158, "41059163e": 225, "4157": 162, "41715762e": [224, 225], "42": [180, 248], "42083430e": 224, "4216761": 245, "4231569": 245, "4246376": 245, "42477691e": 224, "43": [180, 248], "4392": 162, "44408584e": [224, 225], "44632760e": 225, "4475": 162, "44803086": 245, "4495116": 245, "4499": 248, "44993666e": 225, "4549": 162, "455": [245, 248], "456": [210, 216, 222, 235, 250], "4585028e": 225, "46642041e": 225, "4667": 165, "4694": 162, "4706": 162, "47438562": 245, "4758663": 245, "4784": 162, "48": [180, 248], "48045555e": 225, "48399768e": [224, 225], "485": [210, 216, 222, 235, 250], "4863": 162, "49": [161, 180, 248], "49024737e": [224, 225], "4d": 249, "4f": [222, 223, 250, 253], "5": [160, 161, 162, 164, 165, 166, 171, 172, 175, 178, 180, 191, 192, 193, 194, 195, 198, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 216, 223, 224, 225, 226, 227, 230, 232, 235, 245, 246, 247, 248, 249, 263], "50": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 227, 230, 235, 248], "500": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 210, 212, 213, 214, 215, 216, 221, 226, 235, 250, 252], "5000": [196, 210], "50000": [194, 230, 235, 250], "5000e": [164, 165], "5006": 231, "50074035": 245, "5022211": 245, "51": 158, "512": [240, 241], "51446089e": [224, 225], "51547194e": [224, 225], "5157": 248, "51876003e": 224, "52": [158, 248], "521": 158, "5220": 162, "5255": 162, "52709514": 245, "52912678e": [224, 225], "52974629e": 224, "5301": 248, "5307": 248, "5333": [162, 165], "53403008e": [224, 225], "53976866e": [224, 225], "54": 180, "54620111e": [224, 225], "55": [161, 180, 248], "55344987": 245, "5540": 162, "5549306": 245, "55578518e": 225, "56": 248, "56632766e": 224, "5695": 162, "57": [159, 160, 180], "57021021e": 225, "57980466": 245, "57984132e": [224, 225], "58": 248, "5856506e": 225, "5876": 223, "5897": 162, "59": [161, 180, 248], "5962": 248, "59643137e": 224, "5e": [206, 207, 211, 213, 214], "6": [20, 160, 164, 165, 172, 180, 197, 198, 199, 200, 201, 207, 209, 212, 213, 214, 224, 225, 235, 246, 247, 249, 250, 253, 263], "60": 180, "6000": [158, 159, 160, 165], "6039": 162, "6054": 162, "6061594": 245, "60713138e": [224, 225], "6079": 162, "6091": 248, "61": 180, "61087702e": 224, "6177": 162, "6196": 162, "62": 180, "6213797e": 225, "6247": 162, "62498877e": [224, 225], "63": [161, 248], "63172388e": 224, "6325141": 245, "6327": 248, "6340": 248, "64": [7, 8, 20, 161, 170, 180, 181, 203, 216, 217, 221, 222, 235, 245, 248, 249, 250, 253, 255], "6431": 162, "64579314e": [224, 225], "65": [227, 248], "65535": 248, "6583": 253, "6588689": 245, "66": [161, 205, 206, 207, 227, 248], "6603496": 245, "6667": 165, "6695": 162, "67278278e": [224, 225], "67416465e": 225, "67510852e": [224, 225], "67677957e": [224, 225], "68": [158, 248], "68016": 253, "68522364": 245, "6867044": 245, "69": 248, "6910": 253, "69716495e": 225, "7": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263], "70": 180, "7013": 250, "70130579e": 225, "70838": 253, "71": 160, "7115784": 245, "7164": 222, "71659231e": [224, 225], "7173": 250, "72": 248, "72468403e": 225, "73242160e": 224, "7333": 165, "73793316": 245, "74": 161, "74478185e": 224, "7466": 248, "75": [227, 248], "75162792e": 225, "75700430e": [224, 225], "76": 180, "76428795": 245, "77": [180, 248], "77213307e": 224, "7741": 162, "7765": 162, "7788": 248, "7793": 248, "78": 248, "7894": 162, "79": 248, "7932": 162, "8": [1, 2, 7, 8, 9, 12, 13, 21, 22, 23, 25, 30, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 230, 232, 233, 235, 237, 242, 243, 245, 246, 247, 248, 249, 250, 253], "80": [161, 230, 248], "800": [176, 238], "8000": [162, 165], "80053532e": 224, "8078": 162, "81": 248, "81699747": 245, "81760912e": 224, "8188": 248, "81884710e": 224, "8229": 162, "83": [161, 180, 248], "83640555e": 225, "8366": 248, "83861901e": [224, 225], "84": 180, "8405": 248, "8433522": 245, "8442": 248, "85": 248, "86": [161, 248], "8606": 248, "864": [216, 224, 225], "8667": 165, "86945379e": 224, "8706": 162, "8711877": 245, "87471542e": [224, 225], "87630311e": [224, 225], "87656835e": 224, "8796": 162, "88": 248, "88260233e": [224, 225], "8836": 162, "88373709e": 225, "89": [161, 248], "89074164e": 225, "89249423e": [224, 225], "89348674e": 224, "8984": 166, "8994": 166, "8998": 166, "8bit": 257, "9": [158, 164, 165, 172, 180, 205, 206, 207, 208, 209, 212, 213, 214, 215, 223, 224, 225, 230, 235, 246, 247, 257], "90": [235, 248], "90229788e": [224, 225], "9054": 248, "91": [180, 248], "9150": 248, "9157": 162, "9176": 162, "92": 180, "9216": 172, "92511864e": [224, 225], "93": [180, 248], "93232973e": [224, 225], "9333": 165, "93787616e": 224, "94": [161, 180], "9487": 162, "94877124": 245, "9490": 162, "95": 180, "95088911e": [224, 225], "95260113e": 224, "9570": 180, "95997976e": [224, 225], "96": [180, 217, 248], "9609": 180, "96155685e": 224, "9648": 180, "9688": 180, "97": 158, "9700": 162, "9714": 248, "9727": 180, "97294299e": [224, 225], "9766": 180, "9805": 180, "9826": 248, "9844": 180, "9883": 180, "99": 248, "9904": 248, "9922": 180, "9961": [162, 180], "9999": 177, "A": [1, 2, 3, 8, 9, 12, 13, 14, 15, 17, 21, 22, 23, 25, 27, 28, 29, 170, 174, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 235, 237, 240, 243, 249, 250, 251, 252, 253, 261], "And": [190, 203, 208, 261], "As": [30, 190, 192, 194, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 216, 221, 222, 227, 228, 235, 246, 249, 256], "At": [227, 231], "But": [172, 190, 197, 198, 202, 203, 208, 211, 215, 229, 237], "By": [9, 13, 17, 20, 29, 175, 178, 181, 197, 208, 209, 211, 212, 213, 214, 216, 222, 226, 229, 230, 232, 250, 252, 253], "For": [8, 20, 21, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 172, 173, 175, 177, 178, 179, 180, 186, 189, 190, 194, 197, 198, 199, 202, 203, 208, 211, 215, 216, 220, 221, 222, 225, 226, 227, 228, 229, 235, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 261, 262], "If": [1, 2, 8, 9, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 240, 242, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 262], "In": [20, 30, 160, 171, 172, 173, 175, 181, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 227, 228, 229, 231, 233, 235, 236, 240, 241, 247, 248, 249, 250, 253, 254, 255, 256, 260, 261], "It": [1, 2, 6, 8, 9, 10, 20, 171, 172, 181, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 226, 228, 233, 235, 238, 242, 247, 250, 251, 253, 257], "Its": 233, "NOT": [13, 25, 185, 203, 222], "No": [173, 224, 261], "Not": [8, 21, 179, 186, 189, 190, 197, 202, 203, 211, 215, 217, 221, 223, 228, 238, 242, 249, 253], "ONE": 245, "OR": 171, "Of": [200, 201, 203, 205, 206, 207, 213, 214], "On": [190, 203, 208], "One": [21, 22, 191, 192, 193, 194, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 221, 250, 252, 253], "Or": [1, 22, 172, 187, 216, 220, 221, 229, 250, 253], "Such": 172, "That": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 233], "The": [1, 2, 4, 6, 7, 8, 9, 12, 14, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262], "Then": [8, 179, 186, 213, 214, 221, 229], "There": [169, 171, 173, 187, 190, 191, 194, 195, 197, 198, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 220, 221, 222, 253, 261, 262], "These": [1, 13, 22, 25, 171, 173, 175, 185, 187, 190, 192, 196, 198, 203, 208, 210, 212, 216, 221, 222, 226, 227, 235, 238, 240, 241, 247, 250, 252, 253, 254, 258], "To": [2, 12, 20, 30, 171, 174, 175, 178, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 223, 224, 225, 228, 230, 231, 235, 237, 238, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 258, 261, 262], "With": [158, 199, 202, 215, 245, 253], "_": [8, 9, 20, 21, 30, 161, 162, 165, 168, 175, 179, 180, 181, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 235, 240, 242, 244, 245, 249, 250, 251, 252, 253, 257, 260, 261, 262], "__________________________________________________________________________________________________": [216, 224, 225], "__getitem__": 210, "__init__": [13, 20, 25, 172, 173, 175, 185, 191, 199, 210, 216, 222, 235, 238, 250, 255, 256, 257], "__iter__": [191, 216, 222, 235, 238, 250], "__len__": [8, 191, 210, 221, 238], "__next__": [191, 216, 222, 235, 250], "__quant_init__": [30, 175], "__torch_function__": 172, "__version__": 247, "_batch_index": 222, "_create_sampled_data_load": 210, "_current_iter": [216, 235, 250], "_data": [216, 222, 235, 250], "_dataset": 210, "_default_forward_fn": [13, 25, 185, 222], "_encodingmismatchinfo": 250, "_get_unlabled_data_load": 221, "_is_encoding_frozen": 171, "_iter": 191, "_max": 166, "_module_to_wrap": 171, "_not_specifi": [9, 181, 250, 253], "_quantizationsimmodelinterfac": [179, 184, 186, 187, 221], "_quantschemepair": [13, 25, 185, 222], "_remove_input_quant": 171, "_remove_output_quant": 171, "_remove_param_quant": 171, "_step": [164, 165], "_tie_quant": 257, "_torch_data_load": 191, "_unlabel": [216, 235, 250], "ab": [204, 217, 238], "abil": [257, 262], "abl": [8, 20, 25, 158, 159, 160, 172, 173, 185, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 221, 222], "about": [158, 191, 192, 193, 194, 195, 196, 199, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 225, 244, 248, 249, 251, 262], "abov": [172, 174, 190, 194, 202, 203, 205, 206, 207, 208, 215, 221, 226, 229, 230, 231, 232, 233, 237, 246, 247, 249, 252, 253], "absolut": [161, 162, 226, 230, 232, 235, 246], "absolute_path_to_workspac": [189, 246], "absorpt": [192, 204, 212], "abstract": [30, 160, 175], "acc": [196, 197, 198, 202, 221, 222], "acc_top1": 222, "acccuraci": 194, "acceler": [193, 198, 200, 201, 213, 214, 226, 229, 230, 232, 243, 257], "accept": [228, 235, 257, 258, 261, 262], "access": [171, 198, 208, 209, 212, 213, 214, 257], "accord": [9, 169, 181, 220, 250, 253], "accordingli": 257, "account": [24, 217, 228, 257, 258], "accumul": [227, 229, 230, 232, 234], "accur": [198, 216, 224], "accuraci": [1, 2, 12, 13, 17, 22, 23, 25, 29, 178, 183, 184, 185, 197, 198, 202, 210, 211, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 242, 243, 244, 249, 250, 252, 253, 257, 258], "achiev": [180, 191, 195, 203, 209, 227, 236, 237, 243, 261, 262], "acronym": 244, "across": [172, 221, 225, 234, 243, 245, 252], "act": [2, 8, 12, 21, 174, 179, 184, 186, 190, 221, 235], "act_bw": 212, "action": [221, 233], "activ": [2, 8, 9, 12, 15, 20, 21, 22, 24, 168, 170, 172, 174, 175, 178, 179, 182, 184, 186, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 225, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262], "activation_bitwidth": [216, 250, 251, 253], "activation_encod": 251, "activation_quant": [2, 235], "activations_pdf": [202, 215, 221], "actual": [190, 194, 197, 199, 208, 211, 218, 221], "acuraci": [194, 235], "ad": [173, 178, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 239, 250, 251, 254, 257], "ada_model": [191, 195, 203, 209], "ada_round_data": [195, 203], "ada_rounded_model": 216, "adam": [196, 197, 198, 200, 201, 202, 221], "adamw": [240, 241], "adapt": [23, 26, 178, 182, 183, 188, 189, 197, 203, 211, 221, 222, 223, 238, 239, 240, 241, 242, 243, 257], "adapter1": 178, "adaptiveavgpool1d": 31, "adaptiveavgpool2d": 32, "adaptiveavgpool3d": 33, "adaptivemaxpool1d": 34, "adaptivemaxpool2d": 35, "adaptivemaxpool3d": 36, "adaptiveround": 257, "adaptor": [176, 238], "adaround": [5, 13, 18, 25, 167, 171, 185, 189, 196, 210, 216, 221, 222, 243, 257, 258], "adaround_data_load": [210, 222], "adaround_dataset": 196, "adaround_dataset_s": [196, 210, 222], "adaround_param": [13, 25, 185, 196, 210, 222], "adaround_weight": [1, 11, 23, 171, 183, 191, 195, 196, 203, 209, 210, 216, 222], "adarounded_model": 216, "adaroundparamet": [1, 11, 13, 23, 25, 183, 185, 191, 195, 196, 203, 209, 210, 216, 222], "adascal": [167, 257], "adascale_optim": 217, "add": [20, 22, 172, 173, 175, 178, 187, 193, 197, 200, 201, 205, 206, 207, 213, 214, 233, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262], "add_adapt": 178, "add_check": 173, "add_lora_to_r": 241, "addit": [30, 180, 181, 187, 190, 197, 198, 199, 202, 203, 208, 211, 215, 223, 249, 250, 251, 253, 254, 257, 260], "address": [231, 258], "adequ": 261, "adher": 262, "adjac": [190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 224, 225, 234, 243, 254], "adjust": [168, 204, 212, 216, 219, 226, 227, 234, 240, 241, 249, 258], "admin": 189, "advanc": [180, 243, 257], "advantag": 242, "affect": [1, 23, 183, 216, 243, 249, 254, 262], "affin": [7, 30, 158, 159, 160, 161, 162, 163, 164, 165, 170, 175, 224, 225, 240, 248, 249], "affine_q": 171, "affine_qdq": 171, "affine_quant": 171, "affinequant": [166, 171], "after": [8, 21, 166, 172, 173, 175, 179, 180, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 221, 222, 223, 224, 225, 227, 229, 231, 243, 253, 257, 258], "afterward": [24, 217], "again": [192, 203, 204, 205, 206, 207, 212, 235, 253, 262], "against": [8, 13, 21, 179, 186, 200, 201, 203, 211, 213, 214, 221, 222, 226], "aggress": 243, "agre": 262, "ai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "aim": [197, 205, 206, 207, 211, 262], "aimet": [5, 17, 18, 20, 29, 30, 171, 172, 173, 175, 178, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 242, 243, 245, 249, 250, 251, 253, 255, 256, 257, 258, 260, 262], "aimet_cl": 204, "aimet_common": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "aimet_common_def": 230, "aimet_export_artifact": 220, "aimet_exported_model": 260, "aimet_exported_model_path": 260, "aimet_omniquant_artifact": [176, 238], "aimet_onnx": [190, 191, 192, 193, 216, 220, 221, 224, 225, 235, 242, 245, 247, 250, 251], "aimet_spatial_svd": 230, "aimet_tensorflow": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 216, 220, 221, 222, 223, 224, 225, 230, 235, 245, 247, 250, 251, 253], "aimet_tensorflow_def": 230, "aimet_torch": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 190, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 257], "aimet_vari": 246, "algo": [184, 235], "algorithm": [2, 12, 17, 29, 184, 226, 227, 228, 229, 230, 232, 233, 251, 258], "alia": [9, 22, 181, 187, 250, 253], "aliasbackward0": [158, 159, 160, 161, 162, 177, 180, 248], "align": [250, 254, 257], "all": [1, 2, 3, 7, 8, 9, 12, 14, 15, 20, 21, 22, 27, 30, 100, 167, 168, 170, 172, 173, 174, 175, 179, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 232, 234, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261], "all_q_modul": 171, "all_quant_wrapp": 171, "allclos": 172, "allow": [2, 12, 13, 17, 20, 22, 25, 29, 158, 159, 160, 170, 172, 177, 184, 185, 190, 194, 196, 198, 208, 210, 218, 222, 226, 229, 230, 231, 232, 234, 235, 236, 249, 250, 251, 253, 256, 257, 258], "allow_custom_downsample_op": [29, 205, 207, 226], "allow_overwrit": [171, 216, 241, 250, 253], "allowed_accuracy_drop": [2, 12, 13, 25, 184, 185, 190, 194, 196, 208, 210, 222, 235], "alon": [178, 252], "along": [159, 178, 180, 235, 252], "alpha": 235, "alphadropout": 37, "alreadi": [28, 30, 180, 181, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 225, 240, 246, 250, 253, 258], "also": [1, 11, 13, 22, 23, 160, 172, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 221, 222, 224, 226, 229, 233, 235, 237, 245, 247, 250, 251, 253, 254, 256, 257, 260, 261], "alter": [191, 195, 203, 209], "altern": [8, 179, 186, 190, 194, 205, 206, 207, 208, 221, 247, 249], "alwai": [228, 240, 241], "am": [8, 21, 179, 186, 221], "among": [1, 13, 23, 25, 183, 185, 216, 222, 261], "amount": [202, 215, 235, 242], "amp": [2, 12, 13, 25, 167, 174, 184, 185, 189, 222, 235, 236, 257], "amp_search_algo": [2, 12, 184, 190, 208, 235], "ampsearchalgo": [2, 12, 184, 190, 208, 235], "an": [1, 8, 12, 13, 17, 20, 22, 25, 29, 30, 158, 159, 160, 166, 168, 170, 171, 172, 173, 175, 180, 181, 185, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 232, 233, 235, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "analys": [202, 215, 221], "analysi": [2, 8, 12, 17, 21, 29, 179, 184, 186, 190, 194, 198, 205, 206, 207, 208, 226, 229, 230, 232, 257], "analyt": 231, "analyz": [8, 17, 21, 29, 161, 162, 175, 179, 186, 189, 196, 210, 222, 226, 230, 231, 232, 234, 237, 245, 257], "anchor": [148, 149], "andrea": 229, "andrei": 229, "andrew": 229, "ani": [2, 8, 9, 12, 17, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 172, 173, 174, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 226, 230, 232, 235, 237, 240, 242, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 261], "anneal": [1, 11, 23, 183, 216], "anoth": [178, 181, 187, 198, 232, 233, 243, 250, 251, 253, 254], "any_nam": 246, "any_tag": 246, "anyth": [2, 12, 184, 190, 194, 202, 208, 215, 235], "api": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 168, 169, 170, 171, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 231, 240, 241, 243, 246, 251, 255, 256, 257, 260], "appear": [17, 29, 172, 173, 226, 230, 232], "append": 246, "appli": [2, 7, 8, 13, 16, 25, 30, 100, 161, 162, 163, 164, 165, 170, 173, 174, 175, 182, 185, 188, 189, 190, 197, 198, 205, 206, 207, 208, 210, 211, 216, 217, 221, 222, 224, 225, 229, 231, 234, 235, 238, 240, 242, 243, 244, 245, 249, 250, 252, 253, 254, 257, 258, 261, 262], "applic": [2, 12, 184, 190, 191, 194, 195, 196, 200, 201, 202, 203, 204, 208, 209, 212, 216, 221, 222, 223, 224, 225, 230, 235, 250, 253, 260, 262], "apply_adaround": [1, 11, 23, 183, 191, 195, 203, 209, 216], "apply_adascal": [24, 217], "apply_omniqu": [176, 238], "apply_seq_algo": [10, 242], "apply_seq_ms": [10, 171, 182, 188, 242], "approach": [174, 237, 240, 252], "appropri": [23, 175, 181, 183, 184, 187, 190, 194, 197, 198, 202, 203, 208, 211, 215, 216, 228, 235, 240, 241, 245, 250, 252, 253, 258], "approx": 252, "approxim": [8, 221, 227, 242, 252, 262], "apt": [245, 247], "ar": [1, 2, 8, 9, 10, 11, 12, 17, 20, 21, 22, 23, 25, 29, 30, 100, 161, 162, 166, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262], "arang": [164, 165, 172, 180], "arbitrari": 249, "architectur": [199, 243, 245, 247, 257], "archiv": 247, "area": [221, 234], "arg": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 170, 174, 175, 177, 181, 199, 235, 237, 249, 250, 253, 257], "argmax": [216, 222, 235, 250, 253], "argument": [1, 2, 9, 12, 13, 22, 23, 24, 25, 30, 166, 170, 172, 173, 174, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 196, 197, 202, 215, 216, 217, 220, 221, 222, 235, 238, 242, 249, 250, 251, 253, 260], "around": [198, 203, 221, 257], "arrai": [170, 191, 249, 251], "arrang": 231, "art": [190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215], "arthmet": [20, 199], "artifact": [9, 174, 178, 198, 236, 237, 246, 250, 257, 260, 261], "arxiv": [204, 217, 238, 257], "asic": 243, "ask": [30, 190, 194, 197, 198, 202, 208, 211, 215], "assert": [171, 172, 180, 199, 208, 250], "assert_array_equ": 199, "assess": 228, "assign": [30, 161, 162, 166, 175, 200, 201, 235, 246, 249], "associ": [2, 12, 13, 15, 25, 30, 160, 173, 174, 175, 180, 184, 185, 202, 215, 222, 224, 235, 260], "assum": [7, 13, 25, 170, 185, 222, 228, 247, 249], "astyp": 221, "asym": [10, 182, 188, 242], "asymmetr": [161, 162, 180, 252, 254], "att": [20, 199], "attempt": [9, 225, 250], "attent": [20, 198, 199], "attention_mask": [238, 240, 241], "attn_output": [20, 199], "attribut": [12, 20, 30, 171, 172, 174, 175, 180, 184, 203, 221, 235], "attributeerror": 257, "augment": 231, "auto": [9, 17, 29, 190, 194, 205, 206, 207, 208, 226, 230, 232, 235, 236, 250, 251], "auto_param": [205, 206, 207, 226, 230, 232], "auto_qu": [196, 210, 222], "auto_quant_v2": [18, 222], "autoconfig": [238, 240, 241], "autograd": [158, 159, 160], "autom": [172, 208, 209, 212, 213, 214, 215, 243, 256], "automat": [13, 17, 25, 29, 174, 185, 189, 196, 210, 221, 226, 227, 229, 230, 232, 243, 246, 247, 249, 257], "automodelforcausallm": [240, 241], "automodeparam": [17, 29, 205, 206, 207, 226, 230, 232], "autoqu": [5, 13, 25, 167, 185, 189, 222, 243, 257], "autoquantwithautomixedprecis": [13, 25, 185, 222], "autotoken": [238, 240, 241], "avail": [10, 172, 177, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 221, 242, 245, 254, 257, 258, 259, 260], "avgpool1d": 38, "avgpool2d": [39, 237], "avgpool3d": 40, "avoid": [8, 22, 179, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 216, 221, 227, 243, 250, 253, 255, 256, 257], "awai": 203, "awar": [30, 189, 216, 223, 229, 234, 242, 243, 252, 258, 262], "axi": [180, 202, 215, 216, 221, 222, 235, 250, 251, 252], "b": [30, 161, 162, 163, 164, 165, 180, 194, 230, 235, 249], "b_": [161, 162, 163, 164, 165], "b_0": [161, 162, 163, 164, 165], "b_1": [161, 162, 163, 164, 165, 249], "b_2": 249, "b_d": [161, 162, 163, 164, 165], "b_n": 249, "back": [2, 9, 12, 158, 159, 174, 179, 184, 186, 221, 235, 250, 252, 253, 254], "backend": [9, 181, 187, 197, 236, 250, 253, 260, 261], "backpropag": [158, 159, 160], "backslash": 257, "backward": [167, 223, 224, 240, 241, 250, 253, 257], "bad": 20, "balanc": [229, 243, 262], "bandwidth": 227, "base": [2, 8, 21, 30, 160, 161, 162, 164, 165, 166, 171, 175, 177, 178, 179, 180, 184, 186, 190, 191, 194, 195, 196, 197, 203, 208, 209, 210, 211, 217, 221, 226, 227, 228, 231, 235, 236, 238, 239, 241, 242, 245, 247, 249, 250, 253, 257, 260, 261], "baselin": [2, 12, 184, 197, 198, 210, 228, 229, 235, 253], "bash": 246, "basi": [203, 257], "basic": [190, 194, 197, 198, 208, 211, 235, 249, 253, 257, 260], "batch": [1, 2, 8, 10, 11, 13, 14, 15, 21, 23, 25, 26, 166, 174, 182, 183, 184, 185, 188, 194, 196, 197, 205, 206, 207, 211, 216, 217, 221, 222, 225, 230, 235, 238, 240, 241, 242, 243, 250, 253, 257], "batch_cntr": [190, 191, 192, 193, 195, 200, 201, 203, 204, 209, 211, 212, 213, 214, 215, 222], "batch_data": [216, 235, 250], "batch_id": [238, 240, 241], "batch_norm": [3, 14, 15, 27, 223, 224], "batch_norm_fold": [5, 14, 18, 167, 190, 191, 192, 193, 194, 195, 197, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 223, 224, 235, 253], "batch_siz": [1, 23, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 230, 235, 238, 240, 241, 242, 250, 253], "batchnorm": [13, 15, 20, 25, 26, 185, 189, 190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 216, 222, 223, 224, 225, 233, 257], "batchnorm1d": [27, 43, 224], "batchnorm2d": [27, 44, 173, 224, 225], "batchnorm3d": 45, "batchnrom": 211, "bc": 192, "bc_param": 212, "bceloss": 41, "bcewithlogitsloss": 42, "becaus": [20, 172, 199, 211, 249, 261], "becom": 257, "becuas": [20, 199, 220], "been": [20, 30, 158, 168, 173, 196, 197, 198, 203, 210, 219, 233, 240, 243, 247, 248, 251, 252, 257, 260], "befor": [1, 2, 8, 9, 20, 24, 30, 168, 171, 175, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 229, 235, 239, 240, 241, 250, 252, 253, 255, 257, 261], "begin": [20, 161, 162, 163, 164, 165, 172, 173, 199, 244], "behav": [30, 100, 175, 257, 258], "behavior": [171, 172, 175, 190, 203, 208, 209, 212, 213, 214, 224, 244, 252, 254, 257, 261], "behind": 261, "being": [12, 29, 171, 172, 173, 179, 186, 221, 223, 226, 230, 232, 235, 249, 251, 255, 256, 257], "below": [20, 30, 161, 162, 164, 165, 171, 174, 175, 178, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 226, 228, 229, 231, 235, 237, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258], "benefici": [190, 194, 197, 198, 202, 203, 208, 215], "benefit": [236, 249, 251, 252], "bert": 258, "besid": 249, "bespok": 240, "best": [13, 25, 174, 185, 196, 203, 210, 222, 227, 229, 234, 237, 245, 252], "beta": [1, 11, 23, 167, 183, 216, 217, 257], "better": [191, 195, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 222, 229, 249, 253, 261], "between": [1, 2, 8, 11, 17, 21, 23, 29, 169, 171, 174, 175, 179, 183, 184, 186, 190, 203, 208, 216, 218, 220, 221, 226, 230, 232, 234, 235, 242, 243, 249, 250, 252, 254, 262], "bfloat16": 166, "bia": [30, 166, 171, 172, 173, 175, 177, 178, 181, 192, 197, 204, 224, 225, 226, 248, 250, 253, 254, 257], "bias": [190, 192, 204, 208, 212, 224], "bias_correct": 212, "bilinear": 46, "billion": [261, 262], "bin": [246, 247, 260], "binari": [2, 12, 184, 190, 208, 235, 260], "binary_classifi": 20, "binary_fil": 260, "binary_file_nam": 260, "bit": [1, 2, 8, 12, 21, 23, 166, 170, 177, 179, 180, 183, 184, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 234, 236, 240, 243, 245, 248, 249, 251, 252, 257, 258, 261, 262], "bitop": [2, 12, 184, 235], "bitwidth": [1, 2, 7, 8, 9, 11, 12, 13, 21, 22, 23, 25, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 174, 175, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 194, 195, 203, 208, 209, 216, 221, 222, 225, 235, 236, 240, 243, 245, 249, 250, 251, 252, 253, 257, 261], "biwidth": [191, 195, 203, 209], "bkd": [24, 217, 234, 238], "blankevoort": 229, "block": [7, 25, 161, 162, 163, 164, 165, 170, 171, 176, 185, 198, 217, 222, 238, 240, 241, 246, 251, 252, 257], "block_group": [170, 249], "block_siz": [7, 161, 162, 163, 164, 165, 170, 180, 249, 251], "blockwis": [7, 170, 180, 217, 234, 238, 251, 252, 257], "bn": [3, 14, 15, 26, 27, 190, 191, 192, 193, 195, 197, 200, 201, 203, 204, 208, 209, 212, 213, 214, 221, 223, 224, 234, 243, 257], "bn1": [20, 173], "bn2": 20, "bn_conv1": [216, 224, 225], "bn_num_batch": [14, 223], "bn_re_estimation_dataset": [14, 223], "bn_reestim": [167, 197, 211, 223], "bnf": [216, 223, 224, 225], "bokeh": 235, "bool": [1, 2, 9, 12, 13, 17, 22, 25, 29, 161, 162, 164, 165, 166, 170, 172, 173, 174, 177, 181, 184, 185, 187, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 222, 226, 230, 232, 235, 237, 249, 250, 251, 253], "boolean": [30, 174, 237], "both": [20, 21, 164, 165, 171, 172, 175, 179, 186, 190, 194, 201, 207, 208, 213, 214, 221, 224, 229, 230, 231, 233, 235, 239, 242, 245, 248, 250, 252, 253, 254, 258, 260, 262], "bottleneck": 258, "box": 257, "bq": [170, 249, 257], "branch": [172, 189, 254], "break": [190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 209, 211, 212, 213, 214, 215, 222, 230, 235, 238, 240, 241, 250, 253, 257], "bridg": 236, "british": 229, "broken": [239, 251], "browser": 189, "bruteforc": [12, 190, 208, 235], "buffer": 166, "bug": [251, 257], "bugfix": 257, "build": [9, 20, 171, 199, 247, 250], "built": [2, 30, 174, 175, 184, 197, 198, 235, 245], "bw": [2, 7, 12, 25, 170, 174, 181, 184, 185, 187, 222, 235, 249, 250, 251, 253, 256], "bw_output": 256, "c": [180, 227, 247], "c_": 180, "cach": [2, 12, 13, 25, 176, 184, 185, 190, 194, 208, 222, 235, 238, 247, 257], "cache_id": [13, 25, 185, 222], "calcul": [2, 12, 21, 22, 25, 175, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 221, 222, 228, 235, 239, 240, 250, 252, 253, 257], "calculate_and_fuse_encodings_into_weight": 240, "calibr": [8, 9, 21, 161, 162, 168, 175, 178, 179, 181, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 218, 219, 235, 236, 240, 242, 243, 248, 249, 252, 257, 258, 261], "calibration_batch": [235, 253], "calibration_callback": [240, 241], "calibration_data_load": [175, 250], "calibration_data_s": 250, "calibration_dataset": [216, 223, 250, 253], "calibration_dataset_s": [196, 210, 222], "calibration_wrapp": 238, "call": [2, 8, 10, 12, 13, 14, 20, 24, 25, 30, 100, 158, 159, 160, 166, 172, 174, 175, 179, 180, 184, 185, 186, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 217, 221, 222, 223, 226, 230, 232, 235, 237, 242, 249, 250, 255, 257, 260, 261, 262], "call_funct": 172, "callabl": [1, 2, 8, 9, 12, 13, 17, 23, 24, 25, 26, 29, 30, 170, 172, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 188, 216, 217, 221, 222, 223, 226, 230, 232, 235, 238, 242, 249, 250, 253], "callal": [2, 184, 235], "callback": [2, 8, 12, 13, 17, 21, 22, 29, 174, 179, 184, 186, 187, 194, 196, 198, 200, 201, 202, 205, 206, 207, 215, 222, 226, 230, 232, 235, 240, 242, 252, 253], "callbackfunc": [2, 12, 21, 174, 179, 184, 186, 190, 194, 202, 208, 215, 221, 235], "callbak": [190, 208], "can": [1, 2, 6, 8, 9, 11, 12, 19, 20, 22, 23, 27, 28, 158, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262], "candid": [2, 10, 12, 13, 17, 25, 29, 174, 182, 184, 185, 188, 190, 194, 208, 217, 222, 226, 228, 229, 230, 232, 235, 238, 242, 257], "cannot": [161, 162, 172, 173, 190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214], "capabl": [175, 231, 245, 248], "captur": [6, 19, 169, 172, 181, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 218, 220, 250, 253], "card": [245, 248], "care": 229, "carefulli": 243, "carri": [158, 159, 160], "case": [164, 165, 170, 171, 172, 173, 175, 198, 199, 202, 215, 216, 221, 228, 237, 239, 248, 249, 254, 256, 257, 262], "cast": 166, "cat": [180, 247], "catch": 257, "categor": [194, 195, 200, 201, 203, 216, 222, 223, 230, 235, 250, 253], "categorical_crossentropi": [200, 201], "categoricalaccuraci": [196, 197, 202, 216, 221, 222, 223, 250, 253], "categoricalcrossentropi": [196, 197, 202, 216, 221, 222, 223, 250, 253], "caus": [20, 205, 206, 207, 229, 254, 258], "caution": 216, "cd": 189, "cdot": [161, 162, 163, 164, 165], "ceil": [1, 23, 183, 216, 222, 235, 250], "cell": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "celu": 47, "center": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "center_crop": [194, 235], "centercrop": [208, 210, 216, 222, 235, 250], "certain": [172, 179, 186, 208, 209, 212, 213, 214, 215, 221, 229, 235, 237, 251, 254, 256, 257], "chain": [238, 240, 241], "challeng": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "chang": [2, 12, 24, 160, 168, 171, 172, 178, 180, 181, 184, 190, 191, 192, 193, 194, 197, 198, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 229, 233, 235, 236, 237, 238, 242, 250, 251, 253, 254, 256, 257, 261], "channel": [7, 8, 17, 21, 29, 170, 175, 179, 186, 189, 190, 191, 192, 193, 204, 206, 208, 209, 211, 212, 213, 214, 215, 221, 223, 224, 225, 227, 228, 230, 232, 233, 234, 243, 249, 251, 252, 254, 257, 258], "channel_index": [8, 21, 179, 186, 221], "channel_index_0": [202, 215], "channel_index_1": [202, 215], "channel_index_n": [202, 215], "channel_prun": [29, 205, 207, 226, 230, 232], "channel_pruning_auto_mod": 226, "channel_pruning_manual_mod": 226, "channelpruningparamet": [29, 205, 207, 226, 230, 232], "channelshuffl": 49, "characterist": [190, 208, 211, 215], "chart": [225, 258], "check": [20, 25, 172, 173, 180, 185, 190, 194, 197, 198, 202, 208, 211, 215, 218, 220, 222, 246, 256, 257], "check_model_sensitivity_to_quant": [8, 21, 179, 186, 221], "checker": [173, 257], "checkpoint": [182, 187, 188, 242], "checkpoints_config": [182, 188, 242], "chipset": 261, "choic": [202, 203, 215, 221, 229, 245, 246, 251, 252], "choos": [187, 190, 194, 205, 206, 207, 208, 216, 220, 226, 227, 229, 235, 243, 247, 254, 257], "choose_fast_mixed_precis": [12, 194, 235], "choose_mixed_precis": [2, 12, 174, 184, 190, 194, 208, 235], "chose": 178, "chosen": [189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 246], "chunk": 252, "cin": 180, "circularpad1d": 50, "circularpad2d": 51, "circularpad3d": 52, "cl": [30, 192, 204, 212, 257], "clamp": [161, 162, 164, 165, 166, 252], "class": [1, 2, 6, 8, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 249, 250, 253, 254, 255, 256], "class_nam": [194, 199, 230, 235], "classif": [20, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 229, 242, 243], "classifi": 20, "classmethod": [9, 22, 30, 166, 181, 187, 250, 253], "cle": [4, 16, 28, 189, 216, 221, 222, 225, 257, 258], "cle_applied_model": [204, 225], "clean": [235, 257], "clean_start": [2, 12, 184, 190, 194, 208, 235], "clear_sess": 197, "clearli": 257, "clip": [197, 217, 224, 238, 252, 254], "clone": [160, 189, 198], "clone_lay": 198, "close": [227, 252], "closer": [191, 195, 203, 209], "cloud": [243, 246, 261], "cmp_re": 235, "cnn": 243, "cnt": [194, 230, 235], "code": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 225, 245, 246, 248, 249], "codelinaro": 246, "collate_fn": [238, 240, 241], "collect": [8, 21, 25, 168, 179, 185, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 218, 219, 221, 222, 228, 243], "color": 233, "column": 228, "com": [189, 245, 246, 247], "combin": [2, 12, 172, 184, 190, 194, 208, 222, 227, 229, 235, 243, 246, 249, 257], "come": [229, 236, 253], "command": [189, 231, 245, 246, 247, 248, 260], "common": [171, 180, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 246, 247, 249, 257, 258], "commonli": [1, 23, 180, 183, 216, 243], "comp": [17, 29, 226, 230, 232], "comp_stat": [205, 206], "compar": [2, 12, 172, 184, 190, 194, 197, 198, 199, 202, 208, 211, 215, 217, 221, 235, 236, 238, 243, 253, 261], "comparison": [191, 192, 193, 209, 212, 213, 214, 218, 220], "compat": [167, 170, 194, 197, 198, 235, 245, 248, 249, 250, 256, 257], "compil": [1, 9, 196, 197, 198, 200, 201, 202, 216, 221, 222, 223, 250, 253, 257, 262], "complet": [2, 12, 184, 190, 194, 205, 206, 207, 208, 230, 235, 247, 258, 260], "complex": [1, 22, 187, 198, 216, 221, 237, 250, 253], "compli": [208, 209, 212, 213, 214, 215], "complic": 257, "compon": [171, 180, 238, 250, 257], "compos": [174, 208, 210, 216, 222, 235, 237, 248, 250], "compress": [18, 167, 189, 233, 243, 244, 251, 257], "compress_model": [17, 29, 205, 206, 207, 226, 230, 231, 232], "compress_schem": [17, 29, 205, 206, 207, 226, 230, 232], "compressed_bw": 251, "compressed_model": [205, 206, 226, 230, 232], "compressionschem": [17, 29, 205, 206, 207, 226, 230, 232], "compressionstat": [17, 29, 226, 230, 232], "compressor": [17, 29, 226, 230, 232], "compris": [190, 194, 208, 228, 238], "compromis": [205, 206, 207], "compuat": [13, 25, 185, 222], "comput": [1, 2, 8, 9, 12, 13, 21, 22, 24, 25, 29, 30, 100, 166, 178, 179, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 216, 217, 220, 221, 222, 224, 226, 229, 230, 231, 232, 233, 235, 238, 240, 241, 242, 243, 245, 247, 248, 249, 251, 252, 257, 261, 262], "computation": 231, "compute_encod": [9, 22, 24, 30, 159, 160, 161, 162, 166, 168, 171, 174, 175, 180, 181, 182, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 216, 217, 219, 223, 235, 237, 238, 240, 241, 242, 248, 250, 253], "computeencod": 245, "concat": 257, "concatenated_exampl": [238, 240, 241], "concept": 171, "concis": 251, "concret": 172, "concrete_arg": [25, 172, 185, 222], "concurr": 178, "condit": [172, 173, 223], "confer": 229, "config": [2, 8, 21, 22, 174, 178, 179, 181, 182, 184, 186, 187, 188, 190, 203, 208, 221, 223, 235, 237, 238, 240, 241, 242, 250, 253, 254, 257], "config_fil": [8, 9, 11, 13, 21, 22, 25, 179, 181, 185, 186, 187, 197, 202, 203, 215, 216, 221, 222, 223, 237, 242, 248, 250, 253], "config_util": [167, 249], "configur": [1, 8, 9, 11, 13, 17, 21, 23, 25, 29, 166, 174, 179, 180, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 204, 208, 209, 211, 212, 213, 214, 216, 221, 222, 226, 230, 232, 237, 240, 241, 248, 249, 250, 251, 253, 257], "confirm": 248, "conflict": [174, 237], "conform": [250, 262], "conjunct": 252, "connect": [216, 224, 225, 226, 229, 232, 243], "connectedgraph": [173, 257], "consecut": [192, 204, 212, 225], "consid": [24, 198, 205, 207, 217, 230, 232, 258, 262], "consist": [169, 170, 171, 190, 208, 220, 228, 235, 249, 252], "consol": 218, "constant": [172, 193, 200, 213, 214, 228], "constantpad2d": [53, 54], "constantpad3d": 55, "constrain": [243, 249], "constraint": 251, "construct": [220, 246, 247, 257], "constructor": [6, 19, 169, 172, 220, 256], "consum": [196, 210, 222, 229, 236, 251], "contain": [2, 8, 12, 21, 29, 30, 158, 166, 168, 172, 173, 174, 175, 179, 184, 186, 191, 192, 193, 195, 196, 200, 201, 202, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 219, 221, 225, 226, 230, 232, 235, 243, 244, 245, 248, 250, 251, 252, 253, 254, 260, 261], "container_nam": 246, "content": 243, "context": [9, 30, 175, 260, 262], "contigu": [240, 241, 257], "continu": [2, 20, 173, 184, 187, 190, 208, 235, 240, 246, 247, 257, 258], "contrast": [20, 171, 203], "contribut": [221, 235, 245, 258], "control": [9, 25, 172, 175, 180, 185, 222, 250, 252], "conv": [1, 3, 7, 11, 14, 15, 23, 27, 170, 172, 183, 192, 197, 204, 212, 216, 223, 224, 225, 230, 232, 233, 237, 249, 254, 257], "conv1": [20, 172, 173, 181, 197, 205, 206, 207, 216, 224, 225, 226, 230, 232, 250, 253, 256], "conv1_relu": [216, 224, 225], "conv1d": [27, 56, 224, 257], "conv2": [20, 170, 172, 197, 226, 230, 232, 249, 256], "conv2d": [15, 20, 27, 30, 57, 170, 171, 172, 173, 175, 181, 197, 198, 203, 216, 224, 225, 226, 229, 233, 249, 250, 253, 257], "conv2d_lay": 203, "conv2dnormactiv": [224, 225, 248], "conv2dtranspos": [15, 224], "conv3d": 58, "conv_1": [20, 199, 249], "conv_2": [20, 199], "conv_weight": 224, "conv_weight_arrai": 224, "conv_weight_nam": 224, "conveni": [246, 261], "convent": [254, 257], "converg": [243, 253], "convers": [256, 257], "convert": [2, 12, 20, 158, 171, 172, 174, 181, 184, 194, 208, 216, 222, 224, 225, 243, 250, 253, 255, 260, 262], "convert_to_pb": [22, 198, 250, 253], "convolut": [20, 170, 190, 191, 192, 193, 195, 199, 200, 201, 203, 204, 205, 207, 208, 209, 212, 213, 214, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 243, 249, 258], "convtranspose1d": [59, 257], "convtranspose2d": [27, 60, 224], "convtranspose3d": 61, "copi": [20, 22, 160, 166, 187, 189, 191, 208, 209, 212, 213, 214, 238, 240, 241, 246, 250, 252, 253], "copy_": 171, "corp": 235, "correct": [13, 25, 185, 192, 203, 204, 210, 215, 222, 235, 237, 243, 250, 253, 262], "correct_bia": 212, "correct_predict": [216, 235, 250], "correctli": [248, 257], "correl": [190, 208, 235], "correspond": [1, 2, 3, 6, 8, 11, 12, 14, 15, 19, 21, 23, 27, 166, 169, 173, 174, 175, 179, 181, 182, 183, 184, 186, 187, 188, 196, 203, 210, 216, 220, 221, 223, 224, 226, 233, 234, 235, 242, 245, 246, 247, 249, 250, 252, 253], "cosine_similar": 177, "cosineembeddingloss": 62, "cosinesimilar": 63, "cost": [17, 29, 205, 207, 226, 228, 229, 230, 232, 234, 236, 252, 253], "cost_metr": [17, 29, 205, 206, 207, 226, 230, 232], "costmetr": [17, 29, 205, 206, 207, 226, 230, 232], "could": [1, 22, 171, 187, 190, 191, 192, 193, 195, 197, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 221, 233, 250, 251, 253, 256], "count_param": 199, "counter": [22, 197, 211, 250, 253], "counterpart": 175, "cours": [200, 201, 203, 205, 206, 207, 213, 214], "cout": 180, "cover": [190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 252], "cp": [226, 227, 228, 233], "cp310": [245, 247], "cp_comp_stat": 207, "cpu": [28, 172, 181, 187, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 224, 225, 235, 237, 238, 242, 243, 245, 246, 248, 250, 253, 257], "cpuexecutionprovid": [190, 191, 192, 193], "creat": [2, 8, 9, 10, 12, 13, 17, 20, 22, 24, 25, 29, 30, 166, 168, 172, 174, 175, 178, 180, 184, 185, 187, 189, 196, 198, 202, 205, 206, 207, 210, 215, 216, 217, 219, 220, 222, 223, 226, 229, 230, 232, 236, 237, 238, 240, 242, 243, 248, 252, 253, 257, 260, 261, 262], "create_quantsim_and_encod": [8, 221], "critic": 194, "crop_length": [194, 235], "cropped_imag": [194, 235], "cross": [4, 13, 16, 25, 28, 185, 189, 216, 221, 222, 258], "cross_layer_equ": [5, 18, 167, 192, 204, 212, 225], "crossentropyloss": [64, 223, 240, 241, 253], "crosslayerequ": 257, "ctcloss": 48, "ctivations_pdf": [8, 21, 179, 186, 221], "cu118": [245, 247], "cu121": [245, 246, 247], "cubla": 257, "cuda": [1, 6, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 235, 237, 238, 240, 241, 242, 245, 247, 248, 250, 253, 257], "cudaexecutionprovid": [190, 191, 192, 193], "cudnn": [245, 248], "cudnn_conv_algo_search": [190, 191, 192, 193], "cumul": [196, 210], "current": [12, 17, 20, 22, 24, 29, 30, 160, 166, 173, 174, 184, 197, 198, 199, 208, 215, 217, 226, 230, 232, 235, 236, 238, 250, 253, 257, 263], "curv": [2, 12, 184, 190, 194, 208, 228, 235], "custom": [1, 9, 20, 22, 30, 172, 175, 190, 196, 198, 210, 216, 238, 243, 246, 250, 251, 252, 253, 257, 258], "custom_function_not_to_be_trac": 172, "custom_object": [22, 250, 253], "customdataload": [216, 222, 235, 250], "customdataset": 217, "custommodel": 172, "custommodul": 172, "cycl": 261, "d": [161, 162, 163, 164, 165, 238, 251], "dangl": [250, 253], "dark": [190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215], "data": [1, 2, 8, 9, 10, 11, 12, 17, 21, 22, 23, 24, 25, 26, 29, 158, 159, 160, 168, 171, 172, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 230, 232, 234, 235, 238, 240, 241, 242, 243, 249, 250, 252, 253, 257, 258], "data_load": [1, 2, 10, 23, 24, 25, 29, 168, 174, 182, 183, 184, 185, 188, 190, 191, 192, 193, 195, 196, 197, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 226, 235, 238, 242, 250, 253], "data_loader_wrapp": [12, 194, 235], "data_set": [11, 24, 195, 203, 216, 217], "data_typ": [25, 171, 181, 185, 187, 222, 250, 253], "datacent": 246, "dataload": [2, 12, 23, 24, 25, 26, 174, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 235, 238, 240, 241, 242, 250, 253], "dataloader_wrapp": [194, 235], "dataloader_wrapper_len": 238, "dataloadermnist": 226, "dataparallel": 253, "dataset": [2, 8, 9, 12, 13, 14, 21, 24, 25, 26, 179, 181, 184, 185, 186, 189, 198, 216, 217, 221, 222, 223, 230, 235, 240, 241, 242, 248, 250, 252, 253, 261], "dataset_dir": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 230, 235], "dataset_train": [200, 201], "dataset_valid": [200, 201], "datasetv2": [11, 13, 14, 21, 216, 221, 222, 223], "datatyp": [13, 25, 185, 222, 251], "de": [180, 252], "deb": 247, "debian": [245, 247], "debug": [171, 194, 218, 220, 251, 257], "decai": 229, "decid": [182, 188, 190, 191, 192, 193, 194, 195, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 231, 235, 238, 242, 246], "decim": [205, 206, 207, 226, 230, 232], "decis": 262, "declar": 30, "decode_predict": [194, 230, 235], "decompos": [229, 230, 232], "decomposit": [206, 207, 229, 230, 232], "decompress": [7, 170, 249], "decompressed_bw": [7, 170, 249], "decor": 30, "decreas": 243, "dedic": 243, "deem": 261, "deep": [224, 229, 236, 243], "deepcopi": 191, "deepseek": 238, "deepspe": 257, "def": [2, 9, 12, 17, 20, 22, 29, 30, 171, 172, 173, 174, 181, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 226, 230, 232, 235, 238, 240, 241, 242, 248, 250, 253, 255, 256], "default": [1, 2, 8, 9, 10, 11, 12, 13, 17, 20, 21, 22, 23, 25, 29, 30, 160, 161, 162, 164, 165, 166, 168, 172, 174, 175, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 235, 237, 242, 243, 247, 248, 250, 251, 252, 253, 257], "default_activation_bw": [8, 9, 190, 191, 192, 193, 216, 221, 235, 250], "default_beta_rang": [1, 11, 23, 183, 216], "default_bitwidth": 235, "default_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "default_config_fil": [1, 23, 183, 216], "default_config_per_channel": [197, 254], "default_data_col": [238, 240, 241], "default_data_typ": [9, 22, 181, 187, 250, 253], "default_forward_fn": [182, 188, 217, 242], "default_new": 178, "default_num_iter": [1, 11, 23, 183, 191, 195, 203, 209, 210, 216], "default_output_bw": [9, 21, 22, 179, 181, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 221, 223, 235, 237, 238, 240, 241, 242, 248, 250, 253], "default_param_bw": [1, 8, 9, 11, 21, 22, 23, 179, 181, 183, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 221, 223, 235, 237, 238, 240, 241, 242, 248, 250, 253], "default_quant_schem": [1, 11, 23, 183, 191, 195, 203, 209, 216], "default_reg_param": [1, 11, 23, 183, 216], "default_warm_start": [1, 11, 23, 183, 216], "defin": [2, 12, 20, 30, 172, 173, 175, 180, 184, 194, 199, 202, 203, 205, 206, 207, 209, 212, 213, 214, 215, 217, 221, 226, 230, 232, 235, 238, 246, 250, 251, 252, 254, 255, 256], "definit": [2, 12, 29, 30, 169, 171, 172, 174, 178, 184, 187, 190, 194, 197, 198, 202, 203, 208, 209, 212, 213, 214, 215, 220, 226, 230, 232, 235, 250, 252, 255, 256], "degrad": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 261, 262], "degre": [230, 232], "deleg": 180, "delet": [2, 12, 184, 190, 194, 208, 221, 235], "deliber": [190, 194, 202, 203, 208, 215], "delta": [8, 20, 21, 179, 186, 198, 199, 221, 245, 252], "demand": 243, "demonstr": [189, 202, 215], "denot": [230, 233, 251], "dens": [15, 20, 197, 198, 199, 224, 255, 257], "depend": [158, 159, 160, 172, 189, 203, 227, 245, 246, 247, 254, 257], "deploi": [252, 259, 261], "deploy": [243, 244, 259, 260, 262], "deprec": [9, 181, 250, 253, 257], "depth": [216, 223, 225, 257, 258], "depthwis": 257, "depthwise_conv2d": 225, "depthwiseconv2d": [15, 224, 225], "dequant": [158, 159, 160, 162, 165, 166, 180, 243, 245, 257, 261, 262], "dequantizedtensor": [159, 160, 162, 180, 248], "dequantizelinear": 177, "deriv": [161, 162, 164, 165, 180, 191, 194, 208, 216, 235, 252], "descend": 166, "describ": [166, 171, 189, 203, 229, 231, 235, 245, 246, 247, 248, 249, 251, 252, 254, 258, 259, 261, 262], "descript": [175, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 251, 252], "design": [173, 190, 194, 199, 202, 203, 208, 215, 216, 243, 249], "desir": [8, 22, 160, 179, 180, 181, 186, 187, 190, 194, 205, 206, 207, 208, 221, 227, 229, 230, 235, 236, 250, 253, 258, 260, 262], "detach": [160, 177], "detail": [25, 172, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 226, 228, 231, 237, 244, 246, 247, 249, 251, 252, 258, 260, 262], "detect": 229, "determin": [1, 8, 21, 22, 166, 170, 175, 179, 186, 187, 190, 198, 208, 210, 216, 217, 221, 222, 234, 238, 240, 241, 242, 243, 249, 250, 251, 253], "determinist": 172, "dev": [246, 247], "develop": [168, 219, 243, 246, 247, 261], "devic": [1, 6, 9, 13, 23, 25, 160, 172, 181, 183, 184, 185, 187, 190, 191, 192, 193, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 235, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 253, 257, 259, 260, 261, 262], "diagnost": 258, "diagram": [198, 240, 241], "dict": [2, 8, 9, 12, 17, 21, 22, 24, 25, 29, 166, 169, 172, 174, 175, 179, 184, 185, 186, 187, 217, 220, 221, 222, 226, 230, 232, 235, 237, 250, 251, 253, 256], "dictat": 261, "dictionari": [8, 12, 17, 21, 29, 166, 179, 181, 186, 187, 196, 197, 199, 221, 226, 228, 229, 230, 232, 235, 250, 253, 254], "dicuss": 199, "did": [203, 246], "didn": 211, "diff": 257, "differ": [17, 29, 171, 172, 178, 190, 194, 197, 198, 203, 205, 206, 207, 208, 213, 214, 225, 226, 228, 229, 230, 232, 234, 235, 236, 237, 239, 242, 243, 247, 249, 251, 252, 258, 260, 262], "dim": [170, 180, 208, 249], "dimens": [7, 170, 175, 230, 232, 249, 251, 252, 258], "dir": [9, 197, 202, 203, 204, 247, 250], "dir_path": [6, 169, 220], "direct": [220, 224, 235, 244, 249, 251, 252, 257, 261, 262], "directli": [8, 14, 197, 211, 221, 223, 237, 240, 252, 257, 261], "directori": [2, 6, 8, 9, 12, 13, 17, 19, 21, 25, 29, 169, 179, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 246, 247, 250, 253, 260], "directrori": 235, "disabl": [2, 8, 21, 171, 175, 178, 179, 181, 182, 186, 187, 188, 194, 205, 207, 221, 224, 228, 229, 235, 242, 250, 252, 253, 254], "discard": 221, "disciplin": 216, "discuss": [189, 194, 205, 206, 207, 216], "disk": [6, 19, 169, 220], "displai": [189, 194, 198, 219, 231], "display_comp_ratio_plot": 231, "display_eval_scor": 231, "dist": [246, 247], "distict": 257, "distil": [217, 234, 238], "distinct": 173, "distort": 252, "distribut": [17, 29, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 225, 226, 230, 232, 243, 252, 257, 258], "divbackward0": 180, "diverg": 243, "divid": [227, 249, 253], "divis": [180, 243, 249], "dlc": 260, "dlc_path": 260, "dlcompress": 257, "dlequal": 257, "dlf": 243, "do": [1, 9, 12, 20, 23, 172, 173, 178, 181, 183, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 224, 229, 235, 237, 238, 240, 246, 247, 248, 250, 252, 253, 261, 262], "do_constant_fold": [190, 191, 192, 193, 224], "do_not_trace_m": 172, "doc": [172, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 246, 257], "docker": 244, "docker_container_nam": 246, "docker_image_nam": 246, "docker_run_command": 246, "dockerfil": 246, "docstr": 249, "document": [178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 208, 209, 210, 211, 212, 213, 214, 215, 220, 224, 231, 235, 245, 249, 251, 252, 257, 260, 261, 262], "doe": [20, 30, 172, 184, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 221, 226, 228, 230, 232, 238, 242, 252, 253, 256, 257, 258, 261, 262], "doesn": [30, 190, 191, 192, 193, 195, 196, 204, 205, 206, 207, 208, 209, 212, 213, 214, 250, 253, 261], "doesnt": [174, 237], "don": [30, 172, 194, 197, 198, 202, 203, 215, 221, 240, 241], "done": [161, 162, 180, 194, 199, 203, 211, 229, 254, 255, 257], "down": [203, 239, 251], "download": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 244, 245, 247], "download_url": [246, 247], "downsampl": [205, 207], "downstream": [233, 251, 257], "dpkg": 247, "dq_output": 30, "drastic": [228, 262], "drawback": 252, "driver": [230, 245, 248], "drop": [2, 12, 13, 25, 175, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 221, 222, 227, 229, 234, 235, 252, 253, 258], "dropout": [20, 65, 198, 199], "dropout1": [20, 199], "dropout1d": 66, "dropout2": [20, 199], "dropout2d": 67, "dropout3d": 68, "dtype": [158, 159, 160, 166, 170, 171, 172, 174, 237, 238, 240, 241, 249, 251, 257], "due": [20, 173, 257], "dummi": [8, 9, 23, 25, 27, 28, 169, 173, 179, 181, 183, 184, 185, 186, 187, 190, 202, 208, 215, 216, 220, 221, 222, 224, 225, 240, 241, 250, 253], "dummy_attention_mask": [240, 241], "dummy_data": 221, "dummy_input": [8, 9, 23, 24, 25, 27, 28, 168, 169, 178, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 235, 237, 238, 240, 241, 242, 248, 249, 250, 253, 256], "dummy_input_dict": 220, "dummy_input_id": [240, 241], "dummy_model": [217, 238], "dummymodel": [24, 217], "dump": [197, 238, 257], "duplic": [160, 172], "dure": [1, 2, 11, 12, 13, 17, 20, 23, 24, 25, 29, 30, 166, 168, 175, 183, 184, 185, 191, 193, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 222, 226, 229, 230, 231, 232, 235, 243, 244, 250, 252, 253, 254, 257, 262], "dynam": [166, 172, 243, 252, 257], "dynamic_ax": [190, 191, 192, 193, 216, 224, 235, 250], "dynamo": 177, "e": [1, 8, 9, 22, 176, 181, 187, 190, 194, 197, 202, 203, 208, 211, 215, 216, 221, 234, 235, 238, 242, 250, 251, 253], "each": [1, 2, 8, 9, 11, 12, 20, 21, 23, 30, 168, 173, 175, 176, 179, 180, 183, 184, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 224, 225, 226, 227, 228, 229, 230, 235, 237, 238, 243, 249, 250, 251, 252, 254, 258, 260], "earli": [2, 12, 184, 235], "easi": [237, 257, 261], "easier": 171, "easili": [180, 226, 230, 232], "ed": 216, "edg": [243, 244, 261], "edit": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 251], "effect": [1, 11, 14, 22, 23, 26, 175, 183, 193, 198, 200, 201, 213, 214, 216, 221, 223, 234, 243, 250, 253, 261, 262], "effici": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 197, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "efficientnetb4": 257, "effort": [13, 25, 174, 185, 196, 210, 222, 237, 261, 262], "eights_pdf": [8, 21, 179, 186, 221], "either": [17, 29, 170, 174, 180, 190, 195, 203, 205, 206, 207, 208, 226, 230, 232, 233, 235, 237, 246, 249, 256], "element": 251, "elementari": 198, "elementwis": [172, 175, 257], "elimin": [221, 224, 243, 252], "els": [2, 12, 172, 173, 184, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 230, 235, 237, 238, 242, 248, 250, 253], "elu": 69, "embed": [20, 70, 172, 177, 181, 187, 198, 199, 229, 250, 253, 257, 258], "embed_dim": [20, 198, 199], "embedding_lay": [20, 199], "embeddingbag": 71, "embodi": 243, "empir": [196, 210], "emploi": [243, 244], "empti": 254, "emul": [244, 252], "enabl": [2, 7, 8, 12, 13, 17, 21, 25, 29, 166, 171, 174, 178, 179, 182, 184, 185, 186, 188, 194, 201, 203, 205, 207, 208, 214, 220, 222, 223, 224, 226, 230, 231, 232, 234, 235, 242, 243, 249, 252, 254, 257, 260, 261], "enable_convert_op_reduct": [12, 174, 184, 194, 208, 235], "enable_onnx_check": [181, 187, 250, 253], "enable_per_layer_mse_loss": [8, 21, 202, 215, 221], "enbl": 249, "enc": 30, "enc_typ": 251, "encapsul": [2, 12, 174, 179, 184, 186, 221, 235], "encaptur": 178, "encod": [1, 2, 8, 9, 11, 12, 13, 21, 22, 23, 24, 25, 30, 158, 159, 160, 161, 162, 166, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 209, 210, 212, 213, 214, 216, 217, 218, 220, 222, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 249, 253, 257, 260, 261], "encoding_analyz": [161, 162, 166], "encoding_file_path": [250, 253], "encoding_path": [191, 195, 196, 203, 209, 210, 216, 222], "encoding_vers": [249, 251], "encodinganalyz": [161, 162, 166], "encodinganalyzerforpython": 245, "encodingbas": [158, 159, 166], "encodingmismatchinfo": 250, "encodingtyp": 251, "encount": [30, 198], "encourag": [20, 172, 255, 256], "end": [14, 24, 161, 162, 163, 164, 165, 172, 173, 189, 197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 216, 217, 223, 229, 235, 242, 244, 250, 261], "end_beta": [1, 11, 23, 183, 216], "end_idx": 222, "enforc": 166, "engin": [220, 224, 235, 244, 246, 249, 251, 252, 257, 261, 262], "enhanc": [8, 21, 178, 179, 186, 202, 215, 221, 250, 252, 257], "enough": [194, 205, 206, 207, 216, 262], "ensur": [175, 203, 220, 223, 228, 235, 240, 241, 247, 248, 257, 258, 262], "enter": [30, 175, 222], "entir": [8, 21, 179, 180, 186, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 226, 229, 230, 232, 252], "entireti": [20, 203], "entri": [25, 181, 185, 187, 222, 250, 251, 253, 254], "entrypoint": 246, "enum": [1, 2, 9, 12, 17, 23, 29, 169, 181, 183, 184, 187, 190, 194, 197, 198, 208, 211, 216, 220, 226, 230, 232, 235, 250, 251, 253], "enumer": [17, 29, 169, 199, 220, 226, 230, 232, 235, 238, 240, 241, 250, 253], "environ": [189, 190, 194, 196, 197, 200, 201, 208, 215, 235, 243, 245, 247], "envsetup": [246, 247], "ep": [224, 225, 257], "epoch": [191, 192, 193, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 223, 226, 229, 230, 232, 240, 241, 253], "epsilon": [20, 198, 199, 257], "equal": [4, 13, 16, 25, 28, 159, 160, 170, 180, 185, 189, 195, 199, 216, 221, 222, 227, 228, 249, 252, 258], "equalize_model": [4, 16, 28, 192, 204, 212, 225], "equat": [161, 162, 163, 164, 165, 249, 252], "equival": [25, 30, 164, 165, 166, 170, 174, 181, 184, 185, 187, 190, 203, 208, 209, 212, 213, 214, 215, 217, 222, 235, 238, 249, 250, 253, 256, 260], "erorr": 194, "error": [13, 20, 25, 30, 172, 180, 181, 185, 194, 218, 222, 235, 237, 243, 250, 252, 253, 257, 258], "especi": [190, 203, 208, 240, 243, 253, 258, 261], "essenti": [190, 194, 197, 198, 208, 211], "estim": [189, 252, 257, 261], "esults_dir": [8, 21, 179, 186, 221], "etc": [24, 190, 194, 197, 198, 203, 208, 217, 227, 243, 246, 251, 257], "eval": [2, 8, 12, 13, 17, 21, 24, 25, 29, 172, 174, 179, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 197, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 235, 237, 242, 248, 250, 253], "eval_callback": [8, 13, 17, 21, 25, 29, 179, 185, 186, 196, 197, 202, 205, 206, 207, 210, 215, 221, 222, 226, 230, 232, 235], "eval_callback_factori": [190, 208], "eval_callback_fn": 221, "eval_callback_for_phase1": [2, 12, 184, 190, 208, 235], "eval_callback_for_phase2": [2, 12, 184, 190, 208, 235], "eval_callback_for_phase_1": 235, "eval_callback_for_phase_2": 235, "eval_callback_phase1": 194, "eval_callback_phase2": 194, "eval_data_load": [216, 235, 250], "eval_data_s": 250, "eval_dataset": [196, 197, 216, 221, 222, 223, 250, 253], "eval_dataset_s": [196, 197, 210, 222], "eval_func": [194, 202, 230, 235], "eval_iter": [17, 29, 205, 206, 207, 226, 230, 232], "eval_scor": [8, 17, 21, 29, 179, 186, 221, 226, 230, 232], "evalcallbackfactori": [2, 174, 184, 190, 208, 235], "evalfunct": 230, "evalu": [2, 8, 12, 13, 17, 21, 25, 29, 174, 179, 184, 185, 186, 189, 196, 198, 210, 216, 217, 222, 223, 226, 228, 229, 230, 231, 232, 235, 238, 242, 248, 252, 262], "evaluate_accuraci": 208, "evaluate_model": [226, 230, 232], "even": [30, 180, 190, 194, 197, 198, 203, 208, 235, 236, 237], "evenli": 249, "eventu": 237, "everi": [1, 6, 8, 11, 19, 21, 23, 169, 179, 180, 183, 186, 190, 191, 192, 193, 194, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 220, 221, 228, 229, 238, 252, 253], "evlauat": 194, "ex": 178, "exactli": [13, 24, 30, 100, 166, 175, 202, 215, 217, 222, 252], "examin": 172, "exampl": [7, 9, 17, 24, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 173, 174, 175, 177, 178, 180, 181, 182, 188, 198, 199, 210, 216, 217, 219, 220, 221, 222, 224, 225, 227, 233, 237, 238, 240, 241, 242, 243, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 262], "exce": [168, 219], "exceed": [168, 219], "except": [20, 182, 188, 190, 191, 192, 193, 199, 202, 215, 216, 224, 225, 235, 237, 242, 249, 250, 253], "exchang": 243, "exclud": [25, 172, 173, 179, 182, 185, 186, 188, 221, 222, 242, 251, 257], "excluded_lay": 251, "exclus": [166, 170, 249], "execut": [2, 9, 12, 13, 25, 172, 181, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 224, 231, 235, 247, 248, 250, 253, 257], "exercis": [190, 197, 202, 203, 208, 211, 215], "exist": [30, 100, 166, 175, 181, 187, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 235, 249, 250, 253, 261], "exist_ok": [190, 191, 194, 195, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "exit": [2, 12, 13, 25, 30, 175, 184, 185, 222, 235], "expand": [249, 257], "expand_dim": 222, "expanded_conv_depthwis": [216, 225], "expans": [229, 249], "expect": [2, 8, 13, 17, 21, 22, 23, 25, 29, 168, 172, 173, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 197, 205, 206, 207, 208, 211, 216, 219, 221, 222, 226, 229, 230, 232, 235, 237, 238, 242, 250, 253, 255], "experi": [17, 29, 170, 191, 195, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 226, 229, 230, 232, 245, 249, 262], "experienc": 245, "experiment": [217, 229, 238, 249, 257], "experss": [20, 199], "expert": [196, 210], "explain": [190, 194, 197, 198, 202, 208, 211, 215, 226, 229, 257], "explan": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 244], "explicitli": [13, 25, 185, 222, 233], "expon": [166, 170, 249], "exponent_bit": [166, 170, 249], "export": [8, 9, 21, 22, 24, 25, 169, 171, 174, 178, 179, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 208, 209, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 229, 235, 236, 237, 238, 242, 246, 247, 251, 256, 257, 260], "export_int32_bia": 177, "export_model": [9, 178, 181, 187, 250, 253], "export_param": [190, 191, 192, 193], "export_per_layer_encoding_min_max_rang": [8, 21, 179, 186, 221], "export_per_layer_mse_loss": [8, 21, 179, 186, 221], "export_per_layer_stats_histogram": [8, 21, 179, 186, 221], "export_to_torchscript": [181, 187, 250, 253], "exported_model": 249, "expos": [172, 216, 221], "express": [17, 29, 226, 230, 232, 240, 241], "extend": [171, 257], "extens": [167, 175, 189, 246, 247, 260], "extern": 257, "extra": [166, 175, 257], "extract": [191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 243, 250], "extrem": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 252], "ey": 221, "f": [172, 173, 177, 180, 197, 210, 216, 222, 223, 224, 225, 235, 245, 246, 247, 250, 253], "f0": 227, "facebook": [240, 241, 243], "facilit": 244, "fact": 240, "factor": [197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 227, 229, 249], "factori": [2, 12, 174, 184, 235], "fail": [172, 173, 174, 181, 190, 191, 192, 193, 216, 222, 224, 225, 235, 237, 250, 253, 257], "failur": 257, "fair": 243, "fairli": [194, 197, 198, 202, 203, 215], "fake": [162, 165, 166, 174, 184, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 208, 209, 210, 211, 212, 213, 214, 235, 250, 257], "fakequ": [181, 187, 250, 253], "fall": [9, 205, 206, 207, 228, 250, 254, 262], "fallback": 260, "fals": [2, 7, 9, 12, 13, 17, 20, 22, 25, 29, 30, 158, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 178, 180, 181, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 220, 222, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 245, 248, 249, 250, 251, 253, 254], "famili": [237, 243, 257], "familiar": 189, "far": [197, 211], "farther": [191, 195, 209], "fashion": 203, "fast": [12, 235], "faster": [190, 196, 197, 203, 208, 210, 235, 257], "fc": [229, 232], "fc1": 172, "fc2": 172, "featur": [7, 20, 24, 168, 171, 172, 173, 177, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 222, 224, 225, 229, 231, 235, 237, 238, 243, 248, 252, 255, 256, 257, 258], "featurealphadropout": 72, "feed": [20, 198, 199, 252], "feel": [197, 198, 211, 237], "feez": [182, 188, 242], "few": [190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 223, 227], "fewer": [229, 261], "ff_dim": [20, 198, 199], "ffn": [20, 199], "ffn_output": [20, 199], "field": [2, 166, 184, 190, 208, 235, 251], "figur": [216, 222, 225, 226, 228, 230, 231, 232, 233, 252, 258], "file": [1, 2, 8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 174, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 198, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 226, 230, 232, 235, 237, 242, 245, 246, 247, 249, 250, 251, 252, 253, 257, 260, 261], "file_path": [187, 216, 224, 225, 235, 250], "filenam": [1, 9, 11, 22, 23, 181, 183, 187, 190, 191, 192, 193, 216, 217, 223, 238, 242, 250, 253], "filename_prefix": [1, 9, 11, 22, 23, 181, 183, 187, 190, 191, 194, 195, 197, 203, 204, 208, 209, 210, 211, 212, 213, 214, 216, 217, 223, 235, 238, 242, 250, 253], "filename_prefix_encod": [178, 181, 187, 250, 253], "fill": [25, 181, 185, 187, 222, 250, 253], "filter": [20, 203, 243], "final": [17, 20, 29, 173, 182, 188, 190, 194, 197, 198, 202, 208, 211, 215, 221, 226, 227, 228, 230, 232, 235, 240, 241, 242, 247, 249, 253, 258, 261], "find": [2, 12, 15, 173, 174, 182, 184, 187, 188, 190, 191, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 221, 224, 228, 236, 237, 238, 242, 252, 253, 262], "find_pkg_url_str": [246, 247], "fine": [17, 22, 29, 178, 187, 191, 192, 193, 195, 196, 198, 200, 201, 204, 209, 210, 212, 213, 214, 226, 227, 230, 232, 244, 250, 253, 261, 262], "finer": [166, 180, 249], "finess": 262, "finetun": [191, 192, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 213, 214], "finetuned_accuraci": [211, 213, 214], "finetuned_accuracy_bn_reestim": 211, "finetuned_model": [205, 206], "finish": [200, 201, 213, 214], "finit": 166, "first": [20, 23, 172, 175, 178, 180, 182, 183, 188, 197, 198, 199, 202, 203, 205, 206, 207, 211, 215, 216, 225, 229, 230, 242, 246, 257, 258, 261], "fit": [17, 29, 197, 198, 200, 201, 211, 223, 226, 228, 230, 232, 253, 261], "five": [192, 212], "fix": [173, 190, 191, 192, 193, 235, 251, 252, 257], "flag": [2, 12, 13, 25, 168, 171, 172, 173, 174, 181, 184, 185, 187, 190, 194, 208, 219, 222, 235, 237, 250, 253], "flatten": [73, 172, 197, 240, 241, 251], "flexibl": [167, 190, 208], "flexround": 217, "float": [1, 2, 8, 9, 10, 11, 12, 13, 17, 21, 22, 23, 25, 29, 30, 158, 159, 166, 170, 174, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 224, 225, 226, 230, 232, 235, 236, 242, 243, 244, 249, 250, 251, 252, 253, 257, 258, 261, 262], "float16": [166, 170, 171, 249], "float32": 221, "float8": 257, "float_fallback": 260, "floatencod": [166, 257], "floatquant": [166, 171], "floatquantizedequant": 171, "flow": [25, 172, 185, 222, 252, 258], "fly": 177, "fo": 203, "focu": 211, "fold": [3, 13, 14, 15, 25, 27, 74, 185, 194, 216, 221, 222, 223, 225, 235, 243, 257], "fold_all_batch_norm": [15, 27, 194, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 224, 235, 253], "fold_all_batch_norms_to_scal": [14, 197, 211, 223], "fold_all_batch_norms_to_weight": [3, 190, 191, 192, 193, 224], "folded_model": 224, "folder": [202, 215, 221], "follow": [5, 6, 8, 9, 10, 18, 19, 20, 21, 22, 30, 100, 169, 171, 172, 173, 174, 175, 178, 179, 181, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 236, 237, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "footprint": 243, "forall_": [161, 162, 163, 164, 165], "forc": [190, 191, 192, 193, 205, 206, 207, 208, 209, 212, 213, 214, 215], "form": [20, 191, 202, 215], "formal": 249, "format": [1, 8, 11, 21, 22, 23, 160, 176, 179, 181, 183, 186, 187, 216, 221, 222, 235, 238, 242, 243, 244, 249, 250, 252, 253, 255, 257, 260, 261], "former": 256, "forward": [2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 166, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 193, 194, 197, 198, 199, 200, 201, 202, 208, 209, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 235, 238, 240, 241, 242, 246, 250, 253, 256, 257, 258, 262], "forward_fn": [1, 2, 13, 23, 24, 25, 26, 174, 176, 182, 183, 184, 185, 188, 190, 191, 197, 208, 211, 216, 217, 222, 223, 235, 238, 242], "forward_one_batch": [190, 208], "forward_pass": [216, 217, 235, 240, 241, 242, 248], "forward_pass_arg": 250, "forward_pass_call_back": [194, 235], "forward_pass_callback": [1, 2, 8, 9, 12, 21, 22, 179, 181, 184, 186, 187, 190, 191, 192, 193, 195, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 221, 235, 250, 253], "forward_pass_callback_2": [12, 235], "forward_pass_callback_arg": [1, 9, 22, 181, 187, 190, 191, 192, 193, 194, 195, 197, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 216, 235, 250, 253], "forward_pass_callback_fn": 221, "found": [171, 199, 252, 253], "four": [222, 252], "fp": 234, "fp16": [174, 237, 257, 261], "fp32": [2, 6, 8, 12, 19, 21, 169, 174, 179, 182, 184, 186, 188, 197, 198, 215, 217, 220, 221, 235, 238, 242, 243, 251, 252, 253, 257, 260, 261, 262], "fp32_acccuraci": 194, "fp32_layer_output": 220, "fp32_layer_output_util": 220, "fp32_output": [2, 235], "fp_qdq": 171, "fp_quantiz": 171, "frac": [161, 162, 163, 164, 165, 166, 180, 252], "fraction": [235, 262], "fractionalmaxpool2d": 75, "fractionalmaxpool3d": 76, "framework": [0, 189, 217, 220, 224, 238, 243, 244, 245, 246, 247, 248, 250, 252, 254, 260, 262], "free": [192, 197, 198, 204, 211, 212, 237], "freez": [171, 191, 195, 203, 209, 217, 238, 242], "freeze_encod": 171, "fresh": 245, "friendli": [167, 178, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 222, 261], "from": [2, 9, 12, 13, 20, 22, 23, 24, 25, 26, 30, 159, 160, 161, 162, 166, 167, 170, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 260, 262], "from_encod": 166, "from_modul": 30, "from_numpi": 177, "from_pretrain": [238, 240, 241], "from_str": [9, 22, 181, 187, 250, 253], "from_tensor_slic": 221, "front": [2, 12, 13, 25, 184, 185, 190, 194, 208, 222], "frozen": [203, 240, 241], "full": [24, 190, 191, 192, 193, 194, 195, 197, 200, 201, 204, 208, 209, 211, 212, 213, 214, 217, 230, 235, 236, 243, 255, 256], "fulli": [167, 177, 229, 232, 250, 251, 257], "func": [2, 12, 174, 179, 184, 186, 221, 235], "func_callback_arg": [2, 12, 174, 179, 184, 186, 190, 208, 221, 235], "func_wrapp": [194, 230, 235], "function": [1, 2, 5, 8, 9, 10, 12, 13, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 158, 159, 160, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 195, 198, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 235, 238, 240, 241, 242, 243, 249, 250, 252, 253, 255, 256, 257, 260, 262], "function_nam": [205, 206, 207], "functional_callback": 198, "functional_model": [197, 198, 199], "functional_model_weight_ord": 199, "functional_op": 173, "fundament": 171, "furhter": [196, 210], "furo": 257, "further": [158, 161, 162, 163, 164, 165, 172, 180, 207, 226, 229, 252, 262], "furthermor": 20, "fuse": [197, 240, 252, 254], "fuse_bn_into_conv": 224, "fusion": [243, 257], "futur": [168, 219], "fx": [25, 172, 185, 222], "g": [1, 9, 22, 176, 187, 190, 194, 197, 202, 203, 208, 211, 215, 216, 221, 235, 238, 246, 250, 251, 253], "gain": [191, 195, 200, 201, 203, 204, 205, 206, 207, 209, 212, 213, 214, 216, 226, 227, 229, 262], "gamma": 217, "gap": 236, "gather": 250, "gaussiannllloss": 81, "gave": 222, "gelu": 77, "gemm": [7, 197, 254], "gener": [6, 9, 19, 30, 161, 162, 163, 164, 165, 169, 177, 180, 184, 189, 190, 194, 198, 208, 210, 216, 217, 221, 223, 224, 225, 229, 235, 237, 238, 240, 241, 242, 243, 248, 249, 250, 251, 252, 253, 254, 257, 258, 260, 261], "generate_calibration_callback": [240, 241], "generate_layer_output": [6, 19, 169, 220], "get": [2, 12, 17, 29, 166, 172, 174, 178, 184, 190, 191, 192, 193, 194, 197, 198, 199, 202, 220, 229, 230, 232, 235, 236, 237, 241, 242, 245, 247], "get_activation_quant": [2, 235], "get_active_param_quant": [12, 235], "get_active_quant": [2, 12, 174, 184, 235], "get_available_provid": [9, 190, 191, 192, 193, 250], "get_calibration_and_eval_data_load": 250, "get_candid": [2, 12, 174, 184, 235], "get_data_loader_wrapp": [194, 235], "get_default_kernel": 30, "get_devic": 210, "get_encod": 166, "get_eval_func": [194, 230, 235], "get_extra_st": 166, "get_input": [190, 191, 192, 193, 216, 235, 250], "get_input_quantizer_modul": [174, 184, 235], "get_kernel": 30, "get_loss_fn": [182, 188, 242], "get_model": [194, 255], "get_offset": 180, "get_original_models_weights_in_functional_model_ord": 199, "get_param_quant": [2, 235], "get_path_for_per_channel_config": [216, 222, 223, 237, 242, 248, 250], "get_peft_model": 178, "get_pre_processed_input": 220, "get_quant_scheme_candid": [13, 25, 185, 222], "get_scal": [160, 180], "get_subclass_model_with_functional_lay": 20, "get_text_classificaiton_model": 20, "get_top5_acc": 194, "get_val_dataload": [190, 191, 192, 193, 205, 207, 208, 209, 211, 212, 213, 214, 215], "get_val_dataset": [195, 196, 197, 202, 203, 204], "get_weight": [199, 224, 225], "git": [189, 246], "github": [189, 245, 246, 247], "give": [194, 198, 202, 203, 205, 206, 207, 215, 216, 221, 225, 229, 235, 257, 259], "given": [2, 4, 12, 13, 16, 17, 22, 23, 25, 26, 28, 29, 30, 168, 174, 175, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 219, 222, 223, 225, 226, 228, 229, 230, 232, 235, 242, 250, 253, 262], "global": [242, 243, 258], "globalaveragepooling1d": [20, 198, 199], "glu": 78, "gnu": 247, "gnupg2": 247, "go": [20, 190, 194, 197, 198, 202, 203, 208, 211, 215, 257], "goal": [13, 25, 185, 190, 208, 221, 222, 261], "good": [20, 178, 197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 229, 237, 262], "googl": 243, "got": [3, 14, 27, 172, 223, 224], "gpu": [205, 206, 207, 209, 211, 212, 213, 214, 215, 220, 226, 230, 232, 243, 245, 246, 247, 248, 257], "grad_fn": [158, 159, 160, 161, 162, 177, 180, 248], "gradient": [158, 159, 160, 240, 241, 250, 253, 257], "grant": 189, "granular": [17, 29, 198, 205, 206, 207, 226, 229, 230, 232, 249, 258], "granularli": 249, "graph": [20, 23, 25, 160, 172, 177, 181, 183, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 222, 224, 225, 230, 231, 235, 237, 250, 251, 252, 253, 257, 260, 261], "graph_optimization_level": 177, "graphmodul": 172, "graphoptimizationlevel": 177, "greater": [17, 29, 226, 227, 228, 230, 232, 249], "greedi": [17, 29, 226, 229, 230, 231, 232], "greedili": [190, 194, 208], "greedy_param": [205, 206, 207, 226, 230, 232], "greedy_select_param": [17, 29, 205, 206, 207, 226, 230], "greedymixedprecisionalgo": [12, 174, 184, 194, 208, 235], "greedyselectionparamet": [17, 29, 205, 206, 207, 226, 230, 232], "green": 233, "grep": 246, "grid": [10, 180, 182, 188, 242, 249, 252], "group": [2, 7, 12, 170, 174, 184, 190, 208, 246, 249, 252, 254, 257], "groupedblockquantizedequant": 249, "groupnorm": 82, "gru": [79, 257], "grucel": 80, "guarante": 20, "guid": [189, 190, 194, 196, 208, 209, 210, 212, 213, 214, 215, 216, 235, 239, 246, 250, 257, 261], "guidebook": 229, "guidelin": [172, 208, 209, 212, 213, 214, 215, 216, 250, 253], "h": [189, 232, 233, 247], "h5": [220, 260], "ha": [1, 8, 11, 20, 23, 25, 30, 158, 171, 172, 173, 181, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 227, 228, 231, 233, 237, 239, 242, 243, 248, 249, 250, 252, 253, 257, 261], "had": [255, 256], "half": 227, "hand": [190, 208], "handl": [13, 14, 25, 26, 185, 222, 223, 245, 248, 249, 252, 257], "hard": 172, "hardshrink": 83, "hardsigmoid": 84, "hardswish": 85, "hardtanh": 86, "hardwar": [9, 181, 187, 243, 244, 250, 252, 253, 261], "hat": 252, "have": [8, 20, 21, 30, 168, 169, 170, 171, 172, 173, 176, 179, 180, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 221, 229, 235, 237, 238, 240, 243, 247, 249, 250, 251, 253, 257, 258, 260, 262], "hba": [192, 204, 212], "he": 229, "head": [20, 198, 199], "heavi": [168, 219, 231], "height": [190, 191, 192, 193, 198, 208, 209, 211, 212, 213, 214, 215, 224, 225, 230, 232, 233], "held": [30, 175, 213, 214], "help": [171, 173, 174, 181, 187, 192, 202, 204, 212, 215, 221, 228, 229, 235, 236, 237, 249, 250, 253, 254, 258, 261, 262], "helper": [174, 180, 184, 197, 211, 235, 240], "hen": [13, 25, 185, 222], "here": [1, 23, 171, 178, 180, 183, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 225, 230, 240, 241, 253, 254, 261, 262], "heterogen": 261, "heurist": [196, 210], "hidden": [20, 198, 199], "hide": 237, "high": [2, 4, 12, 16, 28, 171, 184, 191, 192, 193, 195, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 225, 227, 228, 234, 235, 239, 243, 244, 257], "higher": [1, 23, 183, 184, 190, 194, 205, 206, 207, 208, 216, 226, 228, 230, 232, 234, 235, 236, 249, 252, 253, 258, 261], "highest": [13, 25, 185, 222, 228], "highlight": 231, "hingeembeddingloss": 87, "histogram": [8, 21, 179, 186, 202, 215, 218, 252, 257], "histogram_freq": 198, "historgram": [8, 221], "histori": [197, 198, 200, 201], "hold": [158, 159, 160, 175, 223, 237, 254, 258], "home": 246, "honor": [226, 230, 232], "hood": 171, "hook": 252, "hope": [190, 194, 197, 198, 203, 208, 211], "hopefulli": 199, "host": [231, 246, 248, 257], "hostnam": 246, "hotspot": [8, 21, 179, 186, 221, 234], "how": [2, 12, 173, 175, 178, 180, 181, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 229, 230, 232, 235, 237, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 258, 259, 262], "howev": [20, 171, 177, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 226, 230, 232, 239, 245, 249, 252, 255, 257, 261, 262], "html": [8, 21, 168, 172, 179, 186, 189, 202, 215, 218, 219, 221, 245, 246, 247, 257], "htp": 260, "htp_v66": [9, 181, 187, 250, 253], "htp_v68": [9, 181, 187, 250, 253], "htp_v69": [9, 181, 187, 250, 253], "htp_v73": [9, 181, 187, 250, 253], "htp_v75": [9, 181, 187, 250, 253], "htp_v79": [9, 181, 187, 250, 253], "htp_v81": [9, 181, 187, 250, 253], "http": [172, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 231, 238, 245, 246, 247, 257], "hub": [220, 224, 235, 244, 249, 251, 252, 257, 261, 262], "huberloss": 88, "huggingfac": [178, 240, 241], "hx": [79, 80, 96, 97, 123, 124], "hxwx5": 233, "hxwx8": 233, "hyper": [191, 195, 197, 198, 200, 201, 204, 205, 206, 207, 209, 211, 212, 213, 214, 223, 253, 261], "hyperparamet": 253, "i": [1, 2, 4, 7, 8, 9, 12, 13, 17, 20, 21, 22, 23, 24, 25, 28, 29, 30, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "i_": [161, 162, 163, 164, 165], "i_0": [161, 162, 163, 164, 165], "i_d": [161, 162, 163, 164, 165], "iccv": [192, 204, 212, 229], "id": [1, 6, 13, 25, 185, 216, 220, 222, 231, 240, 241, 246], "ideal": [194, 202, 203, 215, 257], "idempot": 160, "ident": [199, 224, 255, 256], "identifi": [170, 173, 189, 218, 221, 226, 233, 234, 235, 246, 247, 249, 252, 257, 258, 261], "ie": 237, "ieee": [166, 229], "ignor": [2, 17, 29, 172, 184, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 226, 230, 232, 235, 250, 262], "ignore_quant_ops_list": [1, 23, 183, 216], "illustr": [203, 205, 206, 207, 216, 226, 228, 230, 231, 232, 233, 252, 261], "ilsvrc": [216, 222, 235, 250], "ilsvrc2012": [190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "imag": [8, 21, 179, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 235, 242, 243, 245, 247, 250, 253], "image_bw": 256, "image_dataset": 221, "image_dataset_from_directori": [194, 195, 200, 201, 203, 216, 222, 223, 230, 235, 250, 253], "image_height": [195, 203], "image_net_config": [190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215], "image_net_data_load": [190, 191, 192, 193, 205, 207, 209, 211, 212, 213, 214, 215], "image_net_dataset": [195, 196, 197, 202, 203, 204], "image_net_evalu": [190, 191, 192, 193, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "image_net_train": [205, 206, 207, 211, 212, 213, 214], "image_rgb": 256, "image_s": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 222, 223, 230, 235, 250, 253], "image_width": [195, 203], "imageclassificationevalu": 242, "imagefold": [208, 210, 250], "imagenet": [189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223, 224, 225, 230, 235, 242, 250, 253], "imagenet_dataset": [210, 216, 222, 223, 250, 253], "imagenet_dir": [200, 201], "imagenetdataload": [190, 191, 192, 193, 202, 205, 207, 209, 211, 212, 213, 214, 215], "imagenetdatapipelin": [190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "imagenetdataset": [195, 196, 197, 202, 203, 204], "imagenetevalu": [190, 191, 192, 193, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "imagenettrain": [205, 206, 207, 211, 212, 213, 214], "images_dir": 211, "images_mean": 208, "images_std": 208, "imagin": 203, "imdb": 198, "img": [194, 230, 235], "img_height": [194, 235], "img_width": [194, 235], "immedi": [192, 196, 204, 210, 212], "impact": [190, 203, 208, 228, 243, 258], "implement": [6, 19, 22, 30, 169, 180, 189, 190, 208, 220, 221, 222, 240, 241, 250, 253, 257, 258, 261, 262], "impli": [190, 208, 235], "import": [1, 11, 20, 22, 23, 30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 175, 177, 178, 180, 181, 183, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257], "impos": 249, "improv": [191, 192, 193, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 224, 227, 229, 234, 236, 238, 247, 249, 253, 257, 258, 259, 262], "in1": 237, "in2": 237, "in_channel": [170, 249], "in_eval_mod": 210, "in_featur": [30, 171, 175], "in_plac": [22, 181, 187, 238, 240, 241, 250, 253], "inc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "includ": [2, 13, 25, 168, 184, 185, 219, 221, 222, 224, 225, 228, 231, 235, 243, 244, 245, 247, 251, 252, 253, 254, 257, 262], "include_top": [194, 195, 203, 204], "incompat": [197, 198, 257], "incorrect": [174, 237, 257], "incorrectli": [257, 262], "increas": [17, 29, 190, 203, 208, 226, 228, 230, 232, 234, 252], "increment": 262, "incur": 221, "independ": [172, 243, 258], "index": [8, 21, 175, 179, 186, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 257], "index_0": [202, 215], "index_1": [202, 215], "index_n": [202, 215], "indic": [17, 29, 109, 110, 111, 174, 175, 180, 181, 196, 203, 208, 210, 226, 227, 230, 232, 233, 237, 250, 251, 253], "indirect": [190, 208, 235], "individu": [8, 21, 179, 186, 221, 228, 244, 254], "induc": 252, "infer": [1, 11, 13, 22, 23, 25, 183, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 224, 227, 230, 235, 237, 238, 242, 243, 249, 250, 252, 253, 257, 262], "inferencesess": [2, 8, 9, 177, 190, 191, 192, 193, 220, 221, 235, 250], "influenc": 252, "info": [15, 173, 194, 224, 257], "inform": [2, 12, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 171, 173, 184, 190, 194, 208, 211, 235, 244, 248, 249, 251, 257], "inherit": [20, 30, 100, 175], "init": [224, 225], "initi": [6, 9, 161, 162, 166, 175, 180, 181, 187, 190, 191, 195, 201, 202, 203, 208, 209, 213, 214, 215, 216, 220, 224, 225, 250], "initial_accuraci": [210, 222], "initializd": 175, "inner": 258, "innov": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "inp_data": 230, "inp_symmetri": [10, 182, 188, 242], "inplac": [166, 173, 224, 225], "input": [2, 6, 7, 8, 9, 10, 12, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 211, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 235, 238, 240, 241, 242, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260], "input1": [46, 62, 105], "input2": [46, 62, 105], "input_": [161, 162, 163, 164, 165], "input_1": [216, 224, 225], "input_batch": 220, "input_channel": [7, 170, 249], "input_data": [190, 191, 192, 193, 208, 209, 211, 212, 213, 214, 215, 222, 250], "input_dim": [20, 198, 199], "input_dlc": 260, "input_id": [238, 240, 241], "input_inst": [6, 19, 169, 220], "input_lay": [20, 199], "input_length": 48, "input_list": 260, "input_nam": [177, 181, 187, 190, 191, 192, 193, 216, 224, 235, 250, 253], "input_network": 260, "input_op_nam": [17, 230], "input_q": 180, "input_qdq": 180, "input_qtzr": 30, "input_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 181, 184, 235, 248, 250, 253], "input_shap": [12, 27, 28, 29, 172, 190, 191, 192, 193, 194, 195, 199, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 216, 221, 224, 225, 226, 230, 232, 235, 237, 250, 255], "input_tensor": [20, 172, 194, 195, 203, 204], "inputlay": [20, 216, 224, 225], "inputs_batch": [190, 191, 192, 193, 208, 209, 211, 212, 213, 214, 215, 250], "insert": [172, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 250, 252, 261], "insid": [20, 24, 30, 172, 175, 198, 199, 217, 230, 237], "insight": [231, 258], "inspect": [198, 229], "instabl": [197, 211], "instal": [189, 200, 201, 204, 210, 212, 213, 214, 231, 243, 257, 261], "instanc": [6, 19, 30, 169, 172, 173, 187, 220, 231, 262], "instancenorm1d": 89, "instancenorm2d": 90, "instancenorm3d": 91, "instanti": [178, 180, 190, 202, 203, 208, 211, 215, 231, 235, 240, 241, 248, 249, 251, 254, 256], "instead": [9, 166, 172, 173, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 230, 233, 249, 250, 251, 255, 256, 257], "instruct": [189, 238, 244, 245, 246, 247, 249, 253, 257, 260, 262], "int": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 21, 22, 23, 24, 25, 26, 29, 59, 60, 61, 109, 110, 111, 161, 162, 163, 164, 165, 166, 170, 171, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 202, 205, 206, 207, 208, 210, 216, 217, 220, 221, 222, 223, 226, 230, 232, 235, 238, 240, 241, 242, 249, 250, 251, 252, 253, 257], "int16": [174, 190, 194, 208, 222, 235, 237, 252, 261, 262], "int32": [177, 240, 241, 251], "int4": [174, 222, 237, 257, 261], "int8": [159, 160, 174, 190, 191, 192, 193, 194, 203, 208, 209, 212, 213, 214, 222, 235, 237, 243, 252, 253, 261, 262], "int_multipli": 30, "intact": 235, "integ": [1, 22, 164, 165, 170, 180, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 221, 235, 240, 243, 249, 250, 251, 253, 261, 262], "integr": [13, 25, 178, 185, 217, 222], "intel": [245, 248], "intellig": 229, "intend": [189, 221, 226, 230, 232, 237, 243, 251], "inter": 218, "interact": [168, 171, 243], "intercept": 252, "interchang": 249, "interest": [8, 179, 186, 221], "interfac": [167, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 245, 257], "intermedi": [2, 6, 12, 19, 25, 169, 176, 181, 184, 185, 187, 190, 194, 208, 218, 220, 222, 235, 238, 243, 250, 253, 257], "intern": [13, 20, 25, 171, 185, 187, 191, 195, 198, 199, 203, 209, 222, 229, 254], "interpol": [12, 190, 208, 228, 235], "interpret": [249, 250, 253], "introduc": [175, 217, 225, 234, 235, 238, 252, 254, 257], "invalid": [172, 249], "invoc": [205, 206, 207], "invok": [1, 8, 9, 21, 175, 179, 181, 186, 187, 203, 216, 221, 229, 231, 250, 253], "involv": [2, 12, 171, 184, 190, 194, 208, 223, 235, 239, 240, 241, 258, 262], "io": [174, 237], "ip": 189, "ipynb": 189, "irrespect": [24, 217], "is_avail": [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 235, 237, 238, 242, 248, 253], "is_bfloat16": 166, "is_float16": 166, "is_initi": [30, 161, 162, 166, 175, 180], "is_input_quant": [197, 254], "is_leaf_modul": 172, "is_output_quant": [197, 254], "is_quant": [197, 254], "is_sym": 251, "is_symmetr": [197, 245, 251, 254], "is_train": [190, 191, 192, 193, 194, 205, 207, 209, 211, 212, 213, 214, 215, 235], "is_unsigned_symmetr": 171, "isinst": [170, 240, 241, 249], "isol": 252, "issu": [20, 173, 218, 220, 223, 231, 237, 257, 258, 262], "item": [166, 199, 202, 215, 235, 238, 240, 241, 250, 253, 260], "iter": [1, 8, 10, 11, 17, 23, 24, 25, 29, 176, 183, 185, 190, 191, 192, 193, 194, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 221, 222, 226, 230, 232, 235, 238, 242, 250], "itertool": [240, 241], "its": [8, 12, 20, 30, 100, 158, 166, 174, 175, 189, 190, 191, 192, 193, 195, 196, 197, 199, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 221, 226, 230, 233, 235, 237, 238, 240, 241, 243, 244, 249, 252, 254, 262], "itself": [202, 211, 215, 220, 229, 230], "j_": [161, 162, 163, 164, 165], "j_0": [161, 162, 163, 164, 165], "j_d": [161, 162, 163, 164, 165], "jaderberg": 229, "jan": 229, "jenkin": 246, "jian": 229, "jianhua": 229, "jit": [240, 241, 256], "job": [197, 198, 200, 201, 205, 206, 207, 211, 213, 214, 260], "join": [191, 195, 200, 201, 203, 208, 209, 210, 216, 224, 225, 226, 230, 232, 235, 250], "jointli": [201, 213, 214], "json": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 197, 202, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "jupyt": [189, 244, 257], "just": [190, 194, 197, 198, 202, 203, 208, 213, 214, 215, 233, 252, 257], "k": [180, 210, 232, 238, 240, 241], "kaim": 229, "kd": 257, "keep": [172, 193, 200, 235, 236, 254, 262], "kei": [166, 174, 191, 192, 193, 195, 199, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 237, 238, 240, 241, 247, 251], "kept": [12, 235, 250, 253, 258], "kera": [11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 189, 194, 195, 196, 200, 201, 202, 203, 204, 216, 220, 221, 222, 223, 224, 225, 230, 235, 244, 250, 253, 255, 257], "keraslayeroutput": [19, 220], "kernel": [30, 203, 226, 230, 232, 249, 257], "kernel_s": [20, 172, 173, 181, 203, 224, 225, 248, 250, 253], "key_dim": [20, 198, 199], "keyring_1": 247, "keyword": [30, 173], "kill": 246, "kl": 243, "kldivloss": 92, "know": [30, 190, 197, 198, 203, 208, 211], "knowledg": [217, 234, 238, 251], "known": [173, 252], "kullback": 243, "kuzmin": 229, "kwarg": [20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 173, 174, 175, 177, 181, 199, 235, 250, 253, 257], "l1": [10, 182, 188, 237, 242], "l1loss": 93, "l2": 237, "lab": [243, 261], "label": [190, 194, 195, 196, 197, 200, 201, 203, 208, 210, 216, 221, 222, 223, 230, 235, 238, 240, 241, 250, 253], "label_dataset": 221, "label_mod": [194, 195, 200, 201, 203, 216, 222, 223, 230, 235, 250, 253], "labeled_data": 222, "labeled_data_load": 222, "lambda": [25, 170, 174, 176, 184, 185, 194, 195, 196, 197, 198, 199, 203, 216, 221, 222, 223, 235, 238, 249, 250, 253, 257], "laptop": [243, 244], "larg": [178, 194, 227, 229, 230, 232, 234, 239, 253, 257, 262], "larger": [230, 232, 249], "last": [12, 235], "lastli": 250, "latenc": [227, 236, 257, 262], "later": [187, 190, 197, 198, 202, 203, 211, 215, 245, 248, 257], "latest": [174, 237, 245, 246, 247, 248, 257], "launch": 189, "layer": [1, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 100, 168, 169, 170, 173, 175, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 194, 198, 205, 206, 207, 216, 217, 219, 222, 223, 224, 226, 227, 230, 231, 232, 233, 236, 238, 240, 241, 242, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262], "layer1": [202, 215], "layer2": [202, 215], "layer_nam": [8, 21, 176, 179, 186, 221, 238], "layer_output_util": [5, 18, 167, 220], "layern": [202, 215], "layernorm": [20, 98, 198, 199, 257], "layernorm1": [20, 199], "layernorm2": [20, 199], "layeroutpututil": [6, 19, 169, 220], "layers_to_exclud": 173, "layout": [160, 172], "lazili": 257, "lceil": [161, 162, 164, 165, 166, 252], "lead": [8, 204, 212, 216, 221, 258], "leaf": [172, 174, 217, 238, 257], "leakyrelu": [99, 257], "learn": [171, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 224, 225, 229, 236, 239, 240, 241, 242, 243, 247, 253, 257, 262], "learnabl": [161, 162, 217, 234, 238], "learnedgrid": 257, "learnedgridquant": 171, "learning_r": [205, 206, 207, 211, 213, 214, 223, 253], "learning_rate_schedul": [205, 206, 207, 211, 213, 214], "learnt": 238, "least": [184, 191, 195, 209], "leav": [216, 241], "left": [161, 162, 163, 164, 165, 166, 180, 190, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 228, 233, 235, 239, 249, 252], "legaci": [245, 257], "leibler": 243, "len": [1, 23, 172, 183, 191, 194, 198, 208, 210, 216, 222, 230, 235, 238, 240, 241, 250, 253], "length": [170, 175, 249, 251], "leq": [161, 162, 163, 164, 165], "less": [194, 208, 226, 228, 235, 236, 243, 249, 252, 254, 261], "lesser": [190, 208], "let": [172, 190, 194, 197, 198, 203, 208, 238, 261], "level": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 171, 172, 174, 176, 179, 180, 182, 183, 184, 185, 186, 187, 188, 191, 193, 194, 195, 198, 200, 201, 205, 206, 207, 209, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 242, 244, 249, 250, 252, 253, 257, 258], "lfloor": [161, 162, 163, 164, 165, 166], "lib": [246, 247], "libjpeg": 247, "liblapack": 245, "libpymo": [171, 245, 257], "libqnnhtp": 260, "libqnnmodeldlc": 260, "librari": [1, 9, 178, 216, 243, 246, 247, 250, 260], "lie": 249, "light": [190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215], "lightweight": 239, "like": [20, 171, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 229, 234, 235, 236, 244, 251, 252, 254, 260, 261], "limit": [190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 238, 257], "limitedbatchdataload": 238, "line": [246, 247, 250, 260], "linear": [1, 3, 11, 14, 15, 23, 27, 30, 100, 170, 171, 172, 173, 175, 178, 183, 216, 223, 224, 225, 226, 234, 249, 257], "linear1": [170, 249], "linear_1": 249, "link": [189, 247], "linux": [245, 247], "list": [1, 2, 3, 6, 9, 12, 13, 14, 15, 17, 19, 20, 23, 25, 27, 28, 29, 59, 60, 61, 109, 110, 111, 164, 165, 166, 169, 170, 172, 173, 174, 175, 179, 182, 183, 184, 185, 186, 188, 190, 194, 197, 199, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 228, 230, 232, 237, 238, 240, 241, 242, 246, 247, 249, 250, 251, 254, 262], "list_of_module_comp_ratio_pair": [17, 29, 226, 230, 232], "listen": 231, "lite": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "liter": [174, 237], "littl": [171, 191, 195, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 229, 262], "llama": [238, 257], "llama3": 238, "llamaforcausallm": 238, "llm": [257, 261], "ln": 247, "load": [22, 24, 172, 173, 187, 190, 191, 192, 193, 198, 216, 217, 222, 223, 224, 225, 226, 229, 230, 232, 235, 238, 240, 241, 242, 243, 250, 253, 257, 260, 261], "load_adapt": [240, 241], "load_checkpoint": 187, "load_data": 198, "load_dataset": [216, 222, 223, 235, 238, 240, 241, 242, 250], "load_encod": [216, 250, 253], "load_encodings_to_sim": [220, 250, 253], "load_model": [190, 191, 192, 193, 216, 220, 224, 225, 235, 250], "load_state_dict": 166, "loader": [1, 2, 8, 10, 23, 25, 26, 174, 182, 183, 184, 185, 188, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 235, 242, 250, 253], "local": [189, 231, 242, 245, 246, 247], "localresponsenorm": 101, "locat": [190, 194, 197, 202, 203, 208, 211, 215, 246, 262], "log": [173, 174, 194, 197, 198, 200, 201, 221, 235, 237], "log_2": 166, "log_dir": [197, 198, 200, 201], "log_fil": [174, 237], "log_input": 122, "log_prob": 48, "logdir": 198, "logger": 173, "logic": [2, 12, 30, 100, 175, 184, 190, 191, 192, 193, 205, 206, 207, 208, 209, 212, 213, 214, 215, 235, 257], "logit": [208, 210, 235, 240, 241, 253], "logsigmoid": 102, "logsoftmax": 103, "long": [238, 240], "longer": [171, 181, 205, 206, 207, 245, 249, 250, 251, 253, 261], "look": [20, 190, 194, 197, 198, 199, 202, 203, 208, 215, 244, 251, 260], "lookup": 199, "lookup_quant": [12, 235], "loop": [172, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 253, 258], "lora": [176, 178, 238, 243, 257], "lora_a": [240, 241], "lora_a_lay": 241, "lora_add_lay": 241, "lora_alpha": 178, "lora_b": [240, 241], "lora_b_lay": 241, "lora_config": 178, "lora_dropout": 178, "lora_mul_lay": 241, "loraconfig": 178, "loralay": [240, 241], "lose": 233, "loss": [1, 8, 10, 11, 21, 23, 158, 179, 182, 183, 186, 188, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 209, 212, 213, 214, 216, 222, 223, 229, 236, 240, 241, 242, 244, 250, 252, 253, 257], "loss_fn": [10, 182, 188, 197, 223, 240, 241, 242, 253], "lost": [252, 262], "low": [171, 180, 203, 205, 207, 212, 229, 234, 239, 243, 250, 251, 257], "lower": [1, 23, 177, 183, 190, 194, 203, 208, 216, 225, 228, 235, 236, 243, 249, 258, 261], "lowest": 226, "lpbq": [170, 249, 251, 257], "lppool1d": 94, "lppool2d": 95, "lr": [223, 253], "lstm": [96, 257], "lstmcell": 97, "lsvrc": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "lt": 245, "lwc": 238, "m": [189, 198, 232, 245, 246, 247, 248], "mac": [17, 29, 190, 205, 206, 207, 208, 226, 227, 229, 230, 232, 234, 235], "machin": [229, 239, 243, 245, 246, 247, 257, 262], "made": [172, 174, 208, 209, 212, 213, 214, 237, 243, 254, 257], "magnitud": 226, "mai": [2, 13, 20, 25, 30, 158, 159, 160, 168, 171, 172, 175, 184, 185, 190, 192, 194, 197, 198, 202, 203, 204, 208, 211, 212, 215, 219, 221, 222, 225, 229, 235, 249, 251, 257, 262], "main": [223, 254], "maintain": [191, 195, 209, 222, 228, 229, 243], "major": [229, 251], "make": [174, 175, 178, 197, 198, 199, 203, 211, 237, 243, 254, 255, 256, 257, 261, 262], "makedir": [190, 191, 194, 195, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "man": 247, "manag": [9, 245, 248, 261], "mandatori": 220, "manditori": 20, "mani": [172, 190, 194, 197, 198, 202, 203, 205, 206, 207, 208, 215, 216, 227, 257], "manner": [13, 25, 185, 222, 225], "mantissa": [166, 170, 249], "mantissa_bit": [166, 170, 249], "manual": [17, 29, 161, 162, 171, 174, 205, 206, 207, 222, 226, 229, 230, 232, 245, 251, 257], "manual_param": [226, 230, 232], "manual_se": 208, "manualmodeparam": [17, 29, 226, 230, 232], "manylinux_2_34_x86_64": [245, 247], "map": [12, 13, 22, 30, 159, 164, 165, 173, 175, 194, 195, 196, 197, 199, 203, 216, 221, 222, 223, 228, 235, 238, 240, 241, 243, 250, 251, 252, 253, 254, 257], "map_loc": 220, "marginrankingloss": 105, "marku": 229, "mask": 30, "maskedadd": 30, "match": [166, 181, 187, 199, 221, 226, 229, 230, 232, 233, 249, 250, 253, 254, 257, 258], "math": [216, 222, 235, 250, 262], "mathemat": [180, 190, 203, 208, 243, 256], "matmul": [7, 257], "matmul_8": 173, "matric": 240, "matrix": 203, "matter": [30, 215], "max": [8, 21, 161, 162, 166, 168, 171, 179, 186, 193, 200, 201, 203, 218, 219, 229, 245, 250, 251, 257, 260, 261], "max_epoch": [205, 206, 207, 211, 213, 214], "max_iter": [238, 240, 241], "maximum": [2, 12, 13, 21, 25, 164, 165, 166, 184, 185, 190, 194, 195, 196, 197, 202, 203, 204, 208, 215, 221, 222, 235, 252], "maxlen": [20, 198, 199], "maxpool1d": 106, "maxpool2d": 107, "maxpool3d": 108, "maxpooling2d": 197, "maxunpool1d": 109, "maxunpool2d": 110, "maxunpool3d": 111, "mdoel": 223, "mean": [26, 175, 190, 194, 197, 198, 199, 202, 203, 205, 206, 207, 208, 210, 211, 212, 215, 216, 218, 222, 223, 235, 250, 252, 254], "meaning": 194, "measur": [2, 8, 12, 21, 29, 179, 184, 186, 190, 205, 206, 207, 208, 221, 226, 230, 232, 235, 243, 262], "mechan": [22, 172, 180, 216, 237, 250, 253], "meet": [13, 25, 184, 185, 190, 194, 208, 222, 227, 228, 235, 262], "member": [10, 242, 254], "memori": [17, 29, 160, 178, 205, 206, 207, 226, 227, 229, 230, 232, 233, 234, 236, 243, 257, 262], "memory_format": 160, "merg": 243, "messag": 194, "met": [2, 12, 184, 190, 194, 208, 235], "meta": 238, "metadata": [176, 238], "metapackag": 189, "method": [6, 13, 19, 22, 24, 25, 30, 100, 160, 169, 171, 172, 174, 175, 181, 184, 185, 187, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 220, 222, 228, 229, 234, 235, 237, 240, 242, 243, 250, 252, 253, 258], "methodologi": 262, "metric": [17, 29, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 221, 222, 223, 226, 230, 232, 235, 242, 250, 252, 253, 262], "mha": [198, 257], "middl": 262, "might": [2, 12, 184, 190, 191, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 221, 235, 247, 251, 257, 258, 262], "migrat": [167, 250, 257], "mimic": 261, "mimick": 171, "min": [8, 21, 161, 162, 168, 171, 179, 186, 193, 200, 201, 203, 218, 219, 245, 251, 257, 260, 261], "min_max": [9, 250, 257], "min_max_rang": [202, 215, 221], "minim": [182, 188, 190, 193, 194, 200, 201, 208, 213, 214, 225, 234, 235, 236, 242, 243, 244, 252], "minima": 242, "minimum": [164, 165, 172, 202, 215, 217, 238, 242, 252, 257], "minmaxencodinganalyz": 166, "minor": [251, 257], "miou": [190, 208], "mish": 112, "mismatch": [180, 203, 218, 220, 250], "miss": [20, 166, 173, 257, 260], "missing_kei": 166, "mix": [2, 12, 13, 25, 174, 184, 185, 189, 222, 255, 257, 262], "mixed_precis": [5, 18, 167, 190, 194, 208, 235, 237], "mixed_precision_algo": [2, 174, 184, 190, 194, 208, 235], "mixed_preision_quant_model": 235, "mixedprecisionconfigur": [174, 237], "mixin": [30, 175], "mkdir": 189, "ml": [193, 198, 200, 201, 213, 214, 229], "mmp": 236, "mmp_log": [174, 237], "mnist": [226, 230, 232], "mnist_after_bn_re_estimation_qat_range_learn": 197, "mnist_torch_model": 226, "mnist_trained_on_gpu": [226, 230, 232], "mnt": 246, "mobil": [243, 244], "mobilenet": [216, 223, 242, 243], "mobilenet_v2": [216, 222, 223, 224, 225, 235, 237, 242, 248, 250, 253], "mobilenet_v2_weight": [216, 224, 225, 235, 242, 250], "mobilenetv2": [216, 222, 223, 224, 225, 248, 250, 253], "mobilenetv2_1": [216, 224, 225], "mode": [9, 13, 17, 22, 25, 29, 172, 181, 185, 187, 205, 206, 207, 222, 226, 230, 232, 250, 254, 257], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 257, 259, 260, 261, 263], "model_after_qat": [198, 200, 201], "model_config": 238, "model_id": [238, 240, 241], "model_input": [173, 197], "model_or_pipelin": [216, 242], "model_output": 197, "model_prepar": [18, 167, 199, 208, 209, 211, 212, 213, 214, 215, 221, 224, 225, 257], "model_prepare_requir": [25, 185, 222], "model_preparer_elementwise_add_exampl": 172, "model_preparer_functional_exampl": 172, "model_preparer_reused_exampl": 172, "model_preparer_subclassed_model_with_functional_lay": 20, "model_preparer_two_subclassed_lay": 20, "model_to_block_map": 217, "model_torch": 220, "model_transform": 172, "model_valid": 167, "model_weights_in_correct_ord": 199, "modelcompressor": [17, 29, 205, 206, 207, 226, 230, 232], "modeling_llama": 238, "modeling_opt": [240, 241], "modelprepar": [20, 172, 199, 208, 209, 212, 213, 214, 215], "modelproto": [1, 3, 4, 6, 8, 9, 10, 216, 220, 221, 224, 225, 242, 250], "modelvalid": 173, "modelwithconsecutivelinearblock": 217, "modelwithelementwiseaddop": 172, "modelwithfunctionallinear": 173, "modelwithfunctionalrelu": 172, "modelwithlinear": 217, "modelwithnontorchfunct": 172, "modelwithoutfunctionallinear": 173, "modelwithoutreusednod": 173, "modelwithreusednod": 173, "modelwithreusedrelu": 172, "modif": [208, 209, 212, 213, 214], "modifi": [22, 24, 172, 181, 187, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 220, 224, 225, 233, 235, 240, 241, 247, 250, 252, 253, 257, 261, 262], "modul": [1, 2, 7, 12, 17, 23, 24, 25, 26, 27, 28, 29, 30, 100, 166, 168, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 233, 235, 237, 238, 240, 241, 242, 248, 249, 250, 253, 255, 256, 257, 262], "module_cl": 30, "module_classes_to_exclud": 172, "module_nam": [240, 241], "module_to_exclud": 172, "modulecompratiopair": [17, 29, 226, 230, 232], "moduledict": [30, 171, 175, 181, 248, 250, 253], "modulelist": [30, 171, 175, 181, 248, 250, 253], "modules_to_exclud": [25, 172, 182, 185, 188, 222, 242], "modules_to_ignor": [17, 29, 179, 186, 205, 206, 207, 221, 226, 230, 232], "momentum": [223, 224, 225], "monitor": 221, "monoton": [17, 29, 226, 228, 230, 232], "more": [1, 17, 22, 23, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 171, 173, 175, 178, 183, 184, 187, 190, 194, 197, 198, 199, 202, 203, 208, 211, 215, 216, 221, 225, 226, 228, 229, 230, 231, 232, 235, 236, 237, 243, 250, 252, 253, 254, 257, 258, 260, 261, 262], "most": [180, 198, 222, 243, 245, 246, 252, 254], "move": [189, 253], "movement": 257, "movi": 198, "mp": [174, 237], "mp_configur": 237, "mse": [8, 10, 21, 171, 179, 182, 186, 188, 221, 252, 257], "mseloss": 104, "much": [205, 206, 207, 233, 262], "mul_scal": 241, "multi": [198, 257], "multigpu": 257, "multiheadattent": [20, 198, 199, 257], "multilabelmarginloss": 113, "multilabelsoftmarginloss": 114, "multimarginloss": 115, "multipl": [17, 25, 27, 28, 29, 160, 169, 172, 173, 174, 175, 178, 181, 185, 187, 202, 215, 220, 222, 224, 225, 226, 229, 230, 232, 237, 247, 249, 250, 252, 253, 257], "multipli": [175, 190, 208, 227, 229, 230, 232, 234], "must": [20, 160, 166, 170, 173, 175, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 216, 217, 221, 222, 223, 227, 233, 238, 242, 249, 250, 254, 261], "mutual": [166, 170, 249], "my_functional_model": 20, "myfunctionalmodel": 20, "n": [8, 13, 21, 179, 180, 186, 221, 222, 232, 249], "nagel": 229, "name": [1, 2, 8, 12, 17, 20, 21, 30, 168, 169, 174, 175, 178, 179, 181, 184, 186, 187, 190, 191, 192, 193, 197, 199, 202, 215, 216, 219, 220, 221, 224, 225, 230, 231, 235, 237, 238, 240, 241, 246, 247, 250, 251, 252, 253, 257, 260], "name_": [8, 21, 179, 186, 202, 215, 221], "name_to_quantizer_dict": [2, 12, 174, 184, 235], "named_modul": [240, 241], "named_paramet": 240, "namedtupl": 166, "namespac": [167, 171, 183, 184, 185, 186, 187, 188], "naming_schem": [169, 220], "namingschem": [169, 220], "nativ": [175, 246], "navig": 189, "na\u00efv": 234, "nconv": 224, "ndarrai": [2, 6, 8, 9, 12, 199, 216, 220, 221, 222, 235, 250], "nearest": [13, 21, 22, 25, 185, 187, 191, 194, 195, 198, 200, 201, 203, 204, 209, 212, 216, 221, 222, 250, 253], "necessari": [158, 159, 160, 181, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 221, 224, 226, 230, 231, 232, 250, 253, 262], "necessarili": [190, 194, 208, 235], "necessit": 245, "need": [1, 8, 17, 19, 20, 21, 22, 23, 24, 29, 169, 174, 179, 183, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 220, 221, 223, 224, 225, 226, 230, 232, 235, 236, 237, 238, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 260, 261, 262], "neg": [148, 149, 164, 165, 190, 197, 198, 203, 208], "negat": [191, 195, 209], "nest": 257, "net": [189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 260], "network": [20, 175, 196, 198, 199, 203, 210, 227, 228, 229, 231, 243, 248, 252, 253, 257, 258], "neural": [190, 196, 203, 208, 210, 227, 229, 243, 252, 253, 258], "neuron": 243, "new": [15, 20, 160, 161, 162, 171, 172, 187, 195, 199, 200, 201, 203, 204, 208, 215, 224, 235, 237, 239, 240, 244, 245, 249, 255, 256, 257], "new_empti": 160, "next": [190, 192, 194, 197, 198, 203, 208, 211, 216, 225, 247, 248, 250, 252, 257, 258], "next_conv_weight": 225, "nfolded_model": 224, "night": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215], "nllloss": 116, "nllloss2d": 117, "nmodel": [224, 225], "nn": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 170, 171, 172, 173, 174, 177, 181, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 230, 232, 235, 237, 240, 241, 242, 248, 249, 250, 253, 256, 257, 262], "nncf": 243, "nnext": 225, "no_grad": [173, 181, 208, 209, 210, 212, 213, 214, 215, 216, 217, 235, 240, 241, 242, 248, 250, 253], "node": [22, 25, 172, 181, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 222, 224, 225, 242, 243, 250, 253, 256, 257, 261, 262], "noffset": 180, "nois": [221, 225, 253, 254, 261], "noisi": [197, 211], "non": [172, 174, 178, 182, 188, 196, 210, 217, 231, 238, 242, 252, 257, 260, 261], "none": [1, 2, 6, 8, 9, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 59, 60, 61, 71, 79, 80, 96, 97, 100, 109, 110, 111, 123, 124, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 231, 232, 235, 237, 242, 245, 246, 247, 248, 249, 250, 253], "norm": [15, 194, 204, 216, 221, 225, 235, 257], "normal": [15, 210, 216, 221, 222, 224, 235, 243, 250, 257], "notabl": 251, "note": [2, 8, 9, 12, 13, 20, 21, 22, 24, 25, 171, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 220, 221, 222, 226, 230, 231, 232, 235, 237, 242, 245, 246, 247, 249, 250, 253], "note1": [190, 208, 211, 215], "note2": [190, 208, 211, 215], "notebook": [191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 257], "noth": [17, 29, 226, 230, 232, 262], "notic": [168, 219, 257], "notimplementederror": 30, "now": [20, 172, 173, 180, 181, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 224, 225, 235, 250, 251, 253, 257], "np": [2, 20, 194, 199, 216, 221, 222, 230, 235, 245, 250], "nprepared_model": [224, 225], "nprev": 225, "nscale": 180, "nullptr": 257, "num": [164, 165], "num_batch": [1, 8, 10, 11, 21, 23, 26, 182, 183, 188, 191, 192, 195, 196, 197, 202, 203, 209, 210, 211, 212, 215, 216, 217, 221, 222, 223, 242, 250], "num_bias_correct_sampl": 212, "num_calibration_sampl": [216, 222, 223, 235, 250, 253], "num_candid": [10, 182, 188, 242], "num_channel": 251, "num_class": 221, "num_comp_ratio_candid": [17, 29, 205, 206, 207, 226, 230, 232], "num_epoch": [223, 257], "num_eval_sampl": [235, 250], "num_head": [20, 198, 199], "num_iter": [24, 176, 194, 217, 230, 235, 238, 257], "num_of_sampl": 222, "num_quant_sampl": 212, "num_reconstruction_sampl": [29, 205, 207, 226], "num_sampl": [2, 174, 184, 196, 197, 208, 210, 216, 217, 221, 235], "num_samples_for_phase_1": [13, 25, 185, 222], "num_samples_for_phase_2": [13, 25, 185, 222], "num_step": [164, 165], "num_word": 198, "num_work": [190, 191, 192, 193, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 222, 223, 242], "number": [1, 2, 8, 10, 11, 13, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 164, 165, 166, 170, 172, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 235, 238, 239, 242, 243, 246, 249, 250, 251, 252, 253, 257, 261, 262], "numer": [169, 220], "numpi": [177, 190, 191, 192, 193, 199, 216, 221, 222, 230, 235, 245, 250], "numpy_help": [224, 225], "nupi": [12, 235], "nvidia": [243, 245, 246, 247, 248], "o": [190, 191, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 224, 225, 226, 230, 232, 235, 245, 250], "object": [1, 2, 7, 8, 9, 10, 12, 13, 22, 24, 25, 30, 158, 159, 160, 166, 168, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 196, 197, 202, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 226, 230, 232, 235, 236, 237, 238, 242, 244, 249, 250, 252, 253, 261, 262], "observ": [9, 30, 166, 175, 181, 203, 211, 221, 229, 250, 252, 253], "obtain": [6, 169, 221, 227, 251, 260], "obvious": [226, 230, 232], "occur": [168, 219, 251], "occurr": [8, 21, 179, 186, 221, 226], "oct": 229, "off": [1, 11, 22, 23, 183, 190, 194, 208, 216, 223, 235, 250, 253, 262], "offer": [8, 179, 186, 196, 210, 218, 221, 222, 245], "offset": [8, 21, 30, 71, 161, 162, 163, 164, 165, 179, 180, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 221, 245, 248, 250, 251, 252, 253, 257, 260, 261], "offset_": [161, 162, 163, 164, 165], "often": [222, 224, 225, 229], "older": [237, 245], "omit": [228, 246, 254], "omniqu": [167, 217, 257], "onc": [30, 160, 173, 180, 193, 198, 200, 201, 205, 206, 207, 212, 213, 214, 226, 229, 237, 253, 255, 256, 257, 260, 261, 262], "one": [9, 23, 25, 27, 172, 173, 174, 180, 181, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 222, 224, 226, 229, 230, 231, 232, 237, 238, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 257, 261], "ones": [238, 248, 252], "ones_lik": [161, 162], "onli": [2, 8, 9, 12, 22, 158, 159, 160, 164, 165, 168, 170, 171, 172, 174, 175, 177, 179, 180, 181, 184, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 229, 230, 231, 233, 235, 237, 239, 240, 241, 242, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262], "onnx": [0, 1, 2, 3, 5, 6, 8, 9, 25, 167, 169, 174, 181, 185, 187, 189, 216, 217, 219, 220, 221, 222, 223, 224, 225, 235, 237, 238, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 260, 261, 262], "onnx_encoding_path": 250, "onnx_export_arg": [25, 169, 181, 185, 187, 220, 222, 250, 253], "onnx_file_nam": 256, "onnx_model": 221, "onnx_output": 177, "onnx_util": 220, "onnxexportapiarg": [25, 169, 181, 185, 187, 220, 222, 250, 253], "onnxmodel": [8, 9, 221, 250], "onnxruntim": [9, 177, 190, 191, 192, 193, 220, 221, 245, 247, 250, 257], "onnxruntime_v": 247, "onnxsim": [190, 191, 192, 193, 216, 220, 221, 224, 225, 235, 250], "onto": 261, "op": [1, 2, 9, 11, 12, 15, 17, 22, 23, 25, 173, 181, 183, 184, 185, 187, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 222, 224, 230, 250, 252, 253, 254, 257, 260], "op_list": [197, 254], "op_typ": [2, 7, 184, 190, 197, 208, 235, 254], "op_type_map": 173, "open": [197, 243], "opencv": 257, "oper": [7, 17, 20, 30, 171, 172, 173, 175, 190, 193, 194, 199, 200, 201, 208, 213, 214, 217, 220, 225, 230, 234, 235, 238, 242, 243, 248, 250, 252, 253, 254, 256, 257, 258, 261, 262], "oppos": [192, 204, 212], "opset": [177, 257], "opset_vers": [177, 181, 187, 250, 253], "opt": [194, 240, 241], "optim": [1, 2, 11, 12, 13, 23, 24, 25, 29, 166, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 229, 231, 235, 238, 240, 241, 242, 243, 244, 247, 250, 252, 253, 257, 261, 262], "optimized_accuraci": [210, 222], "option": [1, 2, 8, 9, 10, 11, 12, 13, 17, 21, 22, 23, 24, 25, 26, 29, 30, 161, 162, 163, 164, 165, 166, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 226, 230, 232, 235, 242, 244, 245, 246, 247, 249, 250, 252, 253, 254, 257, 260], "optlearnedpositionalembed": [240, 241], "optmiz": [190, 208], "orang": 233, "order": [30, 100, 173, 175, 191, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 211, 213, 214, 215, 218, 226, 237, 249, 253, 254, 255, 256, 260, 261], "org": [172, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 238, 245, 246, 247, 257], "org_top1": 235, "organ": [243, 259], "origin": [17, 20, 29, 30, 167, 171, 172, 175, 182, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 220, 221, 226, 227, 228, 230, 231, 232, 234, 235, 242, 243, 252, 257, 262], "original_model": [20, 199], "original_model_weight": 199, "ort": [9, 177, 190, 191, 192, 193, 250], "ort_disable_al": 177, "oscil": 223, "other": [160, 170, 171, 172, 174, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 228, 237, 238, 239, 240, 241, 244, 245, 248, 249, 252, 256, 257, 258, 259], "otherwis": [13, 161, 162, 164, 165, 170, 173, 181, 187, 191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 222, 225, 249, 250, 251, 253, 258, 262], "our": [178, 197, 198, 211], "out": [8, 20, 21, 22, 161, 162, 163, 164, 165, 166, 172, 179, 180, 181, 186, 187, 199, 221, 245, 248, 250, 253, 257], "out1": [20, 199, 237], "out2": 237, "out3": 237, "out_": [161, 162, 163, 164, 165], "out_channel": [170, 249], "out_featur": [30, 171, 175], "outlier": [221, 252], "outlin": [227, 239], "output": [2, 6, 7, 8, 9, 12, 13, 17, 19, 20, 21, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 238, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260], "output_bw": [13, 25, 185, 222], "output_dim": [20, 198, 199], "output_dir": 260, "output_dir_path": 260, "output_dlc": 260, "output_encod": 30, "output_nam": [177, 181, 187, 190, 191, 192, 193, 216, 224, 235, 250, 253], "output_op_nam": [12, 17, 230, 235], "output_path": [176, 238, 260], "output_qtzr": 30, "output_quant": [12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 174, 175, 181, 184, 235, 248, 250, 253], "output_s": [59, 60, 61, 109, 110, 111], "output_shap": 199, "outsid": 254, "over": [8, 20, 25, 164, 165, 175, 180, 185, 221, 222, 226, 228, 229, 230, 232, 234, 235, 252], "overal": [227, 228, 258], "overfit": 242, "overhead": [194, 205, 207, 208, 252], "overlin": [162, 165], "overload": [9, 164, 165, 181, 250, 253], "overrid": [25, 160, 172, 181, 185, 187, 208, 209, 212, 213, 214, 222, 250, 253], "overridden": [30, 175, 254], "overtax": 262, "overview": [171, 259], "overwri": [250, 253], "overwriiten": [250, 253], "overwritten": [171, 241], "own": [221, 222, 261], "p": [190, 208, 246], "p1": 237, "p2": 237, "packag": [167, 189, 247, 248, 257], "pad": [20, 172, 173, 181, 197, 224, 225, 248, 250, 253], "pad_sequ": 198, "page": [227, 244, 245, 246, 247, 248, 249, 252, 262], "pair": [3, 14, 17, 27, 29, 223, 224, 226, 230, 232], "pairwis": 238, "pairwisedist": 119, "parallel": 253, "param": [1, 2, 10, 11, 12, 17, 21, 23, 29, 30, 100, 173, 174, 175, 179, 182, 183, 184, 186, 188, 190, 191, 192, 193, 195, 196, 197, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 221, 224, 225, 226, 230, 232, 235, 236, 237, 240, 242, 249, 251, 257, 261], "param_bitwidth": [216, 250, 251, 253], "param_bw": [13, 25, 185, 222], "param_bw_override_list": [1, 23, 183, 216], "param_encod": [171, 251], "param_nam": [8, 21, 179, 186, 221], "param_name_": [8, 21, 179, 186, 202, 215, 221], "param_quant": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 171, 175, 181, 248, 249, 250, 253], "paramet": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 232, 234, 235, 237, 238, 240, 241, 242, 243, 249, 250, 251, 254, 257, 260, 261, 262], "parameter_quant": [2, 12, 174, 184, 235], "parent": [30, 100, 175, 235, 257], "pareto": [2, 12, 13, 25, 184, 185, 190, 194, 208, 222], "pareto_front": 222, "pareto_front_list": [190, 208, 235], "pars": [23, 181, 183, 187, 216, 250, 253], "part": [8, 20, 21, 179, 186, 221, 229, 249, 250, 261], "partial": [25, 172, 185, 222, 250, 253], "particular": [170, 173, 190, 194, 208, 235, 249, 254], "pass": [1, 2, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 100, 166, 169, 171, 172, 173, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 230, 231, 235, 237, 240, 241, 242, 243, 249, 250, 252, 253, 256, 257, 258, 260, 262], "pass_calibration_data": [190, 191, 192, 193, 195, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 223, 250, 253], "passwd": 246, "past": [189, 257], "patch": 251, "path": [1, 2, 8, 9, 11, 12, 13, 17, 21, 22, 23, 25, 29, 168, 172, 174, 176, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 246, 247, 250, 253, 260], "path_to_imagenet": [235, 250, 253], "pathlik": [250, 253], "pattern": [229, 257], "pb": 260, "pcq": [8, 21, 179, 186, 221], "pcq_quantsim_config": 203, "pdf": [8, 21, 179, 186, 221, 257], "peft": [167, 176, 238, 240, 241, 257], "peft_model": 178, "peft_model_id": [240, 241], "peftmixedmodel": 178, "pend": [24, 217], "pendyam": 229, "per": [7, 8, 17, 21, 29, 169, 170, 175, 179, 186, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 220, 223, 224, 225, 226, 230, 231, 232, 234, 235, 242, 243, 251, 252, 253, 254, 257], "per_block": 251, "per_block_int_scal": 251, "per_channel": 251, "per_channel_quant": [175, 197, 203, 251, 254], "per_layer_mse_loss": [202, 215, 221], "per_layer_quant_dis": [202, 215, 221], "per_layer_quant_en": [202, 215, 221], "per_sample_weight": 71, "per_tensor": 251, "percentag": [191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 243], "perform": [2, 3, 4, 8, 10, 12, 13, 16, 21, 23, 25, 26, 28, 30, 100, 161, 162, 166, 175, 178, 179, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 257, 259, 261, 262], "perform_per_layer_analysis_by_disabling_quant": [8, 221], "perform_per_layer_analysis_by_disabling_quant_wrapp": [21, 179, 186, 221], "perform_per_layer_analysis_by_enabling_quant": [8, 221], "perform_per_layer_analysis_by_enabling_quant_wrapp": [21, 179, 186, 221], "perhap": [190, 197, 202, 203, 208, 211, 215], "period": [1, 11, 23, 183, 216], "persist": 166, "person": 243, "perspect": [190, 203, 208, 217, 238], "phase": [2, 12, 13, 25, 174, 184, 185, 190, 194, 208, 222, 229], "phase1": [2, 12, 184, 190, 208, 235], "phase1_optim": [2, 12, 184, 190, 208, 235], "phase2": 184, "phase2_revers": 184, "phone": [243, 244], "php": [189, 190, 194, 197, 202, 203, 208, 211, 215], "pick": [2, 12, 20, 184, 190, 194, 208, 227, 228, 235], "pickl": [17, 29, 226, 230, 232], "pictur": [191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215], "piec": [20, 172], "pillow": 247, "pin": 257, "pin_memori": [160, 172, 208], "pink": 233, "pinpoint": 221, "pip": [189, 231, 245, 246, 247, 248, 257], "pip3": 247, "pipelin": [25, 185, 198, 200, 201, 220, 222, 252, 257, 258, 261], "pitr": 229, "pixelshuffl": 120, "pixelunshuffl": 121, "place": [2, 4, 12, 22, 23, 24, 28, 181, 183, 184, 187, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 225, 235, 250, 253, 254, 257], "place_model": [240, 241], "placehold": [240, 241], "placement": [190, 191, 192, 193, 205, 206, 207, 208, 209, 212, 213, 214, 215, 257], "plai": 203, "plan": [246, 261], "platform": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 221, 243, 244, 245], "pleas": [167, 171, 173, 178, 181, 187, 190, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 211, 215, 221, 226, 230, 232, 245, 250, 253, 257, 260], "plot": [2, 12, 168, 184, 190, 194, 202, 208, 215, 219, 221, 235], "pmatrix": [161, 162, 163, 164, 165], "point": [2, 8, 12, 20, 21, 30, 158, 159, 170, 171, 179, 184, 186, 187, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 221, 224, 225, 235, 236, 243, 244, 249, 251, 252, 257, 258, 261, 262], "pointer": [194, 197, 198, 202, 203, 215], "poissonnllloss": 122, "pool": [194, 195, 197, 203, 204], "pop": 199, "popul": 251, "popular": 239, "port": [231, 246, 257], "port_id": 246, "portabl": 243, "portion": 20, "pos_emb": [20, 199], "posit": [20, 148, 149, 164, 165, 197, 198, 199], "possibl": [2, 3, 9, 12, 13, 20, 22, 25, 173, 177, 181, 184, 185, 187, 190, 194, 196, 199, 208, 210, 221, 222, 224, 228, 235, 249, 250, 253, 254, 255, 256, 258, 262], "post": [13, 25, 185, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 221, 222, 225, 229, 234, 243, 244, 250, 251, 252, 253, 257, 262], "post1": 247, "post_training_tf": [1, 8, 9, 11, 21, 22, 23, 168, 179, 183, 186, 190, 194, 195, 197, 198, 200, 203, 204, 208, 211, 212, 216, 219, 221, 222, 250, 251, 253, 257], "post_training_tf_enhanc": [1, 8, 11, 13, 21, 22, 23, 25, 179, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 197, 198, 202, 208, 209, 211, 212, 213, 215, 216, 221, 222, 250, 251, 253], "potenti": [197, 211, 231], "power": [236, 243, 251, 257, 258], "pp": 229, "practic": [190, 194, 196, 197, 198, 202, 203, 205, 206, 207, 208, 210, 215, 229], "pre": [189, 217, 218, 220, 221, 224, 226, 229, 234, 238, 242, 245, 253, 257], "preced": [223, 233, 234], "precis": [2, 12, 13, 25, 161, 162, 163, 164, 165, 166, 174, 184, 185, 189, 191, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 209, 211, 212, 213, 214, 215, 222, 243, 251, 257, 258], "precomput": [240, 250], "precursor": 224, "pred": [194, 208, 230, 235], "pred_label": [216, 222, 235, 250], "pred_prob": [216, 222, 235, 250], "predefin": [196, 210], "predict": [12, 194, 202, 220, 221, 230, 235, 243, 250], "prefac": 247, "prefer": [167, 171, 245, 249, 261], "prefix": [1, 11, 22, 23, 175, 181, 183, 187, 216, 250, 253], "prelu": [118, 257], "prepar": [20, 24, 25, 172, 178, 185, 196, 217, 222, 224, 225, 235, 245, 255, 256, 257, 259, 262], "prepare_model": [20, 172, 199, 208, 209, 211, 212, 213, 214, 215, 221, 224, 225], "prepared_model": [172, 221, 224, 225], "prepend": [175, 189], "preprocess": [194, 195, 198, 200, 201, 203, 216, 222, 223, 230, 235, 250, 253], "preprocess_input": [194, 195, 200, 201, 203, 204, 216, 222, 223, 230, 235, 250, 253], "prerequisit": 231, "presenc": 253, "present": [169, 171, 173, 178, 199, 211, 220, 249, 251], "preserv": [166, 172, 216], "preserve_format": 160, "preset": 235, "pretrain": [190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 235, 237, 250, 252, 253], "pretti": [226, 230, 232], "prev": 225, "prev_conv_weight": 225, "prevent": [171, 172, 226, 241, 257], "previou": [2, 12, 17, 29, 180, 184, 190, 194, 208, 212, 226, 227, 230, 232, 235, 243, 245, 246, 258, 260], "primari": 244, "print": [30, 164, 165, 171, 172, 173, 175, 180, 181, 190, 191, 192, 193, 197, 198, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 221, 222, 223, 224, 225, 226, 230, 232, 235, 245, 247, 248, 250, 253], "prior": [2, 12, 184, 190, 194, 208, 209, 212, 213, 214, 235, 251, 257], "privileg": [189, 247], "probabl": 243, "problem": [172, 245, 257, 258, 262], "problemat": [172, 258], "proce": [13, 25, 185, 222, 224, 247, 262], "procedur": [192, 204, 205, 207, 212, 228, 231, 245, 247, 250, 257], "proceed": [190, 191, 192, 193, 216, 224, 225, 235, 250], "process": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 220, 222, 224, 226, 228, 229, 230, 237, 243, 247, 249, 250, 252, 261], "processor": [243, 245, 248], "produc": [13, 25, 158, 159, 168, 172, 185, 190, 202, 203, 208, 215, 218, 219, 221, 222, 228, 235, 243, 251, 252], "product": [227, 243, 244], "profil": [174, 235, 260], "progbar": [195, 200, 201, 203, 204], "progbar_stat_upd": [195, 200, 201, 203, 204], "progress": 231, "project": 243, "prone": [222, 237], "pronounc": 236, "propag": [233, 237, 257], "propagate_encod": [25, 181, 185, 187, 222, 250, 253], "proper": 257, "properli": [161, 162, 220, 257], "properti": [166, 171], "provid": [1, 2, 5, 8, 9, 12, 18, 20, 21, 23, 25, 30, 166, 171, 173, 178, 179, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 224, 227, 228, 229, 230, 231, 235, 237, 240, 242, 243, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262], "proxi": 172, "prune": [29, 189, 206, 227, 228, 230, 232, 233, 234, 243, 257], "pt_model": [190, 191, 192, 193, 216, 224, 225, 235, 250], "pth": [22, 181, 187, 220, 226, 230, 232, 250, 253], "ptq": [13, 25, 185, 196, 210, 217, 221, 222, 225, 229, 234, 238, 243, 252, 253, 257, 261, 262], "public": [167, 250, 257], "publish": 257, "pure": [20, 256], "purpos": [190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 243], "put": [184, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "py38": [245, 246, 247], "pypi": [246, 247], "python": [20, 243, 245, 246, 247, 248, 257], "python3": [189, 245, 246, 247, 248, 257], "pythonpath": [189, 220], "pytorch": [0, 25, 167, 169, 172, 173, 175, 180, 181, 182, 185, 187, 188, 189, 195, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 257, 260, 262], "q": [30, 158, 159, 160, 161, 162, 164, 165, 166, 171, 175, 180, 240, 241, 248, 252], "q_": 252, "q_modul": 171, "q_output": 30, "qadd": 175, "qairt": 260, "qat": [1, 11, 23, 183, 189, 190, 193, 198, 203, 208, 216, 223, 240, 241, 243, 252, 257, 258, 261, 262], "qat2": 257, "qc": 257, "qc_quantize_op": 257, "qcquantizeop": [2, 235], "qcquantizewrapp": [14, 171, 223, 257], "qdo": 243, "qdq": [162, 166, 240, 257, 261, 262], "qlinear": [30, 171, 175], "qmax": [161, 162, 164, 165, 180, 181, 248, 250, 253], "qmin": [161, 162, 164, 165, 180, 181, 248, 250, 253], "qmodul": 171, "qmul": 175, "qmult": 30, "qnn": [203, 204, 236, 257, 260, 261], "qol": 257, "qsim": [24, 197, 217], "qtzr": [180, 240], "quad": [161, 162, 163, 164, 165], "qualcomm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "qualiti": [190, 208], "quant": [1, 2, 8, 9, 13, 21, 22, 23, 25, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 210, 211, 212, 213, 214, 216, 221, 222, 235, 242, 250, 253, 257], "quant_analyz": [5, 18, 167, 171, 202, 215, 221], "quant_analyzer_result": 221, "quant_dequ": 158, "quant_schem": [8, 9, 13, 21, 22, 25, 168, 179, 181, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 238, 242, 245, 248, 250, 251, 253], "quant_sim": [176, 237, 238], "quant_sim_model": [187, 250], "quant_stats_visu": [168, 219], "quant_wrapp": 171, "quantanalyz": [8, 21, 171, 179, 186, 218, 257], "quantiz": [1, 2, 5, 7, 8, 9, 11, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 196, 199, 205, 206, 207, 210, 216, 217, 219, 220, 223, 224, 225, 227, 229, 231, 235, 236, 237, 238, 241, 242, 243, 245, 248, 250, 254, 256, 257], "quantizablemultiheadattent": 257, "quantizaiton": 7, "quantization_overrid": 260, "quantization_tf": 245, "quantizationdatatyp": [2, 9, 12, 13, 22, 25, 171, 174, 181, 184, 185, 187, 190, 194, 208, 222, 235, 250, 253], "quantizationmixin": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 240, 241], "quantizationmod": 245, "quantizationsim": [190, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "quantizationsimmodel": [2, 7, 8, 9, 10, 12, 13, 14, 21, 22, 24, 25, 30, 168, 170, 171, 174, 176, 177, 179, 180, 181, 182, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 235, 237, 238, 240, 242, 248, 249, 250, 251, 252, 253, 254, 257, 260], "quantizationsimmodelv1": 171, "quantizationsimmodelv2": 171, "quantized_": [216, 217, 238, 242], "quantized_callback": [197, 198, 200, 201], "quantized_dlc": 260, "quantized_linear": 30, "quantized_mobilenet_v2": [216, 223, 250, 253], "quantized_mobilenetv2": 253, "quantized_model": [181, 250, 253], "quantized_repr": [30, 158, 159, 160], "quantizedadd": 175, "quantizedconv2d": [171, 175, 181, 248, 249, 250, 253], "quantizedequant": [158, 171, 175, 180, 181, 240, 245, 248, 249, 250, 253], "quantizedlinear": [30, 171, 175, 249], "quantizedmaskedadd": 30, "quantizedmultipli": [30, 175], "quantizedoptlearnedpositionalembed": [240, 241], "quantizedrelu": 171, "quantizedsoftmax": 175, "quantizedtensor": [30, 158, 160, 161, 180], "quantizelinear": 177, "quantizer_arg": 251, "quantizer_config": [12, 235], "quantizer_group": [2, 12, 174, 184, 235], "quantizer_info": [2, 235], "quantizer_nam": [12, 235], "quantizerbas": [30, 175, 180, 241], "quantizergroup": [2, 12, 13, 25, 174, 184, 185, 222, 235], "quantparam": 212, "quantschem": [1, 8, 9, 11, 13, 21, 22, 23, 25, 168, 179, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 235, 238, 242, 248, 250, 253, 257], "quantsim": [1, 5, 6, 8, 11, 18, 19, 21, 23, 167, 168, 169, 171, 174, 178, 179, 183, 186, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 235, 236, 237, 238, 240, 241, 242, 243, 244, 248, 249, 251, 253, 257, 261, 262], "quantsim_config": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "quantsim_layer_output": 220, "quantsim_layer_output_util": 220, "quantsimmodel": [217, 238, 242], "quatiz": 261, "quic": [189, 243, 245, 246, 247], "quick": [180, 199, 203, 205, 207, 245, 250], "quickli": [190, 194, 202, 203, 208, 215, 244, 248], "qwa": 257, "qwen": 238, "qwen2": [238, 257], "r": [2, 8, 12, 21, 178, 179, 184, 186, 203, 221, 235], "radic": 262, "rais": [20, 30, 166, 199, 216, 222, 235, 250], "rand": [173, 208, 209, 211, 212, 213, 214, 215, 217, 220, 221], "randint": 238, "randn": [30, 159, 160, 161, 162, 172, 173, 175, 181, 190, 191, 192, 193, 210, 216, 221, 222, 223, 224, 225, 235, 237, 242, 245, 248, 250, 253], "random": [20, 199, 210, 221, 226, 235, 245, 248], "random_input": [20, 199], "random_split": 250, "randperm": 208, "rang": [8, 20, 21, 164, 165, 168, 172, 179, 180, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 216, 218, 219, 223, 225, 228, 234, 235, 238, 240, 241, 243, 250, 252, 253, 257, 258], "rank": [17, 29, 230, 232, 234, 239], "rank_select": 232, "rank_select_schem": [29, 232], "rankselectschem": [29, 226, 230, 232], "rare": 257, "rate": [20, 197, 198, 199, 200, 201, 205, 206, 207, 211, 213, 214, 229, 253], "rather": [172, 197, 211, 242, 254], "ratio": [17, 29, 205, 206, 207, 226, 227, 230, 232], "raw": [238, 240, 241], "rceil": [164, 165], "re": [2, 12, 180, 182, 184, 188, 189, 190, 199, 208, 235, 242, 257, 262], "re_estimation_dataset": 197, "re_estimation_dataset_s": 197, "reach": [196, 210, 222], "read": 221, "reader": [190, 197, 202, 203, 208, 211, 215], "readi": [22, 180, 181, 187, 190, 191, 192, 193, 194, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 250, 253, 258, 261], "readili": [190, 194, 197, 202, 203, 208, 211, 215], "real": [158, 159, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 231, 235, 248], "realiz": [174, 237], "realli": [190, 197, 202, 203, 211, 215], "reason": [173, 191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 262], "recalcul": [197, 211], "receiv": 172, "recent": [246, 261], "recip": 257, "recogn": [173, 252], "recommend": [1, 2, 8, 9, 20, 23, 177, 180, 183, 190, 191, 192, 193, 194, 195, 196, 199, 203, 209, 210, 216, 217, 221, 223, 224, 225, 227, 235, 238, 245, 246, 248, 249, 250, 258, 261, 262], "recomput": 257, "reconstruct": [1, 11, 23, 183, 205, 207, 216], "record": [8, 21, 179, 186, 221], "recov": [192, 204, 205, 206, 207, 212, 257, 258, 261, 262], "recoveri": 262, "recurr": 257, "recurs": 257, "redefin": 173, "redesign": 257, "reduc": [175, 178, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 223, 225, 229, 233, 234, 236, 243, 249, 252, 257, 258], "reduct": [205, 206, 207, 227, 262], "redund": [224, 229], "reestim": [14, 26, 197, 223], "reestimate_bn_stat": [14, 26, 197, 211, 223], "ref": 247, "refer": [169, 171, 178, 182, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 220, 235, 242, 249, 250, 251, 253, 260], "reflect": [200, 201, 213, 214, 252], "reflectionpad1d": 128, "reflectionpad2d": 129, "reflectionpad3d": 130, "regard": [2, 12, 184, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 235], "regardless": [217, 238], "regist": [30, 166, 190, 217, 240, 241, 257], "regress": 226, "regular": [1, 11, 12, 22, 23, 30, 180, 181, 183, 187, 190, 198, 216, 235, 250, 253], "rel": [12, 17, 29, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 226, 227, 230, 232, 235, 258], "relat": [171, 226, 230, 232, 244, 252], "relationship": 249, "releas": [189, 238, 245, 246, 247], "release_tag": [189, 246, 247], "relev": [205, 206, 207, 236, 261], "reli": [171, 190, 191, 192, 193, 194, 197, 198, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "reload": 212, "relu": [20, 126, 171, 172, 173, 197, 198, 199, 216, 224, 225, 233, 254, 255, 256, 257], "relu1": [20, 173, 256], "relu2": [20, 173, 255, 256], "relu6": [127, 224, 225, 257], "remain": [24, 171, 182, 188, 216, 217, 238, 242, 257], "remov": [14, 25, 26, 172, 185, 199, 222, 223, 224, 226, 233, 241, 243, 246, 250, 251, 252, 253, 257], "remove_all_quant": 241, "remove_column": [238, 240, 241], "reorder": 199, "reorgan": 257, "repeat": [178, 203, 226, 262], "repeatedli": 261, "replac": [171, 172, 175, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 240, 247, 249, 252, 253, 257], "replace_lora_layers_with_quantizable_lay": [178, 240, 241], "replicationpad1d": 131, "replicationpad2d": 132, "replicationpad3d": 133, "repo": [246, 247], "report": [237, 257, 262], "repositori": [189, 246, 247], "repres": [1, 2, 8, 9, 13, 17, 20, 21, 22, 25, 158, 159, 160, 166, 174, 175, 179, 181, 184, 185, 186, 187, 202, 215, 216, 221, 222, 226, 228, 230, 232, 235, 237, 243, 248, 250, 251, 252, 253, 256, 257, 260], "represent": [158, 159, 160, 166, 180, 199, 243, 252, 257, 260], "reqs_deb_common": 247, "reqs_deb_onnx_common": 247, "reqs_deb_onnx_gpu": 247, "reqs_deb_tf_gpu": 247, "reqs_deb_torch_common": 247, "reqs_deb_torch_gpu": 247, "requant": 224, "request": 237, "requir": [2, 17, 20, 29, 30, 169, 171, 172, 178, 180, 181, 187, 190, 191, 194, 199, 202, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 220, 221, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 240, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 261, 262], "requires_grad": [159, 160, 172, 250, 253], "requires_grad_": [171, 240, 241], "rerun": 173, "resblock": 20, "research": 243, "resembl": 20, "resid": [246, 257], "residu": 226, "resiz": [208, 216, 222, 235, 250, 257], "resnet": [181, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 227, 230, 235, 250, 253], "resnet18": [181, 190, 191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 250, 253], "resnet18_after_adaround": 191, "resnet18_after_cle_bc": [209, 210, 212], "resnet18_after_qat": [211, 213, 214], "resnet18_mixed_precis": [190, 208], "resnet50": [194, 195, 196, 200, 201, 202, 203, 204, 221, 230, 235], "resnet50_after_adaround": 195, "resnet50_after_amp": 194, "resnet50_after_cl": 204, "resnet50_pcq_adaround": 203, "resolv": [173, 257], "resort": 258, "resourc": [190, 197, 198, 199, 203, 208, 211, 243, 262], "respecit": [190, 208], "respect": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 175, 180, 182, 188, 200, 201, 221, 234, 235, 242, 255, 257], "respond": [202, 215], "respons": [2, 12, 184, 190, 194, 208, 229, 235, 243, 262], "ressembl": 199, "rest": [195, 200, 201, 203, 204, 257, 258], "restor": [187, 205, 206, 207, 252, 257, 258, 261], "restrict": 249, "resu": 20, "result": [2, 8, 12, 13, 20, 21, 25, 30, 158, 159, 160, 179, 180, 181, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 229, 230, 232, 235, 238, 240, 241, 242, 249, 250, 252, 253, 254], "results_dir": [2, 8, 12, 13, 21, 25, 179, 184, 185, 186, 190, 194, 202, 208, 215, 221, 222, 235], "retain": [235, 243], "retest": 262, "retrain": [243, 256, 261], "retriev": 30, "retrieve_context": 260, "retuern": 235, "return": [1, 2, 3, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 169, 170, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 230, 232, 235, 238, 240, 241, 242, 249, 250, 252, 253, 255, 256], "return_dict": [238, 240, 241], "reus": [172, 173, 190, 208, 255, 256], "reveal": 258, "revert": 258, "review": 198, "revis": 251, "revisit": 227, "rework": 251, "rewrit": 173, "rfloor": [161, 162, 163, 164, 165, 166, 252], "rgb": [216, 222, 235, 250, 256], "rgb_output": 256, "right": [161, 162, 163, 164, 165, 166, 175, 180, 190, 194, 196, 198, 208, 210, 233, 235, 249, 252], "rm": 246, "rmsnorm": 257, "rmsnormal": 257, "rnn": [123, 257], "rnncell": 124, "ro": 246, "robust": [177, 242, 257, 261], "root": [208, 210, 246, 247, 257], "rough": [190, 208], "roughli": [25, 174, 184, 185, 222, 235], "round": [1, 11, 13, 17, 21, 22, 23, 25, 29, 183, 185, 187, 189, 203, 221, 222, 230, 232, 243, 250, 252, 253, 257], "round_mod": 212, "round_nearest": 245, "rounding_mod": [9, 13, 21, 22, 25, 181, 185, 187, 194, 195, 198, 200, 201, 203, 204, 221, 222, 250, 253, 257], "roundingmod": 245, "routin": [190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 250], "rrelu": 125, "rtype": [12, 20, 158, 159, 160, 174, 184, 235], "rule": [22, 235, 237, 249, 250, 253, 254, 261], "run": [2, 8, 9, 12, 13, 17, 20, 21, 22, 24, 25, 26, 29, 161, 162, 171, 172, 173, 174, 175, 177, 179, 180, 181, 184, 185, 186, 187, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 226, 229, 230, 231, 232, 235, 236, 237, 243, 244, 246, 247, 249, 250, 251, 252, 253, 257, 260, 261, 262], "run_forward_pass": [9, 181, 250, 253], "run_infer": [13, 25, 185, 210, 222], "runnabl": 261, "runtim": [22, 30, 180, 181, 187, 190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 220, 221, 224, 226, 227, 229, 230, 232, 235, 243, 244, 246, 249, 250, 251, 253, 257, 259, 260, 261, 262], "runtimeerror": [166, 181, 250, 253], "s2": 217, "s3": 217, "s_1": 249, "s_2": 249, "s_n": 249, "safe": 160, "safetensor": [176, 238], "sai": [172, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 227, 235, 237], "sake": [192, 212, 220], "same": [8, 20, 21, 25, 30, 100, 158, 159, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 220, 221, 222, 225, 234, 237, 239, 249, 250, 253, 254], "sampl": [1, 2, 8, 13, 21, 22, 24, 25, 168, 174, 175, 179, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 225, 226, 230, 235, 238, 240, 241, 242, 248, 250, 252, 253, 257], "sampled_dataset": [196, 197, 202], "sandeep": 229, "saniti": 180, "satisfactori": [216, 217, 223, 238, 242, 258, 262], "satisfi": [172, 174, 191, 196, 210, 222, 237, 249], "saurabh": 229, "save": [1, 2, 6, 8, 9, 11, 12, 13, 17, 19, 21, 22, 23, 25, 29, 168, 169, 176, 179, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 230, 232, 235, 238, 242, 250, 252, 253, 260, 261], "save_checkpoint": 187, "save_dir": [19, 220], "save_path": [168, 219], "saved_eval_scores_dict": [17, 29, 226, 230, 232], "saw": 203, "scalar": [8, 13, 21, 179, 186, 221, 222, 257], "scale": [14, 30, 159, 160, 161, 162, 163, 164, 165, 166, 176, 180, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 221, 223, 225, 234, 238, 243, 245, 248, 249, 250, 251, 252, 253, 257, 260, 261], "scale_": [161, 162, 163, 164, 165, 180], "scenario": [191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 209, 212, 213, 214, 215, 233], "scene": 261, "schedul": [205, 206, 207, 211, 213, 214, 253], "schema": 257, "scheme": [1, 8, 9, 11, 13, 17, 21, 22, 23, 25, 29, 169, 179, 181, 183, 185, 186, 187, 190, 194, 197, 198, 202, 205, 206, 207, 208, 211, 215, 216, 220, 221, 222, 226, 229, 230, 232, 243, 250, 253, 257], "scope": 172, "score": [2, 8, 12, 13, 17, 21, 25, 29, 179, 184, 185, 186, 190, 191, 192, 193, 194, 196, 197, 210, 211, 221, 222, 226, 228, 229, 230, 231, 232, 235], "script": [211, 246, 247], "sdk": [190, 203, 208, 244, 261], "search": [2, 10, 12, 13, 25, 182, 184, 185, 188, 190, 197, 198, 200, 201, 205, 206, 207, 208, 211, 213, 214, 222, 234, 235, 242, 253, 254, 257, 261], "searcher": 229, "sec": [190, 194, 203, 208, 235], "second": [9, 13, 20, 23, 175, 178, 181, 182, 183, 188, 202, 215, 216, 222, 224, 225, 235, 242, 249, 250, 253], "section": [2, 173, 184, 190, 197, 208, 210, 235, 240, 241, 246, 247, 249, 252, 254, 259, 262], "see": [17, 20, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 226, 229, 230, 231, 232, 244, 245, 248, 249, 250, 252, 254, 257, 258, 262], "seed": 226, "seem": 229, "seen": [202, 215, 221], "select": [13, 17, 25, 29, 185, 190, 194, 208, 221, 222, 227, 230, 231, 232, 233, 240, 241, 243, 245, 246, 247, 252, 254, 260], "select_param": [29, 232], "self": [13, 20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 172, 173, 191, 199, 210, 216, 222, 235, 238, 250, 255, 256], "selu": 134, "sens": 175, "sensit": [2, 8, 12, 21, 179, 184, 186, 190, 192, 194, 204, 208, 212, 218, 223, 228, 234, 236, 252, 257, 261, 262], "sentiment": 198, "separ": [1, 11, 20, 22, 23, 171, 172, 173, 181, 183, 187, 194, 216, 221, 223, 250, 253, 257, 258], "separableconv2d": 257, "seq": 242, "seq_length": [238, 240, 241], "seq_ms": [5, 167, 171, 242], "seqms": [234, 242, 257], "seqmseparam": [10, 182, 188, 242], "sequanti": 199, "sequenc": [9, 181, 196, 198, 210, 216, 222, 234, 250, 253, 254], "sequenti": [10, 20, 171, 182, 188, 197, 198, 199, 224, 225, 248, 254, 255, 257, 258], "sequential_ms": [10, 242], "sequentialms": [10, 242], "seri": [25, 174, 181, 185, 187, 196, 210, 222, 237, 250, 253, 260], "serial": 260, "serializetostr": [190, 191, 192, 193, 220], "serv": [175, 216, 221, 222, 231], "servic": 237, "sess": [9, 177, 190, 191, 192, 193, 230, 250], "sess_opt": 177, "session": [9, 17, 190, 191, 192, 193, 216, 220, 221, 230, 235, 250], "sessionopt": 177, "set": [1, 2, 7, 8, 11, 12, 13, 17, 20, 21, 25, 29, 30, 166, 168, 170, 171, 172, 173, 174, 175, 177, 179, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 226, 227, 228, 229, 230, 232, 235, 236, 239, 240, 241, 243, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 261, 262], "set_activation_quantizers_to_float": [170, 249], "set_adapt": 178, "set_adaround_param": [13, 25, 185, 196, 210, 222], "set_and_freeze_param_encod": [191, 195, 203, 209, 216], "set_blockwise_quantization_for_weight": [170, 249], "set_default_kernel": 30, "set_export_param": [25, 185, 222], "set_extra_st": 166, "set_grouped_blockwise_quantization_for_weight": [5, 170, 249], "set_kernel": 30, "set_mixed_precision_param": [13, 25, 185, 222], "set_model_input_precis": [174, 237], "set_model_output_precis": [174, 237], "set_model_preparer_param": [25, 185, 222], "set_precis": [174, 237], "set_quant": 257, "set_quant_scheme_candid": [13, 25, 185, 222], "set_quantizers_to_candid": [2, 12, 174, 184, 235], "set_rang": [158, 159], "set_transform": [216, 222, 235, 250], "set_verbos": [194, 235], "settabl": 252, "setup": [171, 224, 235, 245, 248], "sever": [173, 175, 221, 227, 242, 255, 256, 257], "sgd": [223, 250, 253], "sh": [246, 247], "shall": 251, "shape": [12, 20, 27, 28, 29, 158, 159, 160, 161, 162, 166, 170, 171, 172, 173, 175, 180, 181, 190, 191, 192, 193, 197, 198, 199, 203, 208, 209, 211, 212, 213, 214, 215, 216, 221, 224, 225, 226, 230, 232, 235, 240, 248, 249, 250, 253, 255], "share": [173, 175], "sharp": 229, "sharpli": [205, 206, 207, 262], "shell": 246, "shift": [204, 212], "shift_label": [240, 241], "shift_logit": [240, 241], "should": [1, 8, 12, 17, 20, 21, 22, 24, 29, 30, 100, 160, 167, 169, 171, 172, 175, 179, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 226, 227, 230, 232, 235, 242, 245, 248, 249, 250, 251, 253, 255, 256, 260, 262], "shouldn": 180, "show": [173, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 225, 228, 249, 258], "showcas": [202, 215], "shown": [171, 178, 202, 215, 221, 222, 233, 245, 246, 248, 256, 258], "shuffl": [194, 195, 200, 201, 203, 216, 217, 222, 223, 226, 230, 235, 238, 250, 253], "side": 233, "sigmoid": [20, 136, 172], "sign": [164, 165, 171, 180, 252], "signatur": [9, 17, 29, 30, 164, 165, 181, 191, 205, 206, 207, 221, 222, 226, 230, 232, 250, 253], "signific": [216, 258], "significantli": 257, "silu": 135, "sim": [1, 2, 7, 8, 9, 10, 12, 14, 21, 22, 24, 168, 170, 171, 174, 177, 178, 179, 181, 182, 184, 186, 187, 188, 194, 197, 198, 203, 210, 216, 217, 219, 221, 222, 223, 235, 237, 238, 241, 242, 248, 249, 250, 251, 253], "sim1": 171, "sim2": 171, "sim_model": [195, 200, 201, 202, 203, 204, 209, 211, 212, 213, 214, 215], "simd": 247, "similar": [178, 180, 225, 243, 245, 248, 249, 252], "similarli": [190, 194, 202, 203, 208, 211, 215, 258, 262], "simpl": [172, 194, 197, 198, 202, 203, 215, 221, 226, 230, 232], "simpler": 171, "simpli": [1, 8, 21, 22, 172, 179, 186, 187, 190, 194, 197, 198, 203, 208, 211, 216, 221, 250, 253], "simplic": [178, 220], "simplif": [225, 250], "simplifi": [1, 2, 8, 9, 171, 216, 220, 221, 224, 225, 235, 250, 260], "simuat": [191, 192, 195, 200, 201, 203, 204, 209, 212, 213, 214], "simul": [9, 22, 166, 170, 175, 178, 181, 187, 189, 197, 198, 205, 206, 207, 215, 216, 217, 218, 219, 220, 223, 224, 235, 236, 238, 242, 243, 249, 250, 251, 253, 254, 256, 257, 262], "sinc": [181, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 227, 235, 242, 249, 250, 252, 253], "singl": [2, 6, 13, 19, 25, 169, 172, 174, 184, 185, 202, 203, 215, 220, 221, 222, 226, 228, 229, 230, 232, 235, 249, 251, 252, 257], "singular": [206, 207, 229, 230, 232], "situat": 221, "six": 254, "size": [7, 8, 20, 160, 161, 162, 163, 164, 165, 170, 173, 175, 180, 191, 195, 196, 197, 198, 199, 203, 209, 216, 217, 221, 230, 232, 235, 236, 238, 243, 249, 250, 251, 261, 262], "skew": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214], "skip": [1, 23, 25, 182, 183, 185, 188, 192, 204, 212, 216, 222, 223, 226, 240, 242, 246, 250, 253], "skipped_optim": 224, "slight": 203, "slightli": [190, 208, 239], "slim": 257, "slow": 229, "small": [9, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 223, 239, 242, 250, 253], "smaller": [1, 2, 12, 23, 183, 184, 190, 203, 208, 216, 229, 230, 232, 235, 258, 261], "smoothl1loss": 137, "snapdragon": [190, 203, 208], "snippet": [172, 190, 208, 248, 249], "snpe": [203, 204, 257], "so": [1, 8, 9, 22, 23, 24, 171, 172, 173, 175, 181, 183, 187, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 221, 224, 225, 226, 228, 230, 232, 240, 241, 243, 247, 250, 253, 260, 262], "softmarginloss": 138, "softmax": [20, 139, 175, 198, 199, 208], "softmax2d": 140, "softmin": 141, "softplu": [142, 172], "softshrink": 143, "softsign": 144, "softwar": [243, 244, 257], "sole": 221, "solut": [194, 208, 228, 235, 253, 258], "some": [17, 20, 29, 171, 172, 175, 180, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 225, 226, 228, 230, 232, 233, 235, 240, 241, 252, 258, 261, 262], "someth": [1, 22, 187, 216, 221, 229, 250, 253], "sometim": [190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 208, 209, 212, 213, 214, 221, 226, 229, 262], "somewher": 262, "soon": 222, "sort": [24, 199, 217], "sourc": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 216, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 242, 243, 246, 247, 249, 250, 253, 258], "space": [29, 226, 230, 232, 235, 252], "spars": 257, "sparse_categorical_crossentropi": 198, "spatial": [17, 29, 189, 226, 227, 228, 232, 234, 257], "spatial_svd": [29, 206, 207, 226, 230, 232], "spatial_svd_auto_mod": 230, "spatial_svd_manual_mod": 230, "spatialsvdparamet": [17, 29, 206, 207, 226, 230, 232], "spconv": 257, "special": [25, 172, 185, 222, 243], "specif": [8, 17, 20, 22, 25, 29, 30, 170, 173, 175, 179, 181, 185, 186, 187, 190, 191, 194, 195, 197, 199, 203, 208, 209, 211, 221, 222, 226, 230, 232, 239, 249, 250, 252, 253, 254, 257, 260, 262], "specifi": [1, 2, 8, 13, 17, 21, 22, 23, 29, 161, 162, 163, 164, 165, 166, 174, 179, 181, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 235, 237, 246, 249, 250, 251, 253, 254], "speed": [17, 29, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 224, 226, 229, 230, 232, 253, 257], "speedup": [182, 188, 190, 203, 208, 242], "split": [182, 188, 216, 222, 223, 235, 238, 240, 241, 242, 249, 250, 252, 253], "sqnr": [2, 10, 13, 25, 174, 182, 184, 185, 188, 190, 194, 208, 222, 235, 242, 252], "sqrt": 172, "squar": [218, 252], "squeez": [197, 208], "ssvd": 227, "ssvd_comp_stat": 207, "ssvd_compressed_model": 207, "ssvd_cp_compressed_model": 207, "ssvd_cp_finetuned_model": 207, "ssvd_finetuned_model": 207, "stabl": [172, 177, 197, 211, 216], "stack": [216, 235, 250], "stand": 257, "standalon": [216, 257], "standard": [12, 166, 172, 175, 193, 198, 200, 201, 213, 214, 235, 243], "start": [1, 2, 11, 12, 20, 23, 164, 165, 172, 173, 178, 183, 184, 189, 190, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 213, 214, 215, 216, 227, 235, 245, 250, 252, 254, 262], "start_beta": [1, 11, 23, 183, 216], "start_i": [194, 235], "start_x": [194, 235], "starting_op_nam": [12, 235], "stat": [8, 26, 168, 219, 221, 223, 226, 230, 232], "statatist": 211, "state": [166, 182, 188, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 235, 242], "state_dict": 166, "stateless": 256, "statement": 172, "static": [12, 17, 20, 29, 172, 173, 226, 230, 232, 235], "static_patch_count": 20, "staticgridperchannelquant": 171, "staticgridquant": 171, "staticgridquantwrapp": 171, "staticmethod": [172, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215], "statist": [8, 9, 17, 21, 26, 29, 161, 162, 166, 168, 175, 179, 181, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 218, 219, 223, 226, 230, 232, 234, 250, 253], "std": [208, 210, 216, 222, 235, 250], "step": [8, 10, 12, 21, 164, 165, 172, 174, 178, 179, 182, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 202, 203, 208, 211, 215, 226, 227, 228, 229, 236, 237, 239, 240, 241, 245, 246, 247, 248, 252, 258, 259, 260, 261], "still": [167, 171, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 245, 249, 255, 258, 262], "stochast": [21, 22, 187, 221, 250, 253], "stop": [1, 11, 23, 183, 216, 222], "stopiter": [216, 222, 235, 250], "storag": [249, 252], "store": [1, 11, 22, 23, 159, 174, 181, 183, 187, 190, 194, 208, 216, 236, 237, 249, 250, 253], "str": [1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 19, 21, 22, 23, 25, 166, 168, 169, 172, 174, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 194, 199, 216, 219, 220, 221, 222, 230, 235, 237, 238, 242, 250, 253, 256], "str_idx": 222, "straightforward": 262, "strategi": 262, "stream": [216, 222, 223, 242], "strict": [7, 166, 174, 237, 250, 252, 253, 254], "strict_symmetr": [197, 245, 254], "strict_valid": [13, 25, 185, 222], "strictli": 166, "stride": [160, 172, 173, 181, 224, 225, 248, 250, 253], "strike": 229, "string": [9, 22, 174, 181, 187, 237, 246, 250, 251, 253, 254], "strongli": [20, 172, 180, 191, 195, 203, 209], "structur": [25, 172, 175, 185, 202, 207, 215, 222, 229, 237, 243], "style": 203, "sub": [202, 215], "subbackward0": 180, "subclass": [20, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 180, 197, 198, 250, 255, 257], "subdirectori": [190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "subfold": [190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "sublay": 173, "submit": 260, "submodul": [20, 256], "subpackag": [30, 257], "subsequ": [158, 190, 192, 203, 204, 208, 216, 224, 225, 243, 254, 257], "subset": [8, 9, 21, 179, 181, 186, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 223, 233, 237, 249, 250, 253], "subsetrandomsampl": 210, "subsidiari": 244, "substanti": 251, "substep": 246, "substitut": 250, "success": [196, 210], "successfulli": [181, 220, 250, 253], "sudo": [189, 247], "suffic": [191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214], "suffici": [221, 250, 252, 253, 261], "suffix": 246, "suggest": [22, 187, 205, 207, 228, 229, 250, 253, 262], "suit": [196, 210, 222, 240, 243], "suitabl": 243, "sum": [194, 208, 210, 216, 222, 230, 235, 250, 253], "summari": [198, 216, 224, 225, 229, 257], "sun": 229, "super": [20, 30, 172, 173, 199, 216, 222, 235, 250, 257], "supergroup": [197, 252, 257], "suppli": 249, "support": [1, 2, 8, 9, 11, 12, 20, 21, 22, 23, 29, 30, 172, 173, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 190, 194, 197, 198, 199, 208, 211, 213, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 229, 230, 232, 234, 235, 238, 242, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 262], "supported_kernel": [2, 184, 190, 208, 235], "supported_kernel_op": [174, 184, 235], "suppos": [2, 12, 184, 190, 194, 208, 235], "svd": [17, 29, 189, 226, 227, 228, 234, 257], "switch": 249, "symbol": [20, 172], "symbolic_trac": [25, 172, 185, 222], "symfp": [10, 182, 188, 242], "symmetr": [30, 158, 159, 160, 161, 162, 170, 171, 175, 180, 181, 199, 240, 248, 249, 250, 251, 252, 253, 254, 257], "symmetri": [9, 10, 171, 182, 188, 242, 250], "symqt": [10, 182, 188, 242], "sync": 253, "syntax": 251, "systemat": 243, "t": [2, 9, 12, 25, 30, 172, 180, 181, 182, 184, 185, 188, 190, 194, 197, 198, 202, 203, 208, 211, 215, 221, 222, 235, 238, 240, 241, 242, 246, 250, 253, 254, 261], "tabl": [168, 189, 219, 231, 246, 251], "tag": [189, 246, 247], "take": [2, 9, 12, 13, 24, 25, 29, 30, 170, 173, 174, 177, 178, 180, 181, 184, 185, 190, 194, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 211, 215, 216, 217, 222, 223, 226, 228, 229, 230, 232, 233, 235, 237, 238, 249, 250, 253, 257, 258, 261], "taken": [20, 24, 217, 233], "tanh": 145, "tanhshrink": 146, "tap": [21, 179, 186, 221], "tar": [29, 232], "target": [9, 17, 20, 22, 29, 41, 42, 48, 62, 64, 81, 87, 88, 92, 93, 104, 105, 113, 114, 115, 116, 117, 122, 137, 138, 178, 181, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 220, 222, 224, 226, 227, 228, 229, 230, 232, 235, 238, 242, 243, 250, 251, 252, 253, 257, 258, 262], "target_comp_ratio": [17, 29, 205, 206, 207, 226, 230, 232], "target_data": [190, 191, 192, 193, 208, 209, 211, 212, 213, 214, 215], "target_length": 48, "target_modul": 178, "task": [190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 231, 243, 251], "taxonomi": 229, "tbd": [219, 242], "teach": 189, "techiqu": 212, "techniqu": [13, 25, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 217, 221, 222, 224, 225, 226, 227, 230, 232, 235, 236, 238, 239, 240, 243, 244, 249, 252, 253, 257, 258, 261, 262], "technologi": [243, 244], "tell": 203, "tempfil": 257, "temporari": [216, 224, 225, 235, 250], "temporarili": [171, 241], "tend": 216, "tensor": [2, 12, 13, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 190, 192, 199, 202, 203, 204, 208, 212, 213, 214, 215, 216, 217, 220, 221, 222, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258], "tensor_nam": 251, "tensor_quant": 171, "tensorboard": [197, 198, 200, 201], "tensorflow": [0, 18, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 230, 235, 238, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 257, 260, 261, 262], "tensorquant": [12, 235], "tensorquantizationsimforpython": 245, "term": [181, 230, 232, 243, 244, 249, 250, 253], "termin": 189, "test": [8, 21, 179, 186, 197, 198, 199, 221, 238, 240, 241, 247, 261, 262], "test_dataload": [238, 240, 241], "test_dataset": [238, 240, 241], "text": [20, 161, 162, 163, 164, 165, 199, 238, 240, 241], "textclassif": 199, "tf": [2, 8, 11, 14, 16, 17, 20, 21, 179, 186, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 211, 215, 216, 220, 221, 222, 223, 225, 230, 235, 246, 250, 255, 257], "tf_cpp_min_log_level": [194, 196, 197, 200, 201, 235], "tf_dataset": [195, 203, 204], "tf_enhanc": [22, 190, 194, 197, 198, 208, 211, 250, 253], "tfencod": 171, "tflite": [190, 203, 208], "tfoplambda": [20, 199, 257], "than": [1, 17, 23, 29, 171, 172, 173, 183, 184, 187, 190, 191, 195, 197, 198, 208, 209, 211, 216, 226, 227, 230, 232, 235, 237, 242, 249, 253, 254, 257, 261], "thei": [172, 173, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 231, 235, 239, 240, 241, 249, 252, 255, 258, 261], "them": [13, 20, 22, 25, 166, 171, 172, 173, 175, 185, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 229, 237, 243, 250, 253], "theme": 257, "thereaft": 235, "therebi": [190, 208, 236], "therefor": [2, 12, 184, 190, 194, 197, 198, 199, 208, 224, 227, 235], "theta_": [161, 162], "thi": [1, 2, 6, 8, 9, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 29, 30, 100, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "thing": [191, 192, 193, 195, 196, 203, 204, 205, 206, 207, 209, 212, 213, 214, 260], "those": [8, 179, 186, 199, 221, 237, 240, 254, 261], "though": [30, 180, 190, 194, 197, 198, 203, 208, 236, 249, 254, 262], "three": [172, 190, 205, 206, 207, 208, 227, 261], "threshold": [147, 168, 219, 222], "through": [2, 9, 20, 21, 160, 171, 172, 174, 175, 179, 184, 186, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 216, 221, 225, 235, 237, 240, 241, 250, 252, 253, 262], "throughout": [24, 217, 243, 254], "throw": [30, 180, 181, 250, 253], "thrown": [250, 253, 257], "thu": [158, 159, 160], "tijmen": 229, "till": [2, 12, 184, 190, 194, 208, 235], "time": [17, 29, 160, 172, 173, 178, 194, 196, 202, 210, 212, 215, 216, 221, 222, 226, 229, 230, 231, 232, 235, 237, 249, 253, 257, 261], "tmp": [8, 13, 21, 25, 179, 185, 186, 197, 202, 215, 216, 221, 222, 223, 224, 225, 235, 250, 253], "tmpdir": 178, "to_arrai": [224, 225], "to_list": [2, 12, 174, 184, 235], "todo": [174, 237], "togeth": [203, 235], "toi": 221, "token": [20, 198, 199, 238, 240, 241, 258], "token_and_position_embed": 199, "token_emb": [20, 199], "tokenandpositionembed": [20, 199], "tokenized_dummy_text": [240, 241], "toler": [196, 210, 222, 227], "tolist": 208, "too": [205, 207, 249], "tool": [21, 179, 186, 199, 221, 225, 233, 236, 243, 249, 257, 259, 260, 262], "toolkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "top": [1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 29, 170, 174, 176, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 230, 231, 232, 235, 237, 238, 242, 249, 250, 253], "top1": [194, 210, 230, 235], "top1_accuraci": 208, "top5": 194, "topk": [208, 210], "torch": [13, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 187, 189, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 253, 256, 257, 262], "torch_stabl": [245, 246, 247], "torchscript": [25, 169, 181, 185, 187, 220, 222, 243, 250, 253], "torchvis": [181, 190, 191, 192, 193, 195, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 235, 237, 242, 248, 250, 253], "total": [194, 199, 228, 230, 235, 240, 241, 250, 252], "total_length": [238, 240, 241], "total_sampl": [216, 235, 250], "totensor": [208, 210, 216, 222, 235, 250], "touch": 20, "toward": 258, "tpu": 243, "tqdm": [208, 210, 235, 240, 241, 250, 253], "trace": [20, 25, 168, 172, 185, 219, 222, 256], "traceabl": [172, 240, 241, 256], "traceback": 172, "traceerror": 172, "tracer": 172, "track": [202, 215, 221], "track_running_stat": [224, 225], "trade": [1, 11, 23, 183, 190, 194, 208, 216, 235], "tradeoff": [190, 194, 208, 235, 243, 262], "train": [8, 9, 13, 14, 17, 20, 21, 25, 26, 29, 176, 179, 181, 185, 186, 189, 190, 194, 199, 208, 210, 216, 217, 218, 220, 221, 222, 223, 225, 226, 229, 230, 232, 234, 235, 238, 239, 242, 243, 244, 250, 252, 257, 258, 262], "train_dataload": [181, 238, 240, 241, 250, 253], "train_dataset": [197, 238, 240, 241], "train_dataset_s": 197, "train_flag": [29, 226, 230, 232], "train_load": [211, 226], "train_model": [29, 226, 230, 232], "train_one_epoch": [240, 241], "trainabl": [201, 214, 217, 238, 239, 240, 241], "trainer": [17, 29, 189, 205, 206, 207, 211, 213, 214, 226, 230, 232], "training_range_learning_with_tf_init": [181, 197, 201, 211, 214, 217, 223, 238, 242, 248, 250, 253], "trainingmod": [190, 193], "transact": 229, "transform": [20, 172, 199, 208, 209, 210, 212, 213, 214, 215, 216, 222, 235, 238, 240, 241, 249, 250, 257], "transformer_block": [20, 199], "transformerblock": [20, 199], "transit": 235, "translat": 203, "transpos": 180, "trap": 242, "travers": 237, "tri": [205, 206, 207, 229], "tripletmarginloss": 148, "tripletmarginwithdistanceloss": 149, "triumph": 237, "true": [1, 2, 9, 12, 13, 17, 22, 25, 29, 30, 159, 160, 161, 162, 166, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 187, 190, 191, 192, 193, 194, 195, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 245, 248, 249, 250, 251, 253, 254], "true_quant": [240, 241], "truli": 172, "trust_remote_cod": 238, "try": [17, 29, 190, 191, 192, 193, 194, 203, 205, 206, 207, 208, 216, 222, 224, 225, 226, 227, 229, 230, 232, 235, 250, 258, 261], "tune": [17, 22, 29, 178, 187, 191, 192, 193, 195, 196, 198, 200, 201, 204, 209, 210, 212, 213, 214, 226, 227, 230, 232, 244, 250, 253, 261, 262], "tuner": 240, "tupl": [1, 2, 3, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 97, 161, 162, 163, 164, 165, 169, 170, 173, 174, 179, 180, 181, 183, 184, 185, 186, 187, 190, 194, 202, 208, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 249, 250, 253, 256], "turn": [254, 257], "tweak": 178, "twice": [20, 178], "two": [12, 20, 24, 29, 171, 172, 173, 174, 184, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 221, 228, 229, 230, 232, 235, 237, 243, 249, 252, 253, 260, 261], "txt": [174, 237, 247, 260], "type": [1, 2, 3, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 25, 26, 27, 29, 30, 158, 159, 160, 161, 162, 166, 168, 170, 171, 172, 173, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 194, 196, 197, 199, 202, 205, 206, 207, 208, 210, 213, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 235, 242, 243, 246, 248, 249, 250, 253, 254, 257, 260, 261], "typeerror": 172, "typic": [20, 30, 175, 190, 191, 195, 196, 197, 198, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 227, 243, 249, 252, 261, 262], "u": [198, 203, 246], "ubuntu": [245, 246, 248], "ubuntu22": 257, "ubuntu2204": 247, "uint16": 251, "uint32": 251, "uint8": [158, 251], "unaccept": 262, "unchang": [182, 188, 242, 250, 253], "uncompress": 227, "under": [2, 9, 12, 168, 171, 184, 190, 208, 219, 221, 223, 235, 254, 258], "undergo": 243, "underli": [30, 180, 258], "understand": [171, 180, 190, 194, 197, 198, 199, 202, 203, 208, 211, 215], "undo": [14, 26, 223], "uneven": 258, "unexpect": 166, "unexpected_kei": 166, "unflatten": 150, "unfold": 151, "unid": [13, 25, 185, 222], "uniniti": [24, 216, 217, 238, 242], "uninstal": 247, "unintuit": [13, 25, 185, 222], "union": [6, 7, 8, 9, 15, 17, 19, 20, 22, 23, 25, 27, 28, 29, 169, 170, 173, 174, 179, 181, 183, 184, 185, 186, 187, 216, 220, 221, 222, 224, 225, 226, 230, 232, 237, 249, 250, 253], "uniqu": [203, 246], "unit": 243, "unknown": 227, "unlabel": [8, 13, 25, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 221, 222, 235, 250], "unlabeled_data": 222, "unlabeled_data_load": [216, 221, 222, 235], "unlabeled_dataset": [21, 196, 197, 202, 216, 221, 222, 223], "unlabeled_dataset_iter": [8, 221], "unlabeled_imagenet_data_load": 210, "unlabeled_imagenet_dataset": 210, "unlabeleddatasetwrapp": [196, 210], "unlabelled_data_load": 222, "unless": [13, 25, 30, 181, 185, 187, 222, 233, 246, 250, 253, 262], "unlik": [166, 177, 211, 224], "unmodifi": [228, 239], "unnecessari": [190, 203, 208, 224, 233, 257], "unrol": [172, 257], "unsign": [252, 254], "unsigned_symmetr": [197, 245, 254], "unsigned_zero": 166, "unsimplifi": [190, 191, 192, 193, 216, 224, 225, 235, 250], "unsqueez": [240, 241], "until": [13, 25, 161, 162, 181, 185, 196, 210, 222, 223, 250, 253], "untouch": [250, 253], "unus": 246, "unwrap": 199, "up": [1, 11, 17, 20, 22, 23, 29, 174, 177, 183, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 223, 226, 229, 230, 232, 233, 235, 237, 243, 250, 253, 254, 257, 261], "updat": [24, 166, 176, 189, 191, 193, 195, 199, 200, 201, 203, 204, 209, 210, 212, 213, 214, 217, 223, 231, 238, 241, 247, 250, 251, 252, 253, 257], "update_lora_weight": [176, 238], "updatestat": 245, "upgrad": [167, 247, 257], "upon": [14, 26, 30, 175, 223, 257, 260], "upsampl": 152, "upsamplingbilinear2d": 153, "upsamplingnearest2d": 154, "upstream": [226, 233], "upto": [190, 197, 202, 203, 208, 211, 215, 235], "url": [17, 29, 189, 226, 230, 231, 232, 246, 247], "us": [1, 2, 6, 7, 8, 9, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 25, 26, 29, 30, 158, 159, 161, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "usabl": 251, "usag": [24, 173, 178, 180, 217, 238, 243, 251, 257, 260], "use_all_amp_candid": [2, 184, 190, 208, 235], "use_cach": [238, 240, 241], "use_cuda": [1, 9, 17, 29, 194, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 220, 226, 230, 232, 245, 250, 257], "use_embedded_encod": [181, 187, 250, 253], "use_fast": 238, "use_monotonic_fit": [17, 29, 226, 230, 232], "use_strict_symmetr": 171, "use_symmetric_encod": [9, 171, 250, 257], "user": [1, 2, 9, 12, 13, 14, 17, 20, 22, 23, 24, 25, 29, 30, 167, 171, 172, 174, 180, 181, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 226, 229, 230, 232, 235, 237, 245, 246, 247, 250, 251, 253, 255, 256, 257], "user_onnx_lib": [1, 9, 216, 250], "userflow": [182, 188, 242], "usr": [246, 247], "usual": [223, 229, 252, 253, 262], "util": [6, 8, 20, 171, 173, 179, 186, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 235, 237, 240, 241, 242, 248, 249, 250, 253, 257], "v": [1, 2, 11, 12, 23, 183, 184, 190, 194, 202, 208, 215, 216, 235, 246, 249, 252, 262], "v1": [171, 194, 208, 209, 210, 211, 212, 213, 214, 215, 220, 235, 238, 240, 241, 245, 257], "v2": [30, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 174, 181, 217, 219, 237, 240, 241, 249, 250, 253, 257], "val": [190, 191, 192, 193, 200, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "val_dataset": 202, "val_transform": 210, "valid": [2, 8, 12, 21, 173, 179, 184, 186, 190, 194, 197, 198, 200, 201, 202, 203, 208, 210, 211, 215, 216, 221, 222, 226, 230, 232, 235, 242, 249, 250, 251, 257], "validate_example_model": 173, "validate_for_missing_modul": 173, "validate_for_reused_modul": 173, "validate_model": 173, "validation_check": 173, "validation_d": [194, 230, 235], "validation_data": [197, 198, 200, 201], "valu": [1, 2, 8, 9, 12, 13, 17, 21, 22, 23, 29, 30, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 174, 179, 181, 183, 184, 186, 187, 190, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 235, 237, 238, 243, 245, 248, 249, 250, 251, 252, 253, 254, 257], "value_qtzr": 30, "vanilla": 198, "var": [26, 81, 223], "vari": [2, 12, 184, 227, 235], "variabl": [17, 20, 29, 161, 162, 172, 189, 226, 228, 230, 232, 246, 247], "varianc": [197, 211, 225], "variant": [243, 245, 247, 248, 257], "variant_str": 246, "varieti": 225, "varint": 246, "variou": [2, 17, 29, 174, 184, 196, 202, 210, 215, 226, 229, 230, 232, 234, 235, 246, 252, 257, 258], "vector": [191, 195, 203, 209, 257], "vedaldi": 229, "venic": 229, "ver": 257, "verbos": 194, "veri": [24, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 209, 210, 212, 213, 214, 215, 217, 221, 227, 229, 235], "verifi": [20, 172, 209, 212, 213, 214], "versa": [190, 194, 208, 228, 235, 252, 258], "version": [30, 100, 168, 171, 172, 175, 181, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 240, 241, 243, 246, 247, 248, 250, 252, 253, 257, 262], "via": [20, 25, 185, 222, 227, 243, 245, 252, 257, 260], "vice": [190, 194, 208, 228, 235, 252, 258], "view": [168, 173, 180, 218, 219, 231, 235, 240, 241, 244, 245], "view_a": 210, "viewabl": 189, "vision": 229, "visit": 247, "visual": [17, 29, 198, 202, 215, 221, 226, 229, 230, 232, 235, 246, 257], "visualization_tool": [167, 219], "visualization_url": [17, 29, 226, 230, 232], "visualize_stat": [168, 219], "visualizecompress": 231, "vocab_s": [20, 198, 199, 238, 240, 241], "vol": 229, "volum": 233, "w": [2, 8, 12, 21, 179, 184, 186, 197, 221, 222, 232, 233, 235, 246, 250, 257], "w16a16": 257, "w4a16": 257, "w4a8": [222, 257, 261, 262], "w4fp16": 257, "w8a16": [222, 250, 261, 262], "w8a8": [222, 253, 261, 262], "wa": [17, 29, 158, 180, 190, 191, 194, 195, 197, 198, 199, 203, 205, 207, 208, 209, 211, 220, 226, 229, 230, 232, 235, 237, 251, 257], "wai": [171, 180, 182, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 215, 220, 242, 250, 261], "want": [2, 6, 12, 22, 30, 169, 172, 184, 187, 190, 194, 197, 198, 202, 203, 208, 215, 220, 235, 240, 241, 245, 246, 247, 250, 253, 262], "warm": [1, 11, 23, 183, 216], "warn": [24, 173, 217, 238], "we": [1, 2, 6, 12, 20, 169, 171, 172, 173, 175, 178, 180, 184, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 207, 208, 209, 210, 211, 215, 216, 220, 224, 225, 227, 229, 230, 235, 236, 238, 240, 241, 246, 249, 250, 258, 261, 262], "websit": [227, 244], "websocket": 231, "weight": [1, 2, 3, 7, 8, 11, 12, 20, 21, 23, 24, 27, 29, 30, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 186, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 227, 230, 234, 235, 237, 238, 239, 241, 242, 243, 248, 249, 250, 252, 253, 254, 257, 261, 262], "weight_bw": 212, "weight_decai": 223, "weight_info": 199, "weight_nam": 199, "weight_q": 180, "weight_qdq": 180, "weight_svd": [29, 226, 230, 232], "weight_svd_auto_mod": 232, "weight_svd_manual_mod": 232, "weights_in_correct_ord": 199, "weights_pdf": [202, 215, 221], "weightsvdparamet": [29, 226, 230, 232], "well": [158, 173, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 216, 221, 229, 235], "were": [196, 203, 210, 220, 227, 233, 250, 251, 254, 257], "weren": 172, "wget": 247, "what": [199, 231, 261], "whatev": 246, "wheel": [246, 247], "wheel_file_nam": [246, 247], "when": [2, 8, 9, 12, 17, 20, 21, 22, 25, 29, 30, 166, 172, 175, 179, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 242, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "whenev": [177, 256], "where": [1, 2, 11, 12, 13, 17, 22, 23, 29, 161, 162, 163, 164, 165, 166, 172, 180, 181, 183, 184, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 226, 228, 230, 231, 232, 233, 235, 243, 246, 247, 250, 251, 252, 253, 256, 257, 260], "wherea": [180, 184, 190, 208], "wherein": [6, 169, 220], "whether": [24, 25, 166, 172, 173, 174, 185, 190, 191, 192, 193, 195, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 220, 222, 228, 237, 250, 253], "which": [1, 2, 6, 7, 11, 12, 13, 17, 19, 20, 23, 25, 29, 30, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 178, 180, 183, 184, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 243, 245, 249, 250, 251, 252, 254, 257, 260, 261], "while": [7, 17, 29, 166, 175, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 226, 228, 230, 232, 239, 251, 252, 257, 258, 261, 262], "whl": [245, 246, 247], "who": 251, "whole": [13, 196, 197, 222, 249, 252], "whose": [168, 169, 170, 172, 219, 220, 249, 254, 260], "why": [190, 203, 208, 258], "wide": [224, 225, 243], "width": [8, 21, 179, 186, 190, 191, 192, 193, 203, 208, 209, 211, 212, 213, 214, 215, 221, 224, 225, 230, 232, 233, 234, 236, 249, 251, 252, 258, 261, 262], "wikitext": [238, 240, 241], "wildcard": 180, "wise": [8, 21, 179, 182, 186, 188, 221, 223, 242, 243, 257, 258], "wiseconv2d": [216, 225], "wish": [216, 224, 225, 235, 237, 250], "within": [30, 158, 159, 160, 175, 198, 221, 227, 243, 246, 252, 257, 261], "without": [13, 22, 25, 158, 160, 166, 168, 178, 181, 185, 187, 191, 195, 196, 198, 200, 201, 203, 204, 209, 210, 212, 213, 214, 219, 222, 233, 242, 246, 250, 253, 261, 262], "won": [25, 172, 182, 185, 188, 222, 242, 254], "word": [160, 198], "work": [12, 22, 171, 173, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 225, 229, 235, 239, 249, 250, 253, 257, 262], "workaround": 172, "workflow": [227, 234, 239, 260, 261], "workspac": [189, 246], "world": 248, "wors": 229, "worth": 180, "would": [20, 171, 174, 190, 194, 197, 202, 203, 208, 211, 215, 230, 237, 240, 254, 257], "wq": 257, "wrap": [30, 171, 172, 198, 202, 215], "wrap_linear": 171, "wrapped_module_nam": [21, 179, 186, 221], "wrapper": [21, 179, 186, 194, 198, 208, 209, 212, 213, 214, 221, 226, 230, 232, 235, 257], "write": [174, 191, 192, 193, 195, 200, 201, 204, 209, 212, 213, 214, 237, 249, 250, 253], "written": [9, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 250, 253], "wrong": 257, "wrt": [12, 235], "wsl2": 257, "www": 189, "x": [20, 158, 159, 160, 166, 167, 172, 173, 175, 177, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 227, 230, 235, 245, 248, 250, 251, 252, 253, 255, 256, 257], "x1": [63, 119, 172], "x2": [63, 119, 172, 255, 256], "x86": [245, 247, 248], "x86_64": [245, 247], "x_": 252, "x_c": 166, "x_dq": 159, "x_q": [159, 160], "x_qdq": 158, "x_train": 198, "x_val": 198, "xarg": 247, "xiangyu": 229, "xx": 251, "y": [172, 194, 195, 202, 203, 215, 216, 221, 222, 223, 235, 247, 250, 253], "y_train": 198, "y_val": 198, "y_zero_point": 257, "ybelkada": [240, 241], "ye": [229, 247], "yet": [177, 190, 194, 197, 198, 203, 208, 217, 238], "yield": [2, 8, 13, 23, 25, 26, 174, 182, 183, 184, 185, 188, 197, 211, 216, 221, 222, 223, 227, 235, 242, 252, 253, 258], "yihui": 229, "you": [8, 17, 25, 29, 30, 167, 171, 172, 179, 180, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 237, 238, 240, 242, 245, 246, 247, 249, 250, 252, 253, 254, 257, 258, 260, 261, 262], "your": [8, 25, 30, 167, 171, 172, 173, 179, 185, 186, 189, 190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 220, 221, 222, 223, 227, 229, 231, 234, 240, 245, 247, 250, 252, 253, 261, 262], "your_imagenet_validation_data_path": [216, 222, 223, 250, 253], "yy": 251, "zero": [1, 11, 23, 183, 216, 248, 252, 257], "zero_grad": [223, 240, 241, 253], "zeropad1d": 155, "zeropad2d": 156, "zeropad3d": 157, "zhang": 229, "zip": [194, 221, 230, 235], "zisserman": 229, "zlib": 257, "zou": 229, "zz": 251, "\u00aa": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00b2": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00b3": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00b5": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00b9": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00ba": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00bc": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00bd": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u00be": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u03c9": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u210e": 230, "\u215b": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u215c": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u215d": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\u215e": [220, 224, 235, 244, 249, 251, 252, 257, 260, 261, 262], "\ud835\udc58": [230, 232], "\ud835\udc5a": 230, "\ud835\udc5b": 230, "\ud835\udc64": 230}, "titles": ["AIMET API", "aimet_onnx.adaround", "aimet_onnx.mixed_precision", "aimet_onnx.batch_norm_fold", "aimet_onnx.cross_layer_equalization", "aimet_onnx API", "aimet_onnx.layer_output_utils", "aimet_onnx.quantsim.set_grouped_blockwise_quantization_for_weights", "aimet_onnx.quant_analyzer", "aimet_onnx.quantsim", "aimet_onnx.seq_mse", "aimet_tensorflow.adaround", "aimet_tensorflow.mixed_precision", "aimet_tensorflow.auto_quant_v2", "aimet_tensorflow.keras.bn_reestimation", "aimet_tensorflow.batch_norm_fold", "aimet_tensorflow.cross_layer_equalization", "aimet_tensorflow.compress", "aimet_tensorflow API", "aimet_tensorflow.layer_output_utils", "aimet_tensorflow.model_preparer", "aimet_tensorflow.quant_analyzer", "aimet_tensorflow.quantsim", "aimet_torch.adaround", "aimet_torch.experimental.adascale", "aimet_torch.auto_quant", "aimet_torch.bn_reestimation", "aimet_torch.batch_norm_fold", "aimet_torch.cross_layer_equalization", "aimet_torch.compress", "QuantizationMixin", "QuantizedAdaptiveAvgPool1d", "QuantizedAdaptiveAvgPool2d", "QuantizedAdaptiveAvgPool3d", "QuantizedAdaptiveMaxPool1d", "QuantizedAdaptiveMaxPool2d", "QuantizedAdaptiveMaxPool3d", "QuantizedAlphaDropout", "QuantizedAvgPool1d", "QuantizedAvgPool2d", "QuantizedAvgPool3d", "QuantizedBCELoss", "QuantizedBCEWithLogitsLoss", "QuantizedBatchNorm1d", "QuantizedBatchNorm2d", "QuantizedBatchNorm3d", "QuantizedBilinear", "QuantizedCELU", "QuantizedCTCLoss", "QuantizedChannelShuffle", "QuantizedCircularPad1d", "QuantizedCircularPad2d", "QuantizedCircularPad3d", "QuantizedConstantPad1d", "QuantizedConstantPad2d", "QuantizedConstantPad3d", "QuantizedConv1d", "QuantizedConv2d", "QuantizedConv3d", "QuantizedConvTranspose1d", "QuantizedConvTranspose2d", "QuantizedConvTranspose3d", "QuantizedCosineEmbeddingLoss", "QuantizedCosineSimilarity", "QuantizedCrossEntropyLoss", "QuantizedDropout", "QuantizedDropout1d", "QuantizedDropout2d", "QuantizedDropout3d", "QuantizedELU", "QuantizedEmbedding", "QuantizedEmbeddingBag", "QuantizedFeatureAlphaDropout", "QuantizedFlatten", "QuantizedFold", "QuantizedFractionalMaxPool2d", "QuantizedFractionalMaxPool3d", "QuantizedGELU", "QuantizedGLU", "QuantizedGRU", "QuantizedGRUCell", "QuantizedGaussianNLLLoss", "QuantizedGroupNorm", "QuantizedHardshrink", "QuantizedHardsigmoid", "QuantizedHardswish", "QuantizedHardtanh", "QuantizedHingeEmbeddingLoss", "QuantizedHuberLoss", "QuantizedInstanceNorm1d", "QuantizedInstanceNorm2d", "QuantizedInstanceNorm3d", "QuantizedKLDivLoss", "QuantizedL1Loss", "QuantizedLPPool1d", "QuantizedLPPool2d", "QuantizedLSTM", "QuantizedLSTMCell", "QuantizedLayerNorm", "QuantizedLeakyReLU", "QuantizedLinear", "QuantizedLocalResponseNorm", "QuantizedLogSigmoid", "QuantizedLogSoftmax", "QuantizedMSELoss", "QuantizedMarginRankingLoss", "QuantizedMaxPool1d", "QuantizedMaxPool2d", "QuantizedMaxPool3d", "QuantizedMaxUnpool1d", "QuantizedMaxUnpool2d", "QuantizedMaxUnpool3d", "QuantizedMish", "QuantizedMultiLabelMarginLoss", "QuantizedMultiLabelSoftMarginLoss", "QuantizedMultiMarginLoss", "QuantizedNLLLoss", "QuantizedNLLLoss2d", "QuantizedPReLU", "QuantizedPairwiseDistance", "QuantizedPixelShuffle", "QuantizedPixelUnshuffle", "QuantizedPoissonNLLLoss", "QuantizedRNN", "QuantizedRNNCell", "QuantizedRReLU", "QuantizedReLU", "QuantizedReLU6", "QuantizedReflectionPad1d", "QuantizedReflectionPad2d", "QuantizedReflectionPad3d", "QuantizedReplicationPad1d", "QuantizedReplicationPad2d", "QuantizedReplicationPad3d", "QuantizedSELU", "QuantizedSiLU", "QuantizedSigmoid", "QuantizedSmoothL1Loss", "QuantizedSoftMarginLoss", "QuantizedSoftmax", "QuantizedSoftmax2d", "QuantizedSoftmin", "QuantizedSoftplus", "QuantizedSoftshrink", "QuantizedSoftsign", "QuantizedTanh", "QuantizedTanhshrink", "QuantizedThreshold", "QuantizedTripletMarginLoss", "QuantizedTripletMarginWithDistanceLoss", "QuantizedUnflatten", "QuantizedUnfold", "QuantizedUpsample", "QuantizedUpsamplingBilinear2d", "QuantizedUpsamplingNearest2d", "QuantizedZeroPad1d", "QuantizedZeroPad2d", "QuantizedZeroPad3d", "DequantizedTensor", "QuantizedTensor", "QuantizedTensorBase", "Quantize", "QuantizeDequantize", "dequantize", "quantize", "quantize_dequantize", "FloatQuantizeDequantize", "aimet_torch API", "aimet_torch.visualization_tools", "aimet_torch.layer_output_utils", "aimet_torch.quantsim.config_utils", "Migration guide", "aimet_torch.model_preparer", "aimet_torch.model_validator", "aimet_torch.mixed_precision", "aimet_torch.nn", "aimet_torch.experimental.omniquant", "aimet_torch.onnx.export (beta)", "aimet_torch.peft", "aimet_torch.quant_analyzer", "aimet_torch.quantization", "aimet_torch.quantsim", "aimet_torch.seq_mse", "aimet_torch.v1.adaround", "aimet_torch.v1.mixed_precision", "aimet_torch.v1.auto_quant", "aimet_torch.v1.quant_analyzer", "aimet_torch.v1.quantsim", "aimet_torch.v1.seq_mse", "Examples", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "Cross-Layer Equalization", "Quantization simulation", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Quantization-Aware Training with a Keras Transformer Model", "Keras Model Preparer", "Quantization-aware training", "Quantization-Aware training with range learning", "Quant Analyzer", "Quantsim and Adaround - Per Channel Quantization (PCQ)", "Cross-Layer Equalization with QuantSim", "Model compression using channel pruning", "Model compression using spatial SVD", "Model compression using spatial SVD and channel pruning", "Automatic Mixed-Precision (AMP)", "Adaptive Rounding (AdaRound)", "AutoQuant", "Quantization-Aware Training with BatchNorm Re-estimation", "Cross-Layer Equalization and Bias Correction", "Quantization-aware training", "Quantization-aware training with range learning", "Quant Analyzer", "Adaptive rounding", "AdaScale", "Analysis tools", "Interactive visualization", "Layer output generation", "Quantization analyzer", "Automatic quantization", "Batch norm re-estimation", "Batch norm folding", "Cross-layer equalization", "Channel pruning", "Compression features Guidebook", "Greedy compression ratio selection", "Compression", "Spatial SVD", "AIMET visualization", "Weight SVD", "Winnowing", "Optimization techniques", "Automatic mixed precision", "Mixed precision", "Manual mixed precision", "OmniQuant", "Quantized LoRa", "QW-LoRa", "QWA-LoRa", "Sequential MSE", "Glossary", "AIMET Documentation", "Installation", "AIMET installation in Docker", "AIMET manual installation and setup", "Quick Start (PyTorch)", "Per-block quantization", "Calibration", "Encoding Format Specification", "Quantization simulation guide", "Quantization-aware training", "Runtime configuration", "TensorFlow model guidelines", "PyTorch model guidelines", "Release notes", "Quantization debugging guidelines", "Quantization user guide", "On-target inference", "AIMET features", "Quantization workflow", "AIMET documentation versions"], "titleterms": {"0": [194, 251, 257], "1": [171, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 235, 238, 242, 250, 251, 253, 254, 257, 258, 262], "13": 257, "16": 257, "17": 257, "18": 257, "19": 257, "2": [171, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 235, 238, 242, 250, 251, 253, 254, 257, 258, 262], "20": 257, "21": 257, "22": 257, "23": 257, "24": 257, "25": 257, "26": 257, "27": 257, "28": 257, "29": 257, "3": [189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 235, 238, 242, 250, 251, 253, 254, 257, 258, 262], "30": 257, "31": 257, "32": 257, "33": 257, "34": 257, "35": 257, "4": [190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 216, 217, 220, 221, 222, 223, 235, 238, 242, 250, 253, 254, 257, 258, 262], "5": [196, 197, 211, 217, 221, 222, 238, 242, 250, 253, 254, 257, 258], "6": [221, 222, 251, 257, 258], "7": [222, 257, 258], "8": 258, "For": [191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214], "On": [259, 260], "accuraci": [190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 261, 262], "activ": [221, 258], "adapt": [191, 195, 209, 216, 234], "adaround": [1, 11, 23, 183, 191, 195, 203, 209], "adascal": [24, 217, 234], "affin": [171, 180], "ai": 260, "aimet": [0, 231, 244, 246, 247, 248, 252, 259, 261, 263], "aimet_onnx": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "aimet_tensorflow": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "aimet_torch": [0, 23, 24, 25, 26, 27, 28, 29, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "algorithm": [190, 194, 208, 235], "also": 252, "altern": 245, "amp": [190, 194, 208], "an": [190, 191, 192, 193, 246], "analysi": [202, 215, 218, 221, 234, 235, 258], "analyz": [202, 215, 218, 221], "api": [0, 5, 18, 20, 167, 172, 173, 175, 178, 180, 190, 194, 208, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 242, 244, 249, 250, 253, 261], "appli": [191, 192, 195, 196, 202, 203, 204, 209, 212, 215, 237], "arg": 251, "auto_qu": [25, 185], "auto_quant_v2": 13, "automat": [190, 194, 208, 222, 234, 235, 236], "autoqu": [196, 210], "awar": [197, 198, 200, 201, 211, 213, 214, 253, 261], "base": [237, 240], "baselin": [190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214], "batch": [190, 191, 192, 193, 195, 200, 201, 203, 204, 208, 209, 212, 213, 214, 223, 224, 234], "batch_norm_fold": [3, 15, 27], "batchnorm": [197, 211], "bc": 212, "beta": 177, "between": 199, "bia": 212, "bit": 235, "block": [180, 249], "blockwis": 249, "bn_reestim": [14, 26], "bokeh": 231, "brows": 189, "build": [245, 246], "calibr": [221, 241, 250, 253], "call": [190, 194, 208, 252], "callback": [190, 197, 208, 221, 241, 250], "case": [229, 235], "channel": [180, 203, 205, 207, 226, 229], "check": 258, "choos": [245, 246], "cle": [192, 204, 212], "code": [20, 171, 172, 189, 226, 230, 232, 235], "compil": 260, "complementari": 216, "compress": [17, 29, 205, 206, 207, 226, 227, 228, 229, 230, 231, 232, 234], "comput": [175, 190, 194, 208, 250, 253], "confid": 258, "config_util": 170, "configur": [175, 252, 254], "constant": [196, 197, 210], "contain": 246, "context": [216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242], "convers": 260, "convert": [190, 191, 192, 193, 199, 235], "correct": 212, "cp": 229, "creat": [190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 221, 235, 241, 250], "cross": [192, 204, 212, 225, 234], "cross_layer_equ": [4, 16, 28], "data": 251, "dataset": [190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "debug": [258, 259], "default": 254, "defin": [190, 196, 197, 208, 210], "definit": 22, "deploi": 262, "deploy": 261, "dequant": 163, "dequantizedtensor": 158, "descript": 221, "design": 231, "determin": [191, 192, 193, 195, 196, 200, 201, 203, 204, 209, 212, 213, 214, 252], "dictionari": 251, "differ": 199, "direct": 260, "disabl": [202, 215], "discuss": 199, "docker": [245, 246], "document": [244, 263], "download": [189, 246], "enabl": [202, 215, 221], "encod": [175, 190, 194, 202, 208, 215, 221, 250, 251, 252], "engin": 260, "enum": 22, "environ": 246, "equal": [192, 204, 212, 225, 234], "error": 221, "estim": [197, 211, 223, 234], "evalu": [190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 221, 250, 253], "exampl": [20, 171, 172, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 226, 230, 232, 235, 244, 248], "execut": [223, 225, 249, 260], "experiment": [24, 176], "explor": 228, "export": [177, 197, 211, 249, 250, 252, 253, 261], "fake": 194, "faq": 229, "fast": 194, "featur": [227, 244, 259, 261], "file": 254, "find": [194, 235], "fine": [205, 206, 207, 229], "fix": 258, "float": 171, "floatquantizedequant": 166, "flow": [178, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "fold": [190, 191, 192, 193, 195, 197, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 224, 234], "format": 251, "fp16": 262, "fp32": [190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 258], "from": [171, 245], "front": 235, "function": [190, 196, 197, 199, 208, 210], "gener": [218, 220, 262], "get": [195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214], "glossari": [243, 244], "gpu": 253, "granular": 252, "greedi": 228, "group": 235, "guid": [171, 244, 252, 259], "guidebook": 227, "guidelin": [255, 256, 258, 259, 262], "helper": [196, 210], "histogram": 221, "host": 245, "how": [171, 228, 233, 252, 254], "hub": 260, "hyper": 216, "i": [190, 194, 202, 203, 208, 211, 215], "imag": 246, "import": [220, 221], "improv": 261, "individu": 258, "infer": [259, 260, 261], "inform": [191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214], "initi": 253, "input": [220, 237], "insert": 194, "instal": [244, 245, 246, 247, 248], "instanti": [191, 192, 193, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214], "interact": [218, 219], "kera": [14, 197, 198, 199], "layer": [190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 218, 220, 221, 225, 228, 229, 234, 235, 237, 258], "layer_output_util": [6, 19, 169], "leaf": 237, "learn": [201, 214], "learnedgrid": 171, "level": 251, "librari": 221, "limit": [20, 172, 199], "list": 235, "load": [194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220], "lora": [234, 239, 240, 241], "loss": [202, 215, 221], "low": 249, "manual": [236, 237, 247], "max": [202, 215, 221, 252], "mean": 221, "method": 194, "migrat": 171, "min": [202, 215, 221, 252], "mix": [190, 194, 208, 234, 235, 236, 237, 261], "mixed_precis": [2, 12, 174, 184], "mmp": 237, "mode": 253, "model": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 229, 237, 240, 249, 250, 253, 255, 256, 258, 262], "model_input": 254, "model_output": 254, "model_prepar": [20, 172], "model_valid": 173, "modifi": 254, "modul": [171, 175], "more": [191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214], "move": 171, "mse": [202, 215, 234, 242], "multi": 253, "next": [191, 195, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 262], "nn": 175, "nois": 252, "non": 237, "norm": [192, 212, 223, 224, 234], "normal": [190, 191, 193, 195, 200, 201, 203, 204, 208, 209, 213, 214], "note": [229, 244, 257], "notebook": [189, 190, 194, 202, 203, 208, 211, 215, 244], "obtain": 220, "old": 245, "omniqu": [176, 234, 238], "onnx": [177, 190, 191, 192, 193], "op": [194, 235], "optim": 234, "option": [229, 237], "origin": 199, "output": [218, 220, 237], "overal": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "overhead": 235, "overview": [228, 229, 231, 233, 252, 254], "packag": [245, 246], "param": 254, "paramet": [190, 194, 208, 216, 252, 253], "pareto": 235, "path": 261, "pcq": 203, "pdf": [202, 215], "peft": 178, "per": [180, 202, 203, 215, 221, 228, 229, 249, 258], "perform": [197, 200, 201, 211, 213, 214, 235, 258], "phase": 235, "pipelin": [190, 191, 192, 193, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215], "platform": 248, "post": 261, "power": 249, "prebuilt": 246, "precis": [190, 194, 208, 234, 235, 236, 237, 261, 262], "prepar": [197, 199, 221], "prerequisit": [216, 217, 221, 222, 223, 238, 242, 245, 246, 247, 250, 253], "pretrain": [196, 202, 210], "procedur": [217, 222, 224, 226, 238, 242, 262], "process": 171, "profil": 237, "prune": [205, 207, 226, 229], "ptq": 240, "pypi": 245, "pytorch": [190, 191, 192, 193, 248, 256], "qat": [197, 200, 201, 211, 213, 214, 253], "qualcomm": 260, "quant": [202, 215], "quant_analyz": [8, 21, 179, 186], "quantanalyz": [202, 215, 221], "quantiz": [161, 164, 171, 175, 180, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 208, 209, 211, 212, 213, 214, 215, 218, 221, 222, 234, 239, 240, 244, 249, 251, 252, 253, 258, 259, 260, 261, 262], "quantizationmixin": 30, "quantizationsim": 197, "quantizationsimmodel": 241, "quantize_dequant": 165, "quantizedadaptiveavgpool1d": 31, "quantizedadaptiveavgpool2d": 32, "quantizedadaptiveavgpool3d": 33, "quantizedadaptivemaxpool1d": 34, "quantizedadaptivemaxpool2d": 35, "quantizedadaptivemaxpool3d": 36, "quantizedalphadropout": 37, "quantizedavgpool1d": 38, "quantizedavgpool2d": 39, "quantizedavgpool3d": 40, "quantizedbatchnorm1d": 43, "quantizedbatchnorm2d": 44, "quantizedbatchnorm3d": 45, "quantizedbceloss": 41, "quantizedbcewithlogitsloss": 42, "quantizedbilinear": 46, "quantizedcelu": 47, "quantizedchannelshuffl": 49, "quantizedcircularpad1d": 50, "quantizedcircularpad2d": 51, "quantizedcircularpad3d": 52, "quantizedconstantpad1d": 53, "quantizedconstantpad2d": 54, "quantizedconstantpad3d": 55, "quantizedconv1d": 56, "quantizedconv2d": 57, "quantizedconv3d": 58, "quantizedconvtranspose1d": 59, "quantizedconvtranspose2d": 60, "quantizedconvtranspose3d": 61, "quantizedcosineembeddingloss": 62, "quantizedcosinesimilar": 63, "quantizedcrossentropyloss": 64, "quantizedctcloss": 48, "quantizeddropout": 65, "quantizeddropout1d": 66, "quantizeddropout2d": 67, "quantizeddropout3d": 68, "quantizedelu": 69, "quantizedembed": 70, "quantizedembeddingbag": 71, "quantizedequant": 162, "quantizedfeaturealphadropout": 72, "quantizedflatten": 73, "quantizedfold": 74, "quantizedfractionalmaxpool2d": 75, "quantizedfractionalmaxpool3d": 76, "quantizedgaussiannllloss": 81, "quantizedgelu": 77, "quantizedglu": 78, "quantizedgroupnorm": 82, "quantizedgru": 79, "quantizedgrucel": 80, "quantizedhardshrink": 83, "quantizedhardsigmoid": 84, "quantizedhardswish": 85, "quantizedhardtanh": 86, "quantizedhingeembeddingloss": 87, "quantizedhuberloss": 88, "quantizedinstancenorm1d": 89, "quantizedinstancenorm2d": 90, "quantizedinstancenorm3d": 91, "quantizedkldivloss": 92, "quantizedl1loss": 93, "quantizedlayernorm": 98, "quantizedleakyrelu": 99, "quantizedlinear": 100, "quantizedlocalresponsenorm": 101, "quantizedlogsigmoid": 102, "quantizedlogsoftmax": 103, "quantizedlppool1d": 94, "quantizedlppool2d": 95, "quantizedlstm": 96, "quantizedlstmcel": 97, "quantizedmarginrankingloss": 105, "quantizedmaxpool1d": 106, "quantizedmaxpool2d": 107, "quantizedmaxpool3d": 108, "quantizedmaxunpool1d": 109, "quantizedmaxunpool2d": 110, "quantizedmaxunpool3d": 111, "quantizedmish": 112, "quantizedmseloss": 104, "quantizedmultilabelmarginloss": 113, "quantizedmultilabelsoftmarginloss": 114, "quantizedmultimarginloss": 115, "quantizednllloss": 116, "quantizednllloss2d": 117, "quantizedpairwisedist": 119, "quantizedpixelshuffl": 120, "quantizedpixelunshuffl": 121, "quantizedpoissonnllloss": 122, "quantizedprelu": 118, "quantizedreflectionpad1d": 128, "quantizedreflectionpad2d": 129, "quantizedreflectionpad3d": 130, "quantizedrelu": 126, "quantizedrelu6": 127, "quantizedreplicationpad1d": 131, "quantizedreplicationpad2d": 132, "quantizedreplicationpad3d": 133, "quantizedrnn": 123, "quantizedrnncel": 124, "quantizedrrelu": 125, "quantizedselu": 134, "quantizedsigmoid": 136, "quantizedsilu": 135, "quantizedsmoothl1loss": 137, "quantizedsoftmarginloss": 138, "quantizedsoftmax": 139, "quantizedsoftmax2d": 140, "quantizedsoftmin": 141, "quantizedsoftplu": 142, "quantizedsoftshrink": 143, "quantizedsoftsign": 144, "quantizedtanh": 145, "quantizedtanhshrink": 146, "quantizedtensor": 159, "quantizedtensorbas": 160, "quantizedthreshold": 147, "quantizedtripletmarginloss": 148, "quantizedtripletmarginwithdistanceloss": 149, "quantizedunflatten": 150, "quantizedunfold": 151, "quantizedupsampl": 152, "quantizedupsamplingbilinear2d": 153, "quantizedupsamplingnearest2d": 154, "quantizedzeropad1d": 155, "quantizedzeropad2d": 156, "quantizedzeropad3d": 157, "quantsim": [7, 9, 22, 170, 181, 187, 203, 204, 250, 252], "quantwrapp": 171, "quick": [244, 248], "qw": [239, 240], "qwa": [239, 241], "rang": [201, 202, 214, 215, 221], "rank": 229, "ratio": [228, 229, 231], "re": [197, 211, 223, 234], "recommend": 253, "reconstruct": 226, "reduc": [235, 262], "reestim": 211, "refer": [175, 180, 229, 244], "regular": 194, "relat": 189, "releas": [244, 257], "restor": 262, "round": [191, 195, 209, 216, 229, 234], "run": [189, 190, 194, 208, 210, 221, 241, 248], "runtim": [252, 254], "scheme": 252, "score": [195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214], "scratch": 245, "sdk": 260, "select": [226, 228, 229], "sensit": [221, 235, 258], "seq_ms": [10, 182, 188], "sequenti": [234, 242], "server": [189, 231], "session": 231, "set": 237, "set_grouped_blockwise_quantization_for_weight": 7, "setup": [216, 217, 223, 225, 226, 230, 232, 237, 238, 240, 241, 242, 246, 247, 253], "show": 199, "signal": 252, "sim": [190, 191, 192, 193, 195, 200, 201, 204, 208, 209, 211, 212, 213, 214], "similar": 199, "simplifi": [190, 191, 192, 193], "simul": [190, 191, 192, 193, 194, 195, 200, 201, 203, 204, 208, 209, 211, 212, 213, 214, 244, 252, 261], "sourc": 245, "spatial": [206, 207, 229, 230], "specif": 251, "squar": 221, "start": [231, 244, 246, 248], "staticgrid": 171, "statist": [202, 211, 215, 221], "step": [191, 195, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 216, 217, 220, 221, 222, 223, 224, 235, 238, 242, 250, 253, 262], "structur": [251, 254], "subclass": 199, "summari": [194, 197, 199, 203, 211], "supergroup": 254, "support": [253, 261], "svd": [206, 207, 229, 230, 232], "target": [259, 260, 261], "techniqu": [212, 216, 229, 234], "tensorflow": 255, "terminologi": 178, "test": 248, "tf": 252, "thi": [190, 194, 202, 203, 208, 211, 215], "tool": [168, 218, 234, 261], "top": 251, "train": [191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 240, 241, 253, 261], "transform": 198, "try": 262, "tune": [205, 206, 207, 229], "type": [237, 251], "updat": 240, "us": [171, 205, 206, 207, 226, 229, 230, 232, 235], "user": [178, 244, 259], "v": 171, "v1": [167, 183, 184, 185, 186, 187, 188], "valid": [191, 192, 193, 195, 196, 204, 205, 206, 207, 209, 212, 213, 214], "variant": 246, "verifi": [245, 248, 262], "version": [245, 251, 263], "visual": [168, 218, 219, 231, 258], "visualization_tool": 168, "w16a16": 262, "weight": [221, 226, 229, 232, 240, 258], "what": [190, 194, 202, 203, 208, 211, 215], "width": 235, "winnow": [226, 233], "work": [228, 233, 252], "workflow": [216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 232, 235, 237, 238, 240, 241, 242, 250, 252, 253, 258, 259, 262], "wrapper": [202, 215], "x": 171, "your": 246}})